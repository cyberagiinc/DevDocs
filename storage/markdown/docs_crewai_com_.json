{
  "url": "https://docs.crewai.com",
  "content": "# CrewAI home page\nURL: https://docs.crewai.com/\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n**CrewAI is a cutting-edge framework for orchestrating autonomous AI agents.**\n\nCrewAI enables you to create AI teams where each agent has specific roles,\ntools, and goals, working together to accomplish complex tasks.\n\nThink of it as assembling your dream team - each member (agent) brings unique\nskills and expertise, collaborating seamlessly to achieve your objectives.\n\nJust like a company has departments (Sales, Engineering, Marketing) working\ntogether under leadership to achieve business goals, CrewAI helps you create an\norganization of AI agents with specialized roles collaborating to accomplish\ncomplex tasks.\n\n‚Ä¢ Manages AI agent teams‚Ä¢ Oversees workflows‚Ä¢ Ensures collaboration‚Ä¢ Delivers\noutcomes  \n---  \n‚Ä¢ Have specific roles (researcher, writer)‚Ä¢ Use designated tools‚Ä¢ Can delegate\ntasks‚Ä¢ Make autonomous decisions  \n‚Ä¢ Defines collaboration patterns‚Ä¢ Controls task assignments‚Ä¢ Manages\ninteractions‚Ä¢ Ensures efficient execution  \n‚Ä¢ Have clear objectives‚Ä¢ Use specific tools‚Ä¢ Feed into larger process‚Ä¢ Produce\nactionable results  \n### How It All Works Together\n\n  1. work on their specialized tasks\n  2. get completed to achieve the goal\n\nCreate specialized agents with defined roles, expertise, and goals - from\nresearchers to analysts to writers\n\nEquip agents with custom tools and APIs to interact with external services and\ndata sources\n\nAgents work together, sharing insights and coordinating tasks to achieve complex\nobjectives\n\nDefine sequential or parallel workflows, with agents automatically handling task\ndependencies\n\n  * üß† : Agents make intelligent decisions based on their roles and available tools\n  * üìù : Agents communicate and collaborate like human team members\n  * üõ†Ô∏è : Easy to add new tools, roles, and capabilities\n  * üöÄ : Built for reliability and scalability in real-world applications\n\n[Get started with CrewAI in your development\nenvironment.](https://docs.crewai.com/</installation>)[Follow our quickstart\nguide to create your first CrewAI agent and get hands-on\nexperience.](https://docs.crewai.com/</quickstart>)[Connect with other\ndevelopers, get help, and share your CrewAI\nexperiences.](https://docs.crewai.com/<https:/community.crewai.com>)\n\n  * [How It All Works Together](https://docs.crewai.com/<#how-it-all-works-together>)\n\n---\n\n# Get Started\nURL: https://docs.crewai.com/introduction\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n**CrewAI is a cutting-edge framework for orchestrating autonomous AI agents.**\n\nCrewAI enables you to create AI teams where each agent has specific roles,\ntools, and goals, working together to accomplish complex tasks.\n\nThink of it as assembling your dream team - each member (agent) brings unique\nskills and expertise, collaborating seamlessly to achieve your objectives.\n\nJust like a company has departments (Sales, Engineering, Marketing) working\ntogether under leadership to achieve business goals, CrewAI helps you create an\norganization of AI agents with specialized roles collaborating to accomplish\ncomplex tasks.\n\n‚Ä¢ Manages AI agent teams‚Ä¢ Oversees workflows‚Ä¢ Ensures collaboration‚Ä¢ Delivers\noutcomes  \n---  \n‚Ä¢ Have specific roles (researcher, writer)‚Ä¢ Use designated tools‚Ä¢ Can delegate\ntasks‚Ä¢ Make autonomous decisions  \n‚Ä¢ Defines collaboration patterns‚Ä¢ Controls task assignments‚Ä¢ Manages\ninteractions‚Ä¢ Ensures efficient execution  \n‚Ä¢ Have clear objectives‚Ä¢ Use specific tools‚Ä¢ Feed into larger process‚Ä¢ Produce\nactionable results  \n### How It All Works Together\n\n  1. work on their specialized tasks\n  2. get completed to achieve the goal\n\nCreate specialized agents with defined roles, expertise, and goals - from\nresearchers to analysts to writers\n\nEquip agents with custom tools and APIs to interact with external services and\ndata sources\n\nAgents work together, sharing insights and coordinating tasks to achieve complex\nobjectives\n\nDefine sequential or parallel workflows, with agents automatically handling task\ndependencies\n\n  * üß† : Agents make intelligent decisions based on their roles and available tools\n  * üìù : Agents communicate and collaborate like human team members\n  * üõ†Ô∏è : Easy to add new tools, roles, and capabilities\n  * üöÄ : Built for reliability and scalability in real-world applications\n\n[Get started with CrewAI in your development\nenvironment.](https://docs.crewai.com/</installation>)[Follow our quickstart\nguide to create your first CrewAI agent and get hands-on\nexperience.](https://docs.crewai.com/</quickstart>)[Connect with other\ndevelopers, get help, and share your CrewAI\nexperiences.](https://docs.crewai.com/<https:/community.crewai.com>)\n\n  * [How It All Works Together](https://docs.crewai.com/<#how-it-all-works-together>)\n\n---\n\n# Examples\nURL: https://docs.crewai.com/examples/example\n\n[Automate marketing strategy creation with\nCrewAI.](https://docs.crewai.com/examples/<https:/github.com/crewAIInc/crewAI-\nexamples/tree/main/marketing_strategy>)[Create a surprise trip itinerary with\nCrewAI.](https://docs.crewai.com/examples/<https:/github.com/crewAIInc/crewAI-\nexamples/tree/main/surprise_trip>)[Match a profile to jobpositions with\nCrewAI.](https://docs.crewai.com/examples/<https:/github.com/crewAIInc/crewAI-\nexamples/tree/main/match_profile_to_positions>)[Create a job posting with\nCrewAI.](https://docs.crewai.com/examples/<https:/github.com/crewAIInc/crewAI-\nexamples/tree/main/job-posting>)[Create a game with\nCrewAI.](https://docs.crewai.com/examples/<https:/github.com/crewAIInc/crewAI-\nexamples/tree/main/game-builder-crew>)[Find job candidates with\nCrewAI.](https://docs.crewai.com/examples/<https:/github.com/crewAIInc/crewAI-\nexamples/tree/main/recruitment>)\n\n---\n\n# Installation\nURL: https://docs.crewai.com/installation\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI requires . Here‚Äôs how to check your version:\n\nIf you need to update Python, visit\n\nCrewAI is a flexible and powerful AI framework that enables you to create and\nmanage AI agents, tools, and tasks efficiently. Let‚Äôs get you set up! üöÄ\n\nInstall CrewAI with all recommended tools using either method:\n\nBoth methods install the core package and additional tools needed for most use\ncases.\n\nUpgrade CrewAI (Existing Installations Only)\n\nIf you have an older version of CrewAI installed, you can upgrade it:\n\nIf you see a Poetry-related warning, you‚Äôll need to migrate to our new\ndependency manager:\n\nThis will update your project to use , our new faster dependency manager.\n\nSkip this step if you‚Äôre doing a fresh installation.\n\nYou should see something like:\n\nInstallation successful! You‚Äôre ready to create your first crew.\n\nWe recommend using the YAML Template scaffolding for a structured approach to\ndefining agents and tasks.\n\nRun the CrewAI CLI command:\n\nThis creates a new project with the following structure:\n\n```\n\n```\n\nYour project will contain these essential files:\n\nDefine your AI agents and their roles  \n---  \nSet up agent tasks and workflows  \nStore API keys and environment variables  \nProject entry point and execution flow  \nDirectory for custom agent tools  \nStart by editing and to define your crew‚Äôs behavior. Keep sensitive information\nlike API keys in .\n\n[Follow our quickstart guide to create your first CrewAI agent and get hands-on\nexperience.](https://docs.crewai.com/</quickstart>)[Connect with other\ndevelopers, get help, and share your CrewAI\nexperiences.](https://docs.crewai.com/<https:/community.crewai.com>)\n\n---\n\n# Quickstart\nURL: https://docs.crewai.com/quickstart\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n## Build your first CrewAI Agent\n\nLet‚Äôs create a simple crew that will help us and on the for a given topic or\nsubject.\n\nBefore we proceed, make sure you have and installed. If you haven‚Äôt installed\nthem yet, you can do so by following the .\n\nFollow the steps below to get crewing! üö£‚Äç‚ôÇÔ∏è\n\nCreate a new crew project by running the following command in your terminal.\nThis will create a new directory called with the basic structure for your crew.\n\nYou can also modify the agents as needed to fit your use case or copy and paste\nas is to your project. Any variable interpolated in your and files like will be\nreplaced by the value of the variable in the file.\n\n```\n\n  You're a seasoned researcher with a knack for uncovering the latest\n\n  developments in topic. Known for your ability to find the most relevant\n\n  information and present it in a clear and concise manner.\n\n  Create detailed reports based on topic data analysis and research findings\n\n  You're a meticulous analyst with a keen eye for detail. You're known for\n\n  your ability to turn complex data into clear and concise reports making\n\n  it easy for others to understand and act on the information you provide.\n\n```\n\n```\n\n  Conduct a thorough research about topic\n\n  Make sure you find any interesting and relevant information given\n\n  the current year is 2024.\n\n  A list with 10 bullet points of the most relevant information about topic\n\n  Review the context you got and expand each topic into a full section for a\nreport.\n\n  Make sure the report is detailed and contains any and all relevant\ninformation.\n\n  A fully fledge reports with the mains topics each with a full section of\ninformation.\n\n  Formatted as markdown without '```'\n\n```\n\n```\n\n   output_file # This is the file that will be contain the final report.\n\n   agentsselfagents # Automatically created by the @agent decorator\n\n   tasksselftasks # Automatically created by the @task decorator\n\n```\n\n[Optional] Add before and after crew functions\n\n```\n\n  f\"Before kickoff function with inputs:\n\n   inputs # You can return the inputs or modify them as needed\n\n  f\"After kickoff function with result:\n\n   result # You can return the result or modify it as needed\n\n```\n\nFeel free to pass custom inputs to your crew\n\nFor example, you can pass the input to your crew to customize the research and\nreporting.\n\n```\n\n```\n\nBefore running your crew, make sure you have the following keys set as\nenvironment variables in your file:\n\n  * An (or other LLM API key): \n\nLock and install the dependencies\n\nLock the dependencies and install them by using the CLI command but first,\nnavigate to your project directory:\n\nTo run your crew, execute the following command in the root of your project:\n\nYou should see the output in the console and the file should be created in the\nroot of your project with the final report.\n\nHere‚Äôs an example of what the report should look like:\n\n```\n\n Comprehensive Report on the Rise and Impact of AI Agents in 2024\n\n 1. Introduction to AI Agents\nIn 2024, Artificial Intelligence (AI) agents are at the forefront of innovation\nacross various industries. As intelligent systems that can perform tasks\ntypically requiring human cognition, AI agents are paving the way for\nsignificant advancements in operational efficiency, decision-making, and overall\nproductivity within sectors like Human Resources (HR) and Finance. This report\naims to detail the rise of AI agents, their frameworks, applications, and\npotential implications on the workforce.\n\n 2. Benefits of AI Agents\nAI agents bring numerous advantages that are transforming traditional work\nenvironments. Key benefits include:\n\n : AI agents can carry out repetitive tasks such as data entry, scheduling, and\npayroll processing without human intervention, greatly reducing the time and\nresources spent on these activities.\n\n : By quickly processing large datasets and performing analyses that would take\nhumans significantly longer, AI agents enhance operational efficiency. This\nallows teams to focus on strategic tasks that require higher-level thinking.\n\n : AI agents can analyze trends and patterns in data, provide insights, and even\nsuggest actions, helping stakeholders make informed decisions based on factual\ndata rather than intuition alone.\n\n 3. Popular AI Agent Frameworks\nSeveral frameworks have emerged to facilitate the development of AI agents, each\nwith its own unique features and capabilities. Some of the most popular\nframeworks include:\n\n : A framework designed to streamline the development of AI agents through\nautomation of code generation.\n\n : Focuses on natural language processing and understanding, enabling agents to\ncomprehend user intentions better.\n\n : Provides tools for developers to create conversational agents that can\nnavigate complex interactions seamlessly.\n\n : Specializes in leveraging various APIs to ensure agents can access and\nutilize external data effectively.\n\n : Aimed at collaborative environments, CrewAI strengthens teamwork by\nfacilitating communication through AI-driven insights.\n\n : Combines memory-optimized architectures with generative capabilities,\nallowing for more personalized interactions with users.\n\nThese frameworks empower developers to build versatile and intelligent agents\nthat can engage users, perform advanced analytics, and execute various tasks\naligned with organizational goals.\n\n 4. AI Agents in Human Resources\nAI agents are revolutionizing HR practices by automating and optimizing key\nfunctions:\n\n : AI agents can screen resumes, schedule interviews, and even conduct initial\nassessments, thus accelerating the hiring process while minimizing biases.\n\n : AI systems analyze employee performance data and potential, helping\norganizations identify future leaders and plan appropriate training.\n\n : Chatbots powered by AI can facilitate feedback loops between employees and\nmanagement, promoting an open culture and addressing concerns promptly.\n\nAs AI continues to evolve, HR departments leveraging these agents can realize\nsubstantial improvements in both efficiency and employee satisfaction.\n\n 5. AI Agents in Finance\nThe finance sector is seeing extensive integration of AI agents that enhance\nfinancial practices:\n\n : Automated systems manage and monitor expenses, flagging anomalies and\noffering recommendations based on spending patterns.\n\n : AI models assess credit risk and uncover potential fraud by analyzing\ntransaction data and behavioral patterns.\n\n : AI agents provide stock predictions and analytics based on historical data\nand current market conditions, empowering investors with informative insights.\n\nThe incorporation of AI agents into finance is fostering a more responsive and\nrisk-aware financial landscape.\n\n 6. Market Trends and Investments\nThe growth of AI agents has attracted significant investment, especially amidst\nthe rising popularity of chatbots and generative AI technologies. Companies and\nentrepreneurs are eager to explore the potential of these systems, recognizing\ntheir ability to streamline operations and improve customer engagement.\n\nConversely, corporations like Microsoft are taking strides to integrate AI\nagents into their product offerings, with enhancements to their Copilot 365\napplications. This strategic move emphasizes the importance of AI literacy in\nthe modern workplace and indicates the stabilizing of AI agents as essential\nbusiness tools.\n\n 7. Future Predictions and Implications\nExperts predict that AI agents will transform essential aspects of work life. As\nwe look toward the future, several anticipated changes include:\n\n Enhanced integration of AI agents across all business functions, creating\ninterconnected systems that leverage data from various departmental silos for\ncomprehensive decision-making.\n\n Continued advancement of AI technologies, resulting in smarter, more adaptable\nagents capable of learning and evolving from user interactions.\n\n Increased regulatory scrutiny to ensure ethical use, especially concerning data\nprivacy and employee surveillance as AI agents become more prevalent.\n\nTo stay competitive and harness the full potential of AI agents, organizations\nmust remain vigilant about latest developments in AI technology and consider\ncontinuous learning and adaptation in their strategic planning.\n\nThe emergence of AI agents is undeniably reshaping the workplace landscape in\n2024. With their ability to automate tasks, enhance efficiency, and improve\ndecision-making, AI agents are critical in driving operational success.\nOrganizations must embrace and adapt to AI developments to thrive in an\nincreasingly digital business environment.\n\n```\n\n### Note on Consistency in Naming\n\nThe names you use in your YAML files ( and ) should match the method names in\nyour Python code. For example, you can reference the agent for specific tasks\nfrom file. This naming consistency allows CrewAI to automatically link your\nconfigurations with your code; otherwise, your task won‚Äôt recognize the\nreference properly.\n\nNote how we use the same name for the agent in the () file as the method name in\nthe () file.\n\n```\n\n   Summarize emails into a concise and clear summary\n\n   You will create a 5 bullet point summary of the report\n\n```\n\nNote how we use the same name for the agent in the () file as the method name in\nthe () file.\n\n```\n\n   Summarize the email into a 5 bullet point summary\n\n   A 5 bullet point summary of the email\n\n```\n\nUse the annotations to properly reference the agent and task in the file.\n\nHere are examples of how to use each annotation in your CrewAI project, and when\nyou should use them:\n\nUsed to define an agent in your crew. Use this when:\n\n  * You need to create a specialized AI agent with a specific role\n  * You want the agent to be automatically collected and managed by the crew\n  * You need to reuse the same agent configuration across multiple tasks\n\n```\n\n    goal\"Conduct thorough research on given topics\"\n    backstory\"Expert researcher with years of experience in data analysis\"\n\n```\n\nUsed to define a task that can be executed by agents. Use this when:\n\n  * You need to define a specific piece of work for an agent\n  * You want tasks to be automatically sequenced and managed\n  * You need to establish dependencies between different tasks\n\n```\n\n    description\"Research the latest developments in AI technology\"\n    expected_output\"A comprehensive report on AI advancements\"\n\n```\n\nUsed to define your crew configuration. Use this when:\n\n  * You want to automatically collect all @agent and @task definitions\n  * You need to specify how tasks should be processed (sequential or hierarchical)\n  * You want to set up crew-wide configurations\n\n```\n\n    agentsselfagents # Automatically collected from @agent methods\n    tasksselftasks  # Automatically collected from @task methods\n\n```\n\nUsed to create custom tools for your agents. Use this when:\n\n  * You need to give agents specific capabilities (like web search, data analysis)\n  * You want to encapsulate external API calls or complex operations\n  * You need to share functionality across multiple agents\n\n```\n\n    max_results Maximum number of results to \n\n  # Implement your search logic here\n\n```\n\nUsed to execute logic before the crew starts. Use this when:\n\n  * You need to validate or preprocess input data\n  * You want to set up resources or configurations before execution\n  * You need to perform any initialization logic\n\n```\n\n  \"\"\"Validate and preprocess inputs before the crew starts.\"\"\"\n\n    \n\n  \n\n```\n\nUsed to process results after the crew completes. Use this when:\n\n  * You need to format or transform the final output\n  * You want to perform cleanup operations\n  * You need to save or log the results in a specific way\n\n```\n\n  \"\"\"Process and format the results after the crew completes.\"\"\"\n\n  \n\n```\n\nUsed to handle events during crew execution. Use this when:\n\n  * You need to monitor task progress\n  * You want to log intermediate results\n  * You need to implement custom progress tracking or metrics\n\n```\n\n  \"\"\"Log task completion details for monitoring.\"\"\"\n\n```\n\nUsed to implement custom caching for task results. Use this when:\n\n  * You want to avoid redundant expensive operations\n  * You need to implement custom cache storage or expiration logic\n  * You want to persist results between runs\n\n```\n\n  \"\"\"Custom cache implementation for storing task results.\"\"\"\n\n  \n\n      # Check if cache is still valid (e.g., not expired)\n\n```\n\nThese decorators are part of the CrewAI framework and help organize your crew‚Äôs\nstructure by automatically collecting agents, tasks, and handling various\nlifecycle events. They should be used within a class decorated with .\n\n### Replay Tasks from Latest Crew Kickoff\n\nCrewAI now includes a replay feature that allows you to list the tasks from the\nlast run and replay from a specific one. To use this feature, run.\n\nReplace with the ID of the task you want to replay.\n\nIf you need to reset the memory of your crew before running it again, you can do\nso by calling the reset memory feature:\n\nThis will clear the crew‚Äôs memory, allowing for a fresh start.\n\nThe easiest way to deploy your crew is through CrewAI Enterprise, where you can\ndeploy your crew in a few clicks.\n\n[Get started with CrewAI Enterprise and deploy your crew in a production\nenvironment with just a few\nclicks.](https://docs.crewai.com/<http:/app.crewai.com>)[Join our open source\ncommunity to discuss ideas, share your projects, and connect with other CrewAI\ndevelopers.](https://docs.crewai.com/<https:/community.crewai.com>)\n\n  * [Build your first CrewAI Agent](https://docs.crewai.com/<#build-your-first-crewai-agent>)\n  * [Note on Consistency in Naming](https://docs.crewai.com/<#note-on-consistency-in-naming>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/<#replay-tasks-from-latest-crew-kickoff>)\n\n---\n\n# Agents\nURL: https://docs.crewai.com/concepts/agents\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nIn the CrewAI framework, an is an autonomous unit that can:\n\n  * Make decisions based on its role and goal\n  * Use tools to accomplish objectives\n  * Communicate and collaborate with other agents\n\nThink of an agent as a specialized team member with specific skills, expertise,\nand responsibilities. For example, a agent might excel at gathering and\nanalyzing information, while a agent might be better at creating content.\n\nDefines the agent‚Äôs function and expertise within the crew.  \n---  \nThe individual objective that guides the agent‚Äôs decision-making.  \nProvides context and personality to the agent, enriching interactions.  \nLanguage model that powers the agent. Defaults to the model specified in or\n‚Äúgpt-4‚Äù.  \nCapabilities or functions available to the agent. Defaults to an empty list.  \nLanguage model for tool calling, overrides crew‚Äôs LLM if specified.  \nMaximum iterations before the agent must provide its best answer. Default is 20.  \nMaximum requests per minute to avoid rate limits.  \nMaximum time (in seconds) for task execution.  \nWhether the agent should maintain memory of interactions. Default is True.  \nEnable detailed execution logs for debugging. Default is False.  \nAllow the agent to delegate tasks to other agents. Default is False.  \nFunction called after each agent step, overrides crew callback.  \nEnable caching for tool usage. Default is True.  \nCustom system prompt template for the agent.  \nCustom prompt template for the agent.  \nCustom response template for the agent.  \nEnable code execution for the agent. Default is False.  \nMaximum number of retries when an error occurs. Default is 2.  \nKeep messages under context window size by summarizing. Default is True.  \nMode for code execution: ‚Äòsafe‚Äô (using Docker) or ‚Äòunsafe‚Äô (direct). Default is\n‚Äòsafe‚Äô.  \nConfiguration for the embedder used by the agent.  \nKnowledge sources available to the agent.  \nWhether to use system prompt (for o1 model support). Default is True.  \nThere are two ways to create agents in CrewAI: using or defining them .\n\nUsing YAML configuration provides a cleaner, more maintainable way to define\nagents. We strongly recommend using this approach in your CrewAI projects.\n\nAfter creating your CrewAI project as outlined in the section, navigate to the\nfile and modify the template to match your requirements.\n\nVariables in your YAML files (like ) will be replaced with values from your\ninputs when running the crew:\n\nHere‚Äôs an example of how to configure agents using YAML:\n\n```\n\n  You're a seasoned researcher with a knack for uncovering the latest\n\n  developments in topic. Known for your ability to find the most relevant\n\n  information and present it in a clear and concise manner.\n\n  Create detailed reports based on topic data analysis and research findings\n\n  You're a meticulous analyst with a keen eye for detail. You're known for\n\n  your ability to turn complex data into clear and concise reports making\n\n  it easy for others to understand and act on the information you provide.\n\n```\n\nTo use this YAML configuration in your code, create a crew class that inherits\nfrom :\n\nThe names you use in your YAML files () should match the method names in your\nPython code.\n\nYou can create agents directly in code by instantiating the class. Here‚Äôs a\ncomprehensive example showing all available parameters:\n\n```\n\n# Create an agent with all available parameters\n\n  goal\"Analyze and interpret complex datasets to provide actionable insights\"\n\n  backstory\"With over 10 years of experience in data science and machine\nlearning, \"\n\n       \"you excel at finding patterns in complex datasets.\"\n  llm # Default: OPENAI_MODEL_NAME or \"gpt-4\"\n\n  function_calling_llm # Optional: Separate LLM for tool calling\n\n  max_rpm # Optional: Rate limit for API calls\n\n  max_execution_time # Optional: Maximum execution time in seconds\n\n  max_retry_limit # Default: 2 retries on error\n\n  code_execution_mode # Default: \"safe\" (options: \"safe\", \"unsafe\")\n\n  toolsSerperDevTool # Optional: List of tools\n\n  knowledge_sources # Optional: List of knowledge sources\n\n  embedder_config # Optional: Custom embedder configuration\n\n  system_template # Optional: Custom system prompt template\n\n  prompt_template # Optional: Custom prompt template\n\n  response_template # Optional: Custom response template\n\n  step_callback # Optional: Callback function for monitoring\n\n```\n\nLet‚Äôs break down some key parameter combinations for common use cases:\n\n```\n\n  goal\"Find and summarize information about specific topics\"\n\n  backstory\"You are an experienced researcher with attention to detail\"\n\n  verbose # Enable logging for debugging\n\n```\n\n```\n\n  goal\"Write and debug Python code\"\n\n  backstory\"Expert Python developer with 10 years of experience\"\n\n  code_execution_mode # Uses Docker for safety\n\n  max_retry_limit # More retries for complex code tasks\n\n```\n\n```\n\n  goal\"Perform deep analysis of large datasets\"\n\n  backstory\"Specialized in big data analysis and pattern recognition\"\n\n  function_calling_llm # Cheaper model for tool calls\n\n```\n\n```\n\n  goal\"Assist customers with their inquiries\"\n\n  backstory\"Experienced in customer support with a focus on satisfaction\"\n\n```\n\n  * , , and are required and shape the agent‚Äôs behavior\n  * determines the language model used (default: OpenAI‚Äôs GPT-4)\n\n  * : Enable to maintain conversation history\n  * : Prevents token limit issues\n  * : Add domain-specific knowledge bases\n\n  * : Maximum attempts before giving best answer\n  * : Rate limiting for API calls\n\n  * : Must be True to run code\n  * : \n    * : Uses Docker (recommended for production)\n    * : Direct execution (use only in trusted environments)\n\n  * : Defines agent‚Äôs core behavior\n\nWhen using custom templates, you can use variables like , , and in your\ntemplates. These will be automatically populated during execution.\n\nAgents can be equipped with various tools to enhance their capabilities. CrewAI\nsupports tools from:\n\nHere‚Äôs how to add tools to an agent:\n\n```\n\n# Add tools to agent\n\n  goal\"Research the latest AI developments\"\n\n```\n\nAgents can maintain memory of their interactions and use context from previous\ntasks. This is particularly useful for complex workflows where information needs\nto be retained across multiple tasks.\n\n```\n\n  goal\"Analyze and remember complex data patterns\"\n\n```\n\nWhen is enabled, the agent will maintain context across multiple interactions,\nimproving its ability to handle complex, multi-step tasks.\n\n## Important Considerations and Best Practices\n\n  * When using , be cautious with user input and always validate it\n  * Use (Docker) in production environments\n  * Consider setting appropriate limits to prevent infinite loops\n\n  * Use to prevent token limit issues\n  * Set appropriate to avoid rate limiting\n  * Enable to improve performance for repetitive tasks\n\n  * Use for tasks requiring historical context\n  * Configure when using custom embedding models\n  * Use custom templates (, , ) for fine-grained control over agent behavior\n\n  * Enable when agents need to work together\n  * Use to monitor and log agent interactions\n  * Consider using different LLMs for different purposes: \n\n  * Set for older models that don‚Äôt support system messages\n  * Ensure your chosen supports the features you need (like function calling)\n\n  1. : If you‚Äôre hitting API rate limits:\n     * Use caching for repetitive operations\n  2. : If you‚Äôre exceeding context limits:\n  3. : If code execution fails:\n     * Verify Docker is installed for safe mode\n  4. : If agent responses seem inconsistent:\n\nRemember that agents are most effective when configured according to their\nspecific use case. Take time to understand your requirements and adjust these\nparameters accordingly.\n\n  * [Important Considerations and Best Practices](https://docs.crewai.com/concepts/<#important-considerations-and-best-practices>)\n\n---\n\n# Tasks\nURL: https://docs.crewai.com/concepts/tasks\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nIn the CrewAI framework, a is a specific assignment completed by an .\n\nTasks provide all necessary details for execution, such as a description, the\nagent responsible, required tools, and more, facilitating a wide range of action\ncomplexities.\n\nTasks within CrewAI can be collaborative, requiring multiple agents to work\ntogether. This is managed through the task properties and orchestrated by the\nCrew‚Äôs process, enhancing teamwork and efficiency.\n\nTasks can be executed in two ways:\n\n  * : Tasks are executed in the order they are defined\n  * : Tasks are assigned to agents based on their roles and expertise\n\nThe execution flow is defined when creating the crew:\n\nA clear, concise statement of what the task entails.  \n---  \nA detailed description of what the task‚Äôs completion looks like.  \nA name identifier for the task.  \nThe agent responsible for executing the task.  \nThe tools/resources the agent is limited to use for this task.  \nOther tasks whose outputs will be used as context for this task.  \nWhether the task should be executed asynchronously. Defaults to False.  \nFile path for storing the task output.  \nA Pydantic model to structure the JSON output.  \nA Pydantic model for task output.  \nFunction/object to be executed after task completion.  \nThere are two ways to create tasks in CrewAI: using or defining them .\n\nUsing YAML configuration provides a cleaner, more maintainable way to define\ntasks. We strongly recommend using this approach to define tasks in your CrewAI\nprojects.\n\nAfter creating your CrewAI project as outlined in the section, navigate to the\nfile and modify the template to match your specific task requirements.\n\nVariables in your YAML files (like ) will be replaced with values from your\ninputs when running the crew:\n\nHere‚Äôs an example of how to configure tasks using YAML:\n\n```\n\n  Conduct a thorough research about topic\n\n  Make sure you find any interesting and relevant information given\n\n  the current year is 2024.\n\n  A list with 10 bullet points of the most relevant information about topic\n\n  Review the context you got and expand each topic into a full section for a\nreport.\n\n  Make sure the report is detailed and contains any and all relevant\ninformation.\n\n  A fully fledge reports with the mains topics each with a full section of\ninformation.\n\n  Formatted as markdown without '```'\n\n```\n\nTo use this YAML configuration in your code, create a crew class that inherits\nfrom :\n\nThe names you use in your YAML files ( and ) should match the method names in\nyour Python code.\n\nAlternatively, you can define tasks directly in your code without using YAML\nconfiguration:\n\n```\n\n    Conduct a thorough research about AI Agents\n    Make sure you find  interesting  relevant information given\n\n    A    bullet points of the most relevant information about AI Agents\n\n    Review the context you got  expand each topic into a full section  a report\n    Make sure the report  detailed  contains    relevant information\n\n    A fully fledge reports  the mains topics each  a full section of information\n\n```\n\nDirectly specify an for assignment or let the CrewAI‚Äôs process decide based on\nroles, availability, etc.\n\nUnderstanding task outputs is crucial for building effective AI workflows.\nCrewAI provides a structured way to handle task results through the class, which\nsupports multiple output formats and can be easily passed between tasks.\n\nThe output of a task in CrewAI framework is encapsulated within the class. This\nclass provides a structured way to access results of a task, including various\nformats such as raw output, JSON, and Pydantic models.\n\nBy default, the will only include the output. A will only include the or output\nif the original object was configured with or , respectively.\n\nSummary of the task, auto-generated from the first 10 words of the description.  \n---  \nThe raw output of the task. This is the default format for the output.  \nA Pydantic model object representing the structured output of the task.  \nA dictionary representing the JSON output of the task.  \nThe agent that executed the task.  \nThe format of the task output, with options including RAW, JSON, and Pydantic.\nThe default is RAW.  \nReturns the JSON string representation of the task output if the output format\nis JSON.  \n---  \nConverts the JSON and Pydantic outputs to a dictionary.  \nReturns the string representation of the task output, prioritizing Pydantic,\nthen JSON, then raw.  \nOnce a task has been executed, its output can be accessed through the attribute\nof the object. The class provides various ways to interact with and present this\noutput.\n\n```\n\n  description'Find and summarize the latest AI news'\n\n  expected_output'A bullet list summary of the top 5 most important AI news'\n\n# Accessing the task output\n\n```\n\nTasks can depend on the output of other tasks using the attribute. For example:\n\n```\n\n  description\"Research the latest developments in AI\"\n\n  expected_output\"A list of recent AI developments\"\n\n  description\"Analyze the research findings and identify key trends\"\n\n  expected_output\"Analysis report of AI trends\"\n\n  contextresearch_task # This task will wait for research_task to complete\n\n```\n\nTask guardrails provide a way to validate and transform task outputs before they\nare passed to the next task. This feature helps ensure data quality and provides\nefeedback to agents when their output doesn‚Äôt meet specific criteria.\n\nTo add a guardrail to a task, provide a validation function through the\nparameter:\n\n```\n\n  \"\"\"Validate blog content meets requirements.\"\"\"\n\n         \"Blog content exceeds 200 words\"\n\n    # Additional validation logic here\n\n  description\"Write a blog post about AI\"\n\n  expected_output\"A blog post under 200 words\"\n\n  guardrailvalidate_blog_content # Add the guardrail function\n\n```\n\n  1.      * Must accept exactly one parameter (the task output)\n     * Should return a tuple of \n     * Type hints are recommended but optional\n  2. \n\n```\n\n```\n\n  1. \n\n```\n\n  # Step 1: Basic validation\n\n  # Step 2: Content validation\n\n    # Step 3: Format validation\n\n```\n\nWhen a guardrail returns :\n\n  1. The error is sent back to the agent\n  2. The agent attempts to fix the issue\n  3. The process repeats until: \n\n```\n\n  \"\"\"Validate and parse JSON output.\"\"\"\n\n    # Try to parse as JSON\n\n```\n\n## Getting Structured Consistent Outputs from Tasks\n\nIt‚Äôs also important to note that the output of the final task of a crew becomes\nthe final output of the actual crew itself.\n\nThe property allows you to define a Pydantic model that the task output should\nconform to. This ensures that the output is not only structured but also\nvalidated according to the Pydantic model.\n\nHere‚Äôs an example demonstrating how to use output_pydantic:\n\n```\n\n  goal\"Generate a blog title and content\"\n\n  backstory\"\"\"You are an expert content creator, skilled in crafting engaging\nand informative blog posts.\"\"\"\n\n  description\"\"\"Create a blog title and content on a given topic. Make sure the\ncontent is under 200 words.\"\"\"\n\n  expected_output\"A compelling blog title and well-written content.\"\n\n# Instantiate your crew with a sequential process\n\n# Option 1: Accessing Properties Using Dictionary-Style Indexing\n\n\"Accessing Properties - Option 1\"\n\n# Option 2: Accessing Properties Directly from the Pydantic Model\n\n\"Accessing Properties - Option 2\"\n\n# Option 3: Accessing Properties Using the to_dict() Method\n\n\"Accessing Properties - Option 3\"\n\n# Option 4: Printing the Entire Blog Object\n\n\"Accessing Properties - Option 5\"\n\n```\n\n  * A Pydantic model Blog is defined with title and content fields.\n  * The task task1 uses the output_pydantic property to specify that its output should conform to the Blog model.\n  * After executing the crew, you can access the structured output in multiple ways as shown.\n\n#### Explanation of Accessing the Output\n\n  1. Dictionary-Style Indexing: You can directly access the fields using result[‚Äúfield_name‚Äù]. This works because the CrewOutput class implements the method.\n  2. Directly from Pydantic Model: Access the attributes directly from the result.pydantic object.\n  3. Using to_dict() Method: Convert the output to a dictionary and access the fields.\n  4. Printing the Entire Object: Simply print the result object to see the structured output.\n\nThe property allows you to define the expected output in JSON format. This\nensures that the task‚Äôs output is a valid JSON structure that can be easily\nparsed and used in your application.\n\nHere‚Äôs an example demonstrating how to use :\n\n```\n\n# Define the Pydantic model for the blog\n\n  goal\"Generate a blog title and content\"\n\n  backstory\"\"\"You are an expert content creator, skilled in crafting engaging\nand informative blog posts.\"\"\"\n\n# Define the task with output_json set to the Blog model\n\n  description\"\"\"Create a blog title and content on a given topic. Make sure the\ncontent is under 200 words.\"\"\"\n\n  expected_output\"A JSON object with 'title' and 'content' fields.\"\n\n# Instantiate the crew with a sequential process\n\n# Kickoff the crew to execute the task\n\n# Option 1: Accessing Properties Using Dictionary-Style Indexing\n\n\"Accessing Properties - Option 1\"\n\n# Option 2: Printing the Entire Blog Object\n\n\"Accessing Properties - Option 2\"\n\n```\n\n  * A Pydantic model Blog is defined with title and content fields, which is used to specify the structure of the JSON output.\n  * The task task1 uses the output_json property to indicate that it expects a JSON output conforming to the Blog model.\n  * After executing the crew, you can access the structured JSON output in two ways as shown.\n\n#### Explanation of Accessing the Output\n\n  1. Accessing Properties Using Dictionary-Style Indexing: You can access the fields directly using result[‚Äúfield_name‚Äù]. This is possible because the CrewOutput class implements the method, allowing you to treat the output like a dictionary. In this option, we‚Äôre retrieving the title and content from the result.\n  2. Printing the Entire Blog Object: By printing result, you get the string representation of the CrewOutput object. Since the method is implemented to return the JSON output, this will display the entire output as a formatted string representing the Blog object.\n\nBy using output_pydantic or output_json, you ensure that your tasks produce\noutputs in a consistent and structured format, making it easier to process and\nutilize the data within your application or across multiple tasks.\n\nLeverage tools from the and for enhanced task performance and agent interaction.\n\n## Creating a Task with Tools\n\n```\n\nosenviron  \n\n goal'Find and summarize the latest AI news'\n\n backstory\"You're a researcher at a large company\n\n# to perform a semantic search for a specified query from a text's content\nacross the internet\n\n description'Find and summarize the latest AI news'\n\n expected_output'A bullet list summary of the top 5 most important AI news'\n\n```\n\nThis demonstrates how tasks with specific tools can override an agent‚Äôs default\nset for tailored task execution.\n\nIn CrewAI, the output of one task is automatically relayed into the next one,\nbut you can specifically define what tasks‚Äô output, including multiple, should\nbe used as context for another task.\n\nThis is useful when you have a task that depends on the output of another task\nthat is not performed immediately after it. This is done through the attribute\nof the task:\n\n```\n\n  description\"Research the latest developments in AI\"\n\n  expected_output\"A list of recent AI developments\"\n\n  description\"Research the latest developments in AI Ops\"\n\n  expected_output\"A list of recent AI Ops developments\"\n\n  description\"Write a full blog post about the importance of AI and its latest\nnews\"\n\n  expected_output\"Full blog post that is 4 paragraphs long\"\n\n```\n\nYou can define a task to be executed asynchronously. This means that the crew\nwill not wait for it to be completed to continue with the next task. This is\nuseful for tasks that take a long time to be completed, or that are not crucial\nfor the next tasks to be performed.\n\nYou can then use the attribute to define in a future task that it should wait\nfor the output of the asynchronous task to be completed.\n\n```\n\n  description\"List of 5 interesting ideas to explore for an article about AI.\"\n\n  expected_output\"Bullet point list of 5 ideas for an article.\"\n\n  async_execution # Will be executed asynchronously\n\n  description\"Research the history of AI and give me the 5 most important\nevents.\"\n\n  expected_output\"Bullet point list of 5 important events.\"\n\n  async_execution # Will be executed asynchronously\n\n  description\"Write an article about AI, its history, and interesting ideas.\"\n\n  expected_output\"A 4 paragraph article about AI.\"\n\n  contextlist_ideas list_important_history # Will wait for the output of the two\ntasks to be completed\n\n```\n\nThe callback function is executed after the task is completed, allowing for\nactions or notifications to be triggered based on the task‚Äôs outcome.\n\n```\n\n  # Do something after the task is completed\n\n  # Example: Send an email to the manager\n\n  description'Find and summarize the latest AI news'\n\n  expected_output'A bullet list summary of the top 5 most important AI news'\n\n```\n\n## Accessing a Specific Task Output\n\nOnce a crew finishes running, you can access the output of a specific task by\nusing the attribute of the task object:\n\n```\n\n  description'Find and summarize the latest AI news'\n\n  expected_output'A bullet list summary of the top 5 most important AI news'\n\n# Returns a TaskOutput object with the description and results of the task\n\n```\n\nSpecifying tools in a task allows for dynamic adaptation of agent capabilities,\nemphasizing CrewAI‚Äôs flexibility.\n\n## Error Handling and Validation Mechanisms\n\nWhile creating and executing tasks, certain validation mechanisms are in place\nto ensure the robustness and reliability of task attributes. These include but\nare not limited to:\n\n  * Ensuring only one output type is set per task to maintain clear output expectations.\n  * Preventing the manual assignment of the attribute to uphold the integrity of the unique identifier system.\n\nThese validations help in maintaining the consistency and reliability of task\nexecutions within the crewAI framework.\n\nTask guardrails provide a powerful way to validate, transform, or filter task\noutputs before they are passed to the next task. Guardrails are optional\nfunctions that execute before the next task starts, allowing you to ensure that\ntask outputs meet specific requirements or formats.\n\n```\n\n  \"\"\"Validate that the output is valid JSON.\"\"\"\n\n      \"Output must be valid JSON\"\n\n```\n\n  1. : Guardrails are an optional attribute at the task level, allowing you to add validation only where needed.\n  2. : The guardrail function is executed before the next task starts, ensuring valid data flow between tasks.\n  3. : Guardrails must return a tuple of : \n  4. : \n     * On success (), the result is automatically passed to the next task\n     * On failure (), the error is sent back to the agent to generate a new answer\n\n```\n\n  \"\"\"Ensure the output contains a valid email address.\"\"\"\n\n    \"Output must be a valid email address\"\n\n```\n\n```\n\n  \"\"\"Remove or validate sensitive information.\"\"\"\n\n        f\"Output contains sensitive information (\n\n```\n\n```\n\n  \"\"\"Ensure phone numbers are in a consistent format.\"\"\"\n\n    \"Output must be a 10-digit phone number\"\n\n```\n\n```\n\n```\n\n```\n\n  max_retries # Override default retry limit\n\n```\n\n## Creating Directories when Saving Files\n\nYou can now specify if a task should create directories when saving its output\nto a file. This is particularly useful for organizing outputs and ensuring that\nfile paths are correctly structured.\n\n```\n\n  description'Save the summarized AI news to a file'\n\n```\n\nTasks are the driving force behind the actions of agents in CrewAI. By properly\ndefining tasks and their outcomes, you set the stage for your AI agents to work\neffectively, either independently or as a collaborative unit. Equipping tasks\nwith appropriate tools, understanding the execution process, and following\nrobust validation practices are crucial for maximizing CrewAI‚Äôs potential,\nensuring agents are effectively prepared for their assignments and that tasks\nare executed as intended.\n\n  * [Getting Structured Consistent Outputs from Tasks](https://docs.crewai.com/concepts/<#getting-structured-consistent-outputs-from-tasks>)\n  * [Explanation of Accessing the Output](https://docs.crewai.com/concepts/<#explanation-of-accessing-the-output>)\n  * [Explanation of Accessing the Output](https://docs.crewai.com/concepts/<#explanation-of-accessing-the-output-2>)\n  * [Creating a Task with Tools](https://docs.crewai.com/concepts/<#creating-a-task-with-tools>)\n  * [Accessing a Specific Task Output](https://docs.crewai.com/concepts/<#accessing-a-specific-task-output>)\n  * [Error Handling and Validation Mechanisms](https://docs.crewai.com/concepts/<#error-handling-and-validation-mechanisms>)\n  * [Creating Directories when Saving Files](https://docs.crewai.com/concepts/<#creating-directories-when-saving-files>)\n\n---\n\n# Crews\nURL: https://docs.crewai.com/concepts/crews\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nA crew in crewAI represents a collaborative group of agents working together to\nachieve a set of tasks. Each crew defines the strategy for task execution, agent\ncollaboration, and the overall workflow.\n\nA list of tasks assigned to the crew.  \n---  \nA list of agents that are part of the crew.  \nThe process flow (e.g., sequential, hierarchical) the crew follows. Default is .  \nThe verbosity level for logging during execution. Defaults to .  \nThe language model used by the manager agent in a hierarchical process.\n**Required when using a hierarchical process.**  \nIf passed, the crew will use this LLM to do function calling for tools for all\nagents in the crew. Each agent can have its own LLM, which overrides the crew‚Äôs\nLLM for function calling.  \nOptional configuration settings for the crew, in or format.  \nMaximum requests per minute the crew adheres to during execution. Defaults to .  \nLanguage used for the crew, defaults to English.  \nPath to the language file to be used for the crew.  \nUtilized for storing execution memories (short-term, long-term, entity memory).  \nConfiguration for the memory provider to be used by the crew.  \nSpecifies whether to use a cache for storing the results of tools‚Äô execution.\nDefaults to .  \nConfiguration for the embedder to be used by the crew. Mostly used by memory for\nnow. Default is .  \nWhether the crew should return the full output with all tasks outputs or just\nthe final output. Defaults to .  \nA function that is called after each step of every agent. This can be used to\nlog the agent‚Äôs actions or to perform other operations; it won‚Äôt override the\nagent-specific .  \nA function that is called after the completion of each task. Useful for\nmonitoring or additional operations post-task execution.  \nWhether you want to share the complete crew information and execution with the\ncrewAI team to make the library better, and allow us to train models.  \nWhether you want to have a file with the complete crew output and execution. You\ncan set it using True and it will default to the folder you are currently in and\nit will be called logs.txt or passing a string with the full path and name of\nthe file.  \nsets a custom agent that will be used as a manager.  \nPath to the prompt JSON file to be used for the crew.  \nAdds planning ability to the Crew. When activated before each Crew iteration,\nall Crew data is sent to an AgentPlanner that will plan the tasks and this plan\nwill be added to each task description.  \nThe language model used by the AgentPlanner in a planning process.  \n: The attribute sets the maximum number of requests per minute the crew can\nperform to avoid rate limits and will override individual agents‚Äô settings if\nyou set it.\n\nThere are two ways to create crews in CrewAI: using or defining them .\n\nUsing YAML configuration provides a cleaner, more maintainable way to define\ncrews and is consistent with how agents and tasks are defined in CrewAI\nprojects.\n\nAfter creating your CrewAI project as outlined in the section, you can define\nyour crew in a class that inherits from and uses decorators to define agents,\ntasks, and the crew itself.\n\n#### Example Crew Class with Decorators\n\n```\n\n  # Paths to your YAML configuration files\n\n  # To see an example agent and task defined in YAML, checkout the following:\n\n    # Modify inputs before the crew starts\n\n    # Modify output after the crew finishes\n\n      agentsselfagents # Automatically collected by the @agent decorator\n      tasksselftasks  # Automatically collected by the @task decorator. \n\n```\n\nTasks will be executed in the order they are defined.\n\nThe class, along with these decorators, automates the collection of agents and\ntasks, reducing the need for manual management.\n\nCrewAI provides several decorators in the file that are used to mark methods\nwithin your crew class for special handling:\n\n  * : Marks the class as a crew base class.\n  * : Denotes a method that returns an object.\n  * : Denotes a method that returns a object.\n  * : Denotes the method that returns the object.\n  * : (Optional) Marks a method to be executed before the crew starts.\n  * : (Optional) Marks a method to be executed after the crew finishes.\n\nThese decorators help in organizing your crew‚Äôs structure and automatically\ncollecting agents and tasks without manually listing them.\n\nAlternatively, you can define the crew directly in code without using YAML\nconfiguration files.\n\n```\n\n      goal\"Analyze data trends in the market\"\n      backstory\"An experienced data analyst with a background in economics\"\n\n      goal\"Gather information on market dynamics\"\n      backstory\"A diligent researcher with a keen eye for detail\"\n\n      description\"Collect recent market data and identify trends.\"\n      expected_output\"A report summarizing key trends in the market.\"\n\n      description\"Research factors affecting market dynamics.\"\n      expected_output\"An analysis of factors influencing the market.\"\n\n```\n\n  * Agents and tasks are defined directly within the class without decorators.\n  * We manually create and manage the list of agents and tasks.\n  * This approach provides more control but can be less maintainable for larger projects.\n\nThe output of a crew in the CrewAI framework is encapsulated within the class.\nThis class provides a structured way to access results of the crew‚Äôs execution,\nincluding various formats such as raw strings, JSON, and Pydantic models. The\nincludes the results from the final task output, token usage, and individual\ntask outputs.\n\nThe raw output of the crew. This is the default format for the output.  \n---  \nA Pydantic model object representing the structured output of the crew.  \nA dictionary representing the JSON output of the crew.  \nA list of objects, each representing the output of a task in the crew.  \nA summary of token usage, providing insights into the language model‚Äôs\nperformance during execution.  \n### Crew Output Methods and Properties\n\nReturns the JSON string representation of the crew output if the output format\nis JSON.  \n---  \nConverts the JSON and Pydantic outputs to a dictionary.  \nReturns the string representation of the crew output, prioritizing Pydantic,\nthen JSON, then raw.  \nOnce a crew has been executed, its output can be accessed through the attribute\nof the object. The class provides various ways to interact with and present this\noutput.\n\n```\n\n# Accessing the crew output\n\n```\n\nCrews can utilize memory (short-term, long-term, and entity memory) to enhance\ntheir execution and learning over time. This feature allows crews to store and\nrecall execution memories, aiding in decision-making and task execution\nstrategies.\n\nCaches can be employed to store the results of tools‚Äô execution, making the\nprocess more efficient by reducing the need to re-execute identical tasks.\n\nAfter the crew execution, you can access the attribute to view the language\nmodel (LLM) usage metrics for all tasks executed by the crew. This provides\ninsights into operational efficiency and areas for improvement.\n\n```\n\n# Access the crew's usage metrics\n\n```\n\n  * : Tasks are executed one after another, allowing for a linear flow of work.\n  * : A manager agent coordinates the crew, delegating tasks and validating outcomes before proceeding. : A or is required for this process and it‚Äôs essential for validating the process flow.\n\nOnce your crew is assembled, initiate the workflow with the method. This starts\nthe execution process according to the defined process flow.\n\n```\n\n# Start the crew's task execution\n\n```\n\n### Different Ways to Kick Off a Crew\n\nOnce your crew is assembled, initiate the workflow with the appropriate kickoff\nmethod. CrewAI provides several methods for better control over the kickoff\nprocess: , , , and .\n\n  * : Starts the execution process according to the defined process flow.\n  * : Executes tasks for each agent individually.\n  * : Initiates the workflow asynchronously.\n  * : Executes tasks for each agent individually in an asynchronous manner.\n\n```\n\n# Start the crew's task execution\n\n# Example of using kickoff_for_each\n\ninputs_array  \n\n# Example of using kickoff_async\n\n# Example of using kickoff_for_each_async\n\ninputs_array  \n\n```\n\nThese methods provide flexibility in how you manage and execute tasks within\nyour crew, allowing for both synchronous and asynchronous workflows tailored to\nyour needs.\n\n### Replaying from a Specific Task\n\nYou can now replay from a specific task using our CLI command .\n\nThe replay feature in CrewAI allows you to replay from a specific task using the\ncommand-line interface (CLI). By running the command , you can specify the for\nthe replay process.\n\nKickoffs will now save the latest kickoffs returned task outputs locally for you\nto be able to replay from.\n\n### Replaying from a Specific Task Using the CLI\n\nTo use the replay feature, follow these steps:\n\n  1. Open your terminal or command prompt.\n  2. Navigate to the directory where your CrewAI project is located.\n\nTo view the latest kickoff task IDs, use:\n\nThen, to replay from a specific task, use:\n\nThese commands let you replay from your latest kickoff tasks, still retaining\ncontext from previously executed tasks.\n\n  * [Example Crew Class with Decorators](https://docs.crewai.com/concepts/<#example-crew-class-with-decorators>)\n  * [Crew Output Methods and Properties](https://docs.crewai.com/concepts/<#crew-output-methods-and-properties>)\n  * [Different Ways to Kick Off a Crew](https://docs.crewai.com/concepts/<#different-ways-to-kick-off-a-crew>)\n  * [Replaying from a Specific Task](https://docs.crewai.com/concepts/<#replaying-from-a-specific-task>)\n  * [Replaying from a Specific Task Using the CLI](https://docs.crewai.com/concepts/<#replaying-from-a-specific-task-using-the-cli>)\n\n---\n\n# Flows\nURL: https://docs.crewai.com/concepts/flows\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI Flows is a powerful feature designed to streamline the creation and\nmanagement of AI workflows. Flows allow developers to combine and coordinate\ncoding tasks and Crews efficiently, providing a robust framework for building\nsophisticated AI automations.\n\nFlows allow you to create structured, event-driven workflows. They provide a\nseamless way to connect multiple tasks, manage state, and control the flow of\nexecution in your AI applications. With Flows, you can easily design and\nimplement multi-step processes that leverage the full potential of CrewAI‚Äôs\ncapabilities.\n\n  1. : Easily chain together multiple Crews and tasks to create complex AI workflows.\n  2. : Flows make it super easy to manage and share state between different tasks in your workflow.\n  3. : Built on an event-driven model, allowing for dynamic and responsive workflows.\n  4. : Implement conditional logic, loops, and branching within your workflows.\n\nLet‚Äôs create a simple Flow where you will use OpenAI to generate a random city\nin one task and then use that city to generate a fun fact in another task.\n\n```\n\n    # Each flow state automatically gets a unique ID\n\n           \"Return the name of a random city in the world.\"\n\n    # Store the city in our state\n\n           f\"Tell me a fun fact about \n\n    # Store the fun fact in our state\n\n```\n\nIn the above example, we have created a simple Flow that generates a random city\nusing OpenAI and then generates a fun fact about that city. The Flow consists of\ntwo tasks: and . The task is the starting point of the Flow, and the task\nlistens for the output of the task.\n\nEach Flow instance automatically receives a unique identifier (UUID) in its\nstate, which helps track and manage flow executions. The state can also store\nadditional data (like the generated city and fun fact) that persists throughout\nthe flow‚Äôs execution.\n\nWhen you run the Flow, it will:\n\n  1. Generate a unique ID for the flow state\n  2. Generate a random city and store it in the state\n  3. Generate a fun fact about that city and store it in the state\n  4. Print the results to the console\n\nThe state‚Äôs unique ID and stored data can be useful for tracking flow executions\nand maintaining context between tasks.\n\nEnsure you have set up your file to store your . This key is necessary for\nauthenticating requests to the OpenAI API.\n\nThe decorator is used to mark a method as the starting point of a Flow. When a\nFlow is started, all the methods decorated with are executed in parallel. You\ncan have multiple start methods in a Flow, and they will all be executed when\nthe Flow is started.\n\nThe decorator is used to mark a method as a listener for the output of another\ntask in the Flow. The method decorated with will be executed when the specified\ntask emits an output. The method can access the output of the task it is\nlistening to as an argument.\n\nThe decorator can be used in several ways:\n\n  1. **Listening to a Method by Name** : You can pass the name of the method you want to listen to as a string. When that method completes, the listener method will be triggered.\n  2. **Listening to a Method Directly** : You can pass the method itself. When that method completes, the listener method will be triggered.\n\nAccessing and handling the output of a Flow is essential for integrating your AI\nworkflows into larger applications or systems. CrewAI Flows provide\nstraightforward mechanisms to retrieve the final output, access intermediate\nresults, and manage the overall state of your Flow.\n\nWhen you run a Flow, the final output is determined by the last method that\ncompletes. The method returns the output of this final method.\n\nHere‚Äôs how you can access the final output:\n\n```\n\n```\n\nIn this example, the is the last method to complete, so its output will be the\nfinal output of the Flow. The method will return the final output, which is then\nprinted to the console.\n\nIn addition to retrieving the final output, you can also access and update the\nstate within your Flow. The state can be used to store and share data between\ndifferent methods in the Flow. After the Flow has run, you can access the state\nto retrieve any information that was added or updated during the execution.\n\nHere‚Äôs an example of how to update and access the state:\n\n```\n\n    selfstatemessage  \" - updated by second_method\"\n\n```\n\nIn this example, the state is updated by both and . After the Flow has run, you\ncan access the final state to see the updates made by these methods.\n\nBy ensuring that the final method‚Äôs output is returned and providing access to\nthe state, CrewAI Flows make it easy to integrate the results of your AI\nworkflows into larger applications or systems, while also maintaining and\naccessing the state throughout the Flow‚Äôs execution.\n\nManaging state effectively is crucial for building reliable and maintainable AI\nworkflows. CrewAI Flows provides robust mechanisms for both unstructured and\nstructured state management, allowing developers to choose the approach that\nbest fits their application‚Äôs needs.\n\nIn unstructured state management, all state is stored in the attribute of the\nclass. This approach offers flexibility, enabling developers to add or modify\nstate attributes on the fly without defining a strict schema. Even with\nunstructured states, CrewAI Flows automatically generates and maintains a unique\nidentifier (UUID) for each state instance.\n\n```\n\n    # The state automatically includes an 'id' field\n\n```\n\nThe field is automatically generated and preserved throughout the flow‚Äôs\nexecution. You don‚Äôt need to manage or set it manually, and it will be\nmaintained even when updating the state with new data.\n\n  * You can dynamically add attributes to without predefined constraints.\n  * Ideal for straightforward workflows where state structure is minimal or varies significantly.\n\nStructured state management leverages predefined schemas to ensure consistency\nand type safety across the workflow. By using models like Pydantic‚Äôs ,\ndevelopers can define the exact shape of the state, enabling better validation\nand auto-completion in development environments.\n\nEach state in CrewAI Flows automatically receives a unique identifier (UUID) to\nhelp track and manage state instances. This ID is automatically generated and\nmanaged by the Flow system.\n\n```\n\n  # Note: 'id' field is automatically added to all states\n\n    # Access the auto-generated ID if needed\n\n```\n\n  * clearly outlines the state structure, enhancing code readability and maintainability.\n  * Leveraging Pydantic ensures that state attributes adhere to the specified types, reducing runtime errors.\n  * IDEs can provide better auto-completion and error checking based on the defined state model.\n\n### Choosing Between Unstructured and Structured State Management\n\n  * **Use Unstructured State Management when:**\n    * The workflow‚Äôs state is simple or highly dynamic.\n    * Flexibility is prioritized over strict state definitions.\n    * Rapid prototyping is required without the overhead of defining schemas.\n  * **Use Structured State Management when:**\n    * The workflow requires a well-defined and consistent state structure.\n    * Type safety and validation are important for your application‚Äôs reliability.\n    * You want to leverage IDE features like auto-completion and type checking for better developer experience.\n\nBy providing both unstructured and structured state management options, CrewAI\nFlows empowers developers to build AI workflows that are both flexible and\nrobust, catering to a wide range of application requirements.\n\nThe function in Flows allows you to listen to multiple methods and trigger the\nlistener method when any of the specified methods emit an output.\n\n```\n\n     \"Hello from the start method\"\n\n     \"Hello from the second method\"\n\n```\n\nWhen you run this Flow, the method will be triggered by the output of either the\nor the . The function is used to listen to multiple methods and trigger the\nlistener method when any of the specified methods emit an output.\n\nThe function in Flows allows you to listen to multiple methods and trigger the\nlistener method only when all the specified methods emit an output.\n\n```\n\n    selfstate  \"Hello from the start method\"\n\n    selfstate  \"What do computers eat? Microchips.\"\n\n```\n\nWhen you run this Flow, the method will be triggered only when both the and the\nemit an output. The function is used to listen to multiple methods and trigger\nthe listener method only when all the specified methods emit an output.\n\nThe decorator in Flows allows you to define conditional routing logic based on\nthe output of a method. You can specify different routes based on the output of\nthe method, allowing you to control the flow of execution dynamically.\n\n```\n\n```\n\nIn the above example, the generates a random boolean value and sets it in the\nstate. The uses the decorator to define conditional routing logic based on the\nvalue of the boolean. If the boolean is , the method returns , and if it is ,\nthe method returns . The and listen to the output of the and execute based on\nthe returned value.\n\nWhen you run this Flow, the output will change based on the random boolean value\ngenerated by the .\n\nCreating a flow with multiple crews in CrewAI is straightforward.\n\nYou can generate a new CrewAI project that includes all the scaffolding needed\nto create a flow with multiple crews by running the following command:\n\nThis command will generate a new CrewAI project with the necessary folder\nstructure. The generated project includes a prebuilt crew called that is already\nworking. You can use this crew as a template by copying, pasting, and editing it\nto create other crews.\n\nAfter running the command, you will see a folder structure similar to the\nfollowing:\n\nRoot directory for the flow.  \n---  \nContains directories for specific crews.  \nDirectory for the ‚Äúpoem_crew‚Äù with its configurations and scripts.  \nConfiguration files directory for the ‚Äúpoem_crew‚Äù.  \nYAML file defining the agents for ‚Äúpoem_crew‚Äù.  \nYAML file defining the tasks for ‚Äúpoem_crew‚Äù.  \nDirectory for additional tools used in the flow.  \nMain script for running the flow.  \nConfiguration file for project dependencies and settings.  \nSpecifies files and directories to ignore in version control.  \nIn the folder, you can define multiple crews. Each crew will have its own folder\ncontaining configuration files and the crew definition file. For example, the\nfolder contains:\n\n  * : Defines the agents for the crew.\n  * : Defines the tasks for the crew.\n  * : Contains the crew definition, including agents, tasks, and the crew itself.\n\nYou can copy, paste, and edit the to create other crews.\n\nThe file is where you create your flow and connect the crews together. You can\ndefine your flow by using the class and the decorators and to specify the flow\nof execution.\n\nHere‚Äôs an example of how you can connect the in the file:\n\n```\n\n```\n\nIn this example, the class defines a flow that generates a sentence count, uses\nthe to generate a poem, and then saves the poem to a file. The flow is kicked\noff by calling the method.\n\n(Optional) Before running the flow, you can install the dependencies by running:\n\nOnce all of the dependencies are installed, you need to activate the virtual\nenvironment by running:\n\nAfter activating the virtual environment, you can run the flow by executing one\nof the following commands:\n\nThe flow will execute, and you should see the output in the console.\n\nVisualizing your AI workflows can provide valuable insights into the structure\nand execution paths of your flows. CrewAI offers a powerful visualization tool\nthat allows you to generate interactive plots of your flows, making it easier to\nunderstand and optimize your AI workflows.\n\nPlots in CrewAI are graphical representations of your AI workflows. They display\nthe various tasks, their connections, and the flow of data between them. This\nvisualization helps in understanding the sequence of operations, identifying\nbottlenecks, and ensuring that the workflow logic aligns with your expectations.\n\n### How to Generate a Plot\n\nCrewAI provides two convenient methods to generate plots of your flows:\n\nIf you are working directly with a flow instance, you can generate a plot by\ncalling the method on your flow object. This method will create an HTML file\ncontaining the interactive plot of your flow.\n\n```\n\n# Assuming you have a flow instance\n\n```\n\nThis will generate a file named in your current directory. You can open this\nfile in a web browser to view the interactive plot.\n\n#### Option 2: Using the Command Line\n\nIf you are working within a structured CrewAI project, you can generate a plot\nusing the command line. This is particularly useful for larger projects where\nyou want to visualize the entire flow setup.\n\nThis command will generate an HTML file with the plot of your flow, similar to\nthe method. The file will be saved in your project directory, and you can open\nit in a web browser to explore the flow.\n\nThe generated plot will display nodes representing the tasks in your flow, with\ndirected edges indicating the flow of execution. The plot is interactive,\nallowing you to zoom in and out, and hover over nodes to see additional details.\n\nBy visualizing your flows, you can gain a clearer understanding of the\nworkflow‚Äôs structure, making it easier to debug, optimize, and communicate your\nAI processes to others.\n\nPlotting your flows is a powerful feature of CrewAI that enhances your ability\nto design and manage complex AI workflows. Whether you choose to use the method\nor the command line, generating plots will provide you with a visual\nrepresentation of your workflows, aiding in both development and presentation.\n\nIf you‚Äôre interested in exploring additional examples of flows, we have a\nvariety of recommendations in our examples repository. Here are four specific\nflow examples, each showcasing unique use cases to help you match your current\nproblem type to a specific example:\n\n  1. : This example demonstrates an infinite loop where a background job continually runs to automate email responses. It‚Äôs a great use case for tasks that need to be performed repeatedly without manual intervention. \n  2. : This flow showcases adding human-in-the-loop feedback and handling different conditional branches using the router. It‚Äôs an excellent example of how to incorporate dynamic decision-making and human oversight into your workflows. \n  3. : This example excels at chaining multiple crews together, where the output of one crew is used by another. Specifically, one crew outlines an entire book, and another crew generates chapters based on the outline. Eventually, everything is connected to produce a complete book. This flow is perfect for complex, multi-step processes that require coordination between different tasks. \n  4. : This flow demonstrates how to broadcast one event to trigger multiple follow-up actions. For instance, after a meeting is completed, the flow can update a Trello board, send a Slack message, and save the results. It‚Äôs a great example of handling multiple outcomes from a single event, making it ideal for comprehensive task management and notification systems. \n\nBy exploring these examples, you can gain insights into how to leverage CrewAI\nFlows for various use cases, from automating repetitive tasks to managing\ncomplex, multi-step processes with dynamic decision-making and human feedback.\n\nAlso, check out our YouTube video on how to use flows in CrewAI below!\n\n  * [Choosing Between Unstructured and Structured State Management](https://docs.crewai.com/concepts/<#choosing-between-unstructured-and-structured-state-management>)\n  * [How to Generate a Plot](https://docs.crewai.com/concepts/<#how-to-generate-a-plot>)\n  * [Option 1: Using the plot() Method](https://docs.crewai.com/concepts/<#option-1-using-the-plot-method>)\n  * [Option 2: Using the Command Line](https://docs.crewai.com/concepts/<#option-2-using-the-command-line>)\n\n---\n\n# Knowledge\nURL: https://docs.crewai.com/concepts/knowledge\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nKnowledge in CrewAI is a powerful system that allows AI agents to access and\nutilize external information sources during their tasks. Think of it as giving\nyour agents a reference library they can consult while working.\n\nKey benefits of using Knowledge:\n\n  * Enhance agents with domain-specific information\n  * Support decisions with real-world data\n  * Ground responses in factual information\n\nCrewAI supports various types of knowledge sources out of the box:\n\nList of knowledge sources that provide content to be stored and queried. Can\ninclude PDF, CSV, Excel, JSON, text files, or string content.  \n---  \nName of the collection where the knowledge will be stored. Used to identify\ndifferent sets of knowledge. Defaults to ‚Äúknowledge‚Äù if not provided.  \nCustom storage configuration for managing how the knowledge is stored and\nretrieved. If not provided, a default storage will be created.  \nFor file-Based Knowledge Sources, make sure to place your files in a directory\nat the root of your project. Also, use relative paths from the directory when\ncreating the source.\n\nHere‚Äôs an example using string-based knowledge:\n\n```\n\n# Create a knowledge source\n\ncontent  \"Users name is John. He is 30 years old and lives in San Francisco.\"\n\n# Create an LLM with a temperature of 0 to ensure deterministic outputs\n\n# Create an agent with the knowledge store\n\n  goal\"You know everything about the user.\"\n\n  backstory\"\"\"You are a master at understanding people and their preferences.\"\"\"\n\n  description\"Answer the following questions about the user: {question}\"\n\n  expected_output\"An answer to the question.\"\n\n  knowledge_sourcesstring_source # Enable knowledge by adding the sources here.\nYou can also add more sources to the sources list.\n\nresult  crewkickoffinputs \"What city does John live in and how old is he?\"\n\n```\n\nHere‚Äôs another example with the . The CrewDoclingSource is actually quite\nversatile and can handle multiple file formats including TXT, PDF, DOCX, HTML,\nand more.\n\n```\n\n# Create a knowledge source\n\n# Create an LLM with a temperature of 0 to ensure deterministic outputs\n\n# Create an agent with the knowledge store\n\n  goal\"You know everything about the papers.\"\n\n  backstory\"\"\"You are a master at understanding papers and their content.\"\"\"\n\n  description\"Answer the following questions about the papers: {question}\"\n\n  expected_output\"An answer to the question.\"\n\n   # Enable knowledge by adding the sources here. You can also add more sources\nto the sources list.\n\n     \"What is the reward hacking paper about? Be sure to provide sources.\"\n\n```\n\nHere are examples of how to use different types of knowledge sources:\n\n```\n\n# Create a text file knowledge source\n\n# Create crew with text file source on agents or crew level\n\n```\n\n```\n\n# Create a PDF knowledge source\n\n# Create crew with PDF knowledge source on agents or crew level\n\n```\n\n```\n\n# Create a CSV knowledge source\n\n# Create crew with CSV knowledge source or on agent level\n\n```\n\n```\n\n# Create an Excel knowledge source\n\n# Create crew with Excel knowledge source on agents or crew level\n\n```\n\n```\n\n# Create a JSON knowledge source\n\n# Create crew with JSON knowledge source on agents or crew level\n\n```\n\nKnowledge sources automatically chunk content for better processing. You can\nconfigure chunking behavior in your knowledge sources:\n\n```\n\n  chunk_size   # Maximum size of each chunk (default: 4000)\n\n  chunk_overlap   # Overlap between chunks (default: 200)\n\n```\n\nThe chunking configuration helps in:\n\n  * Breaking down large documents into manageable pieces\n  * Maintaining context through chunk overlap\n\nYou can also configure the embedder for the knowledge store. This is useful if\nyou want to use a different embedder for the knowledge store than the one used\nfor the agents. The parameter supports various embedding model providers that\ninclude:\n\n  * : Google‚Äôs text embedding models\n  * : Local embeddings with Ollama\n  * : Google Cloud VertexAI embeddings\n\nHere‚Äôs an example of how to configure the embedder for the knowledge store using\nGoogle‚Äôs model:\n\n```\n\n# Get the GEMINI API key\n\n# Create a knowledge source\n\ncontent  \"Users name is John. He is 30 years old and lives in San Francisco.\"\n\n# Create an LLM with a temperature of 0 to ensure deterministic outputs\n\n# Create an agent with the knowledge store\n\n  goal\"You know everything about the user.\"\n\n  backstory\"\"\"You are a master at understanding people and their preferences.\"\"\"\n\n  description\"Answer the following questions about the user: {question}\"\n\n  expected_output\"An answer to the question.\"\n\nresult  crewkickoffinputs \"What city does John live in and how old is he?\"\n\n```\n\nIf you need to clear the knowledge stored in CrewAI, you can use the command\nwith the option.\n\nThis is useful when you‚Äôve updated your knowledge sources and want to ensure\nthat the agents are using the most recent information.\n\nWhile knowledge can be provided at the crew level using , individual agents can\nalso have their own knowledge sources using the parameter:\n\n```\n\n# Create agent-specific knowledge about a product\n\n# Create a support agent with product knowledge\n\n  goal\"Provide accurate product information and support.\"\n\n  backstory\"You are an expert on our laptop products and specifications.\"\n\n# Create a task that requires product knowledge\n\n  description\"Answer this customer question: {question}\"\n\n# Create and run the crew\n\n# Get answer about the laptop's specifications\n\n  inputs \"What is the storage capacity of the XPS 13?\"\n\n```\n\n  * Give agents specialized information for their roles\n  * Maintain separation of concerns between agents\n  * Combine with crew-level knowledge for layered information access\n\nCrewAI allows you to create custom knowledge sources for any type of data by\nextending the class. Let‚Äôs create a practical example that fetches and processes\nspace news articles.\n\n#### Space News Knowledge Source Example\n\n```\n\n  \"\"\"Knowledge source that fetches data from Space News API.\"\"\"\n\n  limit   Fielddefault description\"Number of articles to fetch\"\n\n    \"\"\"Fetch and format space news articles.\"\"\"\n\n       ValueErrorf\"Failed to fetch space news: \n\n    \"\"\"Format articles into readable text.\"\"\"\n\n    \"\"\"Process and store the articles.\"\"\"\n\n  goal\"Answer questions about space news accurately and comprehensively\"\n\n  backstory\"You are a space industry analyst  expertise  space exploration\n\n  satellite technology  space industry trends You excel at answering questions\n\n  about space news  providing detailed accurate information\"\n\n# Create task that handles user questions\n\n  description\"Answer this question about space news: {user_question}\"\n\n  expected_output\"A detailed answer based on the recent space news articles\"\n\n# Create and run the crew\n\n  inputs \"What are the latest developments in space exploration?\"\n\n```\n\n  1.      * Configurable API endpoint and article limit\n     * Implements three key methods: \n       * : Fetches articles from the API\n       * : Structures the articles into readable text\n       * : Processes and stores the content\n  2.      * Specialized role as a Space News Analyst\n     * Uses the knowledge source to access space news\n  3.      * Takes a user question as input through \n     * Designed to provide detailed answers based on the knowledge source\n  4.      * Manages the workflow between agent and task\n     * Handles input/output through the kickoff method\n\nThis example demonstrates how to:\n\n  * Create a custom knowledge source that fetches real-time data\n  * Process and format external data for AI consumption\n  * Use the knowledge source to answer specific user questions\n  * Integrate everything seamlessly with CrewAI‚Äôs agent system\n\n#### About the Spaceflight News API\n\nThe example uses the , which:\n\n  * Provides free access to space-related news articles\n  * Returns structured data about space news\n\nYou can customize the API query by modifying the endpoint URL:\n\n```\n\n  limit # Increase the number of articles\n\n  api_endpoint # Search for NASA news\n\n```\n\n  * Keep chunk sizes appropriate for your content type\n  * Consider content overlap for context preservation\n  * Organize related information into separate knowledge sources\n\n  * Adjust chunk sizes based on content complexity\n  * Consider using local embedding providers for faster processing\n\n  * [Space News Knowledge Source Example](https://docs.crewai.com/concepts/<#space-news-knowledge-source-example>)\n  * [About the Spaceflight News API](https://docs.crewai.com/concepts/<#about-the-spaceflight-news-api>)\n\n---\n\n# LLMs\nURL: https://docs.crewai.com/concepts/llms\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI integrates with multiple LLM providers through LiteLLM, giving you the\nflexibility to choose the right model for your specific use case. This guide\nwill help you understand how to configure and use different LLM providers in\nyour CrewAI projects.\n\nLarge Language Models (LLMs) are the core intelligence behind CrewAI agents.\nThey enable agents to understand context, make decisions, and generate human-\nlike responses. Here‚Äôs what you need to know:\n\nLarge Language Models are AI systems trained on vast amounts of text data. They\npower the intelligence of your CrewAI agents, enabling them to understand and\ngenerate human-like text.\n\nThe context window determines how much text an LLM can process at once. Larger\nwindows (e.g., 128K tokens) allow for more context but may be more expensive and\nslower.\n\nTemperature (0.0 to 1.0) controls response randomness. Lower values (e.g., 0.2)\nproduce more focused, deterministic outputs, while higher values (e.g., 0.8)\nincrease creativity and variability.\n\nEach LLM provider (e.g., OpenAI, Anthropic, Google) offers different models with\nvarying capabilities, pricing, and features. Choose based on your needs for\naccuracy, speed, and cost.\n\n## Available Models and Their Capabilities\n\nHere‚Äôs a detailed breakdown of supported models and their capabilities, you can\ncompare performance at and :  \n1 token ‚âà 4 characters in English. For example, 8,192 tokens ‚âà 32,768 characters\nor about 6,000 words.\n\nThere are three ways to configure LLMs in CrewAI. Choose the method that best\nfits your workflow:\n\nThe simplest way to get started. Set these variables in your environment:\n\n```\n\n# Required: Your API key for authentication\n\n# Optional: Default model selection\n\ngpt-4o-mini # Default if not set\n\n# Optional: Organization ID (if applicable)\n\n```\n\nNever commit API keys to version control. Use environment files (.env) or your\nsystem‚Äôs secret management.\n\nLearn how to get the most out of your LLM configuration:\n\nCrewAI includes smart context management features:\n\n```\n\n# 1. Token counting and tracking\n\n# 2. Content summarization when needed\n\n# 3. Task splitting for large contexts\n\n```\n\nBest practices for context management:\n\n  1. Choose models with appropriate context windows\n  2. Pre-process long inputs when possible\n  3. Use chunking for large documents\n  4. Monitor token usage to optimize costs\n\nChoose the right context window for your task:\n\n  * Small tasks (up to 4K tokens): Standard models\n  * Medium tasks (between 4K-32K): Enhanced models\n  * Large tasks (over 32K): Large context models\n\n```\n\n# Configure model with appropriate settings\n\n  temperature  # Adjust based on task\n\n  max_tokens  # Set based on output needs\n\n  timeout    # Longer timeout for complex tasks\n\n```\n\n  * Lower temperature (0.1 to 0.3) for factual responses\n  * Higher temperature (0.7 to 0.9) for creative tasks\n\nRemember to regularly monitor your token usage and adjust your configuration as\nneeded to optimize costs and performance.\n\n```\n\n# Option 1. Gemini accessed with an API key.\n\n# Option 2. Vertex AI IAM credentials for Gemini, Anthropic, and anything in the\nModel Garden.\n\n```\n\n  1. Run a model: \n\n  * Good balance of speed and quality\n  * Support for long context windows\n\nMost authentication issues can be resolved by checking API key format and\nenvironment variable names.\n\nIf you need assistance, these resources are available:\n\n[Comprehensive documentation for LiteLLM integration and troubleshooting common\nissues.](https://docs.crewai.com/concepts/<https:/docs.litellm.ai/docs/>)[Report\nbugs, request features, or browse existing issues for\nsolutions.](https://docs.crewai.com/concepts/<https:/github.com/joaomdmoura/crewAI/issues>)[Connect\nwith other CrewAI users, share experiences, and get help from the\ncommunity.](https://docs.crewai.com/concepts/<https:/community.crewai.com>)\n\nBest Practices for API Key Security:\n\n  * Use environment variables or secure vaults\n  * Never commit keys to version control\n  * Use separate keys for development and production\n  * Monitor key usage for unusual patterns\n\n  * [Available Models and Their Capabilities](https://docs.crewai.com/concepts/<#available-models-and-their-capabilities>)\n\n---\n\n# Processes\nURL: https://docs.crewai.com/concepts/processes\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nProcesses orchestrate the execution of tasks by agents, akin to project\nmanagement in human teams. These processes ensure tasks are distributed and\nexecuted efficiently, in alignment with a predefined strategy.\n\n  * : Executes tasks sequentially, ensuring tasks are completed in an orderly progression.\n  * : Organizes tasks in a managerial hierarchy, where tasks are delegated and executed based on a structured chain of command. A manager language model () or a custom manager agent () must be specified in the crew to enable the hierarchical process, facilitating the creation and management of tasks by the manager.\n  * : Aiming for collaborative decision-making among agents on task execution, this process type introduces a democratic approach to task management within CrewAI. It is planned for future development and is not currently implemented in the codebase.\n\n## The Role of Processes in Teamwork\n\nProcesses enable individual agents to operate as a cohesive unit, streamlining\ntheir efforts to achieve common objectives with efficiency and coherence.\n\n## Assigning Processes to a Crew\n\nTo assign a process to a crew, specify the process type upon crew creation to\nset the execution strategy. For a hierarchical process, ensure to define or for\nthe manager agent.\n\n```\n\n# Example: Creating a crew with a sequential process\n\n# Example: Creating a crew with a hierarchical process\n\n# Ensure to provide a manager_llm or manager_agent\n\n```\n\nEnsure and are defined prior to creating a object, and for the hierarchical\nprocess, either or is also required.\n\nThis method mirrors dynamic team workflows, progressing through tasks in a\nthoughtful and systematic manner. Task execution follows the predefined order in\nthe task list, with the output of one task serving as context for the next.\n\nTo customize task context, utilize the parameter in the class to specify outputs\nthat should be used as context for subsequent tasks.\n\nEmulates a corporate hierarchy, CrewAI allows specifying a custom manager agent\nor automatically creates one, requiring the specification of a manager language\nmodel (). This agent oversees task execution, including planning, delegation,\nand validation. Tasks are not pre-assigned; the manager allocates tasks to\nagents based on their capabilities, reviews outputs, and assesses task\ncompletion.\n\nThe class is implemented as an enumeration (), ensuring type safety and\nrestricting process values to the defined types (, ). The consensual process is\nplanned for future inclusion, emphasizing our commitment to continuous\ndevelopment and innovation.\n\nThe structured collaboration facilitated by processes within CrewAI is crucial\nfor enabling systematic teamwork among agents. This documentation has been\nupdated to reflect the latest features, enhancements, and the planned\nintegration of the Consensual Process, ensuring users have access to the most\ncurrent and comprehensive information.\n\n  * [The Role of Processes in Teamwork](https://docs.crewai.com/concepts/<#the-role-of-processes-in-teamwork>)\n  * [Assigning Processes to a Crew](https://docs.crewai.com/concepts/<#assigning-processes-to-a-crew>)\n\n---\n\n# Collaboration\nURL: https://docs.crewai.com/concepts/collaboration\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCollaboration in CrewAI is fundamental, enabling agents to combine their skills,\nshare information, and assist each other in task execution, embodying a truly\ncooperative ecosystem.\n\n  * : Ensures all agents are well-informed and can contribute effectively by sharing data and findings.\n  * : Allows agents to seek help from peers with the required expertise for specific tasks.\n  * : Optimizes task execution through the efficient distribution and sharing of resources among agents.\n\n## Enhanced Attributes for Improved Collaboration\n\nThe class has been enriched with several attributes to support advanced\nfunctionalities:\n\nManages language models for executing tasks and tools. is required for\nhierarchical processes, while is optional with a default value for streamlined\ninteractions.  \n---  \nSpecifies a custom agent as the manager, replacing the default CrewAI manager.  \nDefines execution logic (e.g., sequential, hierarchical) for task distribution.  \nProvides detailed logging for monitoring and debugging. Accepts integer and\nboolean values to control verbosity level.  \nLimits requests per minute to optimize resource usage. Setting guidelines depend\non task complexity and load.  \nSupports prompt customization for global usability.  \nControls output granularity, distinguishing between full and final outputs.  \nEnables step-wise and task-level execution monitoring and telemetry for\nperformance analytics.  \nAllows sharing crew data with CrewAI for model improvement. Privacy implications\nand benefits should be considered.  \nLogs all LLM usage metrics during task execution for performance insights.  \nEnables memory for storing execution history, aiding in agent learning and task\nefficiency.  \nConfigures the embedder for language understanding and generation, with support\nfor provider customization.  \nSpecifies whether to cache tool execution results, enhancing performance.  \nDefines the file path for logging crew execution output.  \nEnables action planning before task execution. Set to activate.  \nProvides CLI for listing tasks from the last run and replaying from specific\ntasks, aiding in task management and troubleshooting.  \nDelegation enhances functionality by allowing agents to intelligently assign\ntasks or seek help, thereby amplifying the crew‚Äôs overall capability.\n\nSetting up a crew involves defining the roles and capabilities of each agent.\nCrewAI seamlessly manages their interactions, ensuring efficient collaboration\nand delegation, with enhanced customization and monitoring features to adapt to\nvarious operational needs.\n\nConsider a crew with a researcher agent tasked with data gathering and a writer\nagent responsible for compiling reports. The integration of advanced language\nmodel management and process flow attributes allows for more sophisticated\ninteractions, such as the writer delegating complex research tasks to the\nresearcher or querying specific information, thereby facilitating a seamless\nworkflow.\n\nThe integration of advanced attributes and functionalities into the CrewAI\nframework significantly enriches the agent collaboration ecosystem. These\nenhancements not only simplify interactions but also offer unprecedented\nflexibility and control, paving the way for sophisticated AI-driven solutions\ncapable of tackling complex tasks through intelligent collaboration and\ndelegation.\n\n  * [Enhanced Attributes for Improved Collaboration](https://docs.crewai.com/concepts/<#enhanced-attributes-for-improved-collaboration>)\n\n---\n\n# Training\nURL: https://docs.crewai.com/concepts/training\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThe training feature in CrewAI allows you to train your AI agents using the\ncommand-line interface (CLI). By running the command , you can specify the\nnumber of iterations for the training process.\n\nDuring training, CrewAI utilizes techniques to optimize the performance of your\nagents along with human feedback. This helps the agents improve their\nunderstanding, decision-making, and problem-solving abilities.\n\n### Training Your Crew Using the CLI\n\nTo use the training feature, follow these steps:\n\n  1. Open your terminal or command prompt.\n  2. Navigate to the directory where your CrewAI project is located.\n\nReplace with the desired number of training iterations and with the appropriate\nfilename ending with .\n\nTo train your crew programmatically, use the following steps:\n\n  1. Define the number of iterations for training.\n  2. Specify the input parameters for the training process.\n  3. Execute the training command within a try-except block to handle potential errors.\n\n```\n\n   Exceptionf\"An error occurred while training the crew:\n\n```\n\n  * Ensure that the number of iterations () is a positive integer. The code will raise a if this condition is not met.\n  * Ensure that the filename ends with . The code will raise a if this condition is not met.\n  * The code handles subprocess errors and unexpected exceptions, providing error messages to the user.\n\nIt is important to note that the training process may take some time, depending\non the complexity of your agents and will also require your feedback on each\niteration.\n\nOnce the training is complete, your agents will be equipped with enhanced\ncapabilities and knowledge, ready to tackle complex tasks and provide more\nconsistent and valuable insights.\n\nRemember to regularly update and retrain your agents to ensure they stay up-to-\ndate with the latest information and advancements in the field.\n\nHappy training with CrewAI! üöÄ\n\n  * [Training Your Crew Using the CLI](https://docs.crewai.com/concepts/<#training-your-crew-using-the-cli>)\n\n---\n\n# Memory\nURL: https://docs.crewai.com/concepts/memory\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n## Introduction to Memory Systems in CrewAI\n\nThe crewAI framework introduces a sophisticated memory system designed to\nsignificantly enhance the capabilities of AI agents. This system comprises , , ,\nand , each serving a unique purpose in aiding agents to remember, reason, and\nlearn from past interactions.\n\nTemporarily stores recent interactions and outcomes using , enabling agents to\nrecall and utilize information relevant to their current context during the\ncurrent executions.  \n---  \nPreserves valuable insights and learnings from past executions, allowing agents\nto build and refine their knowledge over time.  \nCaptures and organizes information about entities (people, places, concepts)\nencountered during tasks, facilitating deeper understanding and relationship\nmapping. Uses for storing entity information.  \nMaintains the context of interactions by combining , , and , aiding in the\ncoherence and relevance of agent responses over a sequence of tasks or a\nconversation.  \nStores user-specific information and preferences, enhancing personalization and\nuser experience.  \n## How Memory Systems Empower Agents\n\n  1. : With short-term and contextual memory, agents gain the ability to maintain context over a conversation or task sequence, leading to more coherent and relevant responses.\n  2. : Long-term memory allows agents to accumulate experiences, learning from past actions to improve future decision-making and problem-solving.\n  3. : By maintaining entity memory, agents can recognize and remember key entities, enhancing their ability to process and interact with complex information.\n\n## Implementing Memory in Your Crew\n\nWhen configuring a crew, you can enable and customize each memory component to\nsuit the crew‚Äôs objectives and the nature of tasks it will perform. By default,\nthe memory system is disabled, and you can ensure it is active by setting in the\ncrew configuration. The memory will use OpenAI embeddings by default, but you\ncan change it by setting to a different model. It‚Äôs also possible to initialize\nthe memory instance with your own instance.\n\nThe ‚Äòembedder‚Äô only applies to which uses Chroma for RAG. The uses SQLite3 to\nstore task results. Currently, there is no way to override these storage\nimplementations. The data storage files are saved into a platform-specific\nlocation found using the appdirs package, and the name of the project can be\noverridden using the environment variable.\n\n### Example: Configuring Memory for a Crew\n\n```\n\n# Assemble your crew with memory capabilities\n\n```\n\n### Example: Use Custom Memory Instances e.g FAISS as the VectorDB\n\n```\n\n# Assemble your crew with memory capabilities\n\n```\n\n## Integrating Mem0 for Enhanced User Memory\n\nis a self-improving memory layer for LLM applications, enabling personalized AI\nexperiences.\n\nTo include user-specific memory you can get your API key and refer the for\nadding user preferences.\n\n```\n\n# Set environment variables for Mem0\n\n# Step 1: Record preferences based on past conversation or user input\n\n     \"Hi there! I'm planning a vacation and could use some advice.\"\n     \"Hello! I'd be happy to help with your vacation planning. What kind of destination do you prefer?\"\n     \"I am more of a beach person than a mountain person.\"\n     \"That's interesting. Do you like hotels or Airbnb?\"\n\n# Step 2: Create a Crew with User Memory\n\n```\n\nIf you want to access a specific organization and project, you can set the and\nparameters in the memory configuration.\n\n### Using OpenAI embeddings (already default)\n\nAlternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder\nparameter.\n\n```\n\n# Note: Ensure you have installed and imported `ibm_watsonx_ai` for Watson\nembeddings to work.\n\n```\n\n  \nReset LATEST KICKOFF TASK OUTPUTS.  \n## Benefits of Using CrewAI‚Äôs Memory System\n\n  * ü¶æ Crews become more efficient over time, adapting to new information and refining their approach to tasks.\n  * ü´° Memory enables agents to remember user preferences and historical interactions, leading to personalized experiences.\n  * üß† Access to a rich memory store aids agents in making more informed decisions, drawing on past learnings and contextual insights.\n\nIntegrating CrewAI‚Äôs memory system into your projects is straightforward. By\nleveraging the provided memory components and configurations, you can quickly\nempower your agents with the ability to remember, reason, and learn from their\ninteractions, unlocking new levels of intelligence and capability.\n\n  * [Introduction to Memory Systems in CrewAI](https://docs.crewai.com/concepts/<#introduction-to-memory-systems-in-crewai>)\n  * [How Memory Systems Empower Agents](https://docs.crewai.com/concepts/<#how-memory-systems-empower-agents>)\n  * [Implementing Memory in Your Crew](https://docs.crewai.com/concepts/<#implementing-memory-in-your-crew>)\n  * [Example: Configuring Memory for a Crew](https://docs.crewai.com/concepts/<#example-configuring-memory-for-a-crew>)\n  * [Example: Use Custom Memory Instances e.g FAISS as the VectorDB](https://docs.crewai.com/concepts/<#example-use-custom-memory-instances-e-g-faiss-as-the-vectordb>)\n  * [Integrating Mem0 for Enhanced User Memory](https://docs.crewai.com/concepts/<#integrating-mem0-for-enhanced-user-memory>)\n  * [Using OpenAI embeddings (already default)](https://docs.crewai.com/concepts/<#using-openai-embeddings-already-default>)\n  * [Benefits of Using CrewAI‚Äôs Memory System](https://docs.crewai.com/concepts/<#benefits-of-using-crewais-memory-system>)\n\n---\n\n# Planning\nURL: https://docs.crewai.com/concepts/planning\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThe planning feature in CrewAI allows you to add planning capability to your\ncrew. When enabled, before each Crew iteration, all Crew information is sent to\nan AgentPlanner that will plan the tasks step by step, and this plan will be\nadded to each task description.\n\nGetting started with the planning feature is very easy, the only step required\nis to add to your Crew:\n\n```\n\n# Assemble your crew with planning capabilities\n\n```\n\nFrom this point on, your crew will have planning enabled, and the tasks will be\nplanned before each iteration.\n\nNow you can define the LLM that will be used to plan the tasks.\n\nWhen running the base case example, you will see something like the output\nbelow, which represents the output of the responsible for creating the step-by-\nstep logic to add to the Agents‚Äô tasks.\n\n```\n\n# Assemble your crew with planning capabilities and custom LLM\n\n```\n\n---\n\n# Testing\nURL: https://docs.crewai.com/concepts/testing\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nTesting is a crucial part of the development process, and it is essential to\nensure that your crew is performing as expected. With crewAI, you can easily\ntest your crew and evaluate its performance using the built-in testing\ncapabilities.\n\nWe added the CLI command to make it easy to test your crew. This command will\nrun your crew for a specified number of iterations and provide detailed\nperformance metrics. The parameters are and , which are optional and default to\n2 and respectively. For now, the only provider available is OpenAI.\n\nIf you want to run more iterations or use a different model, you can specify the\nparameters like this:\n\nor using the short forms:\n\nWhen you run the command, the crew will be executed for the specified number of\niterations, and the performance metrics will be displayed at the end of the run.\n\nA table of scores at the end will show the performance of the crew in terms of\nthe following metrics:  \nThe example above shows the test results for two runs of the crew with two\ntasks, with the average total score for each task and the crew as a whole.\n\n---\n\n# CLI\nURL: https://docs.crewai.com/concepts/cli\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThe CrewAI CLI provides a set of commands to interact with CrewAI, allowing you\nto create, train, run, and manage crews & flows.\n\nTo use the CrewAI CLI, make sure you have CrewAI installed:\n\nThe basic structure of a CrewAI CLI command is:\n\nCreate a new crew or flow.\n\n  * : Choose between ‚Äúcrew‚Äù or ‚Äúflow‚Äù\n  * : Name of the crew or flow\n\n```\n\n```\n\nShow the installed version of CrewAI.\n\n  * : (Optional) Show the installed version of CrewAI tools\n\nTrain the crew for a specified number of iterations.\n\n  * : Number of iterations to train the crew (default: 5)\n  * : Path to a custom file for training (default: ‚Äútrained_agents_data.pkl‚Äù)\n\nReplay the crew execution from a specific task.\n\n  * : Replay the crew from this task ID, including all subsequent tasks\n\nRetrieve your latest crew.kickoff() task outputs.\n\nReset the crew memories (long, short, entity, latest_crew_kickoff_outputs).\n\n  * : Reset LONG TERM memory\n  * : Reset SHORT TERM memory\n  * : Reset ENTITIES memory\n  * : Reset LATEST KICKOFF TASK OUTPUTS\n  * : Reset ALL memories\n\nTest the crew and evaluate the results.\n\n  * : Number of iterations to test the crew (default: 3)\n  * : LLM Model to run the tests on the Crew (default: ‚Äúgpt-4o-mini‚Äù)\n\nMake sure to run these commands from the directory where your CrewAI project is\nset up. Some commands may require additional configuration or setup within your\nproject structure.\n\nWhen running command, the CLI will first show you the top 5 most common LLM\nproviders and ask you to select one.\n\nOnce you‚Äôve selected an LLM provider, you will be prompted for API keys.\n\nThe CLI will initially prompt for API keys for the following services:\n\nWhen you select a provider, the CLI will prompt you to enter your API key.\n\nIf you select option 6, you will be able to select from a list of LiteLLM\nsupported providers.\n\nWhen you select a provider, the CLI will prompt you to enter the Key name and\nthe API key.\n\nSee the following link for each provider‚Äôs key name:\n\n---\n\n# Tools\nURL: https://docs.crewai.com/concepts/tools\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI tools empower agents with capabilities ranging from web searching and\ndata analysis to collaboration and delegating tasks among coworkers. This\ndocumentation outlines how to create, integrate, and leverage these tools within\nthe CrewAI framework, including a new focus on collaboration tools.\n\nA tool in CrewAI is a skill or function that agents can utilize to perform\nvarious actions. This includes tools from the and , enabling everything from\nsimple searches to complex interactions and effective teamwork among agents.\n\n  * : Crafted for tasks such as web searching, data analysis, content generation, and agent collaboration.\n  * : Boosts agent capabilities by seamlessly integrating tools into their workflow.\n  * : Provides the flexibility to develop custom tools or utilize existing ones, catering to the specific needs of agents.\n  * : Incorporates robust error handling mechanisms to ensure smooth operation.\n  * : Features intelligent caching to optimize performance and reduce redundant operations.\n\nTo enhance your agents‚Äô capabilities with crewAI tools, begin by installing our\nextra tools package:\n\nHere‚Äôs an example demonstrating their use:\n\n```\n\n# Set up API keys\n\nosenviron  \n\n  goal'Provide up-to-date market analysis of the AI industry'\n\n  backstory'An expert analyst with a keen eye for market trends.'\n\n  goal'Craft engaging blog posts about the AI industry'\n\n  backstory'A skilled writer with a passion for technology.'\n\n  description'Research the latest trends in the AI industry and provide a\nsummary.'\n\n  expected_output'A summary of the top 3 trending developments in the AI\nindustry with a unique perspective on their significance.'\n\n  description'Write an engaging blog post about the AI industry, based on the\nresearch analyst‚Äôs summary. Draw inspiration from the latest blog posts in the\ndirectory.'\n\n  expected_output'A 4-paragraph blog post formatted in markdown with engaging,\ninformative, and accessible content, avoiding complex jargon.'\n\n  output_file # The final blog post will be saved here\n\n# Assemble a crew with planning enabled\n\n```\n\n  * : All tools are built with error handling capabilities, allowing agents to gracefully manage exceptions and continue their tasks.\n  * : All tools support caching, enabling agents to efficiently reuse previously obtained results, reducing the load on external resources and speeding up the execution time. You can also define finer control over the caching mechanism using the attribute on the tool.\n\nHere is a list of the available tools and their descriptions:\n\nA tool for interacting with and extracting data from web browsers.  \n---  \nA RAG tool optimized for searching through code documentation and related\ntechnical documents.  \nA tool for interpreting python code.  \nEnables use of Composio tools.  \nA RAG tool designed for searching within CSV files, tailored to handle\nstructured data.  \nA tool for generating images using the DALL-E API.  \nA RAG tool for searching within directories, useful for navigating through file\nsystems.  \nA RAG tool aimed at searching within DOCX documents, ideal for processing Word\nfiles.  \nFacilitates reading and processing of directory structures and their contents.  \nA tool designed for performing exhaustive searches across various data sources.  \nEnables reading and extracting data from files, supporting various file formats.  \nA tool to search webpages using Firecrawl and return the results.  \nA tool for crawling webpages using Firecrawl.  \nA tool for scraping webpages URL using Firecrawl and returning its contents.  \nA RAG tool for searching within GitHub repositories, useful for code and\ndocumentation search.  \nA specialized tool for development purposes, with specific functionalities under\ndevelopment.  \nA RAG tool focused on searching within text (.txt) files, suitable for\nunstructured data.  \nA RAG tool designed for searching within JSON files, catering to structured data\nhandling.  \nEnables the use of LlamaIndex tools.  \nA RAG tool tailored for searching within Markdown (MDX) files, useful for\ndocumentation.  \nA RAG tool aimed at searching within PDF documents, ideal for processing scanned\ndocuments.  \nA RAG tool optimized for searching within PostgreSQL databases, suitable for\ndatabase queries.  \nA tool for generating images using the DALL-E API.  \nA general-purpose RAG tool capable of handling various data sources and types.  \nEnables scraping specific elements from websites, useful for targeted data\nextraction.  \nFacilitates scraping entire websites, ideal for comprehensive data collection.  \nA RAG tool for searching website content, optimized for web data extraction.  \nA RAG tool designed for searching within XML files, suitable for structured data\nformats.  \nA RAG tool for searching within YouTube channels, useful for video content\nanalysis.  \nA RAG tool aimed at searching within YouTube videos, ideal for video data\nextraction.  \nDevelopers can craft tailored for their agent‚Äôs needs or utilize pre-built\noptions.\n\nThere are two main ways for one to create a CrewAI tool:\n\n```\n\n  description   \"What this tool does. It's vital for effective utilization.\"\n\n    # Your tool's logic here\n\n```\n\n```\n\n  \"\"\"Clear description for what this tool is useful for, your agent will need\nthis information to use it.\"\"\"\n\n   \"Result from your custom tool\"\n\n```\n\nThe class wraps functions as tools, providing flexibility and validation while\nreducing boilerplate. It supports custom schemas and dynamic logic for seamless\nintegration of complex functionalities.\n\nUsing , you can wrap a function that interacts with an external API or system,\nproviding a structured interface. This enables robust validation and consistent\nexecution, making it easier to integrate complex functionalities into your\napplications as demonstrated in the following example:\n\n```\n\n# Define the schema for the tool's input using Pydantic\n\n# Wrapper function to execute the API call\n\n  # Here, you would typically call the API using the parameters\n\n  # For demonstration, we'll return a placeholder string\n\n  \n# Create and return the structured tool\n\n    description\"A tool to wrap API calls with structured input.\"\n\n# Execute the tool with structured input\n\nresult # Output: Call the API at https://example.com/api with parameters\n{'key1': 'value1', 'key2': 'value2'}\n\n```\n\nTools can optionally implement a to fine-tune caching behavior. This function\ndetermines when to cache results based on specific conditions, offering granular\ncontrol over caching logic.\n\n```\n\n  \"\"\"Useful for when you need to multiply two numbers together.\"\"\"\n\n  # In this case, we only cache the result if it's a multiple of 2\n\n    goal\"You write lessons of math for kids.\"\n    backstory\"You're an expert in writing and you love to teach kids but you know nothing of math.\"\n\n```\n\nTools are pivotal in extending the capabilities of CrewAI agents, enabling them\nto undertake a broad spectrum of tasks and collaborate effectively. When\nbuilding solutions with CrewAI, leverage both custom and existing tools to\nempower your agents and enhance the AI ecosystem. Consider utilizing error\nhandling, caching mechanisms, and the flexibility of tool arguments to optimize\nyour agents‚Äô performance and capabilities.\n\n---\n\n# Using LangChain Tools\nURL: https://docs.crewai.com/concepts/langchain-tools\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI seamlessly integrates with LangChain‚Äôs comprehensive , all of which can\nbe used with CrewAI.\n\n```\n\n# Set up your SERPER_API_KEY key in an .env file, eg:\n\n  description   \"Useful for search-based queries. Use this to find current\ninformation about markets, companies, and trends.\"\n\n    \"\"\"Execute the search query and return results\"\"\"\n\n  goal'Gather current market data and trends'\n\n  backstory\"You are an expert research analyst  years of experience\n\n  gathering market intelligence You're known  your ability to find\n\n  relevant  uptodate market information  present it  a clear\n\n# rest of the code ...\n\n```\n\nTools are pivotal in extending the capabilities of CrewAI agents, enabling them\nto undertake a broad spectrum of tasks and collaborate effectively. When\nbuilding solutions with CrewAI, leverage both custom and existing tools to\nempower your agents and enhance the AI ecosystem. Consider utilizing error\nhandling, caching mechanisms, and the flexibility of tool arguments to optimize\nyour agents‚Äô performance and capabilities.\n\n---\n\n# Using LlamaIndex Tools\nURL: https://docs.crewai.com/concepts/llamaindex-tools\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/concepts/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/concepts/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/concepts/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI seamlessly integrates with LlamaIndex‚Äôs comprehensive toolkit for RAG\n(Retrieval-Augmented Generation) and agentic pipelines, enabling advanced\nsearch-based queries and more.\n\nHere are the available built-in tools offered by LlamaIndex.\n\n```\n\n# Example 1: Initialize from FunctionTool\n\n# Example 2: Initialize from LlamaHub Tools\n\n# Example 3: Initialize Tool from a LlamaIndex Query Engine\n\n  name\"Uber 2019 10K Query Tool\"\n\n  description\"Use this tool to lookup the 2019 Uber 10K Annual Report\"\n\n# Create and assign the tools to an agent\n\n  backstory'An expert analyst with a keen eye for market trends.'\n\n# rest of the code ...\n\n```\n\nTo effectively use the LlamaIndexTool, follow these steps:\n\nMake sure that package is installed in your Python environment:\n\nFollow the LlamaIndex documentation to set up a RAG/agent pipeline.\n\n---\n\n# Create Custom Tools\nURL: https://docs.crewai.com/how-to/create-custom-tools\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n## Creating and Utilizing Tools in CrewAI\n\nThis guide provides detailed instructions on creating custom tools for the\nCrewAI framework and how to efficiently manage and utilize these tools,\nincorporating the latest functionalities such as tool delegation, error\nhandling, and dynamic tool calling. It also highlights the importance of\ncollaboration tools, enabling agents to perform a wide range of actions.\n\nTo create a personalized tool, inherit from and define the necessary attributes,\nincluding the for input validation, and the method.\n\n```\n\n  description   \"What this tool does. It's vital for effective utilization.\"\n\n    # Your tool's logic here\n\n```\n\nAlternatively, you can use the tool decorator . This approach allows you to\ndefine the tool‚Äôs attributes and functionality directly within a function,\noffering a concise and efficient way to create specialized tools tailored to\nyour needs.\n\n```\n\n```\n\n### Defining a Cache Function for the Tool\n\nTo optimize tool performance with caching, define custom caching strategies\nusing the attribute.\n\n```\n\n  # Define custom caching logic\n\n```\n\nBy adhering to these guidelines and incorporating new functionalities and\ncollaboration tools into your tool creation and management processes, you can\nleverage the full capabilities of the CrewAI framework, enhancing both the\ndevelopment experience and the efficiency of your AI agents.\n\n  * [Creating and Utilizing Tools in CrewAI](https://docs.crewai.com/how-to/<#creating-and-utilizing-tools-in-crewai>)\n  * [Defining a Cache Function for the Tool](https://docs.crewai.com/how-to/<#defining-a-cache-function-for-the-tool>)\n\n---\n\n# Sequential Processes\nURL: https://docs.crewai.com/how-to/sequential-process\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI offers a flexible framework for executing tasks in a structured manner,\nsupporting both sequential and hierarchical processes. This guide outlines how\nto effectively implement these processes to ensure efficient task execution and\nproject completion.\n\nThe sequential process ensures tasks are executed one after the other, following\na linear progression. This approach is ideal for projects requiring tasks to be\ncompleted in a specific order.\n\n  * : Ensures orderly progression by handling tasks in a predetermined sequence.\n  * : Best suited for projects with clear, step-by-step tasks.\n  * : Facilitates easy tracking of task completion and project progress.\n\nTo use the sequential process, assemble your crew and define tasks in the order\nthey need to be executed.\n\n```\n\n backstory'An experienced researcher with a passion for uncovering insights'\n\n backstory'A meticulous analyst with a knack for uncovering patterns'\n\n backstory'A skilled writer with a talent for crafting compelling narratives'\n\n# Form the crew with a sequential process\n\n# Accessing the type-safe output\n\n```\n\nEach task in a sequential process have an agent assigned. Ensure that every\nincludes an parameter.\n\n  1. : In a sequential process, the first agent completes their task and signals completion.\n  2. : Agents pick up their tasks based on the process type, with outcomes of preceding tasks or directives guiding their execution.\n  3. : The process concludes once the final task is executed, leading to project completion.\n\nIn sequential processes, if an agent has set to , they can delegate tasks to\nother agents in the crew. This feature is automatically set up when there are\nmultiple agents in the crew.\n\nTasks can be executed asynchronously, allowing for parallel processing when\nappropriate. To create an asynchronous task, set when defining the task.\n\nCrewAI supports both memory and caching features:\n\n  * : Enable by setting when creating the Crew. This allows agents to retain information across tasks.\n  * : By default, caching is enabled. Set to disable it.\n\nYou can set callbacks at both the task and step level:\n\n  * : Executed after each task completion.\n  * : Executed after each step in an agent‚Äôs execution.\n\nCrewAI tracks token usage across all tasks and agents. You can access these\nmetrics after execution.\n\n## Best Practices for Sequential Processes\n\n  1. : Arrange tasks in a logical sequence where each task builds upon the previous one.\n  2. : Provide detailed descriptions for each task to guide the agents effectively.\n  3. : Match agents‚Äô skills and roles to the requirements of each task.\n  4. : Leverage the context from previous tasks to inform subsequent ones.\n\nThis updated documentation ensures that details accurately reflect the latest\nchanges in the codebase and clearly describes how to leverage new features and\nconfigurations. The content is kept simple and direct to ensure easy\nunderstanding.\n\n  * [Best Practices for Sequential Processes](https://docs.crewai.com/how-to/<#best-practices-for-sequential-processes>)\n\n---\n\n# Hierarchical Process\nURL: https://docs.crewai.com/how-to/hierarchical-process\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThe hierarchical process in CrewAI introduces a structured approach to task\nmanagement, simulating traditional organizational hierarchies for efficient task\ndelegation and execution. This systematic workflow enhances project outcomes by\nensuring tasks are handled with optimal efficiency and accuracy.\n\nThe hierarchical process is designed to leverage advanced models like GPT-4,\noptimizing token usage while handling complex tasks with greater efficiency.\n\nBy default, tasks in CrewAI are managed through a sequential process. However,\nadopting a hierarchical approach allows for a clear hierarchy in task\nmanagement, where a ‚Äòmanager‚Äô agent coordinates the workflow, delegates tasks,\nand validates outcomes for streamlined and effective execution. This manager\nagent can now be either automatically created by CrewAI or explicitly set by the\nuser.\n\n  * : A manager agent allocates tasks among crew members based on their roles and capabilities.\n  * : The manager evaluates outcomes to ensure they meet the required standards.\n  * : Emulates corporate structures, providing an organized approach to task management.\n  * : Optionally specify whether the system should use predefined prompts.\n  * : Optionally specify whether stop words should be used, supporting various models including the o1 models.\n  * : Prioritize important context by enabling respect of the context window, which is now the default behavior.\n  * : Delegation is now disabled by default to give users explicit control.\n  * : Configurable option to set the maximum number of requests per minute.\n  * : Limit the maximum number of iterations for obtaining a final answer.\n\nTo utilize the hierarchical process, it‚Äôs essential to explicitly set the\nprocess attribute to , as the default behavior is . Define a crew with a\ndesignated manager and establish a clear chain of command.\n\nAssign tools at the agent level to facilitate task delegation and execution by\nthe designated agents under the manager‚Äôs guidance. Tools can also be specified\nat the task level for precise control over tool availability during task\nexecution.\n\nConfiguring the parameter is crucial for the hierarchical process. The system\nrequires a manager LLM to be set up for proper function, ensuring tailored\ndecision-making.\n\n```\n\n# Agents are defined with attributes for backstory, cache, and verbose mode\n\n  backstory'Experienced data analyst with a knack for uncovering hidden trends.'\n\n  # tools=[] # This can be optionally specified; defaults to an empty list\n\n  use_system_prompt # Enable or disable system prompts for this agent\n\n  max_rpm # Limit on the number of requests per minute\n\n  max_iter # Maximum number of iterations for a final answer\n\n  backstory'Creative writer passionate about storytelling in technical domains.'\n\n  # tools=[] # Optionally specify tools; defaults to an empty list\n\n  use_system_prompt # Enable or disable system prompts for this agent\n\n  max_rpm # Limit on the number of requests per minute\n\n  max_iter # Maximum number of iterations for a final answer\n\n# Establishing the crew with a hierarchical process and additional\nconfigurations\n\n  tasks # Tasks to be delegated and executed under the manager's supervision\n\n  manager_llmChatOpenAItemperature model # Mandatory if manager_agent is not set\n\n  processProcesshierarchical # Specifies the hierarchical management approach\n\n  respect_context_window # Enable respect of the context window for tasks\n\n  memory # Enable memory usage for enhanced task execution\n\n  manager_agent # Optional: explicitly set a specific agent as manager instead\nof the manager_llm\n\n  planning # Enable planning feature for pre-execution strategy\n\n```\n\n  1. : The manager assigns tasks strategically, considering each agent‚Äôs capabilities and available tools.\n  2. : Agents complete their tasks with the option for asynchronous execution and callback functions for streamlined workflows.\n  3. : Despite being a hierarchical process, tasks follow a logical order for smooth progression, facilitated by the manager‚Äôs oversight.\n\nAdopting the hierarchical process in CrewAI, with the correct configurations and\nunderstanding of the system‚Äôs capabilities, facilitates an organized and\nefficient approach to project management. Utilize the advanced features and\ncustomizations to tailor the workflow to your specific needs, ensuring optimal\ntask execution and project success.\n\n[Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-\nmanager-agent>)\n\n---\n\n# Create Your Own Manager Agent\nURL: https://docs.crewai.com/how-to/custom-manager-agent\n\nCreate Your Own Manager Agent\n\n  * [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n# Setting a Specific Agent as Manager in CrewAI\n\nCrewAI allows users to set a specific agent as the manager of the crew,\nproviding more control over the management and coordination of tasks. This\nfeature enables the customization of the managerial role to better fit your\nproject‚Äôs requirements.\n\nThe attribute allows you to define a custom agent to manage the crew. This agent\nwill oversee the entire process, ensuring that tasks are completed efficiently\nand to the highest standard.\n\n```\n\n  goal\"Conduct thorough research and analysis on AI and AI agents\"\n\n  backstory\"You're an expert researcher, specialized in technology, software\nengineering, AI, and startups. You work as a freelancer and are currently\nresearching for a new client.\"\n\n  goal\"Create compelling content about AI and AI agents\"\n\n  backstory\"You're a senior writer, specialized in technology, software\nengineering, AI, and startups. You work as a freelancer and are currently\nwriting content for a new client.\"\n\n  description\"Generate a list of 5 interesting ideas for an article, then write\none captivating paragraph for each idea that showcases the potential of a full\narticle on this topic. Return the list of ideas with their paragraphs and your\nnotes.\"\n\n  expected_output\"5 bullet points, each with a paragraph and accompanying\nnotes.\"\n\n# Define the manager agent\n\n  goal\"Efficiently manage the crew and ensure high-quality task completion\"\n\n  backstory\"You're an experienced project manager, skilled in overseeing complex\nprojects and guiding teams to success. Your role is to coordinate the efforts of\nthe crew members, ensuring that each task is completed on time and to the\nhighest standard.\"\n\n# Instantiate your crew with a custom manager\n\n# Start the crew's work\n\n```\n\n## Benefits of a Custom Manager Agent\n\n  * : Tailor the management approach to fit the specific needs of your project.\n  * : Ensure efficient task coordination and management by an experienced agent.\n  * : Define managerial roles and responsibilities that align with your project‚Äôs goals.\n\nIf you‚Äôre using the hierarchical process and don‚Äôt want to set a custom manager\nagent, you can specify the language model for the manager:\n\nEither or must be set when using the hierarchical process.\n\n  * [Setting a Specific Agent as Manager in CrewAI](https://docs.crewai.com/how-to/<#setting-a-specific-agent-as-manager-in-crewai>)\n  * [Benefits of a Custom Manager Agent](https://docs.crewai.com/how-to/<#benefits-of-a-custom-manager-agent>)\n\n---\n\n# Connect to any LLM\nURL: https://docs.crewai.com/how-to/llm-connections\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This\nintegration provides extensive versatility, allowing you to use models from\nnumerous providers with a simple, unified interface.\n\nBy default, CrewAI uses the model. This is determined by the environment\nvariable, which defaults to ‚Äúgpt-4o-mini‚Äù if not set. You can easily configure\nyour agents to use a different model or provider as described in this guide.\n\nLiteLLM supports a wide range of providers, including but not limited to:\n\nFor a complete and up-to-date list of supported providers, please refer to the .\n\nTo use a different LLM with your CrewAI agents, you have several options:\n\nPass the model name as a string when initializing the agent:\n\n```\n\n  backstory\"An AI assistant powered by OpenAI's latest model.\"\n\n  backstory\"An AI assistant leveraging Anthropic's language model.\"\n\n```\n\nWhen configuring an LLM for your agent, you have access to a wide range of\nparameters:\n\nThe name of the model to use (e.g., ‚Äúgpt-4‚Äù, ‚Äúclaude-2‚Äù)  \n---  \nControls randomness in output (0.0 to 1.0)  \nMaximum number of tokens to generate  \nControls diversity of output (0.0 to 1.0)  \nPenalizes new tokens based on their frequency in the text so far  \nPenalizes new tokens based on their presence in the text so far  \nThe base URL for the API endpoint  \nYour API key for authentication  \nFor a complete list of parameters and their descriptions, refer to the LLM class\ndocumentation.\n\nYou can connect to OpenAI-compatible LLMs using either environment variables or\nby setting specific attributes on the LLM class:\n\n## Using Local Models with Ollama\n\nFor local models like those provided by Ollama:\n\n[Click here to download and install Ollama](https://docs.crewai.com/how-\nto/<https:/ollama.com/download>)\n\nFor example, run to download the model.\n\n```\n\n    goal'Process information using a local model'\n    backstory\"An AI assistant running on local hardware.\"\n\n```\n\n## Changing the Base API URL\n\nYou can change the base API URL for any LLM provider by setting the parameter:\n\nThis is particularly useful when working with OpenAI-compatible APIs or when you\nneed to specify a different endpoint for your chosen provider.\n\nBy leveraging LiteLLM, CrewAI offers seamless integration with a vast array of\nLLMs. This flexibility allows you to choose the most suitable model for your\nspecific needs, whether you prioritize performance, cost-efficiency, or local\ndeployment. Remember to consult the for the most up-to-date information on\nsupported models and configuration options.\n\n[Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-\nmanager-agent>)\n\n  * [Using Local Models with Ollama](https://docs.crewai.com/how-to/<#using-local-models-with-ollama>)\n  * [Changing the Base API URL](https://docs.crewai.com/how-to/<#changing-the-base-api-url>)\n\n---\n\n# Customize Agents\nURL: https://docs.crewai.com/how-to/customizing-agents\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrafting an efficient CrewAI team hinges on the ability to dynamically tailor\nyour AI agents to meet the unique requirements of any project. This section\ncovers the foundational attributes you can customize.\n\nSpecifies the agent‚Äôs job within the crew, such as ‚ÄòAnalyst‚Äô or ‚ÄòCustomer\nService Rep‚Äô.  \n---  \nDefines the agent‚Äôs objectives, aligned with its role and the crew‚Äôs overarching\nmission.  \nProvides depth to the agent‚Äôs persona, enhancing motivations and engagements\nwithin the crew.  \nRepresents the capabilities or methods the agent uses for tasks, from simple\nfunctions to complex integrations.  \nDetermines if the agent should use a cache for tool usage.  \nSets the maximum requests per minute (). Can be set to for unlimited requests to\nexternal services.  \nEnables detailed logging for debugging and optimization, providing insights into\nexecution processes.  \nControls task delegation to other agents, default is .  \nLimits the maximum number of iterations () for a task to prevent infinite loops,\nwith a default of 25.  \nSets the maximum time allowed for an agent to complete a task.  \nDefines the system format for the agent.  \nDefines the prompt format for the agent.  \nDefines the response format for the agent.  \nControls whether the agent will use a system prompt during task execution.  \nEnables a sliding context window by default, maintaining context size.  \nSets the maximum number of retries () for an agent in case of errors.  \nBeyond the basic attributes, CrewAI allows for deeper customization to enhance\nan agent‚Äôs behavior and capabilities significantly.\n\nAgents can be customized with specific language models () and function-calling\nlanguage models (), offering advanced control over their processing and\ndecision-making abilities. It‚Äôs important to note that setting the allows for\noverriding the default crew function-calling language model, providing a greater\ndegree of customization.\n\nAdjusting an agent‚Äôs performance and monitoring its operations are crucial for\nefficient task execution.\n\n### Verbose Mode and RPM Limit\n\n  * : Enables detailed logging of an agent‚Äôs actions, useful for debugging and optimization. Specifically, it provides insights into agent execution processes, aiding in the optimization of performance.\n  * : Sets the maximum number of requests per minute (). This attribute is optional and can be set to for no limit, allowing for unlimited queries to external services if needed.\n\n### Maximum Iterations for Task Execution\n\nThe attribute allows users to define the maximum number of iterations an agent\ncan perform for a single task, preventing infinite loops or excessively long\nexecutions. The default value is set to 25, providing a balance between\nthoroughness and efficiency. Once the agent approaches this number, it will try\nits best to give a good answer.\n\nAgents are customized by defining their attributes and tools during\ninitialization. Tools are critical for an agent‚Äôs functionality, enabling them\nto perform specialized tasks. The attribute should be an array of tools the\nagent can utilize, and it‚Äôs initialized as an empty list by default. Tools can\nbe added or modified post-agent initialization to adapt to new requirements.\n\n### Example: Assigning Tools to an Agent\n\n```\n\n# Set API keys for tool initialization\n\n# Initialize a search tool\n\n# Initialize the agent with advanced options\n\n backstory'An expert analyst with a keen eye for market trends.'\n\n max_rpm # No limit on requests per minute\n\n max_iter # Default value for maximum iterations\n\n```\n\nControlling an agent‚Äôs ability to delegate tasks or ask questions is vital for\ntailoring its autonomy and collaborative dynamics within the CrewAI framework.\nBy default, the attribute is now set to , disabling agents to seek assistance or\ndelegate tasks as needed. This default behavior can be changed to promote\ncollaborative problem-solving and efficiency within the CrewAI ecosystem. If\nneeded, delegation can be enabled to suit specific operational requirements.\n\n### Example: Disabling Delegation for an Agent\n\n```\n\n goal'Write engaging content on market trends'\n\n backstory'A seasoned writer with expertise in market analysis.'\n\n```\n\nCustomizing agents in CrewAI by setting their roles, goals, backstories, and\ntools, alongside advanced options like language model customization, memory,\nperformance settings, and delegation preferences, equips a nuanced and capable\nAI team ready for complex challenges.\n\n  * [Verbose Mode and RPM Limit](https://docs.crewai.com/how-to/<#verbose-mode-and-rpm-limit>)\n  * [Maximum Iterations for Task Execution](https://docs.crewai.com/how-to/<#maximum-iterations-for-task-execution>)\n  * [Example: Assigning Tools to an Agent](https://docs.crewai.com/how-to/<#example-assigning-tools-to-an-agent>)\n  * [Example: Disabling Delegation for an Agent](https://docs.crewai.com/how-to/<#example-disabling-delegation-for-an-agent>)\n\n---\n\n# Using Multimodal Agents\nURL: https://docs.crewai.com/how-to/multimodal-agents\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI supports multimodal agents that can process both text and non-text\ncontent like images. This guide will show you how to enable and use multimodal\ncapabilities in your agents.\n\nTo create a multimodal agent, simply set the parameter to when initializing your\nagent:\n\n```\n\n  goal\"Analyze and extract insights from images\"\n\n  backstory\"An expert in visual content interpretation with years of experience\nin image analysis\"\n\n  multimodal # This enables multimodal capabilities\n\n```\n\nWhen you set , the agent is automatically configured with the necessary tools\nfor handling non-text content, including the .\n\nThe multimodal agent comes pre-configured with the , which allows it to process\nimages. You don‚Äôt need to manually add this tool - it‚Äôs automatically included\nwhen you enable multimodal capabilities.\n\nHere‚Äôs a complete example showing how to use a multimodal agent to analyze an\nimage:\n\n```\n\n# Create a multimodal agent\n\n  goal\"Analyze product images and provide detailed descriptions\"\n\n  backstory\"Expert in visual product analysis with deep knowledge of design and\nfeatures\"\n\n# Create a task for image analysis\n\n  description\"Analyze the product image at https://example.com/product.jpg and\nprovide a detailed description\"\n\n# Create and run the crew\n\n```\n\nYou can provide additional context or specific questions about the image when\ncreating tasks for multimodal agents. The task description can include specific\naspects you want the agent to focus on:\n\n```\n\n# Create a multimodal agent for detailed analysis\n\n  goal\"Perform detailed quality analysis of product images\"\n\n  backstory\"Senior quality control expert with expertise in visual inspection\"\n\n  multimodal # AddImageTool is automatically included\n\n# Create a task with specific analysis requirements\n\n  Analyze the product image at httpsexamplecomproductjpg  focus on\n\n  Provide a detailed report highlighting  issues found\n\n# Create and run the crew\n\n```\n\nWhen working with multimodal agents, the is automatically configured with the\nfollowing schema:\n\n```\n\n  image_url  # Required: The URL or path of the image to process\n\n  action Optional   # Optional: Additional context or specific questions about\nthe image\n\n```\n\nThe multimodal agent will automatically handle the image processing through its\nbuilt-in tools, allowing it to:\n\n  * Access images via URLs or local file paths\n  * Process image content with optional context or specific questions\n  * Provide analysis and insights based on the visual information and task requirements\n\nWhen working with multimodal agents, keep these best practices in mind:\n\n  1.      * Ensure your images are accessible via URLs that the agent can reach\n     * For local images, consider hosting them temporarily or using absolute file paths\n     * Verify that image URLs are valid and accessible before running tasks\n  2.      * Be specific about what aspects of the image you want the agent to analyze\n     * Include clear questions or requirements in the task description\n     * Consider using the optional parameter for focused analysis\n  3.      * Image processing may require more computational resources than text-only tasks\n     * Some language models may require base64 encoding for image data\n     * Consider batch processing for multiple images to optimize performance\n  4.      * Verify that your environment has the necessary dependencies for image processing\n     * Ensure your language model supports multimodal capabilities\n     * Test with small images first to validate your setup\n  5.      * Implement proper error handling for image loading failures\n     * Have fallback strategies for when image processing fails\n     * Monitor and log image processing operations for debugging\n\n---\n\n# Coding Agents\nURL: https://docs.crewai.com/how-to/coding-agents\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI Agents now have the powerful ability to write and execute code,\nsignificantly enhancing their problem-solving capabilities. This feature is\nparticularly useful for tasks that require computational or programmatic\nsolutions.\n\nTo enable code execution for an agent, set the parameter to when creating the\nagent.\n\n```\n\n  goal\"Craft well-designed and thought-out code\"\n\n  backstory\"You are a senior Python developer with extensive experience in\nsoftware architecture and best practices.\"\n\n```\n\n  1. : It is strongly recommended to use more capable models like Claude 3.5 Sonnet and GPT-4 when enabling code execution. These models have a better understanding of programming concepts and are more likely to generate correct and efficient code.\n  2. : The code execution feature includes error handling. If executed code raises an exception, the agent will receive the error message and can attempt to correct the code or provide alternative solutions. The parameter, which defaults to 2, controls the maximum number of retries for a task.\n  3. : To use the code execution feature, you need to install the package. If not installed, the agent will log an info message: ‚ÄúCoding tools not available. Install crewai_tools.‚Äù\n\nWhen an agent with code execution enabled encounters a task requiring\nprogramming:\n\nThe agent analyzes the task and determines that code execution is necessary.\n\nIt formulates the Python code needed to solve the problem.\n\nThe code is sent to the internal code execution tool ().\n\nThe agent interprets the result and incorporates it into its response or uses it\nfor further problem-solving.\n\nHere‚Äôs a detailed example of creating an agent with code execution capabilities\nand using it in a task:\n\n```\n\n# Create an agent with code execution enabled\n\n  goal\"Analyze data and provide insights using Python\"\n\n  backstory\"You are an experienced data analyst with strong Python skills.\"\n\n# Create a task that requires code execution\n\n  description\"Analyze the given dataset and calculate the average age of\nparticipants.\"\n\n# Create a crew and add the task\n\n```\n\nIn this example, the can write and execute Python code to perform data analysis\ntasks.\n\n[Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-\ntool-output-as-result>)\n\n---\n\n# Force Tool Output as Result\nURL: https://docs.crewai.com/how-to/force-tool-output-as-result\n\nForce Tool Output as Result\n\n  * [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nIn CrewAI, you can force the output of a tool as the result of an agent‚Äôs task.\nThis feature is useful when you want to ensure that the tool output is captured\nand returned as the task result, avoiding any agent modification during the task\nexecution.\n\n## Forcing Tool Output as Result\n\nTo force the tool output as the result of an agent‚Äôs task, you need to set the\nparameter to when adding a tool to the agent. This parameter ensures that the\ntool output is captured and returned as the task result, without any\nmodifications by the agent.\n\nHere‚Äôs an example of how to force the tool output as the result of an agent‚Äôs\ntask:\n\n```\n\n# Create a coding agent with the custom tool\n\n    goal\"Produce amazing reports on AI\"\n    backstory\"You work with data and AI\"\n\n# Assuming the tool's execution and result population occurs within the system\n\n```\n\nThe agent executes the task using the tool provided.\n\nThe tool generates the output, which is captured as the task result.\n\nThe agent may reflect and take learnings from the tool but the output is not\nmodified.\n\nThe tool output is returned as the task result without any modifications.\n\n  * [Forcing Tool Output as Result](https://docs.crewai.com/how-to/<#forcing-tool-output-as-result>)\n\n---\n\n# Human Input on Execution\nURL: https://docs.crewai.com/how-to/human-input-on-execution\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n## Human input in agent execution\n\nHuman input is critical in several agent execution scenarios, allowing agents to\nrequest additional information or clarification when necessary. This feature is\nespecially useful in complex decision-making processes or when agents require\nmore details to complete a task effectively.\n\n## Using human input with CrewAI\n\nTo integrate human input into agent execution, set the flag in the task\ndefinition. When enabled, the agent prompts the user for input before delivering\nits final answer. This input can provide extra context, clarify ambiguities, or\nvalidate the agent‚Äôs output.\n\n```\n\nosenviron  \n\n# Define your agents with roles, goals, tools, and additional attributes\n\n  goal'Uncover cutting-edge developments in AI and data science'\n\n    \"You are a Senior Research Analyst at a leading tech think tank. \"\n    \"Your expertise lies in identifying emerging trends and technologies in AI and data science. \"\n    \"You have a knack for dissecting complex data and presenting actionable insights.\"\n\n  goal'Craft compelling content on tech advancements'\n\n    \"You are a renowned Tech Content Strategist, known for your insightful and engaging articles on technology and innovation. \"\n    \"With a deep understanding of the tech industry, you transform complex concepts into compelling narratives.\"\n\n  cache # Disable cache for this agent\n\n# Create tasks for your agents\n\n    \"Conduct a comprehensive analysis of the latest advancements in AI in 2024. \"\n    \"Identify key trends, breakthrough technologies, and potential industry impacts. \"\n    \"Compile your findings in a detailed report. \"\n    \"Make sure to check with a human if the draft is good before finalizing your answer.\"\n\n  expected_output'A comprehensive full report on the latest AI advancements in\n2024, leave nothing out'\n\n    \"Using the insights from the researcher\\'s report, develop an engaging blog post that highlights the most significant AI advancements. \"\n    \"Your post should be informative yet accessible, catering to a tech-savvy audience. \"\n    \"Aim for a narrative that captures the essence of these breakthroughs and their implications for the future.\"\n\n  expected_output'A compelling 3 paragraphs blog post formatted as markdown\nabout the latest AI advancements in 2024'\n\n# Instantiate your crew with a sequential process\n\n  planning # Enable planning feature for the crew\n\n# Get your crew to work!\n\n```\n\n[Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-\ntool-output-as-result>)\n\n  * [Human input in agent execution](https://docs.crewai.com/how-to/<#human-input-in-agent-execution>)\n  * [Using human input with CrewAI](https://docs.crewai.com/how-to/<#using-human-input-with-crewai>)\n\n---\n\n# Kickoff Crew Asynchronously\nURL: https://docs.crewai.com/how-to/kickoff-async\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI provides the ability to kickoff a crew asynchronously, allowing you to\nstart the crew execution in a non-blocking manner. This feature is particularly\nuseful when you want to run multiple crews concurrently or when you need to\nperform other tasks while the crew is executing.\n\nTo kickoff a crew asynchronously, use the method. This method initiates the crew\nexecution in a separate thread, allowing the main thread to continue executing\nother tasks.\n\n  * (dict): A dictionary containing the input data required for the tasks.\n\n  * : An object representing the result of the crew execution.\n\n  * : Kickoff multiple independent crews asynchronously, each responsible for generating content on different topics. For example, one crew might research and draft an article on AI trends, while another crew generates social media posts about a new product launch. Each crew operates independently, allowing content production to scale efficiently.\n  * : Launch multiple crews asynchronously to conduct market research in parallel. One crew might analyze industry trends, while another examines competitor strategies, and yet another evaluates consumer sentiment. Each crew independently completes its task, enabling faster and more comprehensive insights.\n  * : Execute separate crews to independently plan different aspects of a trip. One crew might handle flight options, another handles accommodation, and a third plans activities. Each crew works asynchronously, allowing various components of the trip to be planned simultaneously and independently for faster results.\n\n## Example: Single Asynchronous Crew Execution\n\nHere‚Äôs an example of how to kickoff a crew asynchronously using asyncio and\nawaiting the result:\n\n```\n\n# Create an agent with code execution enabled\n\n  goal\"Analyze data and provide insights using Python\"\n\n  backstory\"You are an experienced data analyst with strong Python skills.\"\n\n# Create a task that requires code execution\n\n  description\"Analyze the given dataset and calculate the average age of\nparticipants. Ages: {ages}\"\n\n# Create a crew and add the task\n\n# Async function to kickoff the crew asynchronously\n\n# Run the async function\n\n```\n\n## Example: Multiple Asynchronous Crew Executions\n\nIn this example, we‚Äôll show how to kickoff multiple crews asynchronously and\nwait for all of them to complete using :\n\n```\n\n# Create an agent with code execution enabled\n\n  goal\"Analyze data and provide insights using Python\"\n\n  backstory\"You are an experienced data analyst with strong Python skills.\"\n\n# Create tasks that require code execution\n\n  description\"Analyze the first dataset and calculate the average age of\nparticipants. Ages: {ages}\"\n\n  description\"Analyze the second dataset and calculate the average age of\nparticipants. Ages: {ages}\"\n\n# Create two crews and add tasks\n\n# Async function to kickoff multiple crews asynchronously and wait for all to\nfinish\n\n  # Wait for both crews to finish\n\n# Run the async function\n\n```\n\n  * [Example: Single Asynchronous Crew Execution](https://docs.crewai.com/how-to/<#example-single-asynchronous-crew-execution>)\n  * [Example: Multiple Asynchronous Crew Executions](https://docs.crewai.com/how-to/<#example-multiple-asynchronous-crew-executions>)\n\n---\n\n# Kickoff Crew for Each\nURL: https://docs.crewai.com/how-to/kickoff-for-each\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI provides the ability to kickoff a crew for each item in a list, allowing\nyou to execute the crew for each item in the list. This feature is particularly\nuseful when you need to perform the same set of tasks for multiple items.\n\n## Kicking Off a Crew for Each Item\n\nTo kickoff a crew for each item in a list, use the method. This method executes\nthe crew for each item in the list, allowing you to process multiple items\nefficiently.\n\nHere‚Äôs an example of how to kickoff a crew for each item in a list:\n\n```\n\n# Create an agent with code execution enabled\n\n  goal\"Analyze data and provide insights using Python\"\n\n  backstory\"You are an experienced data analyst with strong Python skills.\"\n\n# Create a task that requires code execution\n\n  description\"Analyze the given dataset and calculate the average age of\nparticipants. Ages: {ages}\"\n\n  expected_output\"The average age calculated from the dataset\"\n\n# Create a crew and add the task\n\n```\n\n[Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-\nto/replay-tasks-from-latest-crew-kickoff>)\n\n  * [Kicking Off a Crew for Each Item](https://docs.crewai.com/how-to/<#kicking-off-a-crew-for-each-item>)\n\n---\n\n# Replay Tasks from Latest Crew Kickoff\nURL: https://docs.crewai.com/how-to/replay-tasks-from-latest-crew-kickoff\n\nReplay Tasks from Latest Crew Kickoff\n\n  * [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nCrewAI provides the ability to replay from a task specified from the latest crew\nkickoff. This feature is particularly useful when you‚Äôve finished a kickoff and\nmay want to retry certain tasks or don‚Äôt need to refetch data over and your\nagents already have the context saved from the kickoff execution so you just\nneed to replay the tasks you want to.\n\nYou must run before you can replay a task. Currently, only the latest kickoff is\nsupported, so if you use , it will only allow you to replay from the most recent\ncrew run.\n\nHere‚Äôs an example of how to replay from a task:\n\n### Replaying from Specific Task Using the CLI\n\nTo use the replay feature, follow these steps:\n\nOpen your terminal or command prompt.\n\nNavigate to the directory where your CrewAI project is located.\n\nTo view the latest kickoff task_ids use:\n\nOnce you have your to replay, use:\n\nEnsure is installed and configured correctly in your development environment.\n\n### Replaying from a Task Programmatically\n\nTo replay from a task programmatically, use the following steps:\n\nSpecify the `task_id` and input parameters for the replay process.\n\nSpecify the and input parameters for the replay process.\n\nExecute the replay command within a try-except block to handle potential errors.\n\nExecute the replay command within a try-except block to handle potential errors.\n\n```\n\n Replay the crew execution  a specific task\n\n inputs    # This is optional; you can pass in the inputs you want to replay;\notherwise, it uses the previous kickoff's inputs.\n\n    Exceptionf\"An error occurred while replaying the crew: \n\n```\n\nWith the above enhancements and detailed functionality, replaying specific tasks\nin CrewAI has been made more efficient and robust. Ensure you follow the\ncommands and steps precisely to make the most of these features.\n\n  * [Replaying from Specific Task Using the CLI](https://docs.crewai.com/how-to/<#replaying-from-specific-task-using-the-cli>)\n  * [Replaying from a Task Programmatically](https://docs.crewai.com/how-to/<#replaying-from-a-task-programmatically>)\n\n---\n\n# Conditional Tasks\nURL: https://docs.crewai.com/how-to/conditional-tasks\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nConditional Tasks in crewAI allow for dynamic workflow adaptation based on the\noutcomes of previous tasks. This powerful feature enables crews to make\ndecisions and execute tasks selectively, enhancing the flexibility and\nefficiency of your AI-driven processes.\n\n```\n\n# Define a condition function for the conditional task\n\n# If false, the task will be skipped, if true, then execute the task.\n\n   outputpydanticevents   # this will skip this task\n\n  goal\"Fetch data online using Serper tool\"\n\n  goal\"Generate summary from fetched data\"\n\n  description\"Fetch data about events in San Francisco using Serper tool\"\n\n  expected_output\"List of 10 things to do in SF this week\"\n\n    Check  data  missing If we have less than  events\n    fetch more events using Serper tool so that\n    we have a total of  events  SF this week\n\n  expected_output\"List of 10 Things to do in SF this week\"\n\n  description\"Generate summary of events in San Francisco from fetched data\"\n\n  expected_output\"A complete report on the customer and their customers and\ncompetitors, including their demographics, preferences, market positioning and\naudience engagement.\"\n\n# Create a crew with the tasks\n\n```\n\n[Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-\nto/replay-tasks-from-latest-crew-kickoff>)\n\n---\n\n# Agent Monitoring with AgentOps\nURL: https://docs.crewai.com/how-to/agentops-observability\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nObservability is a key aspect of developing and deploying conversational AI\nagents. It allows developers to understand how their agents are performing, how\ntheir agents are interacting with users, and how their agents use external tools\nand APIs. AgentOps is a product independent of CrewAI that provides a\ncomprehensive observability solution for agents.\n\nprovides session replays, metrics, and monitoring for agents.\n\nAt a high level, AgentOps gives you the ability to monitor cost, token usage,\nlatency, agent failures, session-wide statistics, and more. For more info, check\nout the .\n\nAgentOps provides monitoring for agents in development and production. It\nprovides a dashboard for tracking agent performance, session replays, and custom\nreporting.\n\nAdditionally, AgentOps provides session drilldowns for viewing Crew agent\ninteractions, LLM calls, and tool usage in real-time. This feature is useful for\ndebugging and understanding how agents interact with users as well as other\nagents.\n\n  * **LLM Cost Management and Tracking** : Track spend with foundation model providers.\n  * : Watch step-by-step agent execution graphs.\n  * : Identify when agents fall into infinite loops.\n  * : Create custom analytics on agent performance.\n  * : Monitor high-level statistics about agents in development and production.\n  * : Test your agents against benchmarks and leaderboards.\n  * : Run your agents against domain-specific tests.\n  * : Restart your sessions from checkpoints.\n  * : Create audit logs and detect potential threats such as profanity and PII leaks.\n  * : Identify potential code injection and secret leaks.\n\nCreate a user API key here:\n\nAdd your API key to your environment variables:\n\nBefore using in your script, include these lines:\n\nThis will initiate an AgentOps session as well as automatically track Crew\nagents. For further info on how to outfit more complex agentic systems, check\nout the or join the .\n\n[Example of a Crew agent that generates job posts.](https://docs.crewai.com/how-\nto/<https:/github.com/joaomdmoura/crewAI-examples/tree/main/job-\nposting>)[Example of a Crew agent that validates Markdown\nfiles.](https://docs.crewai.com/how-to/<https:/github.com/joaomdmoura/crewAI-\nexamples/tree/main/markdown_validator>)[Example of a Crew agent that generates\nInstagram posts.](https://docs.crewai.com/how-\nto/<https:/github.com/joaomdmoura/crewAI-examples/tree/main/instagram_post>)\n\nTo get started, create an .\n\nFor feature requests or bug reports, please reach out to the AgentOps team on\nthe .\n\n---\n\n# Agent Monitoring with Langtrace\nURL: https://docs.crewai.com/how-to/langtrace-observability\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nLangtrace is an open-source, external tool that helps you set up observability\nand evaluations for Large Language Models (LLMs), LLM frameworks, and Vector\nDatabases. While not built directly into CrewAI, Langtrace can be used alongside\nCrewAI to gain deep visibility into the cost, latency, and performance of your\nCrewAI Agents. This integration allows you to log hyperparameters, monitor\nperformance regressions, and establish a process for continuous improvement of\nyour Agents.\n\nSet the project type to and generate an API key.\n\nInstall Langtrace in your CrewAI project\n\nImport and initialize Langtrace at the beginning of your script, before any\nCrewAI imports:\n\n```\n\n# Now import CrewAI modules\n\n```\n\n### Features and Their Application to CrewAI\n\n  1. **LLM Token and Cost Tracking**\n     * Monitor the token usage and associated costs for each CrewAI agent interaction.\n  2. **Trace Graph for Execution Steps**\n     * Visualize the execution flow of your CrewAI tasks, including latency and logs.\n     * Useful for identifying bottlenecks in your agent workflows.\n  3. **Dataset Curation with Manual Annotation**\n     * Create datasets from your CrewAI task outputs for future training or evaluation.\n  4.      * Keep track of different versions of prompts used in your CrewAI agents.\n     * Useful for A/B testing and optimizing agent performance.\n  5. **Prompt Playground with Model Comparisons**\n     * Test and compare different prompts and models for your CrewAI agents before deployment.\n  6.      * Set up automated tests for your CrewAI agents and tasks.\n\n  * [Features and Their Application to CrewAI](https://docs.crewai.com/how-to/<#features-and-their-application-to-crewai>)\n\n---\n\n# Agent Monitoring with OpenLIT\nURL: https://docs.crewai.com/how-to/openlit-observability\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nis an open-source tool that makes it simple to monitor the performance of AI\nagents, LLMs, VectorDBs, and GPUs with just line of code.\n\nIt provides OpenTelemetry-native tracing and metrics to track important\nparameters like cost, latency, interactions and task sequences. This setup\nenables you to track hyperparameters and monitor for performance issues, helping\nyou find ways to enhance and fine-tune your agents over time.\n\n  * : Monitor your Agents health and performance with detailed dashboards that track metrics, costs, and user interactions.\n  * : Vendor-neutral SDKs to send traces and metrics to your existing observability tools like Grafana, DataDog and more.\n  * **Cost Tracking for Custom and Fine-Tuned Models** : Tailor cost estimations for specific models using custom pricing files for precise budgeting.\n  * : Quickly spot and resolve issues by tracking common exceptions and errors with a monitoring dashboard.\n  * : Detect potential threats such as profanity and PII leaks.\n  * : Identify potential code injection and secret leaks.\n  * **API Keys and Secrets Management** : Securely handle your LLM API keys and secrets centrally, avoiding insecure practices.\n  * : Manage and version Agent prompts using PromptHub for consistent and easy access across Agents.\n  * Test and compare different models for your CrewAI agents before deployment.\n\nFrom the root directory of the , Run the below command:\n\nInitialize OpenLIT in Your Application\n\nAdd the following two lines to your application code:\n\nExample Usage for monitoring a CrewAI Agent:\n\n```\n\n  goal\"Conduct thorough research and analysis on AI and AI agents\"\n\n  backstory\"You're an expert researcher, specialized in technology, software\nengineering, AI, and startups. You work as a freelancer and are currently\nresearching for a new client.\"\n\n  description\"Generate a list of 5 interesting ideas for an article, then write\none captivating paragraph for each idea that showcases the potential of a full\narticle on this topic. Return the list of ideas with their paragraphs and your\nnotes.\"\n\n  expected_output\"5 bullet points, each with a paragraph and accompanying\nnotes.\"\n\n# Define the manager agent\n\n  goal\"Efficiently manage the crew and ensure high-quality task completion\"\n\n  backstory\"You're an experienced project manager, skilled in overseeing complex\nprojects and guiding teams to success. Your role is to coordinate the efforts of\nthe crew members, ensuring that each task is completed on time and to the\nhighest standard.\"\n\n# Instantiate your crew with a custom manager\n\n# Start the crew's work\n\n```\n\nRefer to OpenLIT for more advanced configurations and use cases.\n\nWith the Agent Observability data now being collected and sent to OpenLIT, the\nnext step is to visualize and analyze this data to get insights into your\nAgent‚Äôs performance, behavior, and identify areas of improvement.\n\nJust head over to OpenLIT at on your browser to start exploring. You can login\nusing the default credentials\n\n---\n\n# Portkey Observability and Guardrails\nURL: https://docs.crewai.com/how-to/portkey-observability\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/how-to/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/how-to/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/how-to/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nis a 2-line upgrade to make your CrewAI agents reliable, cost-efficient, and\nfast.\n\nPortkey adds 4 core production capabilities to any CrewAI agent:\n\n  1. Making each LLM call more robust\n  2. Full-stack tracing & cost, performance analytics\n  3. Real-time guardrails to enforce behavior\n\nTo build CrewAI Agents with Portkey, you‚Äôll need two keys:\n\n  * : Sign up on the and copy your API key\n  * : Virtual Keys securely manage your LLM API keys in one place. Store your LLM provider API keys securely in Portkey‚Äôs vault\n\n```\n\n  api_key # We are using Virtual key\n\n    virtual_key # Enter your Virtual key from Portkey\n\n```\n\nCreate and Run Your First Agent\n\n```\n\n# Define your agents with roles and goals\n\n  goal'Write clear, concise code on demand'\n\n  backstory'An expert coder with a keen eye for software trends.'\n\n# Create tasks for your agents\n\n  description\"Define the HTML for making a simple website with heading- Hello\nWorld! Portkey is working!\"\n\n  expected_output\"A clear and concise HTML code\"\n\n```\n\nAccess OpenAI, Anthropic, Gemini, Azure, and 250+ providers through a unified\ninterface  \n---  \nImplement retries, timeouts, load balancing, and fallbacks  \nTrack 40+ metrics including costs, tokens, latency, and custom metadata  \nDebug with detailed execution traces and function call logs  \nSet budget limits and implement role-based access control  \nCapture and analyze feedback for continuous improvement  \nReduce costs and latency with semantic or simple caching  \n## Production Features with Portkey Configs\n\nAll features mentioned below are through Portkey‚Äôs Config system. Portkey‚Äôs\nConfig system allows you to define routing strategies using simple JSON objects\nin your LLM API calls. You can create and manage Configs directly in your code\nor through the Portkey Dashboard. Each Config has a unique ID for easy\nreference.\n\nAccess various LLMs like Anthropic, Gemini, Mistral, Azure OpenAI, and more with\nminimal code changes. Switch between providers or use them together seamlessly.\n[Learn more about Universal API](https://docs.crewai.com/how-\nto/<https:/portkey.ai/docs/product/ai-gateway/universal-api>)\n\nEasily switch between different LLM providers:\n\n```\n\n    virtual_key #You don't need provider when using Virtual keys\n\n    virtual_key #You don't need provider when using Virtual keys\n\n```\n\nImprove response times and reduce costs with two powerful caching modes:\n\n  * : Perfect for exact matches\n  * : Matches responses for requests that are semantically similar \n\n```\n\n      # or \"simple\" for exact matching\n\n```\n\nPortkey provides comprehensive reliability features:\n\n  * : Handle temporary failures gracefully\n  * : Prevent hanging operations\n  * : Route requests based on specific conditions\n  * : Set up automatic provider failovers\n  * : Distribute requests efficiently\n\n[Learn more about Reliability Features](https://docs.crewai.com/how-\nto/<https:/portkey.ai/docs/product/ai-gateway/>)\n\nAgent runs are complex. Portkey automatically logs for your AI agents, including\ncost, tokens used, latency, etc. Whether you need a broad overview or granular\ninsights into your agent runs, Portkey‚Äôs customizable filters provide the\nmetrics you need.\n\nLogs are essential for understanding agent behavior, diagnosing issues, and\nimproving performance. They provide a detailed record of agent activities and\ntool use, which is crucial for debugging and optimizing processes.\n\nAccess a dedicated section to view records of agent executions, including\nparameters, outcomes, function calls, and errors. Filter logs based on multiple\nparameters such as trace ID, model, tokens used, and metadata.\n\n  * Set budget limit and rate limts per Virtual Key (disposable API keys)\n  * Track system changes with audit logs\n\nFor detailed information on creating and managing Configs, visit the .\n\n  * [Production Features with Portkey Configs](https://docs.crewai.com/how-to/<#production-features-with-portkey-configs>)\n\n---\n\n# Browserbase Web Loader\nURL: https://docs.crewai.com/tools/browserbaseloadtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nis a developer platform to reliably run, manage, and monitor headless browsers.\n\nPower your AI data retrievals with:\n\n  * providing reliable browsers to extract data from complex UIs\n  * with included fingerprinting tactics and automatic captcha solving\n  * to inspect your Browser Session with networks timeline and logs\n  * to quickly debug your automation\n\n  * Get an API key and Project ID from and set it in environment variables (, ).\n\nUtilize the BrowserbaseLoadTool as follows to allow your agent to load websites:\n\n```\n\n# Initialize the tool with the Browserbase API key and Project ID\n\n```\n\nThe following parameters can be used to customize the ‚Äôs behavior:\n\n. Browserbase API key. Default is env variable.  \n---  \n. Browserbase Project ID. Default is env variable.  \n. Retrieve only text content. Default is .  \n. Provide an existing Session ID.  \n. Enable/Disable Proxies. Default is .\n\n---\n\n# Code Docs RAG Search\nURL: https://docs.crewai.com/tools/codedocssearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n: We are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nThe CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool\ndesigned for semantic searches within code documentation. It enables users to\nefficiently find specific information or topics within code documentation. By\nproviding a during initialization, the tool narrows down the search to that\nparticular documentation site. Alternatively, without a specific , it searches\nacross a wide array of code documentation known or discovered throughout its\nexecution, making it versatile for various documentation search needs.\n\nTo start using the CodeDocsSearchTool, first, install the crewai_tools package\nvia pip:\n\nUtilize the CodeDocsSearchTool as follows to conduct searches within code\ndocumentation:\n\n```\n\n# To search any code documentation content\n\n# if the URL is known or discovered during its execution:\n\n# To specifically focus your search on a given documentation site\n\n# by providing its URL:\n\n```\n\nSubstitute ‚Äò‚Äô with your target documentation URL and ‚ÄòHow to use search tool‚Äô\nwith the search query relevant to your needs.\n\nThe following parameters can be used to customize the ‚Äôs behavior:\n\n. Specifies the URL of the code documentation to be searched.  \n---  \nBy default, the tool uses OpenAI for both embeddings and summarization. To\ncustomize the model, you can use a config dictionary as follows:\n\n```\n\n      provider # or google, openai, anthropic, llama2, ...\n\n      provider # or openai, ollama, ...\n\n```\n\n---\n\n# Code Interpreter\nURL: https://docs.crewai.com/tools/codeinterpretertool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThis tool enables the Agent to execute Python 3 code that it has generated\nautonomously. The code is run in a secure, isolated environment, ensuring safety\nregardless of the content.\n\nThis functionality is particularly valuable as it allows the Agent to create\ncode, execute it within the same ecosystem, obtain the results, and utilize that\ninformation to inform subsequent decisions and actions.\n\nRemember that when using this tool, the code must be generated by the Agent\nitself. The code must be a Python3 code. And it will take some time for the\nfirst time to run because it needs to build the Docker image.\n\nWe also provide a simple way to use it directly from the Agent.\n\n---\n\n# Composio Tool\nURL: https://docs.crewai.com/tools/composiotool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThis tools is a wrapper around the composio set of tools and gives your agent\naccess to a wide variety of tools from the Composio SDK.\n\nTo incorporate this tool into your project, follow the installation instructions\nbelow:\n\nafter the installation is complete, either run or export your composio API key\nas .\n\nThe following example demonstrates how to initialize the tool and execute a\ngithub action:\n\nIf you don‚Äôt know what action you want to use, use and filter to get relevant\nactions\n\nor use to search relevant actions\n\n```\n\n  goal\"You take action on Github using Github APIs\"\n\n    \"You are AI agent that is responsible for taking actions on Github \"\n    \"on users behalf. You need to take action on Github using Github APIs\"\n\n```\n\n```\n\n  description\"Star a repo ComposioHQ/composio on GitHub\"\n\n```\n\n  * More detailed list of tools can be found\n\n---\n\n# CSV RAG Search\nURL: https://docs.crewai.com/tools/csvsearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n: We are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nThis tool is used to perform a RAG (Retrieval-Augmented Generation) search\nwithin a CSV file‚Äôs content. It allows users to semantically search for queries\nin the content of a specified CSV file. This feature is particularly useful for\nextracting information from large CSV datasets where traditional search methods\nmight be inefficient. All tools with ‚ÄúSearch‚Äù in their name, including\nCSVSearchTool, are RAG tools designed for searching different sources of data.\n\n```\n\n# Initialize the tool with a specific CSV file.\n\n# This setup allows the agent to only search the given CSV file.\n\n# Initialize the tool without a specific CSV file.\n\n# Agent will need to provide the CSV path at runtime.\n\n```\n\nThe following parameters can be used to customize the ‚Äôs behavior:\n\n. The path to the CSV file you want to search. This is a mandatory argument if\nthe tool was initialized without a specific CSV file; otherwise, it is optional.  \n---  \nBy default, the tool uses OpenAI for both embeddings and summarization. To\ncustomize the model, you can use a config dictionary as follows:\n\n```\n\n      provider # or google, openai, anthropic, llama2, ...\n\n      provider # or openai, ollama, ...\n\n```\n\n---\n\n# DALL-E Tool\nURL: https://docs.crewai.com/tools/dalletool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThis tool is used to give the Agent the ability to generate images using the\nDALL-E model. It is a transformer-based model that generates images from textual\ndescriptions. This tool allows the Agent to generate images based on the text\ninput provided by the user.\n\nRemember that when using this tool, the text must be generated by the Agent\nitself. The text must be a description of the image you want to generate.\n\nIf needed you can also tweak the parameters of the DALL-E model by passing them\nas arguments to the class. For example:\n\nThe parameters are based on the method from the OpenAI API. For more information\non the parameters, please refer to the .\n\n---\n\n# Directory RAG Search\nURL: https://docs.crewai.com/tools/directorysearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n: The DirectorySearchTool is under continuous development. Features and\nfunctionalities might evolve, and unexpected behavior may occur as we refine the\ntool.\n\nThe DirectorySearchTool enables semantic search within the content of specified\ndirectories, leveraging the Retrieval-Augmented Generation (RAG) methodology for\nefficient navigation through files. Designed for flexibility, it allows users to\ndynamically specify search directories at runtime or set a fixed directory\nduring initial setup.\n\nTo use the DirectorySearchTool, begin by installing the crewai_tools package.\nExecute the following command in your terminal:\n\nImport the DirectorySearchTool from the package to start. You can initialize the\ntool without specifying a directory, enabling the setting of the search\ndirectory at runtime. Alternatively, the tool can be initialized with a\npredefined directory.\n\n```\n\n# For dynamic directory specification at runtime\n\n# For fixed directory searches\n\n```\n\n  * : A string argument that specifies the search directory. This is optional during initialization but required for searches if not set initially.\n\nThe DirectorySearchTool uses OpenAI for embeddings and summarization by default.\nCustomization options for these settings include changing the model provider and\nconfiguration, enhancing flexibility for advanced users.\n\n```\n\n      provider # Options include ollama, google, anthropic, llama2, and more\n\n      provider # or openai, ollama, ...\n\n```\n\n---\n\n# Directory Read\nURL: https://docs.crewai.com/tools/directoryreadtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nWe are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nThe DirectoryReadTool is a powerful utility designed to provide a comprehensive\nlisting of directory contents. It can recursively navigate through the specified\ndirectory, offering users a detailed enumeration of all files, including those\nwithin subdirectories. This tool is crucial for tasks that require a thorough\ninventory of directory structures or for validating the organization of files\nwithin directories.\n\nTo utilize the DirectoryReadTool in your project, install the package. If this\npackage is not yet part of your environment, you can install it using pip with\nthe command below:\n\nThis command installs the latest version of the package, granting access to the\nDirectoryReadTool among other utilities.\n\nEmploying the DirectoryReadTool is straightforward. The following code snippet\ndemonstrates how to set it up and use the tool to list the contents of a\nspecified directory:\n\n```\n\n# Initialize the tool so the agent can read any directory's content\n\n# it learns about during execution\n\n# Initialize the tool with a specific directory,\n\n# so the agent can only read the content of the specified directory\n\n```\n\nThe following parameters can be used to customize the ‚Äôs behavior:\n\n. An argument that specifies the path to the directory whose contents you wish\nto list. It accepts both absolute and relative paths, guiding the tool to the\ndesired directory for content listing.  \n---\n\n---\n\n# DOCX RAG Search\nURL: https://docs.crewai.com/tools/docxsearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nWe are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nThe is a RAG tool designed for semantic searching within DOCX documents. It\nenables users to effectively search and extract relevant information from DOCX\nfiles using query-based searches. This tool is invaluable for data analysis,\ninformation management, and research tasks, streamlining the process of finding\nspecific information within large document collections.\n\nInstall the crewai_tools package by running the following command in your\nterminal:\n\nThe following example demonstrates initializing the DOCXSearchTool to search\nwithin any DOCX file‚Äôs content or with a specific DOCX file path.\n\n```\n\n# Initialize the tool to search within any DOCX file's content\n\n# Initialize the tool with a specific DOCX file,\n\n# so the agent can only search the content of the specified DOCX file\n\n```\n\nThe following parameters can be used to customize the ‚Äôs behavior:\n\n. An argument that specifies the path to the DOCX file you want to search. If\nnot provided during initialization, the tool allows for later specification of\nany DOCX file‚Äôs content path for searching.  \n---  \nBy default, the tool uses OpenAI for both embeddings and summarization. To\ncustomize the model, you can use a config dictionary as follows:\n\n```\n\n      provider # or google, openai, anthropic, llama2, ...\n\n      provider # or openai, ollama, ...\n\n```\n\n---\n\n# EXA Search Web Loader\nURL: https://docs.crewai.com/tools/exasearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThe EXASearchTool is designed to perform a semantic search for a specified query\nfrom a text‚Äôs content across the internet. It utilizes the API to fetch and\ndisplay the most relevant search results based on the query provided by the\nuser.\n\nTo incorporate this tool into your project, follow the installation instructions\nbelow:\n\nThe following example demonstrates how to initialize the tool and execute a\nsearch with a given query:\n\n```\n\n# Initialize the tool for internet searching capabilities\n\n```\n\nTo effectively use the EXASearchTool, follow these steps:\n\nConfirm that the package is installed in your Python environment.\n\nAcquire a API key by registering for a free account at .\n\nStore your obtained API key in an environment variable named to facilitate its\nuse by the tool.\n\nBy integrating the into Python projects, users gain the ability to conduct real-\ntime, relevant searches across the internet directly from their applications. By\nadhering to the setup and usage guidelines provided, incorporating this tool\ninto projects is streamlined and straightforward.\n\n---\n\n# File Read\nURL: https://docs.crewai.com/tools/filereadtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nWe are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nThe FileReadTool conceptually represents a suite of functionalities within the\ncrewai_tools package aimed at facilitating file reading and content retrieval.\nThis suite includes tools for processing batch text files, reading runtime\nconfiguration files, and importing data for analytics. It supports a variety of\ntext-based file formats such as , , , and more. Depending on the file type, the\nsuite offers specialized functionality, such as converting JSON content into a\nPython dictionary for ease of use.\n\nTo utilize the functionalities previously attributed to the FileReadTool,\ninstall the crewai_tools package:\n\nTo get started with the FileReadTool:\n\n```\n\n# Initialize the tool to read any files the agents knows or lean the path for\n\n# Initialize the tool with a specific file path, so the agent can only read the\ncontent of the specified file\n\n```\n\n  * : The path to the file you want to read. It accepts both absolute and relative paths. Ensure the file exists and you have the necessary permissions to access it.\n\n---\n\n# File Write\nURL: https://docs.crewai.com/tools/filewritetool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThe is a component of the crewai_tools package, designed to simplify the process\nof writing content to files. It is particularly useful in scenarios such as\ngenerating reports, saving logs, creating configuration files, and more. This\ntool supports creating new directories if they don‚Äôt exist, making it easier to\norganize your output.\n\nInstall the crewai_tools package to use the in your projects:\n\nTo get started with the :\n\n```\n\n# Write content to a file in a specified directory\n\nresult  file_writer_tool_run 'This is a test content.'\n\n```\n\n  * : The name of the file you want to create or overwrite.\n  * : The content to write into the file.\n  * (optional): The path to the directory where the file will be created. Defaults to the current directory (). If the directory does not exist, it will be created.\n\nBy integrating the into your crews, the agents can execute the process of\nwriting content to files and creating directories. This tool is essential for\ntasks that require saving output data, creating structured file systems, and\nmore. By adhering to the setup and usage guidelines provided, incorporating this\ntool into projects is straightforward and efficient.\n\n---\n\n# Firecrawl Crawl Website\nURL: https://docs.crewai.com/tools/firecrawlcrawlwebsitetool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nis a platform for crawling and convert any website into clean markdown or\nstructured data.\n\n  * Get an API key from and set it in environment variables ().\n\nUtilize the FirecrawlScrapeFromWebsiteTool as follows to allow your agent to\nload websites:\n\n  * : Optional. Specifies Firecrawl API key. Defaults is the environment variable.\n  * : The base URL to start crawling from.\n  * : Optional. \n    * : Optional. Only return the main content of the page excluding headers, navs, footers, etc.\n    * : Optional. Include the raw HTML content of the page. Will output a html key in the response.\n  * : Optional. Options for controlling the crawling behavior. \n    * : Optional. URL patterns to include in the crawl.\n    * : Optional. URL patterns to exclude from the crawl.\n    * : Optional. Generate alt text for images using LLMs (requires a paid plan).\n    * : Optional. If true, returns only the URLs as a list in the crawl status. Note: the response will be a list of URLs inside the data, not a list of documents.\n    * : Optional. Maximum depth to crawl. Depth 1 is the base URL, depth 2 includes the base URL and its direct children, and so on.\n    * : Optional. The crawling mode to use. Fast mode crawls 4x faster on websites without a sitemap but may not be as accurate and shouldn‚Äôt be used on heavily JavaScript-rendered websites.\n    * : Optional. Maximum number of pages to crawl.\n    * : Optional. Timeout in milliseconds for the crawling operation.\n\n---\n\n# Firecrawl Scrape Website\nURL: https://docs.crewai.com/tools/firecrawlscrapewebsitetool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nis a platform for crawling and convert any website into clean markdown or\nstructured data.\n\n  * Get an API key from and set it in environment variables ().\n\nUtilize the FirecrawlScrapeWebsiteTool as follows to allow your agent to load\nwebsites:\n\n  * : Optional. Specifies Firecrawl API key. Defaults is the environment variable.\n  * : The URL to scrape.\n  * : Optional. \n    * : Optional. Only return the main content of the page excluding headers, navs, footers, etc.\n    * : Optional. Include the raw HTML content of the page. Will output a html key in the response.\n  * : Optional. Options for LLM-based extraction of structured information from the page content \n    * : The extraction mode to use, currently supports ‚Äòllm-extraction‚Äô\n    * : Optional. A prompt describing what information to extract from the page\n    * : Optional. The schema for the data to be extracted\n  * : Optional. Timeout in milliseconds for the request\n\n---\n\n# Firecrawl Search\nURL: https://docs.crewai.com/tools/firecrawlsearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nis a platform for crawling and convert any website into clean markdown or\nstructured data.\n\n  * Get an API key from and set it in environment variables ().\n\nUtilize the FirecrawlSearchTool as follows to allow your agent to load websites:\n\n  * : Optional. Specifies Firecrawl API key. Defaults is the environment variable.\n  * : The search query string to be used for searching.\n  * : Optional. Options for result formatting. \n    * : Optional. Only return the main content of the page excluding headers, navs, footers, etc.\n    * : Optional. Include the raw HTML content of the page. Will output a html key in the response.\n    * : Optional. Fetch the full content of the page.\n  * : Optional. Options for controlling the crawling behavior. \n    * : Optional. Maximum number of pages to crawl.\n\n---\n\n# Github Search\nURL: https://docs.crewai.com/tools/githubsearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nWe are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nThe GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically\ndesigned for conducting semantic searches within GitHub repositories. Utilizing\nadvanced semantic search capabilities, it sifts through code, pull requests,\nissues, and repositories, making it an essential tool for developers,\nresearchers, or anyone in need of precise information from GitHub.\n\nTo use the GithubSearchTool, first ensure the crewai_tools package is installed\nin your Python environment:\n\nThis command installs the necessary package to run the GithubSearchTool along\nwith any other tools included in the crewai_tools package.\n\nHere‚Äôs how you can use the GithubSearchTool to perform semantic searches within\na GitHub repository:\n\n```\n\n# Initialize the tool for semantic searches within a specific GitHub repository\n\n\tcontent_types  # Options: code, repo, pr, issue\n\n# Initialize the tool for semantic searches within a specific GitHub repository,\nso the agent can search any repository if it learns about during its execution\n\n\tcontent_types  # Options: code, repo, pr, issue\n\n```\n\n  * : The URL of the GitHub repository where the search will be conducted. This is a mandatory field and specifies the target repository for your search.\n  * : Your GitHub Personal Access Token (PAT) required for authentication. You can create one in your GitHub account settings under Developer Settings > Personal Access Tokens.\n  * : Specifies the types of content to include in your search. You must provide a list of content types from the following options: for searching within the code, for searching within the repository‚Äôs general information, for searching within pull requests, and for searching within issues. This field is mandatory and allows tailoring the search to specific content types within the GitHub repository.\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To\ncustomize the model, you can use a config dictionary as follows:\n\n```\n\n      provider # or google, openai, anthropic, llama2, ...\n\n      provider # or openai, ollama, ...\n\n```\n\n---\n\n# Google Serper Search\nURL: https://docs.crewai.com/tools/serperdevtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nWe are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nThis tool is designed to perform a semantic search for a specified query from a\ntext‚Äôs content across the internet. It utilizes the API to fetch and display the\nmost relevant search results based on the query provided by the user.\n\nTo incorporate this tool into your project, follow the installation instructions\nbelow:\n\nThe following example demonstrates how to initialize the tool and execute a\nsearch with a given query:\n\n```\n\n# Initialize the tool for internet searching capabilities\n\n```\n\nTo effectively use the , follow these steps:\n\n  1. : Confirm that the package is installed in your Python environment.\n  2. : Acquire a API key by registering for a free account at .\n  3. : Store your obtained API key in an environment variable named to facilitate its use by the tool.\n\nThe comes with several parameters that will be passed to the API :\n\n  * : The URL endpoint for the search API. (Default is )\n  * : Optional. Specify the country for the search results.\n  * : Optional. Specify the location for the search results.\n  * : Optional. Specify the locale for the search results.\n  * : Number of search results to return. Default is .\n\nThe values for , , and can be found on the .\n\nHere is an example demonstrating how to use the tool with additional parameters:\n\n```\n\n# Using Tool: Search the internet\n\n# Search results: Title: Role of chat gpt in public health\n\n# Snippet: ‚Ä¶ ChatGPT in public health. In this overview, we will examine the\npotential uses of ChatGPT in\n\n# Title: Potential use of chat gpt in global warming\n\n# Snippet: ‚Ä¶ as ChatGPT, have the potential to play a critical role in advancing\nour understanding of climate\n\n```\n\n```\n\n# Using Tool: Search the internet\n\n# Search results: Title: Jeux Olympiques de Paris 2024 - Actualit√©s,\ncalendriers, r√©sultats\n\n# Snippet: Quels sont les sports pr√©sents aux Jeux Olympiques de Paris 2024 ? ¬∑\nAthl√©tisme ¬∑ Aviron ¬∑ Badminton ¬∑ Basketball ¬∑ Basketball 3x3 ¬∑ Boxe ¬∑ Breaking\n¬∑ Cano√´ ...\n\n# Title: Billetterie Officielle de Paris 2024 - Jeux Olympiques et Paralympiques\n\n# Snippet: Achetez vos billets exclusivement sur le site officiel de la\nbilletterie de Paris 2024 pour participer au plus grand √©v√©nement sportif au\nmonde.\n\n```\n\nBy integrating the into Python projects, users gain the ability to conduct real-\ntime, relevant searches across the internet directly from their applications.\nThe updated parameters allow for more customized and localized search results.\nBy adhering to the setup and usage guidelines provided, incorporating this tool\ninto projects is streamlined and straightforward.\n\n---\n\n# JSON RAG Search\nURL: https://docs.crewai.com/tools/jsonsearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThe JSONSearchTool is currently in an experimental phase. This means the tool is\nunder active development, and users might encounter unexpected behavior or\nchanges. We highly encourage feedback on any issues or suggestions for\nimprovements.\n\nThe JSONSearchTool is designed to facilitate efficient and precise searches\nwithin JSON file contents. It utilizes a RAG (Retrieve and Generate) search\nmechanism, allowing users to specify a JSON path for targeted searches within a\nparticular JSON file. This capability significantly improves the accuracy and\nrelevance of search results.\n\nTo install the JSONSearchTool, use the following pip command:\n\nHere are updated examples on how to utilize the JSONSearchTool effectively for\nsearching within JSON files. These examples take into account the current\nimplementation and usage patterns identified in the codebase.\n\n```\n\n# General JSON content search\n\n# This approach is suitable when the JSON path is either known beforehand or can\nbe dynamically identified.\n\n# Restricting search to a specific JSON file\n\n# Use this initialization method when you want to limit the search scope to a\nspecific JSON file.\n\n```\n\n  * (str, optional): Specifies the path to the JSON file to be searched. This argument is not required if the tool is initialized for a general search. When provided, it confines the search to the specified JSON file.\n\nThe JSONSearchTool supports extensive customization through a configuration\ndictionary. This allows users to select different models for embeddings and\nsummarization based on their requirements.\n\n```\n\n        # Other options include google, openai, anthropic, llama2, etc.\n\n        # Additional optional configurations can be specified here.\n\n        # or openai, ollama, ...\n\n        # Further customization options can be added here.\n\n```\n\n---\n\n# MDX RAG Search\nURL: https://docs.crewai.com/tools/mdxsearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThe MDXSearchTool is in continuous development. Features may be added or\nremoved, and functionality could change unpredictably as we refine the tool.\n\nThe MDX Search Tool is a component of the package aimed at facilitating advanced\nmarkdown language extraction. It enables users to effectively search and extract\nrelevant information from MD files using query-based searches. This tool is\ninvaluable for data analysis, information management, and research tasks,\nstreamlining the process of finding specific information within large document\ncollections.\n\nBefore using the MDX Search Tool, ensure the package is installed. If it is not,\nyou can install it with the following command:\n\nTo use the MDX Search Tool, you must first set up the necessary environment\nvariables. Then, integrate the tool into your crewAI project to begin your\nmarket research. Below is a basic example of how to do this:\n\n```\n\n# Initialize the tool to search any MDX content it learns about during execution\n\n# Initialize the tool with a specific MDX file path for an exclusive search\nwithin that document\n\n```\n\n  * mdx: . Specifies the MDX file path for the search. It can be provided during initialization.\n\n## Customization of Model and Embeddings\n\nThe tool defaults to using OpenAI for embeddings and summarization. For\ncustomization, utilize a configuration dictionary as shown below:\n\n```\n\n      provider # Options include google, openai, anthropic, llama2, etc.\n\n        # Optional parameters can be included here.\n\n      provider # or openai, ollama, ...\n\n        # Optional title for the embeddings can be added here.\n\n```\n\n  * [Customization of Model and Embeddings](https://docs.crewai.com/tools/<#customization-of-model-and-embeddings>)\n\n---\n\n# MySQL RAG Search\nURL: https://docs.crewai.com/tools/mysqltool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThis tool is designed to facilitate semantic searches within MySQL database\ntables. Leveraging the RAG (Retrieve and Generate) technology, the\nMySQLSearchTool provides users with an efficient means of querying database\ntable content, specifically tailored for MySQL databases. It simplifies the\nprocess of finding relevant data through semantic search queries, making it an\ninvaluable resource for users needing to perform advanced queries on extensive\ndatasets within a MySQL database.\n\nTo install the package and utilize the MySQLSearchTool, execute the following\ncommand in your terminal:\n\nBelow is an example showcasing how to use the MySQLSearchTool to conduct a\nsemantic search on a table within a MySQL database:\n\n```\n\n# Initialize the tool with the database URI and the target table name\n\n```\n\nThe MySQLSearchTool requires the following arguments for its operation:\n\n  * : A string representing the URI of the MySQL database to be queried. This argument is mandatory and must include the necessary authentication details and the location of the database.\n  * : A string specifying the name of the table within the database on which the semantic search will be performed. This argument is mandatory.\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To\ncustomize the model, you can use a config dictionary as follows:\n\n```\n\n      provider # or google, openai, anthropic, llama2, ...\n\n```\n\n---\n\n# NL2SQL Tool\nURL: https://docs.crewai.com/tools/nl2sqltool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThis tool is used to convert natural language to SQL queries. When passsed to\nthe agent it will generate queries and then use them to interact with the\ndatabase.\n\nThis enables multiple workflows like having an Agent to access the database\nfetch information based on the goal and then use the information to generate a\nresponse, report or any other output. Along with that proivdes the ability for\nthe Agent to update the database based on its goal.\n\n: Make sure that the Agent has access to a Read-Replica or that is okay for the\nAgent to run insert/update queries on the database.\n\n  * Any DB compatible library (e.g. psycopg2, mysql-connector-python)\n\nIn order to use the NL2SQLTool, you need to pass the database URI to the tool.\nThe URI should be in the format .\n\n```\n\n# psycopg2 was installed to run this example with PostgreSQL\n\n```\n\nThe primary task goal was:\n\n‚ÄúRetrieve the average, maximum, and minimum monthly revenue for each city, but\nonly include cities that have more than one user. Also, count the number of user\nin each city and sort the results by the average monthly revenue in descending\norder‚Äù\n\nSo the Agent tried to get information from the DB, the first one is wrong so the\nAgent tries again and gets the correct information and passes to the next agent.\n\nThe second task goal was:\n\n‚ÄúReview the data and create a detailed report, and then create the table on the\ndatabase with the fields based on the data provided. Include information on the\naverage, maximum, and minimum monthly revenue for each city, but only include\ncities that have more than one user. Also, count the number of users in each\ncity and sort the results by the average monthly revenue in descending order.‚Äù\n\nNow things start to get interesting, the Agent generates the SQL query to not\nonly create the table but also insert the data into the table. And in the end\nthe Agent still returns the final report which is exactly what was in the\ndatabase.\n\nThis is a simple example of how the NL2SQLTool can be used to interact with the\ndatabase and generate reports based on the data in the database.\n\nThe Tool provides endless possibilities on the logic of the Agent and how it can\ninteract with the database.\n\n```\n\n DB -> Agent -> ... -> Agent -> DB\n\n```\n\n---\n\n# PDF RAG Search\nURL: https://docs.crewai.com/tools/pdfsearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nWe are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nThe PDFSearchTool is a RAG tool designed for semantic searches within PDF\ncontent. It allows for inputting a search query and a PDF document, leveraging\nadvanced search techniques to find relevant content efficiently. This capability\nmakes it especially useful for extracting specific information from large PDF\nfiles quickly.\n\nTo get started with the PDFSearchTool, first, ensure the crewai_tools package is\ninstalled with the following command:\n\nHere‚Äôs how to use the PDFSearchTool to search within a PDF document:\n\n```\n\n# Initialize the tool allowing for any PDF content search if the path is\nprovided during execution\n\n# Initialize the tool with a specific PDF path for exclusive search within that\ndocument\n\n```\n\n  * : The PDF path for the search. Can be provided at initialization or within the method‚Äôs arguments. If provided at initialization, the tool confines its search to the specified document.\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To\ncustomize the model, you can use a config dictionary as follows:\n\n```\n\n      provider # or google, openai, anthropic, llama2, ...\n\n      provider # or openai, ollama, ...\n\n```\n\n---\n\n# PG RAG Search\nURL: https://docs.crewai.com/tools/pgsearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThe PGSearchTool is currently under development. This document outlines the\nintended functionality and interface. As development progresses, please be aware\nthat some features may not be available or could change.\n\nThe PGSearchTool is envisioned as a powerful tool for facilitating semantic\nsearches within PostgreSQL database tables. By leveraging advanced Retrieve and\nGenerate (RAG) technology, it aims to provide an efficient means for querying\ndatabase table content, specifically tailored for PostgreSQL databases. The\ntool‚Äôs goal is to simplify the process of finding relevant data through semantic\nsearch queries, offering a valuable resource for users needing to conduct\nadvanced queries on extensive datasets within a PostgreSQL environment.\n\nThe package, which will include the PGSearchTool upon its release, can be\ninstalled using the following command:\n\nThe PGSearchTool is not yet available in the current version of the package.\nThis installation command will be updated once the tool is released.\n\nBelow is a proposed example showcasing how to use the PGSearchTool for\nconducting a semantic search on a table within a PostgreSQL database:\n\n```\n\n# Initialize the tool with the database URI and the target table name\n\n```\n\nThe PGSearchTool is designed to require the following arguments for its\noperation:\n\n. A string representing the URI of the PostgreSQL database to be queried. This\nargument will be mandatory and must include the necessary authentication details\nand the location of the database.  \n---  \n. A string specifying the name of the table within the database on which the\nsemantic search will be performed. This argument will also be mandatory.  \nThe tool intends to use OpenAI for both embeddings and summarization by default.\nUsers will have the option to customize the model using a config dictionary as\nfollows:\n\n```\n\n      provider # or google, openai, anthropic, llama2, ...\n\n      provider # or openai, ollama, ...\n\n```\n\n---\n\n# Scrape Website\nURL: https://docs.crewai.com/tools/scrapewebsitetool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nWe are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nA tool designed to extract and read the content of a specified website. It is\ncapable of handling various types of web pages by making HTTP requests and\nparsing the received HTML content. This tool can be particularly useful for web\nscraping tasks, data collection, or extracting specific information from\nwebsites.\n\n```\n\n# To enable scrapping any website it finds during it's execution\n\n# Initialize the tool with the website URL,\n\n# so the agent can only scrap the content of the specified website\n\n# Extract the text from the site\n\n```\n\nwebsite URL to read the file. This is the primary input for the tool, specifying\nwhich website‚Äôs content should be scraped and read.  \n---\n\n---\n\n# Selenium Scraper\nURL: https://docs.crewai.com/tools/seleniumscrapingtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThis tool is currently in development. As we refine its capabilities, users may\nencounter unexpected behavior. Your feedback is invaluable to us for making\nimprovements.\n\nThe SeleniumScrapingTool is crafted for high-efficiency web scraping tasks. It\nallows for precise extraction of content from web pages by using CSS selectors\nto target specific elements. Its design caters to a wide range of scraping\nneeds, offering flexibility to work with any provided website URL.\n\nTo get started with the SeleniumScrapingTool, install the crewai_tools package\nusing pip:\n\nBelow are some scenarios where the SeleniumScrapingTool can be utilized:\n\n```\n\n# Initialize the tool without any parameters to scrape\n\n# the current page it navigates to\n\n# Scrape the entire webpage of a given URL\n\n# Target and scrape a specific CSS element from a webpage\n\n# Perform scraping with additional parameters for a customized experience\n\n```\n\nThe following parameters can be used to customize the SeleniumScrapingTool‚Äôs\nscraping process:\n\n. Specifies the URL of the website from which content is to be scraped.  \n---  \n. The CSS selector for a specific element to target on the website, enabling\nfocused scraping of a particular part of a webpage.  \n. A dictionary containing cookie information, useful for simulating a logged-in\nsession to access restricted content.  \n. Specifies the delay (in seconds) before scraping, allowing the website and any\ndynamic content to fully load.  \nSince the is under active development, the parameters and functionality may\nevolve over time. Users are encouraged to keep the tool updated and report any\nissues or suggestions for enhancements.\n\n---\n\n# Spider Scraper\nURL: https://docs.crewai.com/tools/spidertool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nis the open source scraper and crawler that returns LLM-ready data. It converts\nany website into pure HTML, markdown, metadata or text while enabling you to\ncrawl with custom actions using AI.\n\nTo use the you need to download the and the SDK too:\n\nThis example shows you how you can use the to enable your agent to scrape and\ncrawl websites. The data returned from the Spider API is already LLM-ready, so\nno need to do any cleaning there.\n\n```\n\n    goal\"Find related information from specific URL's\"\n    backstory\"An expert web researcher that uses the web extremely well\"\n\n    description\"Scrape https://spider.cloud with a limit of 1 and enable metadata\"\n    expected_output\"Metadata and 10 word summary of spider.cloud\"\n\n```\n\nSpecifies Spider API key. If not specified, it looks for in environment\nvariables.  \n---  \nOptional parameters for the request. Defaults to to optimize content for LLMs.  \nType of request to perform (, , ). defaults to HTTP, switching to JavaScript\nrendering if needed.  \nMax pages to crawl per website. Set to or omit for unlimited.  \nMax crawl depth. Set to for no limit.  \nEnables HTTP caching to speed up repeated runs. Default is .  \nSets path-based limits for crawled pages, e.g., for root page only.  \nLocale for the request, e.g., .  \nHTTP cookies for the request.  \nEnables stealth mode for Chrome requests to avoid detection. Default is .  \nHTTP headers as a map of key-value pairs for all requests.  \nStores metadata about pages and content, aiding AI interoperability. Defaults to\n.  \nSets Chrome viewport dimensions. Default is .  \nIncludes subdomains in the crawl. Default is .  \nCustom HTTP user agent. Defaults to a random agent.  \nEnables data storage for the request. Overrides when set. Default is .  \nAllows AI to generate crawl actions, with optional chaining steps via an array\nfor .  \nEnables advanced fingerprinting for Chrome.  \nPrevents all data storage, including AI embeddings. Default is .  \nPre-processes content for reading via . Improves content for LLMs.  \nFormat to return data: , , , . Use for default page format.  \nEnables high-performance proxies to avoid network-level blocking.  \nCSS query selector for content extraction from markup.  \nDownloads all resources linked to the website.  \nTimeout in seconds for requests (5-60). Default is .  \nRuns the request in the background, useful for data storage and triggering\ndashboard crawls. No effect if is set.\n\n---\n\n# TXT RAG Search\nURL: https://docs.crewai.com/tools/txtsearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nWe are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nThis tool is used to perform a RAG (Retrieval-Augmented Generation) search\nwithin the content of a text file. It allows for semantic searching of a query\nwithin a specified text file‚Äôs content, making it an invaluable resource for\nquickly extracting information or finding specific sections of text based on the\nquery provided.\n\nTo use the , you first need to install the package. This can be done using pip,\na package manager for Python. Open your terminal or command prompt and enter the\nfollowing command:\n\nThis command will download and install the TXTSearchTool along with any\nnecessary dependencies.\n\nThe following example demonstrates how to use the TXTSearchTool to search within\na text file. This example shows both the initialization of the tool with a\nspecific text file and the subsequent search within that file‚Äôs content.\n\n```\n\n# Initialize the tool to search within any text file's content\n\n# the agent learns about during its execution\n\n# Initialize the tool with a specific text file,\n\n# so the agent can search within the given text file's content\n\n```\n\n  * (str): . The path to the text file you want to search. This argument is only required if the tool was not initialized with a specific text file; otherwise, the search will be conducted within the initially provided text file.\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To\ncustomize the model, you can use a config dictionary as follows:\n\n```\n\n      provider # or google, openai, anthropic, llama2, ...\n\n      provider # or openai, ollama, ...\n\n```\n\n---\n\n# Vision Tool\nURL: https://docs.crewai.com/tools/visiontool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThis tool is used to extract text from images. When passed to the agent it will\nextract the text from the image and then use it to generate a response, report\nor any other output. The URL or the PATH of the image should be passed to the\nAgent.\n\nIn order to use the VisionTool, the OpenAI API key should be set in the\nenvironment variable .\n\n```\n\n  This agent uses the VisionTool to extract text  images\n\n```\n\nThe VisionTool requires the following arguments:\n\n. The path to the image file from which text needs to be extracted.  \n---\n\n---\n\n# Website RAG Search\nURL: https://docs.crewai.com/tools/websitesearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nThe WebsiteSearchTool is currently in an experimental phase. We are actively\nworking on incorporating this tool into our suite of offerings and will update\nthe documentation accordingly.\n\nThe WebsiteSearchTool is designed as a concept for conducting semantic searches\nwithin the content of websites. It aims to leverage advanced machine learning\nmodels like Retrieval-Augmented Generation (RAG) to navigate and extract\ninformation from specified URLs efficiently. This tool intends to offer\nflexibility, allowing users to perform searches across any website or focus on\nspecific websites of interest. Please note, the current implementation details\nof the WebsiteSearchTool are under development, and its functionalities as\ndescribed may not yet be accessible.\n\nTo prepare your environment for when the WebsiteSearchTool becomes available,\nyou can install the foundational package with:\n\nThis command installs the necessary dependencies to ensure that once the tool is\nfully integrated, users can start using it immediately.\n\nBelow are examples of how the WebsiteSearchTool could be utilized in different\nscenarios. Please note, these examples are illustrative and represent planned\nfunctionality:\n\n```\n\n# Example of initiating tool that agents can use\n\n# to search across any discovered websites\n\n# Example of limiting the search to the content of a specific website,\n\n# so now agents can only search within that website\n\n```\n\n  * : An optional argument intended to specify the website URL for focused searches. This argument is designed to enhance the tool‚Äôs flexibility by allowing targeted searches when necessary.\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To\ncustomize the model, you can use a config dictionary as follows:\n\n```\n\n      provider # or google, openai, anthropic, llama2, ...\n\n      provider # or openai, ollama, ...\n\n```\n\n---\n\n# XML RAG Search\nURL: https://docs.crewai.com/tools/xmlsearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nWe are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nThe XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic\nsearches within XML files. Ideal for users needing to parse and extract\ninformation from XML content efficiently, this tool supports inputting a search\nquery and an optional XML file path. By specifying an XML path, users can target\ntheir search more precisely to the content of that file, thereby obtaining more\nrelevant search outcomes.\n\nTo start using the XMLSearchTool, you must first install the crewai_tools\npackage. This can be easily done with the following command:\n\nHere are two examples demonstrating how to use the XMLSearchTool. The first\nexample shows searching within a specific XML file, while the second example\nillustrates initiating a search without predefining an XML path, providing\nflexibility in search scope.\n\n```\n\n# Allow agents to search within any XML file's content\n\n#as it learns about their paths during execution\n\n# Initialize the tool with a specific XML file path\n\n#for exclusive search within that document\n\n```\n\n  * : This is the path to the XML file you wish to search. It is an optional parameter during the tool‚Äôs initialization but must be provided either at initialization or as part of the method‚Äôs arguments to execute a search.\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To\ncustomize the model, you can use a config dictionary as follows:\n\n```\n\n      provider # or google, openai, anthropic, llama2, ...\n\n      provider # or openai, ollama, ...\n\n```\n\n---\n\n# YouTube Channel RAG Search\nURL: https://docs.crewai.com/tools/youtubechannelsearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nWe are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nThis tool is designed to perform semantic searches within a specific Youtube\nchannel‚Äôs content. Leveraging the RAG (Retrieval-Augmented Generation)\nmethodology, it provides relevant search results, making it invaluable for\nextracting information or finding specific content without the need to manually\nsift through videos. It streamlines the search process within Youtube channels,\ncatering to researchers, content creators, and viewers seeking specific\ninformation or topics.\n\nTo utilize the YoutubeChannelSearchTool, the package must be installed. Execute\nthe following command in your shell to install:\n\nTo begin using the YoutubeChannelSearchTool, follow the example below. This\ndemonstrates initializing the tool with a specific Youtube channel handle and\nconducting a search within that channel‚Äôs content.\n\n```\n\n# Initialize the tool to search within any Youtube channel's content the agent\nlearns about during its execution\n\n# Initialize the tool with a specific Youtube channel handle to target your\nsearch\n\n```\n\n  * : A mandatory string representing the Youtube channel handle. This parameter is crucial for initializing the tool to specify the channel you want to search within. The tool is designed to only search within the content of the provided channel handle.\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To\ncustomize the model, you can use a config dictionary as follows:\n\n```\n\n      provider # or google, openai, anthropic, llama2, ...\n\n      provider # or openai, ollama, ...\n\n```\n\n---\n\n# YouTube Video RAG Search\nURL: https://docs.crewai.com/tools/youtubevideosearchtool\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/tools/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/tools/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/tools/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nWe are still working on improving tools, so there might be unexpected behavior\nor changes in the future.\n\nThis tool is part of the package and is designed to perform semantic searches\nwithin Youtube video content, utilizing Retrieval-Augmented Generation (RAG)\ntechniques. It is one of several ‚ÄúSearch‚Äù tools in the package that leverage RAG\nfor different sources. The YoutubeVideoSearchTool allows for flexibility in\nsearches; users can search across any Youtube video content without specifying a\nvideo URL, or they can target their search to a specific Youtube video by\nproviding its URL.\n\nTo utilize the , you must first install the package. This package contains the\namong other utilities designed to enhance your data analysis and processing\ntasks. Install the package by executing the following command in your terminal:\n\nTo integrate the YoutubeVideoSearchTool into your Python projects, follow the\nexample below. This demonstrates how to use the tool both for general Youtube\ncontent searches and for targeted searches within a specific video‚Äôs content.\n\n```\n\n# General search across Youtube content without specifying a video URL,\n\n# so the agent can search within any Youtube video content\n\n# it learns about its url during its operation\n\n# Targeted search within a specific Youtube video's content\n\n```\n\nThe YoutubeVideoSearchTool accepts the following initialization arguments:\n\n  * : An optional argument at initialization but required if targeting a specific Youtube video. It specifies the Youtube video URL path you want to search within.\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To\ncustomize the model, you can use a config dictionary as follows:\n\n```\n\n      provider # or google, openai, anthropic, llama2, ...\n\n      provider # or openai, ollama, ...\n\n```\n\n---\n\n# Telemetry\nURL: https://docs.crewai.com/telemetry\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\nBy default, we collect no data that would be considered personal information\nunder GDPR and other privacy regulations. We do collect Tool‚Äôs names and Agent‚Äôs\nroles, so be advised not to include any personal information in the tool‚Äôs names\nor the Agent‚Äôs roles. Because no personal information is collected, it‚Äôs not\nnecessary to worry about data residency. When is enabled, additional data is\ncollected which may contain personal information if included by the user. Users\nshould exercise caution when enabling this feature to ensure compliance with\nprivacy regulations.\n\nCrewAI utilizes anonymous telemetry to gather usage statistics with the primary\ngoal of enhancing the library. Our focus is on improving and developing the\nfeatures, integrations, and tools most utilized by our users.\n\nIt‚Äôs pivotal to understand that by default, **NO personal data is collected**\nconcerning prompts, task descriptions, agents‚Äô backstories or goals, usage of\ntools, API calls, responses, any data processed by the agents, or secrets and\nenvironment variables. When the feature is enabled, detailed data including task\ndescriptions, agents‚Äô backstories or goals, and other specific attributes are\ncollected to provide deeper insights. This expanded data collection may include\npersonal information if users have incorporated it into their crews or tasks.\nUsers should carefully consider the content of their crews and tasks before\nenabling . Users can disable telemetry by setting the environment variable to .\n\nTracks software versions. Example: CrewAI v1.2.3, Python 3.8.10. No personal\ndata.  \n---  \nIncludes: randomly generated key and ID, process type (e.g., ‚Äòsequential‚Äô,\n‚Äòparallel‚Äô), boolean flag for memory usage (true/false), count of tasks, count\nof agents. All non-personal.  \nIncludes: randomly generated key and ID, role name (should not include personal\ninfo), boolean settings (verbose, delegation enabled, code execution allowed),\nmax iterations, max RPM, max retry limit, LLM info (see LLM Attributes), list of\ntool names (should not include personal info). No personal data.  \nIncludes: randomly generated key and ID, boolean execution settings\n(async_execution, human_input), associated agent‚Äôs role and key, list of tool\nnames. All non-personal.  \nIncludes: tool name (should not include personal info), number of usage attempts\n(integer), LLM attributes used. No personal data.  \nIncludes: crew‚Äôs randomly generated key and ID, number of iterations, model name\nused, quality score (float), execution time (in seconds). All non-personal.  \nIncludes: creation and execution start/end times, crew and task identifiers.\nStored as spans with timestamps. No personal data.  \nIncludes: name, model_name, model, top_k, temperature, and class name of the\nLLM. All technical, non-personal data.  \nCrew Deployment attempt using crewAI CLI| Includes: The fact a deploy is being\nmade and crew id, and if it‚Äôs trying to pull logs, no other data.  \nIncludes: goal description, backstory text, i18n prompt file identifier. Users\nshould ensure no personal info is included in text fields.  \nIncludes: task description, expected output description, context references.\nUsers should ensure no personal info is included in these fields.  \nIncludes: platform, release, system, version, and CPU count. Example: ‚ÄòWindows\n10‚Äô, ‚Äòx86_64‚Äô. No personal data.  \nCrew and Task Inputs and Outputs| Includes: input parameters and output results\nas non-identifiable data. Users should ensure no personal info is included.  \nIncludes: detailed logs of crew operations, all agents and tasks data, final\noutput. All non-personal and technical in nature.  \n‚ÄúNo‚Äù in the ‚ÄúDefaulted‚Äù column indicates that this data is only collected when\nis set to .\n\nUsers can choose to share their complete telemetry data by enabling the\nattribute to in their crew configurations. Enabling results in the collection of\ndetailed crew and task execution data, including , , , and of tasks. This\nenables a deeper insight into usage patterns.\n\nIf you enable , the collected data may include personal information if it has\nbeen incorporated into crew configurations, task descriptions, or outputs. Users\nshould carefully review their data and ensure compliance with GDPR and other\napplicable privacy regulations before enabling this feature.\n\n---\n\n# ‚Äã\nURL: https://docs.crewai.com#what-is-crewai\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n**CrewAI is a cutting-edge framework for orchestrating autonomous AI agents.**\n\nCrewAI enables you to create AI teams where each agent has specific roles,\ntools, and goals, working together to accomplish complex tasks.\n\nThink of it as assembling your dream team - each member (agent) brings unique\nskills and expertise, collaborating seamlessly to achieve your objectives.\n\nJust like a company has departments (Sales, Engineering, Marketing) working\ntogether under leadership to achieve business goals, CrewAI helps you create an\norganization of AI agents with specialized roles collaborating to accomplish\ncomplex tasks.\n\n‚Ä¢ Manages AI agent teams‚Ä¢ Oversees workflows‚Ä¢ Ensures collaboration‚Ä¢ Delivers\noutcomes  \n---  \n‚Ä¢ Have specific roles (researcher, writer)‚Ä¢ Use designated tools‚Ä¢ Can delegate\ntasks‚Ä¢ Make autonomous decisions  \n‚Ä¢ Defines collaboration patterns‚Ä¢ Controls task assignments‚Ä¢ Manages\ninteractions‚Ä¢ Ensures efficient execution  \n‚Ä¢ Have clear objectives‚Ä¢ Use specific tools‚Ä¢ Feed into larger process‚Ä¢ Produce\nactionable results  \n### How It All Works Together\n\n  1. work on their specialized tasks\n  2. get completed to achieve the goal\n\nCreate specialized agents with defined roles, expertise, and goals - from\nresearchers to analysts to writers\n\nEquip agents with custom tools and APIs to interact with external services and\ndata sources\n\nAgents work together, sharing insights and coordinating tasks to achieve complex\nobjectives\n\nDefine sequential or parallel workflows, with agents automatically handling task\ndependencies\n\n  * üß† : Agents make intelligent decisions based on their roles and available tools\n  * üìù : Agents communicate and collaborate like human team members\n  * üõ†Ô∏è : Easy to add new tools, roles, and capabilities\n  * üöÄ : Built for reliability and scalability in real-world applications\n\n[Get started with CrewAI in your development\nenvironment.](https://docs.crewai.com/</installation>)[Follow our quickstart\nguide to create your first CrewAI agent and get hands-on\nexperience.](https://docs.crewai.com/</quickstart>)[Connect with other\ndevelopers, get help, and share your CrewAI\nexperiences.](https://docs.crewai.com/<https:/community.crewai.com>)\n\n  * [How It All Works Together](https://docs.crewai.com/<#how-it-all-works-together>)\n\n---\n\n# ‚Äã\nURL: https://docs.crewai.com#how-crewai-works\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n**CrewAI is a cutting-edge framework for orchestrating autonomous AI agents.**\n\nCrewAI enables you to create AI teams where each agent has specific roles,\ntools, and goals, working together to accomplish complex tasks.\n\nThink of it as assembling your dream team - each member (agent) brings unique\nskills and expertise, collaborating seamlessly to achieve your objectives.\n\nJust like a company has departments (Sales, Engineering, Marketing) working\ntogether under leadership to achieve business goals, CrewAI helps you create an\norganization of AI agents with specialized roles collaborating to accomplish\ncomplex tasks.\n\n‚Ä¢ Manages AI agent teams‚Ä¢ Oversees workflows‚Ä¢ Ensures collaboration‚Ä¢ Delivers\noutcomes  \n---  \n‚Ä¢ Have specific roles (researcher, writer)‚Ä¢ Use designated tools‚Ä¢ Can delegate\ntasks‚Ä¢ Make autonomous decisions  \n‚Ä¢ Defines collaboration patterns‚Ä¢ Controls task assignments‚Ä¢ Manages\ninteractions‚Ä¢ Ensures efficient execution  \n‚Ä¢ Have clear objectives‚Ä¢ Use specific tools‚Ä¢ Feed into larger process‚Ä¢ Produce\nactionable results  \n### How It All Works Together\n\n  1. work on their specialized tasks\n  2. get completed to achieve the goal\n\nCreate specialized agents with defined roles, expertise, and goals - from\nresearchers to analysts to writers\n\nEquip agents with custom tools and APIs to interact with external services and\ndata sources\n\nAgents work together, sharing insights and coordinating tasks to achieve complex\nobjectives\n\nDefine sequential or parallel workflows, with agents automatically handling task\ndependencies\n\n  * üß† : Agents make intelligent decisions based on their roles and available tools\n  * üìù : Agents communicate and collaborate like human team members\n  * üõ†Ô∏è : Easy to add new tools, roles, and capabilities\n  * üöÄ : Built for reliability and scalability in real-world applications\n\n[Get started with CrewAI in your development\nenvironment.](https://docs.crewai.com/</installation>)[Follow our quickstart\nguide to create your first CrewAI agent and get hands-on\nexperience.](https://docs.crewai.com/</quickstart>)[Connect with other\ndevelopers, get help, and share your CrewAI\nexperiences.](https://docs.crewai.com/<https:/community.crewai.com>)\n\n  * [How It All Works Together](https://docs.crewai.com/<#how-it-all-works-together>)\n\n---\n\n# ‚Äã\nURL: https://docs.crewai.com#how-it-all-works-together\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n**CrewAI is a cutting-edge framework for orchestrating autonomous AI agents.**\n\nCrewAI enables you to create AI teams where each agent has specific roles,\ntools, and goals, working together to accomplish complex tasks.\n\nThink of it as assembling your dream team - each member (agent) brings unique\nskills and expertise, collaborating seamlessly to achieve your objectives.\n\nJust like a company has departments (Sales, Engineering, Marketing) working\ntogether under leadership to achieve business goals, CrewAI helps you create an\norganization of AI agents with specialized roles collaborating to accomplish\ncomplex tasks.\n\n‚Ä¢ Manages AI agent teams‚Ä¢ Oversees workflows‚Ä¢ Ensures collaboration‚Ä¢ Delivers\noutcomes  \n---  \n‚Ä¢ Have specific roles (researcher, writer)‚Ä¢ Use designated tools‚Ä¢ Can delegate\ntasks‚Ä¢ Make autonomous decisions  \n‚Ä¢ Defines collaboration patterns‚Ä¢ Controls task assignments‚Ä¢ Manages\ninteractions‚Ä¢ Ensures efficient execution  \n‚Ä¢ Have clear objectives‚Ä¢ Use specific tools‚Ä¢ Feed into larger process‚Ä¢ Produce\nactionable results  \n### How It All Works Together\n\n  1. work on their specialized tasks\n  2. get completed to achieve the goal\n\nCreate specialized agents with defined roles, expertise, and goals - from\nresearchers to analysts to writers\n\nEquip agents with custom tools and APIs to interact with external services and\ndata sources\n\nAgents work together, sharing insights and coordinating tasks to achieve complex\nobjectives\n\nDefine sequential or parallel workflows, with agents automatically handling task\ndependencies\n\n  * üß† : Agents make intelligent decisions based on their roles and available tools\n  * üìù : Agents communicate and collaborate like human team members\n  * üõ†Ô∏è : Easy to add new tools, roles, and capabilities\n  * üöÄ : Built for reliability and scalability in real-world applications\n\n[Get started with CrewAI in your development\nenvironment.](https://docs.crewai.com/</installation>)[Follow our quickstart\nguide to create your first CrewAI agent and get hands-on\nexperience.](https://docs.crewai.com/</quickstart>)[Connect with other\ndevelopers, get help, and share your CrewAI\nexperiences.](https://docs.crewai.com/<https:/community.crewai.com>)\n\n  * [How It All Works Together](https://docs.crewai.com/<#how-it-all-works-together>)\n\n---\n\n# ‚Äã\nURL: https://docs.crewai.com#key-features\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n**CrewAI is a cutting-edge framework for orchestrating autonomous AI agents.**\n\nCrewAI enables you to create AI teams where each agent has specific roles,\ntools, and goals, working together to accomplish complex tasks.\n\nThink of it as assembling your dream team - each member (agent) brings unique\nskills and expertise, collaborating seamlessly to achieve your objectives.\n\nJust like a company has departments (Sales, Engineering, Marketing) working\ntogether under leadership to achieve business goals, CrewAI helps you create an\norganization of AI agents with specialized roles collaborating to accomplish\ncomplex tasks.\n\n‚Ä¢ Manages AI agent teams‚Ä¢ Oversees workflows‚Ä¢ Ensures collaboration‚Ä¢ Delivers\noutcomes  \n---  \n‚Ä¢ Have specific roles (researcher, writer)‚Ä¢ Use designated tools‚Ä¢ Can delegate\ntasks‚Ä¢ Make autonomous decisions  \n‚Ä¢ Defines collaboration patterns‚Ä¢ Controls task assignments‚Ä¢ Manages\ninteractions‚Ä¢ Ensures efficient execution  \n‚Ä¢ Have clear objectives‚Ä¢ Use specific tools‚Ä¢ Feed into larger process‚Ä¢ Produce\nactionable results  \n### How It All Works Together\n\n  1. work on their specialized tasks\n  2. get completed to achieve the goal\n\nCreate specialized agents with defined roles, expertise, and goals - from\nresearchers to analysts to writers\n\nEquip agents with custom tools and APIs to interact with external services and\ndata sources\n\nAgents work together, sharing insights and coordinating tasks to achieve complex\nobjectives\n\nDefine sequential or parallel workflows, with agents automatically handling task\ndependencies\n\n  * üß† : Agents make intelligent decisions based on their roles and available tools\n  * üìù : Agents communicate and collaborate like human team members\n  * üõ†Ô∏è : Easy to add new tools, roles, and capabilities\n  * üöÄ : Built for reliability and scalability in real-world applications\n\n[Get started with CrewAI in your development\nenvironment.](https://docs.crewai.com/</installation>)[Follow our quickstart\nguide to create your first CrewAI agent and get hands-on\nexperience.](https://docs.crewai.com/</quickstart>)[Connect with other\ndevelopers, get help, and share your CrewAI\nexperiences.](https://docs.crewai.com/<https:/community.crewai.com>)\n\n  * [How It All Works Together](https://docs.crewai.com/<#how-it-all-works-together>)\n\n---\n\n# ‚Äã\nURL: https://docs.crewai.com#why-choose-crewai\n\n* [Create Your Own Manager Agent](https://docs.crewai.com/</how-to/custom-manager-agent>)\n  * [Force Tool Output as Result](https://docs.crewai.com/</how-to/force-tool-output-as-result>)\n  * [Replay Tasks from Latest Crew Kickoff](https://docs.crewai.com/</how-to/replay-tasks-from-latest-crew-kickoff>)\n\n**CrewAI is a cutting-edge framework for orchestrating autonomous AI agents.**\n\nCrewAI enables you to create AI teams where each agent has specific roles,\ntools, and goals, working together to accomplish complex tasks.\n\nThink of it as assembling your dream team - each member (agent) brings unique\nskills and expertise, collaborating seamlessly to achieve your objectives.\n\nJust like a company has departments (Sales, Engineering, Marketing) working\ntogether under leadership to achieve business goals, CrewAI helps you create an\norganization of AI agents with specialized roles collaborating to accomplish\ncomplex tasks.\n\n‚Ä¢ Manages AI agent teams‚Ä¢ Oversees workflows‚Ä¢ Ensures collaboration‚Ä¢ Delivers\noutcomes  \n---  \n‚Ä¢ Have specific roles (researcher, writer)‚Ä¢ Use designated tools‚Ä¢ Can delegate\ntasks‚Ä¢ Make autonomous decisions  \n‚Ä¢ Defines collaboration patterns‚Ä¢ Controls task assignments‚Ä¢ Manages\ninteractions‚Ä¢ Ensures efficient execution  \n‚Ä¢ Have clear objectives‚Ä¢ Use specific tools‚Ä¢ Feed into larger process‚Ä¢ Produce\nactionable results  \n### How It All Works Together\n\n  1. work on their specialized tasks\n  2. get completed to achieve the goal\n\nCreate specialized agents with defined roles, expertise, and goals - from\nresearchers to analysts to writers\n\nEquip agents with custom tools and APIs to interact with external services and\ndata sources\n\nAgents work together, sharing insights and coordinating tasks to achieve complex\nobjectives\n\nDefine sequential or parallel workflows, with agents automatically handling task\ndependencies\n\n  * üß† : Agents make intelligent decisions based on their roles and available tools\n  * üìù : Agents communicate and collaborate like human team members\n  * üõ†Ô∏è : Easy to add new tools, roles, and capabilities\n  * üöÄ : Built for reliability and scalability in real-world applications\n\n[Get started with CrewAI in your development\nenvironment.](https://docs.crewai.com/</installation>)[Follow our quickstart\nguide to create your first CrewAI agent and get hands-on\nexperience.](https://docs.crewai.com/</quickstart>)[Connect with other\ndevelopers, get help, and share your CrewAI\nexperiences.](https://docs.crewai.com/<https:/community.crewai.com>)\n\n  * [How It All Works Together](https://docs.crewai.com/<#how-it-all-works-together>)\n\n---\n\n",
  "timestamp": "2025-01-17T22:47:58.044Z",
  "stats": {
    "wordCount": 34933,
    "charCount": 251586
  }
}