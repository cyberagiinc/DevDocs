{
  "content": "# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe page you are looking for does not exist.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n[ GitLab is the only place where enterprises build mission‚Äëcritical software.\n](https://tanstack.com/query/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JLCAADLZ3JCA7IE2JWCABI5KJKC67DT2QYF67IT27YCA7IK2JWCYAIL53EHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n\n---\n\n# High-quality open-source software for\nURL: https://tanstack.com/\n\n## High-quality open-source software for\n\nHeadless, type-safe, & powerful utilities for Web Applications, Routing, State\nManagement, Data Visualization, Datagrids/Tables, and more.\n\n[Full-stack React Framework powered by TanStack RouterFull-document SSR,\nStreaming, Server Functions, bundling and more, powered by TanStack Router,\nNitro, Vite and ready to deploy to your favorite hosting\nprovider.](https://tanstack.com/</start>)[Type-safe Routing for React\napplications.A powerful React router for client-side and full-stack react\napplications. Fully type-safe APIs, first-class search-params for managing state\nin the URL and seamless integration with the existing React\necosystem.](https://tanstack.com/</router>)[Powerful asynchronous state\nmanagement, server-state utilities and data fetchingPowerful asynchronous state\nmanagement, server-state utilities and data fetching. Fetch, cache, update, and\nwrangle all forms of async data in your TS/JS, React, Vue, Solid, Svelte &\nAngular applications all without touching any \"global\nstate\"](https://tanstack.com/</query>)[Headless UI for building powerful tables\n& datagridsSupercharge your tables or build a datagrid from scratch for TS/JS,\nReact, Vue, Solid, Svelte, Qwik, Angular, and Lit while retaining 100% control\nover markup and styles.](https://tanstack.com/</table>)[Headless UI for building\nperformant and type-safe formsHeadless, performant, and type-safe form state\nmanagement for TS/JS, React, Vue, Angular, Solid and\nLit](https://tanstack.com/</form>)[Headless UI for Virtualizing Large Element\nListsVirtualize only the visible content for massive scrollable DOM nodes at\n60FPS in TS/JS, React, Vue, Solid, Svelte, Lit & Angular while retaining 100%\ncontrol over markup and styles.](https://tanstack.com/</virtual>)[Headless range\nand multi-range slider utilities.Headless, lightweight, and extensible\nprimitives for building range and multi-range\nsliders.](https://tanstack.com/</ranger>)[Framework agnostic data store with\nreactive framework adaptersThe immutable-reactive data store that powers the\ncore of TanStack libraries and their framework\nadapters.](https://tanstack.com/</store>)[Configuration and tools for publishing\nand maintaining high-quality JavaScript packagesThe build and publish utilities\nused by all of our projects. Use it if you\ndare!](https://tanstack.com/</config>)\n\n[Clerk and TanStack are partnering to elevate your application's with industry-\nleading . Paired with TanStack's no-nonsense routing and tooling, you'll be\nequipped to effortlessly deliver top-notch experiences that your users can trust\nand your developers can rely\non.](https://tanstack.com/<https:/go.clerk.com/wOwHtuJ>)[TanStack Table and AG\nGrid are respectfully the and together are working hard to ensure the highest\nquality table/datagrid experience for the entire JS/TS ecosystem. Whether it's a\nlightweight table or a complex datagrid, we've we've got you\ncovered.](https://tanstack.com/<https:/ag-grid.com/react-data-\ngrid/?utm_source=reacttable&utm_campaign=githubreacttable>)[Netlify and TanStack\nhave joined forces to provide developers with **world-class deployment and\nhosting capabilities** for modern web applications. Together we're focused on\ndelivering an exceptional developer experience through **seamless deployment\nworkflows, edge functions, and serverless capabilities** that help teams build\nand ship faster. Our partnership ensures TanStack applications can take full\nadvantage of Netlify's powerful platform\nfeatures.](https://tanstack.com/<https:/netlify.com?utm_source=tanstack>)[Convex\nhas teamed up with TanStack to not only deliver a **first-class end-to-end type-\nsafe database experience** to TanStack developers, but to also ensure TanStack\nis ready for the real-time database arena. Convex's all-in-one platform delivers\nend-to-end type-safety via a and together, we're elevating what's possible with\nreal-time React\napplications.](https://tanstack.com/<https:/convex.dev?utm_source=tanstack>)[Sentry\nand TanStack are on a mission to make sure your apps are. Sentry's best-in-class\nerror monitoring and performance insights combined with TanStack's cutting-edge\nlibraries ensure that you can deliver the best possible experience to your\nusers. Together, we're committed to making sure that you can build with\nconfidence.](https://tanstack.com/<https:/sentry.io?utm_source=tanstack>)[Speakeasy\nand TanStack are working together to make . With Speakeasy's and TanStack's\nrobust front-end tooling, developers can move faster than ever. Whether you're\nintegrating APIs or streamlining your developer experience, this partnership\nensures you're covered from server to client with **powerful, type-safe, and\noptimized\nsolutions**.](https://tanstack.com/<https:/speakeasy.com/?utm_source=tanstack&utm_campaign=tanstack>)[TanStack's\npriority is to make its users productive, efficient and knowledgeable about web\ndev. To help us on this quest, we've partnered with to about TanStack products.\nIt doesn't stop at TanStack though, with their sister product as our official\nnewsletter partner, you'll be able to **stay up to date with the latest and\ngreatest** in the web dev world\nregardless.](https://tanstack.com/<https:/bytes.dev?utm_source-\ntanstack&utm_campaign=tanstack>)[Since its founding, Nozzle's SEO platform was\nthe original home for almost all TanStack libraries. They were used to build the\n**most technically advanced search engine monitoring platform** of its kind. Its\nenterprise rank tracking and keyword research tools continue to set a new bar\nfor quality and scale. Nozzle continues to prove the value of the full gamut of\nTanStack tools on the front-end with unmatched\nUI/UX.](https://tanstack.com/<https:/nozzle.io/?utm_source=tanstack&utm_campaign=tanstack>)\n\n[The Official TanStack React Query CourseLearn how to build enterprise quality\napps with TanStack's React Query the easy way with our brand new\ncourse.](https://tanstack.com/<https:/query.gg/?s=tanstack>)\n\nSponsors get special perks like **private discord channels, priority issue\nrequests, direct support and even course vouchers**!\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JMCKSDPZ3JCA7IE2JMC6YIVKQKC67DT2QYF67IT27YCA7IK2JWCAYIT23WHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\nThe official TanStack community to ask questions, network and make new friends\nand get lightning fast news about what's coming next for TanStack!\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# Full-stack React framework\nURL: https://tanstack.com/start\n\n## Full-stack React framework\n\nSSR, Streaming, Server Functions, API Routes, bundling and more powered by , ,\nand . Ready to deploy to your favorite hosting provider.\n\n[Try it in 60\nseconds](https://tanstack.com/</start/latest/docs/framework/react/quick-\nstart#impatient>)\n\nBuilt on TanStack Router, Start comes pre-packed with a fully type-safe and\npowerfully-unmatched routing system that is designed to handle the beefiest of\nfull-stack routing requirements with ease. Start builds on top of Router's fully\ninferred type safety to also provide type-safe full-stack APIs that keep you in\nthe fast lane.\n\n### SSR, Streaming and Server RPCs\n\nWho said rich and interactive applications can't have it all? TanStack Start\nincludes powerful capabilities for full-document SSR, streaming, server\nfunctions and RPCs. No more choosing between server-side rendering and top-class\nclient-side interactivity. Command the server as you see fit.\n\n### Client-Side First, 100% Server Capable\n\nWhile other frameworks continue to compromise on the client-side application\nexperience we've cultivated as a front-end community over the years, TanStack\nStart stays true to the while providing a that won't make you compromise on user\nexperience.\n\n### Deploy Anywhere with Nitro Vite\n\nWith Nitro and Vite under the hood, TanStack Start is designed to be deployable\nanywhere JS can run. Whether you're hosting on a traditional server, a\nserverless platform, or even a CDN, Start seamlessly builds, bundles and deploys\nyour application with ease.\n\nWhen can I use it?\n\nYou can use today! Although currently in active development, we do not expect\nany more breaking changes. We invite you to provide feedback to help us on the\njourney to 1.0! If you choose to ship a BETA Start app to production, we\nrecommend locking your dependencies to a specific version and keeping up with\nthe latest releases.\n\n[Clerk and TanStack are partnering to elevate your application's with industry-\nleading . Paired with TanStack's no-nonsense routing and tooling, you'll be\nequipped to effortlessly deliver top-notch experiences that your users can trust\nand your developers can rely\non.](https://tanstack.com/<https:/go.clerk.com/wOwHtuJ>)[Netlify and TanStack\nhave joined forces to provide developers with **world-class deployment and\nhosting capabilities** for modern web applications. Together we're focused on\ndelivering an exceptional developer experience through **seamless deployment\nworkflows, edge functions, and serverless capabilities** that help teams build\nand ship faster. Our partnership ensures TanStack applications can take full\nadvantage of Netlify's powerful platform\nfeatures.](https://tanstack.com/<https:/netlify.com?utm_source=tanstack>)[Convex\nhas teamed up with TanStack to not only deliver a **first-class end-to-end type-\nsafe database experience** to TanStack developers, but to also ensure TanStack\nis ready for the real-time database arena. Convex's all-in-one platform delivers\nend-to-end type-safety via a and together, we're elevating what's possible with\nreal-time React\napplications.](https://tanstack.com/<https:/convex.dev?utm_source=tanstack>)[Sentry\nand TanStack are on a mission to make sure your apps are. Sentry's best-in-class\nerror monitoring and performance insights combined with TanStack's cutting-edge\nlibraries ensure that you can deliver the best possible experience to your\nusers. Together, we're committed to making sure that you can build with\nconfidence.](https://tanstack.com/<https:/sentry.io?utm_source=tanstack>)\n\n[ Google Cloud Next is coming to Las Vegas April 9-11. Register now to fuel your\nstartup‚Äôs growth.\n](https://tanstack.com/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JMCVYDVZ3JCA7IE2JMC67DVK7KC67DT2QYF67IT27YCA7IK2JWCAYIT237HEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/quick-start\n\nIf you're impatient, you can clone and run the example right away with the\nfollowing commands:\n\nIf you'd like to use a different example, you can replace above with the slug of\nthe example you'd like to use from the list below.\n\nOnce you've cloned the example you want, head back to the guide to learn how to\nuse TanStack Start!\n\nTanStack Start has load of examples to get you started. Pick one of the examples\nbelow to get started!\n\nEach example above has an embedded stackblitz preview to find the one that feels\nlike a good starting point\n\nTo quickly deploy an example, click the button on an example's page to both\nclone and deploy the example to Netlify.\n\nTo manually clone and deploy the example to anywhere else you'd like, use the\nfollowing commands replacing with the slug of the example you'd like to use from\nabove:\n\nOnce you've clone or deployed an example, head back to the guide to learn how to\nuse TanStack Start!\n\nWhile not Start-specific examples, these may help you understand more about how\nTanStack Router works:\n\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/start/latest/docs/framework/react/</start/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/start/latest/docs/framework/react/</start/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/start/latest/docs/framework/react/</start/latest/docs/framework/react/examples/with-trpc-react-query>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKKQKC67DT2QYF67IT27YCA7IK2JWFTBDTK7JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Full-stack React framework\nURL: https://tanstack.com/start/latest\n\n## Full-stack React framework\n\nSSR, Streaming, Server Functions, API Routes, bundling and more powered by , ,\nand . Ready to deploy to your favorite hosting provider.\n\n[Try it in 60\nseconds](https://tanstack.com/start/</start/latest/docs/framework/react/quick-\nstart#impatient>)\n\nBuilt on TanStack Router, Start comes pre-packed with a fully type-safe and\npowerfully-unmatched routing system that is designed to handle the beefiest of\nfull-stack routing requirements with ease. Start builds on top of Router's fully\ninferred type safety to also provide type-safe full-stack APIs that keep you in\nthe fast lane.\n\n### SSR, Streaming and Server RPCs\n\nWho said rich and interactive applications can't have it all? TanStack Start\nincludes powerful capabilities for full-document SSR, streaming, server\nfunctions and RPCs. No more choosing between server-side rendering and top-class\nclient-side interactivity. Command the server as you see fit.\n\n### Client-Side First, 100% Server Capable\n\nWhile other frameworks continue to compromise on the client-side application\nexperience we've cultivated as a front-end community over the years, TanStack\nStart stays true to the while providing a that won't make you compromise on user\nexperience.\n\n### Deploy Anywhere with Nitro Vite\n\nWith Nitro and Vite under the hood, TanStack Start is designed to be deployable\nanywhere JS can run. Whether you're hosting on a traditional server, a\nserverless platform, or even a CDN, Start seamlessly builds, bundles and deploys\nyour application with ease.\n\nWhen can I use it?\n\nYou can use today! Although currently in active development, we do not expect\nany more breaking changes. We invite you to provide feedback to help us on the\njourney to 1.0! If you choose to ship a BETA Start app to production, we\nrecommend locking your dependencies to a specific version and keeping up with\nthe latest releases.\n\n[Clerk and TanStack are partnering to elevate your application's with industry-\nleading . Paired with TanStack's no-nonsense routing and tooling, you'll be\nequipped to effortlessly deliver top-notch experiences that your users can trust\nand your developers can rely\non.](https://tanstack.com/start/<https:/go.clerk.com/wOwHtuJ>)[Netlify and\nTanStack have joined forces to provide developers with **world-class deployment\nand hosting capabilities** for modern web applications. Together we're focused\non delivering an exceptional developer experience through **seamless deployment\nworkflows, edge functions, and serverless capabilities** that help teams build\nand ship faster. Our partnership ensures TanStack applications can take full\nadvantage of Netlify's powerful platform\nfeatures.](https://tanstack.com/start/<https:/netlify.com?utm_source=tanstack>)[Convex\nhas teamed up with TanStack to not only deliver a **first-class end-to-end type-\nsafe database experience** to TanStack developers, but to also ensure TanStack\nis ready for the real-time database arena. Convex's all-in-one platform delivers\nend-to-end type-safety via a and together, we're elevating what's possible with\nreal-time React\napplications.](https://tanstack.com/start/<https:/convex.dev?utm_source=tanstack>)[Sentry\nand TanStack are on a mission to make sure your apps are. Sentry's best-in-class\nerror monitoring and performance insights combined with TanStack's cutting-edge\nlibraries ensure that you can deliver the best possible experience to your\nusers. Together, we're committed to making sure that you can build with\nconfidence.](https://tanstack.com/start/<https:/sentry.io?utm_source=tanstack>)\n\n[ Develop and launch modern apps with MongoDB Atlas, a resilient data platform.\n](https://tanstack.com/start/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKBDCZ3JCA7ILK3ICWAI423KC67DT2QYF67IT27YCA7IK2JWFT7IL27EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank\nTracker](https://tanstack.com/start/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/getting-started\n\nTo set up a TanStack Start project, you can:\n\n  * Use the to rapidly learn as you go\n  * [Build a project from scratch](https://tanstack.com/start/latest/docs/framework/react/</start/latest/docs/framework/react/build-from-scratch>) to learn how TanStack Start works from the ground up\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Legacy vendor lock-in, out. A truly cloud-native APM, in.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEKJKC67DT2QYF67IT27YCA7IK2JWFT7IL27NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/build-from-scratch\n\n# Build a Project from Scratch\n\nIf you chose to quick start with an example or cloned project, you can skip this\nguide and move on to the guide.\n\n_So you want to build a TanStack Start project from scratch?_\n\nThis guide will help you build a basic TanStack Start web application. Together,\nwe will use TanStack Start to:\n\n  * With a button to increment the counter persistently.\n\n[Here is what that will look\nlike](https://tanstack.com/start/latest/docs/framework/react/<https:/stackblitz.com/github/tanstack/router/tree/main/examples/react/start-\ncounter>)\n\nLet's create a new project directory and initialize it.\n\n> We use in all of these examples, but you can use your package manager of\n> choice instead.\nWe highly recommend using TypeScript with TanStack Start. Create a file with at\nleast the following settings:\n\nTanStack Start is (currently*) powered by and and requires them as dependencies.\n\n> *Vinxi will be removed before version 1.0.0 is released and TanStack will rely\n> only on Vite and Nitro. The commands and APIs that use Vinxi will likely be\n> replaced with a Vite plugin or dedicated TanStack Start CLI.\nYou'll also need React and the Vite React plugin, so install them too:\n\nWe'll then update our to use Vinxi's CLI and set :\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\nThere are four required files for TanStack Start usage:\n\n  1. The root of your application\n\nOnce configuration is done, we'll have a file tree that looks like the\nfollowing:\n\n```\n\n‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ `__root.tsx`\n\n```\n\n```\n\n‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ `__root.tsx`\n\n```\n\nThis is the file that will dictate the behavior of TanStack Router used within\nStart. Here, you can configure everything from the default to .\n\n```\n\n```\n\n> is not a file you're expected to have at this point. It will be generated when\n> you run TanStack Start (via or ) for the first time.\nAs TanStack Start is an framework, we need to pipe this router information to\nour server entry point:\n\n```\n\n```\n\nThis allows us to know what routes and loaders we need to execute when the user\nhits a given route.\n\nNow we need a way to hydrate our client-side JavaScript once the route resolves\nto the client. We do this by piping the same router information to our client\nentry point:\n\n```\n\n```\n\nThis enables us to kick off client-side routing once the user's initial server\nrequest has fulfilled.\n\n## [The Root of Your\nApplication](https://tanstack.com/start/latest/docs/framework/react/<#the-root-\nof-your-application>)\n\nFinally, we need to create the root of our application. This is the entry point\nfor all other routes. The code in this file will wrap all other routes in the\napplication.\n\n```\n\n```\n\n```\n\n```\n\nNow that we have the basic templating setup, we can write our first route. This\nis done by creating a new file in the directory.\n\n```\n\n```\n\nThat's it! ü§Ø You've now set up a TanStack Start project and written your first\nroute. üéâ\n\nYou can now run to start your server and navigate to to see your route in\naction.\n\nYou want to deploy your application? Check out the .\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFT7IL27YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/learn-the-basics\n\nThis guide will help you learn the basics behind how TanStack Start works,\nregardless of how you set up your project.\n\nTanStack Start is (currently*) powered by , and .\n\n  * : A router for building web applications.\n  * : A framework for building server applications.\n  * : A server framework for building web applications.\n\nVinxi will be removed before version 1.0.0 is released and TanStack will rely\nonly on Vite and Nitro. The commands and APIs that use Vinxi will likely be\nreplaced with a Vite plugin.\n\n## [It all \"Starts\" with the\nRouter](https://tanstack.com/start/latest/docs/framework/react/<#it-all-starts-\nwith-the-router>)\n\nThis is the file that will dictate the behavior of TanStack Router used within\nStart. Here, you can configure everything from the default to .\n\n```\n\n```\n\n  * Notice the property. This is used to restore the scroll position of the page when navigating between routes.\n\nThe file is generated when you run TanStack Start (via or ) for the first time.\nThis file contains the generated route tree and a handful of TS utilities that\nmake TanStack Start fully type-safe.\n\nAlthough TanStack Start is designed with client-first APIs, it is by and large,\na full-stack framework. This means that all use cases, including both dynamic\nand static rely on a server or build-time entry to render our application's\ninitial HTML payload.\n\nThis is done via the file:\n\n```\n\n```\n\nWhether we are statically generating our app or serving it dynamically, the file\nis the entry point for doing all SSR-related work.\n\n  * It's important that a new router is created for each request. This ensures that any data handled by the router is unique to the request.\n  * The function is used to generate the router manifest, which is used to determine many aspects of asset management and preloading for our application.\n  * The function is used to render our application to a stream, allowing us to take advantage of streaming HTML to the client. (This is the default handler, but you can also use other handlers like , or even build your own)\n\nGetting our html to the client is only half the battle. Once there, we need to\nhydrate our client-side JavaScript once the route resolves to the client. We do\nthis by hydrating the root of our application with the component:\n\n```\n\n```\n\nThis enables us to kick off client-side routing once the user's initial server\nrequest has fulfilled.\n\n## [The Root of Your\nApplication](https://tanstack.com/start/latest/docs/framework/react/<#the-root-\nof-your-application>)\n\nOther than the client entry point, the route of your application is the entry\npoint for your application. The code in this file will wrap all other routes in\nthe app, including your home page. It behaves like a layout route for your whole\napplication.\n\nBecause it is , it is the perfect place to construct your application shell and\ntake care of any global logic.\n\n```\n\n```\n\n```\n\n```\n\n  * This layout may change in the future as we roll out SPA mode, which allows the root route to render the SPA shell without any page-specific content.\n  * Notice the component. This is used to load all of the client-side JavaScript for the application.\n\nRoutes are an extensive feature of TanStack Router, and are covered thoroughly\nin the . As a summary:\n\n  * Routes are defined using the function.\n  * Routes are automatically code-split and lazy-loaded.\n  * Critical data fetching is coordinated from a Route's loader\n\n```\n\n```\n\nTanStack Start builds 100% on top of TanStack Router, so all of the navigation\nfeatures of TanStack Router are available to you. In summary:\n\n  * Use the component to navigate to a new route.\n  * Use the hook to navigate imperatively.\n  * Use the hook anywhere in your application to access the router instance and perform invalidations.\n  * Every router hook that returns state is reactive, meaning it will automatically re-run when the appropriate state changes.\n\nHere's a quick example of how you can use the component to navigate to a new\nroute:\n\nFor more in-depth information on navigation, check out the .\n\nYou may have noticed the we created above using . This is one of TanStack's most\npowerful features, allowing you to create server-side functions that can be\ncalled from both the server during SSR and the client!\n\nHere's a quick overview of how server functions work:\n\n  * Server functions are created using the function.\n  * They can be called from both the server during SSR and the client.\n  * They can be used to fetch data from the server, or to perform other server-side actions.\n\nHere's a quick example of how you can use server functions to fetch and return\ndata from the server:\n\n```\n\n // Always validate data sent to the function, here we use Zod\n\n // The handler function is where you perform the server-side logic\n\n// Somewhere else in your application\n\n```\n\n```\n\n // Always validate data sent to the function, here we use Zod\n\n // The handler function is where you perform the server-side logic\n\n// Somewhere else in your application\n\n```\n\nTo learn more about server functions, check out the .\n\nServer Functions can also be used to perform mutations on the server. This is\nalso done using the same function, but with the additional requirement that you\ninvalidate any data on the client that was affected by the mutation.\n\n  * If you're using TanStack Router only, you can use the method to invalidate all router data and re-fetch it.\n  * If you're using TanStack Query, you can use the method to invalidate data, among other more specific methods to target specific queries.\n\nHere's a quick example of how you can use server functions to perform a mutation\non the server and invalidate the data on the client:\n\n```\n\n// Somewhere else in your application\n\n```\n\n```\n\n// Somewhere else in your application\n\n```\n\nTo learn more about mutations, check out the .\n\nAnother powerful feature of TanStack Router is data loading. This allows you to\nfetch data for SSR and preload route data before it is rendered. This is done\nusing the function of a route.\n\nHere's a quick overview of how data loading works:\n\n  * Data loading is done using the function of a route.\n  * Data loaders are , meaning they are executed on both the server and the client.\n  * For performing server-only logic, call a server function from within the loader.\n  * Similar to TanStack Query, data loaders are cached on the client and are re-used and even re-fetched in the background when the data is stale.\n\nTo learn more about data loading, check out the .\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFT7IL53WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/server-functions\n\nServer functions allow you to specify logic that can be invoked almost anywhere\n(even the client), but run on the server. In fact, they are not so different\nfrom an API Route, but with a few key differences:\n\n  * They do not have stable public URL (but you'll be able to do this very soon!)\n  * They can be called from anywhere in your application, including loaders, hooks, components, etc.\n\nHowever, they are similar to regular API Routes in that:\n\n  * They have access to the request context, allowing you to read headers, set cookies, and more\n  * They can access sensitive information, such as environment variables, without exposing them to the client\n  * They can be used to perform any kind of server-side logic, such as fetching data from a database, sending emails, or interacting with other services\n  * They can return any value, including primitives, JSON-serializable objects, and even raw Response objects\n  * They can throw errors, including redirects and notFounds, which can be handled automatically by the router\n\n> How are server functions different from \"React Server Functions\"?\n>   * TanStack Server Functions are not tied to a specific front-end framework,\n> and can be used with any front-end framework or none at all.\n>   * TanStack Server Functions are backed by standard HTTP requests and can be\n> called as often as you like without suffering from serial-execution\n> bottlenecks.\n>\n\nServer functions can be defined anywhere in your application, but must be\ndefined at the top level of a file. They can be called throughout your\napplication, including loaders, hooks, etc. Traditionally, this pattern is known\nas a Remote Procedure Call (RPC), but due to the isomorphic nature of these\nfunctions, we refer to them as server functions.\n\n  * On the server bundle, server functions logic is left alone. Nothing needs to be done since they are already in the correct place.\n  * On the client, server functions will be removed; they exist only on the server. Any calls to the server function on the client will be replaced with a request to the server to execute the server function, and send the response back to the client.\n\nServer functions can use middleware to share logic, context, common operations,\nprerequisites, and much more. To learn more about server function middleware, be\nsure to read about them in the .\n\n> We'd like to thank the team for both the inspiration of TanStack Start's\n> server function design and guidance while implementing it. We love (and\n> recommend) using tRPC for API Routes so much that we insisted on server\n> functions getting the same 1st class treatment and developer experience. Thank\n> you!\nServer functions are defined with the function, from the package. This function\ntakes an optional argument for specifying the http verb, and allows you to chain\noff the result to define things like the body of the server function, input\nvalidation, middleware, etc. Here's a simple example:\n\n```\n\n // Wait for 1 second\n\n // Return the current time\n\n```\n\n```\n\n // Wait for 1 second\n\n // Return the current time\n\n```\n\n## [Where can I call server\nfunctions?](https://tanstack.com/start/latest/docs/framework/react/<#where-can-\ni-call-server-functions>)\n\nServer functions cannot be called from API Routes. If you need to share business\nlogic between server functions and API Routes, extract the shared logic into\nutility functions that can be imported by both.\n\nServer functions accept a single parameter, which can be a variety of types:\n\n  * ReadableStream (of any of the above)\n  * Promise (of any of the above)\n\nHere's an example of a server function that accepts a simple string parameter:\n\n## [Runtime Input Validation / Type\nSafety](https://tanstack.com/start/latest/docs/framework/react/<#runtime-input-\nvalidation--type-safety>)\n\nServer functions can be configured to validate their input data at runtime,\nwhile adding type safety. This is useful for ensuring the input is of the\ncorrect type before executing the server function, and providing more friendly\nerror messages.\n\nThis is done with the method. It will accept whatever input is passed to the\nserver function. The value (and type) you return from this function will become\nthe input passed to the actual server function handler.\n\nValidators also integrate seamlessly with external validators, if you want to\nuse something like Zod.\n\nHere's a simple example of a server function that validates the input parameter:\n\n```\n\n'Person must be an object'\n\n'Person.name must be a string'\n\n```\n\n```\n\nPerson must be an object\n\nPerson.name must be a string\n\n```\n\nValidation libraries like Zod can be used like so:\n\n```\n\n```\n\nSince server-functions cross the network boundary, it's important to ensure the\ndata being passed to them is not only the right type, but also validated at\nruntime. This is especially important when dealing with user input, as it can be\nunpredictable. To ensure developers validate their I/O data, types are reliant\non validation. The return type of the function will be the input to the server\nfunction's handler.\n\n```\n\n'Person must be an object'\n\n'Person.name must be a string'\n\n// Error: Argument of type '{ name: number; }' is not assignable to parameter of\ntype 'Person'.\n\n```\n\n```\n\nPerson must be an object\n\nPerson.name must be a string\n\n// Error: Argument of type '{ name: number; }' is not assignable to parameter of\ntype 'Person'.\n\n```\n\nServer functions infer their input, and output types based on the input to the ,\nand return value of functions, respectively. In fact, the you define can even\nhave its own separate input/output types, which can be useful if your validator\nperforms transformations on the input data.\n\nTo illustrate this, let's take a look at an example using the validation\nlibrary:\n\n```\n\n```\n\n```\n\n```\n\nWhile we highly recommend using a validation library to validate your network\nI/O data, you may, for whatever reason want to validate your data, but still\nhave type safety. To do this, provide type information to the server function\nusing an identity function as the , that types the input, and or output to the\ncorrect types:\n\n```\n\n```\n\nServer functions can accept JSON-serializable objects as parameters. This is\nuseful for passing complex data structures to the server:\n\n```\n\n```\n\nServer functions can accept objects as parameters\n\n```\n\n'Name and age are required'\n\n```\n\n```\n\nName and age are required\n\n```\n\nIn addition to the single parameter that server functions accept, you can also\naccess server request context from within any server function using utilities\nfrom . Under the hood, we use 's package to perform cross-platform HTTP\nrequests.\n\nThere are many context functions available to you for things like:\n\n  * Setting response status codes and status messages\n  * Dealing with multi-part form data\n  * Reading/Setting custom server context properties\n\nFor a full list of available context functions, see all of the available or\ninspect the .\n\nFor starters, here are a few examples:\n\nLet's use the function to access the request itself from within a server\nfunction:\n\n```\n\n// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like\nGecko) Chrome/58.0.3029.110 Safari/537.3\n\n```\n\n```\n\n// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like\nGecko) Chrome/58.0.3029.110 Safari/537.3\n\n```\n\nUse the function to access all headers from within a server function:\n\n```\n\n  //  \"accept-encoding\": \"gzip, deflate, br\",\n\n```\n\n```\n\n  //  \"accept-encoding\": \"gzip, deflate, br\",\n\n```\n\nYou can also access individual headers using the function:\n\n```\n\n// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like\nGecko) Chrome/58.0.3029.110 Safari/537.3\n\n```\n\n```\n\n// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like\nGecko) Chrome/58.0.3029.110 Safari/537.3\n\n```\n\nServer functions can return a few different types of values:\n\n  * errors (can also be thrown)\n  * errors (can also be thrown)\n\nTo return any primitive or JSON-serializable object, simply return the value\nfrom the server function:\n\n```\n\n```\n\nBy default, server functions assume that any non-Response object returned is\neither a primitive or JSON-serializable object.\n\nTo respond with custom headers, you can use the function:\n\n```\n\n```\n\n## [Responding with Custom Status\nCodes](https://tanstack.com/start/latest/docs/framework/react/<#responding-with-\ncustom-status-codes>)\n\nTo respond with a custom status code, you can use the function:\n\n```\n\n```\n\nTo return a raw Response object, simply return a Response object from the server\nfunction:\n\n```\n\n  // Read a file from s3\n\n```\n\n```\n\n  // Read a file from s3\n\n```\n\nAside from special and errors, server functions can throw any custom error.\nThese errors will be serialized and sent to the client as a JSON response along\nwith a 500 status code.\n\n```\n\n  //  message: \"Something went wrong!\",\n\n  //  stack: \"Error: Something went wrong!\\n  at doStuff\n(file:///path/to/file.ts:3:3)\"\n\n```\n\n```\n\n  //  message: \"Something went wrong!\",\n\n  //  stack: \"Error: Something went wrong!\\n  at doStuff\n(file:///path/to/file.ts:3:3)\"\n\n```\n\n## [Calling server functions from within route\nlifecycles](https://tanstack.com/start/latest/docs/framework/react/<#calling-\nserver-functions-from-within-route-lifecycles>)\n\nServer functions can be called normally from route s, s, or any other router-\ncontrolled APIs. These APIs are equipped to handle errors, redirects, and\nnotFounds thrown by server functions automatically.\n\n## [Calling server functions from hooks and\ncomponents](https://tanstack.com/start/latest/docs/framework/react/<#calling-\nserver-functions-from-hooks-and-components>)\n\nServer functions can throw s or s and while not required, it is recommended to\ncatch these errors and handle them appropriately. To make this easier, the\npackage exports a hook that can be used to bind server functions to components\nand hooks:\n\n```\n\n```\n\n## [Calling server functions anywhere\nelse](https://tanstack.com/start/latest/docs/framework/react/<#calling-server-\nfunctions-anywhere-else>)\n\nWhen using server functions, be aware that redirects and notFounds they throw\nwill only be handled automatically when called from:\n\n  * Components using the useServerFn hook\n\nFor other usage locations, you'll need to handle these cases manually.\n\nServer functions can throw a error to redirect the user to a different URL. This\nis useful for handling authentication, authorization, or other scenarios where\nyou need to redirect the user to a different page.\n\n  * During SSR, redirects are handled by sending a 302 response to the client with the new location\n  * On the client, redirects are handled by the router automatically from within a route lifecycle or a component that uses the hook. If you call a server function from anywhere else, redirects will not be handled automatically.\n\nTo throw a redirect, you can use the function exported from the package:\n\n```\n\n // Redirect the user to the home page\n\n```\n\n```\n\n // Redirect the user to the home page\n\n```\n\nRedirects can utilize all of the same options as , and components. So feel free\nto also pass:\n\nRedirects can also set the status code of the response by passing a option:\n\n```\n\n // Redirect the user to the home page with a 301 status code\n\n```\n\n```\n\n // Redirect the user to the home page with a 301 status code\n\n```\n\nYou can also redirect to an external target using :\n\n```\n\n // Redirect the user to the auth provider\n\n```\n\n```\n\n // Redirect the user to the auth provider\n\n```\n\n> ‚ö†Ô∏è Do not use 's function to send soft redirects from within server functions.\n> This will send the redirect using the header and will force a full page hard\n> navigation on the client.\nYou can also set custom headers on a redirect by passing a option:\n\n```\n\n // Redirect the user to the home page with a custom header\n\n```\n\n```\n\n // Redirect the user to the home page with a custom header\n\n```\n\nWhile calling a server function from a or route lifecycle, a special error can\nbe thrown to indicate to the router that the requested resource was not found.\nThis is more useful than a simple 404 status code, as it allows you to render a\ncustom 404 page, or handle the error in a custom way. If notFound is thrown from\na server function used outside of a route lifecycle, it will not be handled\nautomatically.\n\nTo throw a notFound, you can use the function exported from the package:\n\n```\n\n // Randomly return a not found error\n\n // Or return some stuff\n\n```\n\n```\n\n // Randomly return a not found error\n\n // Or return some stuff\n\n```\n\nNot found errors are a core feature of TanStack Router,\n\nIf a server function throws a (non-redirect/non-notFound) error, it will be\nserialized and sent to the client as a JSON response along with a 500 status\ncode. This is useful for debugging, but you may want to handle these errors in a\nmore user-friendly way. You can do this by catching the error and handling it in\nyour route lifecycle, component, or hook as you normally would.\n\n```\n\n   //  message: \"Cannot read property 'foo' of undefined\",\n\n   //  stack: \"TypeError: Cannot read property 'foo' of undefined\\n  at doStuff\n(file:///path/to/file.ts:3:3)\"\n\n```\n\n```\n\n   //  message: \"Cannot read property 'foo' of undefined\",\n\n   //  stack: \"TypeError: Cannot read property 'foo' of undefined\\n  at doStuff\n(file:///path/to/file.ts:3:3)\"\n\n```\n\nWithout JavaScript enabled, there's only one way to execute server functions: by\nsubmitting a form.\n\nThis is done by adding a element to the page with .\n\n> Notice that we mentioned the attribute . This attribute only accepts a string\n> in HTML, just like all other attributes.\n> While React 19 [added support for passing a function to\n> ](https://tanstack.com/start/latest/docs/framework/react/<https:/react.dev/reference/react-\n> dom/components/form#form>), it's a React-specific feature and not part of the\n> HTML standard.\nThe attribute tells the browser where to send the form data when the form is\nsubmitted. In this case, we want to send the form data to the server function.\n\nTo do this, we can utilize the property of the server function:\n\n```\n\n```\n\n```\n\n```\n\nAnd pass this to the attribute of the form:\n\nWhen the form is submitted, the server function will be executed.\n\nTo pass arguments to a server function when submitting a form, you can use the\nelement with the attribute to attach the argument to the passed to your server\nfunction:\n\n```\n\n  // `age` will be '123'\n\n  // We need to tell the server that our data type is `multipart/form-data` by\nsetting the `encType` attribute on the form.\n\n```\n\n```\n\n  // `age` will be '123'\n\n  // We need to tell the server that our data type is `multipart/form-data` by\nsetting the `encType` attribute on the form.\n\n```\n\nWhen the form is submitted, the server function will be executed with the form's\ndata as an argument.\n\n### [No-JS Server Function Return\nValue](https://tanstack.com/start/latest/docs/framework/react/<#no-js-server-\nfunction-return-value>)\n\nRegardless of whether JavaScript is enabled, the server function will return a\nresponse to the HTTP request made from the client.\n\nWhen JavaScript is enabled, this response can be accessed as the return value of\nthe server function in the client's JavaScript code.\n\n```\n\n// `.then` is not available when JavaScript is disabled\n\n```\n\n```\n\n// `.then` is not available when JavaScript is disabled\n\n```\n\nHowever, when JavaScript is disabled, there is no way to access the return value\nof the server function in the client's JavaScript code.\n\nInstead, the server function can provide a response to the client, telling the\nbrowser to navigate in a certain way.\n\nWhen combined with a from TanStack Router, we're able to provide an experience\nsimilar to a single-page application, even when JavaScript is disabled; all by\ntelling the browser to reload the current page with new data piped through the :\n\n```\n\n  // Reload the page to trigger the loader again\n\n```\n\n```\n\n  // Reload the page to trigger the loader again\n\n```\n\n## [How are server functions\ncompiled?](https://tanstack.com/start/latest/docs/framework/react/<#how-are-\nserver-functions-compiled>)\n\nUnder the hood, server functions are extracted out of the client bundle and into\na separate server bundle. On the server, they are executed as-is, and the result\nis sent back to the client. On the client, server functions proxy the request to\nthe server, which executes the function and sends the result back to the client,\nall via .\n\nThe process looks like this:\n\n  * When is found in a file, the inner function is checked for a directive\n  * If the directive is missing, it is added to the top of the function\n  * On the client, the inner function is extracted out of the client bundle and into a separate server bundle\n  * The client-side server function is replaced with a proxy function that sends a request to the server to execute the function that was extracted\n  * On the server, the server function is not extracted, and is executed as-is\n  * After extraction occurs, each bundle applies a dead-code elimination process to remove any unused code from each bundle.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFT7IL5QJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/middleware\n\n## [What is Server Function\nMiddleware?](https://tanstack.com/start/latest/docs/framework/react/<#what-is-\nserver-function-middleware>)\n\nMiddleware allows you to customize the behavior of server functions created with\nwith things like shared validation, context, and much more. Middleware can even\ndepend on other middleware to create a chain of operations that are executed\nhierarchically and in order.\n\n## [What kinds of things can I do with Middleware in my Server\nFunctions?](https://tanstack.com/start/latest/docs/framework/react/<#what-kinds-\nof-things-can-i-do-with-middleware-in-my-server-functions>)\n\n  * : Verify a user's identity before executing a server function.\n  * : Check if a user has the necessary permissions to execute a server function.\n  * : Log requests, responses, and errors.\n  * : Collect metrics, traces, and logs.\n  * : Attach data to the request object for use in other middleware or server functions.\n  * : Handle errors in a consistent way.\n  * And many more! The possibilities are up to you!\n\n## [Defining Middleware for Server\nFunctions](https://tanstack.com/start/latest/docs/framework/react/<#defining-\nmiddleware-for-server-functions>)\n\nMiddleware is defined using the function. This function returns a object that\ncan be used to continue customizing the middleware with methods like , , , and .\n\n```\n\n```\n\n## [Using Middleware in Your Server\nFunctions](https://tanstack.com/start/latest/docs/framework/react/<#using-\nmiddleware-in-your-server-functions>)\n\nOnce you've defined your middleware, you can use it in combination with the\nfunction to customize the behavior of your server functions.\n\n```\n\n```\n\nSeveral methods are available to customize the middleware. If you are\n(hopefully) using TypeScript, the order of these methods is enforced by the type\nsystem to ensure maximum inference and type safety.\n\n  * : Add a middleware to the chain.\n  * : Modify the data object before it is passed to this middleware and any nested middleware.\n  * : Define server-side logic that the middleware will execute before any nested middleware and ultimately a server function, and also provide the result to the next middleware.\n  * : Define client-side logic that the middleware will execute before any nested middleware and ultimately the client-side RPC function (or the server-side function), and also provide the result to the next middleware.\n\nThe method is used to dependency middleware to the chain that will executed the\ncurrent middleware. Just call the method with an array of middleware objects.\n\nType-safe context and payload validation are also inherited from parent\nmiddlewares!\n\nThe method is used to modify the data object before it is passed to this\nmiddleware, nested middleware, and ultimately the server function. This method\nshould receive a function that takes the data object and returns a validated\n(and optionally modified) data object. It's common to use a validation library\nlike to do this. Here is an example:\n\n```\n\n```\n\nThe method is used to define logic that the middleware will execute both before\nand after any nested middleware and ultimately a server function. This method\nreceives an object with the following properties:\n\n  * : A function that, when called, will execute the next middleware in the chain.\n  * : The data object that was passed to the server function.\n  * : An object that stores data from parent middleware. It can be extended with additional data that will be passed to child middleware.\n\n## [Returning the required result from\n](https://tanstack.com/start/latest/docs/framework/react/<#returning-the-\nrequired-result-from-next>)\n\nThe function is used to execute the next middleware in the chain. **You must\nawait and return (or return directly) the result of the function provided to\nyou** for the chain to continue executing.\n\n```\n\n```\n\n## [Providing context to the next middleware via\n](https://tanstack.com/start/latest/docs/framework/react/<#providing-context-to-\nthe-next-middleware-via-next>)\n\nThe function can be optionally called with an object that has a property with an\nobject value. Whatever properties you pass to this value will be merged into the\nparent and provided to the next middleware.\n\n```\n\n```\n\nDespite server functions being mostly server-side bound operations, there is\nstill plenty of client-side logic surrounding the outgoing RPC request from the\nclient. This means that we can also define client-side logic in middleware that\nwill execute on the client side around any nested middleware and ultimately the\nRPC function and its response to the client.\n\nBy default, middleware validation is only performed on the server to keep the\nclient bundle size small. However, you may also choose to validate data on the\nclient side by passing the option to the function. This will cause the data to\nbe validated on the client side before being sent to the server, potentially\nsaving a round trip.\n\n> Why can't I pass a different validation schema for the client?\n> The client-side validation schema is derived from the server-side schema. This\n> is because the client-side validation schema is used to validate the data\n> before it is sent to the server. If the client-side schema were different from\n> the server-side schema, the server would receive data that it did not expect,\n> which could lead to unexpected behavior.\n```\n\n```\n\nClient middleware logic is defined using the method on a object. This method is\nused to define client-side logic that the middleware will execute both before\nand after any nested middleware and ultimately the client-side RPC function (or\nthe server-side function if you're doing SSR or calling this function from\nanother server function).\n\n**Client-side middleware logic shares much of the same API as logic created with\nthe method, but it is executed on the client side.** This includes:\n\n  * Requiring the function to be called to continue the chain.\n  * The ability to provide context to the next client middleware via the function.\n  * The ability to modify the data object before it is passed to the next client middleware.\n\nSimilar to the function, it also receives an object with the following\nproperties:\n\n  * : A function that, when called, will execute the next client middleware in the chain.\n  * : The data object that was passed to the client function.\n  * : An object that stores data from parent middleware. It can be extended with additional data that will be passed to child middleware.\n\n## [Sending client context to the\nserver](https://tanstack.com/start/latest/docs/framework/react/<#sending-client-\ncontext-to-the-server>)\n\n**Client context is NOT sent to the server by default since this could end up\nunintentionally sending large payloads to the server.** If you need to send\nclient context to the server, you must call the function with a property and\nobject to transmit any data to the server. Any properties passed to will be\nmerged, serialized and sent to the server along with the data and will be\navailable on the normal context object of any nested server middleware.\n\n```\n\n    // Send the workspace ID to the server\n\n  // Woah! We have the workspace ID from the client!\n\n```\n\n```\n\n    // Send the workspace ID to the server\n\n  // Woah! We have the workspace ID from the client!\n\n```\n\nYou may have noticed that in the example above that while client-sent context is\ntype-safe, it is is not required to be validated at runtime. If you pass dynamic\nuser-generated data via context, that could pose a security concern, so **if you\nare sending dynamic data from the client to the server via context, you should\nvalidate it in the server-side middleware before using it.** Here's an example:\n\n```\n\n  // Validate the workspace ID before using it\n\n```\n\n```\n\n  // Validate the workspace ID before using it\n\n```\n\n## [Sending server context to the\nclient](https://tanstack.com/start/latest/docs/framework/react/<#sending-server-\ncontext-to-the-client>)\n\nSimilar to sending client context to the server, you can also send server\ncontext to the client by calling the function with a property and object to\ntransmit any data to the client. Any properties passed to will be merged,\nserialized and sent to the client along with the response and will be available\non the normal context object of any nested client middleware.\n\n```\n\n  // Woah! We have the time from the server!\n\n    // Send the current time to the client\n\n```\n\n```\n\n  // Woah! We have the time from the server!\n\n    // Send the current time to the client\n\n```\n\nMiddleware that uses the method executes in the same context as server\nfunctions, so you can follow the exact same to read and modify anything about\nthe request headers, status codes, etc.\n\nMiddleware that uses the method executes in a than server functions, so you\ncan't use the same utilities to read and modify the request. However, you can\nstill modify the request returning additional properties when calling the\nfunction. Currently supported properties are:\n\n  * : An object containing headers to be added to the request.\n\nHere's an example of adding an header any request using this middleware:\n\n```\n\n```\n\nMiddleware can be used in two different ways:\n\n  * : Middleware that should be executed for every request.\n  * : Middleware that should be executed for a specific server function.\n\nGlobal middleware is registered using the function. This function receives an\narray of middleware to be appended to the global middleware array. There is\ncurrently no way to remove global middleware once it has been registered.\n\nHere's an example of registering global middleware:\n\n```\n\n```\n\nGlobal middleware types are inherently from server functions themselves. This\nmeans that if a global middleware supplies additional context to server\nfunctions or other server function specific middleware, the types will not be\nautomatically passed through to the server function or other server function\nspecific middleware.\n\n```\n\n// <-- This will not be typed!\n\n```\n\n```\n\n// <-- This will not be typed!\n\n```\n\nTo solve this, add the global middleware you are trying to reference to the\nserver function's middleware array. **The global middleware will be deduped to a\nsingle entry (the global instance), and your server function will receive the\ncorrect types.**\n\nHere's an example of how this works:\n\nMiddleware is executed dependency-first, starting with global middleware,\nfollowed by server function middleware. The following example will log the\nfollowing in this order:\n\nMiddleware functionality is tree-shaken based on the environment for each bundle\nproduced.\n\n  * On the server, nothing is tree-shaken, so all code used in middleware will be included in the server bundle.\n  * On the client, all server-specific code is removed from the client bundle. This means any code used in the method is always removed from the client bundle. If is set to , the client-side validation code will be included in the client bundle, otherwise validation code will also be removed.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBDL2JIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/api-routes\n\nAPI Routes are a powerful feature of TanStack Start that allow you to create\nserver-side endpoints in your application without the need for a separate\nserver. API Routes are useful for handling form submissions, user\nauthentication, and more.\n\nBy default, API Routes are defined in your directory of your project and are\nautomatically handled by the TanStack Start server.\n\n> üß† This means that by default, your API Routes will be prefixed with and will\n> be served from the same server as your application. You can customize this\n> base path by changing the in your TanStack Start config.\nAPI Routes in TanStack Start, follow the same file-based routing conventions as\nTanStack Router. This means that each file in your directory that is prefixed\nwith (which can be configured) will be treated as an API route. Here are a few\nexamples:\n\n  * will create an API route at \n  * will create an API route at \n  * will create an API route at \n  * will create an API route at \n  * will create an API route at \n  * will create an API route at \n  * will create an API route at \n\nYour route files that are prefixed with , can be thought of as the handlers for\nthe given API route path.\n\nIt's important to remember that each route can only have a single handler file\nassociated with it. So, if you have a file named which'd equal the request path\nof , you cannot have other files that'd also resolve to the same route, like:\n\n‚ùó One more thing, API Routes do not have the concept of pathless/layout routes\nor parallel routes. So, a file named:\n\nIn the examples above, you may have noticed that the file naming conventions are\nflexible and allow you to mix and match directories and file names. This is\nintentional and allows you to organize your API Routes in a way that makes sense\nfor your application. You can read more about this in the [TanStack Router File-\nbased Routing\nGuide](https://tanstack.com/start/latest/docs/framework/react/</router/latest/docs/framework/react/guide/file-\nbased-routing#s-or-s>).\n\n## [Setting up the entry\nhandler](https://tanstack.com/start/latest/docs/framework/react/<#setting-up-\nthe-entry-handler>)\n\nBefore you can create your API routes, you need to set up the entry handler for\nyour TanStack Start project. This entry handler, similar to and , handles the\nAPI incoming requests and routes them to the appropriate API route handler. The\nAPI entry handler is defined in the file in your project.\n\nThis file is responsible for creating the API handler that will be used to route\nincoming requests to the appropriate API route handler. The is a helper function\nthat will automatically load and execute the appropriate API route handler based\non the incoming request.\n\nAPI Routes export an APIRoute instance by calling the function. Similar to other\nfile-based routes in TanStack Router, the first argument to this function is the\npath of the route. The function returned is called again with an object that\ndefines the route handlers for each HTTP method.\n\nIf you've already got the dev server running, when you create a new API route,\nit'll automatically have the initial handler set up for you. From there on, you\ncan customize the handler as needed.\n\n```\n\n```\n\nEach HTTP method handler receives an object with the following properties:\n\n  * : The incoming request object. You can read more about the object in the .\n  * : An object containing the dynamic path parameters of the route. For example, if the route path is , and the request is made to , then will be . We'll cover dynamic path parameters and wildcard parameters later in this guide.\n\nOnce you've processed the request, you need to return a object or . This can be\ndone by creating a new object and returning it from the handler. You can read\nmore about the object in the .\n\nAPI Routes support dynamic path parameters, which are denoted by a followed by\nthe parameter name. For example, a file named will create an API route at that\naccepts a dynamic parameter.\n\n```\n\n// Visit /api/users/123 to see the response\n\n```\n\n```\n\n// Visit /api/users/123 to see the response\n\n```\n\nYou can also have multiple dynamic path parameters in a single route. For\nexample, a file named will create an API route at that accepts two dynamic\nparameters.\n\n```\n\n// Visit /api/users/123/posts/456 to see the response\n\n// User ID: 123, Post ID: 456\n\n```\n\n```\n\n// Visit /api/users/123/posts/456 to see the response\n\n// User ID: 123, Post ID: 456\n\n```\n\nAPI Routes also support wildcard parameters at the end of the path, which are\ndenoted by a followed by nothing. For example, a file named will create an API\nroute at that accepts a wildcard parameter.\n\n```\n\n// Visit /api/file/hello.txt to see the response\n\n```\n\n```\n\n// Visit /api/file/hello.txt to see the response\n\n```\n\n## [Handling requests with a\nbody](https://tanstack.com/start/latest/docs/framework/react/<#handling-\nrequests-with-a-body>)\n\nTo handle POST requests,you can add a handler to the route object. The handler\nwill receive the request object as the first argument, and you can access the\nrequest body using the method.\n\n```\n\n// Send a POST request to /api/hello with a JSON body like { \"name\": \"Tanner\" }\n\n```\n\n```\n\n// Send a POST request to /api/hello with a JSON body like { \"name\": \"Tanner\" }\n\n```\n\nThis also applies to other HTTP methods like , , and . You can add handlers for\nthese methods in the route object and access the request body using the\nappropriate method.\n\nIt's important to remember that the method returns a that resolves to the parsed\nJSON body of the request. You need to the result to access the body.\n\nThis is a common pattern for handling POST requests in API Routes. You can also\nuse other methods like or to access the body of the request.\n\nWhen returning JSON using a Response object, this is a common pattern:\n\n```\n\n// Visit /api/hello to see the response\n\n```\n\n```\n\n// Visit /api/hello to see the response\n\n```\n\nOr you can use the helper function to automatically set the header to and\nserialize the JSON object for you.\n\n```\n\n// Visit /api/hello to see the response\n\n```\n\n```\n\n// Visit /api/hello to see the response\n\n```\n\n## [Responding with a status\ncode](https://tanstack.com/start/latest/docs/framework/react/<#responding-with-\na-status-code>)\n\nYou can set the status code of the response by either:\n\n  * Passing it as a property of the second argument to the constructor\n```\n\n```\n\n```\n\n```\n\n  * ```\n\n```\n\n```\n\n```\n\nIn this example, we're returning a status code if the user is not found. You can\nset any valid HTTP status code using this method.\n\n## [Setting headers in the\nresponse](https://tanstack.com/start/latest/docs/framework/react/<#setting-\nheaders-in-the-response>)\n\nSometimes you may need to set headers in the response. You can do this by\neither:\n\n  * Passing an object as the second argument to the constructor.\n```\n\n// Visit /api/hello to see the response\n\n```\n\n```\n\n// Visit /api/hello to see the response\n\n```\n\n  * Or using the helper function from .\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Bryntum Gantt: Flexible and powerful JS Gantt charts for smarter project\nplanning.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEBDEZ3JCA7ILK3LCKYD6K7KC67DT2QYF67IT27YCA7IK2JWFTBDL27JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/ssr\n\nServer-side rendering (SSR) is the process of rendering your application on the\nserver and sending or streaming the rendered HTML to the client. This can be\nuseful for both improving the performance of your application and improving SEO,\nas it allows users to see the content of your application faster and allows\nsearch engines to crawl your application more easily.\n\nTanStack Start supports server-side rendering out of the box. To enable server-\nside rendering, create an file in your project:\n\n```\n\n```\n\nThis file exports a function that creates a server-side rendering handler. The\nhandler is created using the function from , which takes an object with the\nfollowing properties:\n\n  * : A function that creates a router for your application. This function should return a new router instance each time it is called.\n  * : A function that returns a manifest of all the routes in your application.\n\nThe handler is then called with the function from , which is a function that\nstreams the response to the client.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBDL27UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/hosting\n\nHosting is the process of deploying your application to the internet so that\nusers can access it. This is a critical part of any web development project,\nensuring your application is available to the world. TanStack Start is built on\n, a powerful server toolkit for deploying web applications anywhere. Nitro\nallows TanStack Start to provide a unified API for SSR, streaming, and hydration\non any hosting provider.\n\nTanStack Start is **designed to work with any hosting provider** , so if you\nalready have a hosting provider in mind, you can deploy your application there\nusing the full-stack APIs provided by TanStack Start.\n\nHowever, since hosting is one of the most crucial aspects of your application's\nperformance, reliability, and scalability, we highly recommend using our\nOfficial Hosting Partner .\n\nNetlify is a leading hosting platform that provides a fast, secure, and reliable\nenvironment for deploying your web applications. With Netlify, you can deploy\nyour TanStack Start application in just a few clicks and benefit from features\nlike a global edge network, automatic scaling, and seamless integrations with\nGitHub and GitLab. Netlify is designed to make your development process as\nsmooth as possible, from local development to production deployment.\n\n  * To learn more about Netlify, visit the \n  * To sign up, visit the \n\nThe page is still a work in progress. We'll keep updating this page with guides\non deployment to different hosting providers soon!\n\nWhen a TanStack Start application is being deployed, the value in the file\ndetermines the deployment target. The deployment target can be set to one of the\nfollowing values:\n\n  * : Deploy to Cloudflare Pages\n  * : Deploy to a Node.js server\n  * : Deploy to a Bun server\n  * ... and more to come!\n\nOnce you've chosen a deployment target, you can follow the deployment guidelines\nbelow to deploy your TanStack Start application to the hosting provider of your\nchoice.\n\n```\n\n```\n\nOr you can use the flag with the command to specify the deployment target when\nbuilding the application:\n\nDeploy you application to Netlify using their one-click deployment process, and\nyou're ready to go!\n\nDeploying your TanStack Start application to Vercel is easy and straightforward.\nJust set the value to in your file, and you're ready to deploy your application\nto Vercel.\n\n```\n\n```\n\nOr you can use the flag with the command to specify the deployment target when\nbuilding the application:\n\nDeploy you application to Vercel using their one-click deployment process, and\nyou're ready to go!\n\nWhen deploying to Cloudflare Pages, you'll need to complete a few extra steps\nbefore your users can start using your app.\n\nFirst you will need to install\n\nSet the value to and the value to the from in your file.\n\n```\n\n```\n\n```\n\n```\n\nDeploy you application to Cloudflare Pages using their one-click deployment\nprocess, and you're ready to go!\n\n```\n\n// Or you can use the --preset flag with the build command\n\n// to specify the deployment target when building the application:\n\n// npm run build --preset node-server\n\n```\n\n```\n\n// Or you can use the --preset flag with the build command\n\n// to specify the deployment target when building the application:\n\n// npm run build --preset node-server\n\n```\n\nThen you can run the following command to build and start your application:\n\nYou're now ready to deploy your application to a Node.js server. You can start\nyour application by running:\n\nCurrently, the Bun specific deployment guidelines only work with React 19. If\nyou are using React 18, please refer to the deployment guidelines.\n\nMake sure that your and packages are set to version 19.0.0 or higher in your\nfile. If not, run the following command to upgrade the packages:\n\n```\n\n// Or you can use the --preset flag with the build command\n\n// to specify the deployment target when building the application:\n\n// npm run build --preset bun\n\n```\n\n```\n\n// Or you can use the --preset flag with the build command\n\n// to specify the deployment target when building the application:\n\n// npm run build --preset bun\n\n```\n\nThen you can run the following command to build and start your application:\n\nYou're now ready to deploy your application to a Bun server. You can start your\napplication by running:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBDL53EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/authentication\n\nAuthentication is the process of verifying the identity of a user. This is a\ncritical part of any application that requires users to log in or access\nprotected resources. TanStack Start provides the necessary full-stack APIs to\nimplement authentication in your application.\n\nTanStack Start is **designed to work with any authentication provider** , so if\nyou already have an authentication provider or strategy in mind, you can use\neither find an existing example or implement your own authentication logic using\nthe full-stack APIs provided by TanStack Start.\n\nThat said, authentication is not something to be taken lightly. After much\nvetting, usage and reviewing on our end, we highly recommend using for the best\npossible authentication experience. Clerk provides a full suite of\nauthentication APIs and UI components that make it easy to implement\nauthentication in your application and provide a seamless user experience.\n\nClerk is a modern authentication platform that provides a full suite of\nauthentication APIs and UI components to help you implement authentication in\nyour application. Clerk is designed to be easy to use and provides a seamless\nuser experience. With Clerk, you can implement authentication in your\napplication in minutes and provide your users with a secure and reliable\nauthentication experience.\n\n  * To learn more about Clerk, visit the \n  * To sign up, visit the \n  * To get started with Clerk, check out our [official Start + Clerk examples!](https://tanstack.com/start/latest/docs/framework/react/</start/latest/docs/framework/react/examples/start-clerk-basic>)\n\nDocumentation for implementing your own authentication logic with TanStack Start\nis coming soon! In the meantime, you can check out any of the prefixed for a\nstarting point.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Get free expert guidance and resources to empower your best work. Join the Arm\nDeveloper Program.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDV53KC67DT2QYF67IT27YCA7IK2JWFTBDL53MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/databases\n\nDatabases are at the core of any dynamic application, providing the necessary\ninfrastructure to store, retrieve, and manage data. TanStack Start makes it easy\nto integrate with a variety of databases, offering a flexible approach to\nmanaging your application's data layer.\n\nTanStack Start is **designed to work with any database provider** , so if you\nalready have a preferred database system, you can integrate it with TanStack\nStart using the provided full-stack APIs. Whether you're working with SQL,\nNoSQL, or other types of databases, TanStack Start can handle your needs.\n\nThat said, the choice of a database is critical to your application's\nperformance, scalability, and reliability, which is we highly recommend using\nfor the best possible database experience.\n\nConvex is a powerful, serverless database platform that simplifies the process\nof managing your application's data. With Convex, you can build full-stack\napplications without the need to manually manage database servers or write\ncomplex queries. Convex provides a real-time, scalable, and transactional data\nbackend that seamlessly integrates with TanStack Start, making it an excellent\nchoice for modern web applications.\n\nConvex‚Äôs declarative data model and automatic conflict resolution ensure that\nyour application remains consistent and responsive, even at scale. It‚Äôs designed\nto be developer-friendly, with a focus on simplicity and productivity.\n\n  * To learn more about Convex, visit the \n  * To sign up, visit the \n\nDocumentation for integrating different databases with TanStack Start is coming\nsoon! In the meantime, keep an eye on our examples and guide to learn how to\nfully leverage your data layer across your TanStack Start application.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBDL537HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/observability\n\nObservability is a critical aspect of modern web development, enabling you to\nmonitor, trace, and debug your application‚Äôs performance and errors. TanStack\nStart integrates seamlessly with observability tools to provide comprehensive\ninsights into how your application behaves in production, helping you ensure\nthat everything runs smoothly.\n\nTanStack Start is **designed to work with any observability tool** , so you can\nintegrate your preferred solution using the full-stack APIs provided by TanStack\nStart. Whether you need logging, tracing, or error monitoring, TanStack Start is\nflexible enough to meet your observability needs.\n\nHowever, for the best observability experience, we highly recommend using .\nSentry is a powerful, full-featured observability platform that provides real-\ntime insights into your application's performance and error tracking.\n\nSentry is a leading observability platform that helps developers monitor and fix\ncrashes in real-time. With Sentry, you can track errors, performance issues, and\ntrends across your entire stack, from the frontend to the backend. Sentry\nintegrates seamlessly with TanStack Start, enabling you to identify and resolve\nissues faster, maintain a high level of performance, and deliver a better\nexperience to your users.\n\nSentry‚Äôs comprehensive dashboards, alerting capabilities, and in-depth error\nanalysis tools make it an invaluable resource for any development team looking\nto maintain control over their application‚Äôs health in production.\n\n  * To learn more about Sentry, visit the \n  * To sign up, visit the \n\nDocumentation for integrating different observability tools with TanStack Start\nis coming soon! Stay tuned for more examples and guides on how to use Sentry\neffectively with your TanStack Start projects.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Streamline software patching and vulnerability response on macOS. Deploy\nWorkbrew ‚Äì it‚Äôs free.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCKSDK2JKC67DT2QYF67IT27YCA7IK2JWFTBDLKJYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/static-prerendering\n\n> Static Prerendering is a feature of Nitro, and while it is available in\n> TanStack Start, we are still exploring the best practices for using it. Tread\n> lightly!\nStatic prerendering is the process of generating static HTML files for your\napplication. This can be useful for either improving the performance of your\napplication, as it allows you to serve pre-rendered HTML files to users without\nhaving to generate them on the fly or for deploying static sites to platforms\nthat do not support server-side rendering.\n\nTanStack Start is built on Nitro, which means we can take advantage of Nitro's\nprerendering capabilities. Nitro can prerender your application to static HTML\nfiles, which can then be served to users without having to generate them on the\nfly. To prerender your application, you can add the option to your file:\n\n```\n\n```\n\nMany of the options available for prerendering are documented in the .\n\n## [Prerendering dynamic routes with\nNitro](https://tanstack.com/start/latest/docs/framework/react/<#prerendering-\ndynamic-routes-with-nitro>)\n\nNitro ships with some prebuilt hooks that let you customize the prerendering\nprocess among other things. One of these hooks is the hook. This hook allows you\nto fetch async data and add routes to a of routes to be prerendered.\n\nFor this example, let's pretend we have a blog with a list of posts. We want to\nprerender each post page. Our post route looks like . We can use the hook to\nfetch the all of our posts and add each post path to the routes set.\n\n```\n\nimport { defineConfig } from '@tanstack/start/config'\n\n   \"prerender:routes\": async (routes) => {\n\n     // fetch the pages you want to render\n     const posts = await fetch('https://api.example.com/posts')\n     const postsData = await posts.json()\n     // add each post path to the routes set\n\n```\n\n```\n\nimport { defineConfig } from '@tanstack/start/config'\n\n   \"prerender:routes\": async (routes) => {\n\n     // fetch the pages you want to render\n     const posts = await fetch('https://api.example.com/posts')\n     const postsData = await posts.json()\n     // add each post path to the routes set\n\n```\n\nAs of writing, the does not include any information on the provided hooks.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBDLK7JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/path-aliases\n\nPath aliases are a useful feature of TypeScript that allows you to define a\nshortcut for a path that could be distant in your project's directory structure.\nThis can help you avoid long relative imports in your code and make it easier to\nrefactor your project's structure. This is especially useful for avoiding long\nrelative imports in your code.\n\nBy default, TanStack Start does not include path aliases. However, you can\neasily add them to your project by updating your file in the root of your\nproject and adding the following configuration:\n\nIn this example, we've defined the path alias that maps to the directory. This\nmeans that you can now import files from the directory using the prefix.\n\nAfter updating your file, you'll need to install the plugin to enable path\naliases in your TanStack Start project. You can do this by running the following\ncommand:\n\nNow, you'll need to update your file to include the following:\n\n```\n\n   // this is the plugin that enables path aliases\n\n```\n\n```\n\n   // this is the plugin that enables path aliases\n\n```\n\nOnce this configuration has completed, you'll now be able to import files using\nthe path alias like so:\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBDLK7WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/start-basic-react-query\n\n# React Example: Start Basic React Query\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Get free resources, expert support & access to community events. Join the Arm\nDeveloper Program.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDV5QKC67DT2QYF67IT27YCA7IK2JWFTBDLK7YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/start-clerk-basic\n\n# React Example: Start Clerk Basic\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Ready to discover the latest startup AI innovations? Join us April 9-11 at\nGoogle Cloud Next.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6ADTZ3JCA7ILK3LCE7IK23KC67DT2QYF67IT27YCA7IK2JWFTBDL23EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/start-basic-auth\n\n# React Example: Start Basic Auth\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBDL23IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/start-supabase-basic\n\n# React Example: Start Supabase Basic\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBDL23NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/start-convex-trellaux\n\n# React Example: Start Convex Trellaux\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBDL23YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/start-trellaux\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/start-basic-counter\n\n# React Example: Start Basic Counter\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBDL2QWHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/quickstart-file-based\n\n# React Example: Quickstart File Based\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Monitor K8s Applications Effortlessly. Get 100% Kubernetes production\nvisibility\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEKQKC67DT2QYF67IT27YCA7IK2JWFTBDL2QUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/quickstart\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBDE5QNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/basic-file-based\n\n# React Example: Basic File Based\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBDE5QYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/basic\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBDLK3JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/kitchen-sink-file-based\n\n# React Example: Kitchen Sink File Based\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBDLK3WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/kitchen-sink\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Get free expert guidance and resources to empower your best work. Join the Arm\nDeveloper Program.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDV53KC67DT2QYF67IT27YCA7IK2JWFTBDLK3NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based\n\n# React Example: Kitchen Sink React Query File Based\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBDLK37HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/kitchen-sink-react-query\n\n# React Example: Kitchen Sink React Query\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBDLKQLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/location-masking\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBDLKQMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/authenticated-routes\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBDLKQYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/scroll-restoration\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBDLKJJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/deferred-data\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ See what your team could do with The DevSecOps Platform. Take GitLab for a\nspin.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKK7KC67DT2QYF67IT27YCA7IK2JWFTBDLKJIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/navigation-blocking\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBDLKJNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/with-trpc\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCE7I52JKC67DT2QYF67IT27YCA7IK2JWFTBDE2JMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/with-trpc-react-query\n\n# React Example: With Trpc React Query\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/router-monorepo-simple\n\n# React Example: Router Monorepo Simple\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBDE27EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/router-monorepo-react-query\n\n# React Example: Router Monorepo React Query\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBDE27LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/examples/start-basic\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Expand your abilities and master the server with the Frontend Masters\nFullstack Path. Start now!\n](https://tanstack.com/start/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JWCWSI4Z3JCA7IE2JWF6SI623KC67DT2QYF67IT27YCA7IK2JWCAYIT2QWHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/start/latest/docs/framework/react/overview\n\nTanStack Start is a full-stack React framework powered by TanStack Router. It\nprovides a full-document SSR, streaming, server functions, bundling, and more\nusing tools like and . It is ready to deploy to your favorite hosting provider!\n\nTanStack Router is a powerful, type-safe, and full-featured routing system for\nReact applications. It is designed to handle the beefiest of full-stack routing\nrequirements with ease. TanStack Start builds on top of Router's type system to\nprovide type-safe full-stack APIs that keep you in the fast lane.\n\nWhat you get with TanStack Router:\n\n  * Nested Routing and layout routes\n  * Built-in Route Loaders w/ SWR Caching\n  * Designed for client-side data caches (TanStack Query, SWR, etc.)\n  * Asynchronous route elements and error boundaries\n  * Typesafe JSON-first Search Params state management APIs\n  * Path and Search Parameter Schema Validation\n  * Custom Search Param parser/serializer support\n\nWhat you get with TanStack Start:\n\n**In summary, use TanStack Router for client-side routing and TanStack Start for\nfull-stack routing.**\n\nTanStack Start uses and to bundle and deploy your application. In fact, these\nare the same tools that power Solid Start! With these tools, we can do a few\nthings we couldn't do before:\n\n  * Provide a unified API for SSR, streaming, and hydration\n  * Extract server-only code from your client-side code (e.g. server functions)\n  * Bundle your application for deployment to any hosting provider\n\n## [When should I use\nit?](https://tanstack.com/start/latest/docs/framework/react/<#when-should-i-use-\nit>)\n\nTanStack Start is perfect for you if you want to build a full-stack React\napplication with the following requirements:\n\n## [When might I not want to use\nit?](https://tanstack.com/start/latest/docs/framework/react/<#when-might-i-not-\nwant-to-use-it>)\n\nTanStack Start is not for you if:\n\n  * Your site will be 100% static\n  * Your goal is a server-rendered site with zero JS or minimal client-side interactivity\n  * You're looking for a React-Server-Component-first framework. (We'll support RSCs soon in our own awesome flavor!)\n\n## [How is TanStack Start\nfunded?](https://tanstack.com/start/latest/docs/framework/react/<#how-is-\ntanstack-start-funded>)\n\nTanStack works closely with our partners to provide the best possible developer\nexperience while also providing solutions that work anywhere and are vetted by\nindustry experts. Each of our partners plays a unique role in the TanStack\necosystem:\n\n  * The leading hosting platform for web applications that provides a fast, secure, and reliable environment for deploying your web applications. We work closely with Netlify to ensure that TanStack Start applications not only deploy seamlessly to their platform, but also implement best practices for performance, security, and reliability regardless of where you end up deploying.\n  * The best possible authentication experience for modern web applications, including TanStack Start applications. Clerk provides TanStack Start users with first-class integrations and solutions to auth and collaborates closely with the TanStack team to ensure that TanStack Start provides APIs that are up to date with the latest in auth best practices.\n  * A serverless database platform that integrates seamlessly with TanStack Start. Convex is designed to simplify the process of managing your application's data and provides a real-time, scalable, and transactional data backend that works well with TanStack Start applications. Convex also collaborates closely with the TanStack team to ensure that TanStack Start provides APIs that are up to date with the latest in database best practices.\n  * A powerful, full-featured observability platform that integrates seamlessly with TanStack Start. Sentry helps developers monitor and fix crashes in real-time and provides insights into your application's performance and error tracking. Sentry collaborates closely with the TanStack team to ensure that TanStack Start provides APIs that are up to date with the latest in observability best practices.\n\nProceed to the next page to learn how to install TanStack Start and create your\nfirst app!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Streamline software patching and vulnerability response on macOS. Deploy\nWorkbrew ‚Äì it‚Äôs free.\n](https://tanstack.com/start/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JMCV7DEZ3JCA7IE2JMCTADTKJKC67DT2QYF67IT27YCA7IK2JWCAYIT2QYHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# routing for React applications\nURL: https://tanstack.com/router\n\n##  routing for React applications\n\nA fully type-safe React router with built-in data fetching, stale-while\nrevalidate caching and first-class search-param APIs.\n\n### Typesafe & powerful, yet familiarly simple\n\nTanStack Router builds on modern routing patterns made popular by other tools,\nbut has been re-engineered from the ground up to be 100% typesafe without\ncompromising on DX. You have your cake and eat it too!\n\n### Built-in Data Fetching with Caching\n\nHoist your data fetching and avoid waterfalls with TanStack Router's loader API\nand get instant navigations with built-in caching and automatic preloading. Need\nsomething more custom? Router's API is designed to work with your favorite\nclient-side cache libraries!\n\n### Search Param APIs to make your state-manager jealous\n\nInstead of throwing you to the URLSearchParam wolves, TanStack Router outfits\nyou with state-manager-grade search param APIs. With schemas, validation, full\ntype-safety and pre/post manipulation, you can manage your state in the URL and\neasily sync it to your state-manager of choice.\n\n[Clerk and TanStack are partnering to elevate your application's with industry-\nleading . Paired with TanStack's no-nonsense routing and tooling, you'll be\nequipped to effortlessly deliver top-notch experiences that your users can trust\nand your developers can rely\non.](https://tanstack.com/<https:/go.clerk.com/wOwHtuJ>)[Netlify and TanStack\nhave joined forces to provide developers with **world-class deployment and\nhosting capabilities** for modern web applications. Together we're focused on\ndelivering an exceptional developer experience through **seamless deployment\nworkflows, edge functions, and serverless capabilities** that help teams build\nand ship faster. Our partnership ensures TanStack applications can take full\nadvantage of Netlify's powerful platform\nfeatures.](https://tanstack.com/<https:/netlify.com?utm_source=tanstack>)[Convex\nhas teamed up with TanStack to not only deliver a **first-class end-to-end type-\nsafe database experience** to TanStack developers, but to also ensure TanStack\nis ready for the real-time database arena. Convex's all-in-one platform delivers\nend-to-end type-safety via a and together, we're elevating what's possible with\nreal-time React\napplications.](https://tanstack.com/<https:/convex.dev?utm_source=tanstack>)[Sentry\nand TanStack are on a mission to make sure your apps are. Sentry's best-in-class\nerror monitoring and performance insights combined with TanStack's cutting-edge\nlibraries ensure that you can deliver the best possible experience to your\nusers. Together, we're committed to making sure that you can build with\nconfidence.](https://tanstack.com/<https:/sentry.io?utm_source=tanstack>)\n\nSearch Param Parsing + Serialization\n\n### Take it for a spin!\n\nCreate a route, pop in a Router, and start slingin' some code!\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/kitchen-sink-file-based\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: Kitchen Sink File Based\n\n[Basic + SSR Streaming (file-\nbased)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-\nssr-streaming-file-based>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JMCV7DEZ3JCA7IE2JMCTADTKQKC67DT2QYF67IT27YCA7IK2JWCAYIT2JUHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# routing for React applications\nURL: https://tanstack.com/router/latest\n\n##  routing for React applications\n\nA fully type-safe React router with built-in data fetching, stale-while\nrevalidate caching and first-class search-param APIs.\n\n### Typesafe & powerful, yet familiarly simple\n\nTanStack Router builds on modern routing patterns made popular by other tools,\nbut has been re-engineered from the ground up to be 100% typesafe without\ncompromising on DX. You have your cake and eat it too!\n\n### Built-in Data Fetching with Caching\n\nHoist your data fetching and avoid waterfalls with TanStack Router's loader API\nand get instant navigations with built-in caching and automatic preloading. Need\nsomething more custom? Router's API is designed to work with your favorite\nclient-side cache libraries!\n\n### Search Param APIs to make your state-manager jealous\n\nInstead of throwing you to the URLSearchParam wolves, TanStack Router outfits\nyou with state-manager-grade search param APIs. With schemas, validation, full\ntype-safety and pre/post manipulation, you can manage your state in the URL and\neasily sync it to your state-manager of choice.\n\n[Clerk and TanStack are partnering to elevate your application's with industry-\nleading . Paired with TanStack's no-nonsense routing and tooling, you'll be\nequipped to effortlessly deliver top-notch experiences that your users can trust\nand your developers can rely\non.](https://tanstack.com/router/<https:/go.clerk.com/wOwHtuJ>)[Netlify and\nTanStack have joined forces to provide developers with **world-class deployment\nand hosting capabilities** for modern web applications. Together we're focused\non delivering an exceptional developer experience through **seamless deployment\nworkflows, edge functions, and serverless capabilities** that help teams build\nand ship faster. Our partnership ensures TanStack applications can take full\nadvantage of Netlify's powerful platform\nfeatures.](https://tanstack.com/router/<https:/netlify.com?utm_source=tanstack>)[Convex\nhas teamed up with TanStack to not only deliver a **first-class end-to-end type-\nsafe database experience** to TanStack developers, but to also ensure TanStack\nis ready for the real-time database arena. Convex's all-in-one platform delivers\nend-to-end type-safety via a and together, we're elevating what's possible with\nreal-time React\napplications.](https://tanstack.com/router/<https:/convex.dev?utm_source=tanstack>)[Sentry\nand TanStack are on a mission to make sure your apps are. Sentry's best-in-class\nerror monitoring and performance insights combined with TanStack's cutting-edge\nlibraries ensure that you can deliver the best possible experience to your\nusers. Together, we're committed to making sure that you can build with\nconfidence.](https://tanstack.com/router/<https:/sentry.io?utm_source=tanstack>)\n\nSearch Param Parsing + Serialization\n\n### Take it for a spin!\n\nCreate a route, pop in a Router, and start slingin' some code!\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank\nTracker](https://tanstack.com/router/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/installation\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nYou can install TanStack Router with any package manager.\n\n```\n\n```\n\n```\n\n```\n\nTanStack Router is currently only compatible with React and ReactDOM. If you\nwould like to contribute to the React Native adapter, please reach out to us on\n.\n\n  * ReactDOM v18.x.x\n    * The legacy function is not supported.\n  * TypeScript >= v5.3.x (TypeScript is optional, but recommended)\n    * We aim to support the last five minor versions of TypeScript. If you are using an older version, you may run into issues. Please upgrade to the latest version of TypeScript to ensure compatibility.\n    * We may drop support for older versions of TypeScript, outside of the range mentioned above, without warning in a minor or patch release.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/router/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBDE53MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/quick-start\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nIf you're feeling impatient and prefer to skip all of our wonderful\ndocumentation, here is the bare minimum to get going with TanStack Router using\nboth file-based route generation and code-based route configuration:\n\nFile based route generation (through Vite, and other supported bundlers) is the\nrecommended way to use TanStack Router as it provides the best experience,\nperformance, and ergonomics for the least amount of effort.\n\n### [Scaffolding Your First TanStack Router\nProject](https://tanstack.com/router/latest/docs/framework/react/<#scaffolding-\nyour-first-tanstack-router-project>)\n\n```\n\n```\n\n```\n\n```\n\nFollow the prompts to scaffold a full TanStack Router project.\n\nAlternatively, you can manually setup the project using the following steps:\n\n#### [Install TanStack Router, Vite Plugin, and the Router\nDevtools](https://tanstack.com/router/latest/docs/framework/react/<#install-\ntanstack-router-vite-plugin-and-the-router-devtools>)\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\nIf you are not using Vite, or any of the supported bundlers, you can check out\nthe guide for more info.\n\n```\n\n { createRootRoute, Link, Outlet }\n\n```\n\n```\n\n```\n\n```\n\n```\n\nRegardless of whether you are using the package and running the / scripts, or\nmanually running the / commands from your package scripts, the route tree file\nwill be generated at .\n\nImport the generated route tree and create a new router instance:\n\n```\n\n// Import the generated route tree\n\n// Create a new router instance\n\n// Register the router instance for type safety\n\n```\n\n```\n\n// Import the generated route tree\n\n// Create a new router instance\n\n// Register the router instance for type safety\n\n```\n\nIf you are working with this pattern you should change the of the root on your\nfile to\n\nThe following example shows how to configure routes using code, and for\nsimplicity's sake is in a single file for this demo. While code-based generation\nallows you to declare many routes and even the router instance in a single file,\nwe recommend splitting your routes into separate files for better organization\nand performance as your application grows.\n\n```\n\n```\n\n```\n\n```\n\nIf you glossed over these examples or didn't understand something, we don't\nblame you, because there's so much more to learn to really take advantage of\nTanStack Router! Let's move on.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Bryntum Gantt: Flexible and powerful JS Gantt charts for smarter project\nplanning.\n](https://tanstack.com/router/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEBDEZ3JCA7ILK3LCKYD6K7KC67DT2QYF67IT27YCA7IK2JWFTBDE53YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/devtools\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n> Link, take this sword... I mean Devtools!... to help you on your way!\nWave your hands in the air and shout hooray because TanStack Router comes with\ndedicated devtools! ü•≥\n\nWhen you begin your TanStack Router journey, you'll want these devtools by your\nside. They help visualize all of the inner workings of TanStack Router and will\nlikely save you hours of debugging if you find yourself in a pinch!\n\n> Please note that for now, the devtools **are only supported in React**. If you\n> would like to help us make the devtools platform-agnostic, please let us know!\nThe devtools are a separate package that you need to install:\n\n## [Only importing and using Devtools in\nDevelopment](https://tanstack.com/router/latest/docs/framework/react/<#only-\nimporting-and-using-devtools-in-development>)\n\nTo do this, simply use and the env variable of your choice to optionally return\na dummy component:\n\n```\n\n // Render nothing in production\n\n    // Lazy load in development\n\n```\n\n```\n\n // Render nothing in production\n\n    // Lazy load in development\n\n```\n\nThen wrap the component in suspense.\n\nThe easiest way for the devtools to work is to render them inside of your root\nroute (or any other route). This will automatically connect the devtools to the\nrouter instance.\n\n```\n\n```\n\n## [Manually passing the Router\nInstance](https://tanstack.com/router/latest/docs/framework/react/<#manually-\npassing-the-router-instance>)\n\nIf rendering the devtools inside of the isn't your cup of tea, a prop for the\ndevtools accepts the same instance you pass to the component. This makes it\npossible to place the devtools anywhere on the page, not just inside the\nprovider:\n\nFloating Mode will mount the devtools as a fixed, floating element in your app\nand provide a toggle in the corner of the screen to show and hide the devtools.\nThis toggle state will be stored and remembered in localStorage across reloads.\n\nPlace the following code as high in your React app as you can. The closer it is\nto the root of the page, the better it will work!\n\n```\n\n```\n\n  *     * The router instance to connect to\n  *     * Set this if you want the devtools to default to being open\n  *     * Use this to add props to the panel. For example, you can add , (merge and override default style), etc.\n  *     * Use this to add props to the close button. For example, you can add , (merge and override default style), (extend default handler), etc.\n  *     * Use this to add props to the toggle button. For example, you can add , (merge and override default style), (extend default handler), etc.\n  * position?: \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"\n    * The position of the TanStack Router logo to open and close the devtools panel\n  *     * Specifies a Shadow DOM target for the devtools.\n    * By default, devtool styles are applied to the tag of the main document (light DOM). When a is provided, styles will be applied within this Shadow DOM instead.\n\nEmbedded Mode will embed the devtools as a regular component in your\napplication. You can style it however you'd like after that!\n\n```\n\n```\n\nUse these options to style the devtools.\n\n  *     * The standard React style object used to style a component with inline styles\n  *     * The standard React className property used to style a component with classes\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/router/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBDE5QIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/comparison\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# Comparison | TanStack Router & TanStack Start vs Next.js vs React Router / Remix\nBefore you commit to a new tool, it's always nice to know how it stacks up\nagainst the competition!\n\n> This comparison table strives to be as accurate and as unbiased as possible.\n> If you use any of these libraries and feel the information could be improved,\n> feel free to suggest changes (with notes or evidence of claims) using the\n> \"Edit this page on GitHub\" link at the bottom of this page.\n  * ‚úÖ 1st-class, built-in, and ready to use with no added configuration or code\n  * üîµ Supported via addon package\n  * üü° Partial Support (on a scale of 5)\n  * üî∂ Possible, but requires custom code/implementation/casting\n\n  \nHistory, Memory & Hash Routers  \nTypesafe Absolute + Relative Navigation  \nüü° (search-string only via the / options)| üü° (search-string only via the /\noptions)  \nSearch Param Immutability + Structural Sharing  \nRuntime Route Manipulation (Fog of War)  \nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/router/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBDEK7WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/migrate-from-react-router\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# Migration from React Router Checklist\n\n** _If your UI is blank, open the console, and you will probably have some\nerrors that read something along the lines of cannot use 'useNavigate' outside\nof context . This means there are React Router api‚Äôs that are still imported and\nreferenced that you need to find and remove. The easiest way to make sure you\nfind all React Router imports is to uninstall and then you should get typescript\nerrors in your files. Then you will know what to change to a import._**\n\n  * Install Router - \n  * Uninstall React Router to get TypeScript errors on imports.\n    * At this point I don‚Äôt know if you can do a gradual migration, but it seems likely you could have multiple router providers, not desirable.\n    * The api‚Äôs between React Router and TanStack Router are very similar and could most likely be handled in a sprint cycle or two if that is your companies way of doing things.\n  * Create Routes for each existing React Router route we have\n  * Add global module in main.tsx\n  * Remove any React Router ( or ), , and Components from main.tsx\n  * Refactor function for custom setup/providers - The repo referenced above has an example - This was necessary in the case of Supertokens. Supertoken has a specific setup with React Router and a different setup with all other React implementations\n  * Set RouterProvider and pass it the router as the prop\n  * Replace all instances of React Router component with component\n    * Add prop, where necessary with params like so \n  * Replace all instances of React Router hook with hook \n  * Replace any React Router 's with the equivalent\n  * If you are using hook from React Router, move the search params default value to the validateSearch property on a Route definition.\n    * Instead of using the hook, use 's search property to update the search params state\n    * To read search params you can do something like the following\n      * const { page } = useSearch({ from: productPage.fullPath })\n  * If using React Router‚Äôs hook, update the import to be from and set the property to the literal path name where you want to read the params object from\n    * So say we have a route with the path name .\n    * In the hook we would set up our hook like so: const params = useParams({ from: \"/orders/$orderId\" })\n    * Then wherever we wanted to access the order id we would get it off of the params object \n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/router/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBDEK7YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/migrate-from-react-location\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nBefore you begin your journey in migrating from React Location, it's important\nthat you have a good understanding of the and used by TanStack Router.\n\n## [Differences between React Location and TanStack\nRouter](https://tanstack.com/router/latest/docs/framework/react/<#differences-\nbetween-react-location-and-tanstack-router>)\n\nReact Location and TanStack Router share much of same design decisions concepts,\nbut there are some key differences that you should be aware of.\n\n  * React Location uses to infer types for routes, while TanStack Router uses to infer types.\n  * Route configuration in React Location is done using a single array of route definitions, while in TanStack Router, route configuration is done using a tree of route definitions starting with the .\n  * is the recommended way to define routes in TanStack Router, while React Location only allows you to define routes in a single file using a code-based approach.\n    * TanStack Router does support a to defining routes, but it is not recommended for most use cases. You can read more about why, over here: [why is file-based routing the preferred way to define routes?](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/decisions-on-dx#3-why-is-file-based-routing-the-preferred-way-to-define-routes>)\n\nIn this guide we'll go over the process of migrating the over to TanStack Router\nusing file-based routing, with the end goal of having the same functionality as\nthe original example (styling and other non-routing related code will be\nomitted).\n\nTo use a code-based approach for defining your routes, you can read the guide.\n\n### [Step 1: Swap over to TanStack Router's\ndependencies](https://tanstack.com/router/latest/docs/framework/react/<#step-1-swap-\nover-to-tanstack-routers-dependencies>)\n\nFirst, we need to install the dependencies for TanStack Router.\n\nAnd remove the React Location dependencies.\n\n### [Step 2: Use the file-based routing\nwatcher](https://tanstack.com/router/latest/docs/framework/react/<#step-2-use-\nthe-file-based-routing-watcher>)\n\nIf your project uses Vite (or one of the supported bundlers), you can use the\nTanStack Router plugin to watch for changes in your routes files and\nautomatically update the routes configuration.\n\nInstallation of the Vite plugin:\n\nAnd add it to your :\n\n```\n\n```\n\nHowever, if your application does not use Vite, you use one of our other , or\nyou can use the package to watch for changes in your routes files and\nautomatically update the routes configuration.\n\n### [Step 3: Add the file-based configuration file to your\nproject](https://tanstack.com/router/latest/docs/framework/react/<#step-3-add-\nthe-file-based-configuration-file-to-your-project>)\n\nCreate a file in the root of your project with the following content:\n\nYou can find the full list of options for the file .\n\n### [Step 4: Create the routes\ndirectory](https://tanstack.com/router/latest/docs/framework/react/<#step-4-create-\nthe-routes-directory>)\n\nCreate a directory in the directory of your project.\n\n### [Step 5: Create the root route\nfile](https://tanstack.com/router/latest/docs/framework/react/<#step-5-create-\nthe-root-route-file>)\n\n```\n\n { createRootRoute, Outlet, Link }\n\n```\n\n### [Step 6: Create the index route\nfile](https://tanstack.com/router/latest/docs/framework/react/<#step-6-create-\nthe-index-route-file>)\n\n```\n\n```\n\n> You will need to move any related components and logic needed for the index\n> route from the file to the file.\n### [Step 7: Create the posts route\nfile](https://tanstack.com/router/latest/docs/framework/react/<#step-7-create-\nthe-posts-route-file>)\n\n```\n\n { createFileRoute, Link, Outlet }\n\n```\n\n> You will need to move any related components and logic needed for the posts\n> route from the file to the file.\n### [Step 8: Create the posts index route\nfile](https://tanstack.com/router/latest/docs/framework/react/<#step-8-create-\nthe-posts-index-route-file>)\n\n```\n\n```\n\n> You will need to move any related components and logic needed for the posts\n> index route from the file to the file.\n### [Step 9: Create the posts id route\nfile](https://tanstack.com/router/latest/docs/framework/react/<#step-9-create-\nthe-posts-id-route-file>)\n\n```\n\n```\n\n> You will need to move any related components and logic needed for the posts id\n> route from the file to the file.\n### [Step 10: Generate the route\ntree](https://tanstack.com/router/latest/docs/framework/react/<#step-10-generate-\nthe-route-tree>)\n\nIf you are using one of the supported bundlers, the route tree will be generated\nautomatically when you run the dev script.\n\nIf you are not using one of the supported bundlers, you can generate the route\ntree by running the following command:\n\n### [Step 11: Update the main entry file to render the\nRouter](https://tanstack.com/router/latest/docs/framework/react/<#step-11-update-\nthe-main-entry-file-to-render-the-router>)\n\nOnce you've generated the route-tree, you can then update the file to create the\nrouter instance and render it.\n\n```\n\n// Import the generated route tree\n\n// Create a new router instance\n\n// Register the router instance for type safety\n\n // Assuming you have a root element with the id 'root'\n\n```\n\n```\n\n// Import the generated route tree\n\n// Create a new router instance\n\n// Register the router instance for type safety\n\n // Assuming you have a root element with the id 'root'\n\n```\n\nYou should now have successfully migrated your application from React Location\nto TanStack Router using file-based routing.\n\nReact Location also has a few more features that you might be using in your\napplication. Here are some guides to help you migrate those features:\n\n  * [Wildcard / Splat / Catch-all routes](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/guide/routing-concepts#splat--catch-all-routes>)\n\nTanStack Router also has a few more features that you might want to explore:\n\nIf you are facing any issues or have any questions, feel free to ask for help in\nthe TanStack Discord.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/router/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBDE23JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/decisions-on-dx\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nWhen people first start using TanStack Router, they often have a lot of\nquestions that revolve around the following themes:\n\n> Why do I have to do things this way?\n> Why is it done this way? and not that way?\n> I'm used to doing it this way, why should I change?\nAnd they are all valid questions. For the most part, people are used to using\nrouting libraries that are very similar to each other. They all have a similar\nAPI, similar concepts, and similar ways of doing things.\n\nBut TanStack Router is different. It's not your average routing library. It's\nnot your average state management library. It's not your average anything.\n\nIt's important to remember that TanStack Router's origins stem from 's need for\na client-side routing solution that offered a first-in-class experience without\ncompromising on the that was required to power its complex dashboards.\n\nAnd so, from TanStack Router's very inception, every facet of its design was\nmeticulously thought out to ensure that its type-safety and developer experience\nwere second to none.\n\n## [How does TanStack Router achieve\nthis?](https://tanstack.com/router/latest/docs/framework/react/<#how-does-\ntanstack-router-achieve-this>)\n\nEvery aspect of TanStack Router is designed to be as type-safe as possible, and\nthis is achieved by leveraging TypeScript's type system to its fullest extent.\nThis involves using some very advanced and complex types, type inference, and\nother features to ensure that the developer experience is as smooth as possible.\n\nBut to achieve this, we had to make some decisions that deviate from the norms\nin the routing world.\n\n  1. : You have to define your routes in a way that allows TypeScript to infer the types of your routes as much as possible.\n  2. [**TypeScript module declaration for the router?**](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/decisions-on-dx/#2-declaring-the-router-instance-for-type-inference>): You have to pass the instance to the rest of your application using TypeScript's module declaration.\n  3. [**Why push for file-based routing over code-based?**](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/decisions-on-dx/#3-why-is-file-based-routing-the-preferred-way-to-define-routes>): We push for file-based routing as the preferred way to define your routes.\n\n> TLDR; All the design decisions in the developer experience of using TanStack\n> Router are made so that you can have a best-in-class type-safety experience\n> without compromising on the control, flexibility, and maintainability of your\n> route configurations.\n## [1. Why is the Router's configuration done this\nway?](https://tanstack.com/router/latest/docs/framework/react/<#1-why-is-the-\nrouters-configuration-done-this-way>)\n\nWhen you want to leverage the TypeScript's inference features to its fullest,\nyou'll quickly realize that are your best friend. And so, TanStack Router uses\nGenerics everywhere to ensure that the types of your routes are inferred as much\nas possible.\n\nThis means that you have to define your routes in a way that allows TypeScript\nto infer the types of your routes as much as possible.\n\n> Can I use JSX to define my routes?\nUsing JSX for defining your routes is , as TypeScript will not be able to infer\nthe route configuration types of your router.\n\n```\n\n// ‚õîÔ∏è This is not possible\n\n  // ^? TypeScript cannot infer the routes in this configuration\n\n```\n\n```\n\n// ‚õîÔ∏è This is not possible\n\n  // ^? TypeScript cannot infer the routes in this configuration\n\n```\n\nAnd since this would mean that you'd have to manually type the prop of the\ncomponent and wouldn't catch any errors until runtime, it's not a viable option.\n\n> Maybe I could define my routes as a tree of nested objects?\n```\n\n// ‚õîÔ∏è This file will just keep growing and growing...\n\n```\n\n```\n\n// ‚õîÔ∏è This file will just keep growing and growing...\n\n```\n\nAt first glance, this seems like a good idea. It's easy to visualize the entire\nroute hierarchy in one go. But this approach has a couple of big downsides that\nmake it not ideal for large applications:\n\n  * : As your application grows, the tree will grow and become harder to manage. And since it's all defined in one file, it can become very hard to maintain.\n  * **It's not great for code-splitting** : You'd have to manually code-split each component and then pass it into the property of the route, further complicating the route configuration with an ever-growing route configuration file.\n\nThis only gets worse as you begin to use more features of the router, such as\nnested context, loaders, search param validation, etc.\n\n> So, what's the best way to define my routes?\nWhat we found to be the best way to define your routes is to abstract the\ndefinition of the route configuration outside of the route-tree. Then stitch\ntogether your route configurations into a single cohesive route-tree that is\nthen passed into the function.\n\nYou can read more about to see how to define your routes in this way.\n\nFinding Code-based routing to be a bit too cumbersome? See why is the preferred\nway to define your routes.\n\n## [2. Declaring the Router instance for type\ninference](https://tanstack.com/router/latest/docs/framework/react/<#2-declaring-\nthe-router-instance-for-type-inference>)\n\n> Why do I have to declare the ?\n> This declaration stuff is way too complicated for me...\nOnce you've constructed your routes into a tree and passed it into your Router\ninstance (using ) with all the generics working correctly, you then need to\nsomehow pass this information to the rest of your application.\n\nThere were two approaches we considered for this:\n\n  1. : You could import the instance from the file where you created it and use it directly in your components.\n\n```\n\n```\n\nA downside to this approach is that you'd have to import the entire instance\ninto every file where you want to use it. This can lead to increased bundle\nsizes and can be cumbersome to manage, and only get worse as your application\ngrows and you use more features of the router.\n\n  1. : You can use TypeScript's module declaration to declare the instance as a module that can be used for type inference anywhere in your application without having to import it.\n\nYou'll do this once in your application.\n\nAnd then you can benefit from its auto-complete anywhere in your app without\nhaving to import it.\n\n```\n\n   // ^? TypeScript will auto-complete this for you\n\n```\n\n```\n\n   // ^? TypeScript will auto-complete this for you\n\n```\n\nWe went with , as it is what we found to be the most scalable and maintainable\napproach with the least amount of overhead and boilerplate.\n\n## [3. Why is file-based routing the preferred way to define\nroutes?](https://tanstack.com/router/latest/docs/framework/react/<#3-why-is-\nfile-based-routing-the-preferred-way-to-define-routes>)\n\n> Why are the docs pushing for file-based routing?\n> I'm used to defining my routes in a single file, why should I change?\nSomething you'll notice (quite soon) in the TanStack Router documentation is\nthat we push for as the preferred method for defining your routes. This is\nbecause we've found that file-based routing is the most scalable and\nmaintainable way to define your routes.\n\nBefore you continue, it's important you have a good understanding of and .\n\nAs mentioned in the beginning, TanStack Router was designed for complex\napplications that require a high degree of type-safety and maintainability. And\nto achieve this, the configuration of the router has been done in a precise way\nthat allows TypeScript to infer the types of your routes as much as possible.\n\nA key difference in the set-up of a application with TanStack Router, is that\nyour route configurations require a function to be provided to , that returns\nthe parent route of the current route.\n\n```\n\n```\n\nAt this stage, this is done so the definition of can be aware of its location in\nthe route tree and so that it can correctly infer the types of the , , returned\nby the parent route. Incorrectly defining the function means that the properties\nof the parent route will not be correctly inferred by the child route.\n\nAs such, this is a critical part of the route configuration and a point of\nfailure if not done correctly.\n\nBut this is only one part of setting up a basic application. TanStack Router\nrequires all the routes (including the root route) to be stitched into a so that\nit may be passed into the function before declaring the instance on the module\nfor type inference. This is another critical part of the route configuration and\na point of failure if not done correctly.\n\n> ü§Ø If this route-tree were in its own file for an application with ~40-50\n> routes, it can easily grow up to 700+ lines.\nThis complexity only increases as you begin to use more features of the router,\nsuch as nested context, loaders, search param validation, etc. As such, it no\nlonger becomes feasible to define your routes in a single file. And so, users\nend up building their own way of defining their routes across multiple files.\nThis can lead to inconsistencies and errors in the route configuration.\n\nFinally, comes the issue of code-splitting. As your application grows, you'll\nwant to code-split your components to reduce the initial bundle size of your\napplication. This can be a bit of a headache to manage when you're defining your\nroutes in a single file or even across multiple files.\n\n```\n\n```\n\nAll of this boilerplate, no matter how essential for providing a best-in-class\ntype-inference experience, can be a bit overwhelming and can lead to\ninconsistencies and errors in the route configuration.\n\n... and this example configuration is just for rendering a single codes-split\nroute. Imagine having to do this for 40-50 routes. Now remember that you still\nhaven't touched the , , , and other features of the router ü§ï.\n\n> So, why's file-based routing the preferred way?\nTanStack Router's file-based routing is designed to solve all of these issues.\nIt allows you to define your routes in a predictable way that is easy to manage\nand maintain, and is scalable as your application grows.\n\nThe file-based routing approach is powered by the TanStack Router CLI. It\nperforms 3 essential tasks that solve the pain points in route configuration\nwhen using code-based routing:\n\n  1. : It generates the boilerplate for your route configurations.\n  2. : It stitches together your route configurations into a single cohesive route-tree. Also in the background, it correctly updates the route configurations to define the function match the routes with their parent routes.\n  3. : It automatically code-splits your components and handles updating your route configurations with the correct lazy imports.\n\nLet's take a look at how the route configuration for the previous example would\nlook like with file-based routing.\n\n```\n\n 'Posts index component goes here!!!'\n\n```\n\n```\n\nPosts index component goes here!!!\n\n```\n\nThat's it! No need to worry about defining the function, stitching together the\nroute-tree, or code-splitting your components. The CLI handles all of this for\nyou.\n\nAt no point does the TanStack Router CLI take away your control over your route\nconfigurations. It's designed to be as flexible as possible, allowing you to\ndefine your routes in a way that suits your application whilst reducing the\nboilerplate and complexity of the route configuration.\n\nCheck out the guides for and for a more in-depth explanation of how they work in\nTanStack Router.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/router/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBDE23UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/route-trees\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nTanStack Router uses a nested route tree to match up the URL with the correct\ncomponent tree to render.\n\nTo build a route tree, TanStack Router supports both:\n\nBoth methods support the exact same core features and functionality, but **file-\nbased routing requires less code for the same or better results**. For this\nreasons, **file-based routing is the preferred and recommended way to configure\nTanStack Router and most of the documentation is written from the perspective of\nfile-based routing**\n\nFor code-based routing documentation, please see the guide.\n\nNested routing is a powerful concept that allows you to use a URL to render a\nnested component tree. For example, given the URL of , you could create a route\nhierarchy that looks like this:\n\n```\n\n‚îÇ  ‚îÇ  ‚îú‚îÄ‚îÄ $postId\n\n```\n\n```\n\n‚îÇ  ‚îÇ  ‚îú‚îÄ‚îÄ\n\n```\n\nAnd render a component tree that looks like this:\n\nLet's take that concept and expand it out to a larger site structure, but with\nfile-names now:\n\n```\n\n```\n\n```\n\n```\n\nThe above is a valid route tree configuration that can be used with TanStack\nRouter! There's a lot of power and convention to unpack with file-based routing,\nso let's break it down a bit.\n\nRoute trees can be configured using a few different ways:\n\n  * [Mixed Flat Routes and Directories](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/guide/file-based-routing#mixed-flat-and-directory-routes>)\n\nPlease be sure to check out the full documentation links above for each type of\nroute tree, or just proceed to the next section to get started with file-based\nrouting.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBDE2QIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/routing-concepts\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nTanStack Router supports a number of powerful routing concepts that allow you to\nbuild complex and dynamic routing systems with ease.\n\nEach of these concepts is useful and powerful, and we'll dive into each of them\nin the following sections.\n\nThe root route is the top-most route in the entire tree and encapsulates all\nother routes as children.\n\nEven though it doesn't have a path, the root route has access to all of the same\nfunctionality as other routes including:\n\nTo create a root route, call the constructor and export it as the variable in\nyour route file:\n\n> üß† You can also create a root route via the function, which is a type-safe way\n> of doing dependency injection for the entire router. Read more about this in\n> the -->\nAll other routes other than the root route are configured using the function,\nwhich provides type safety when using file-based routing:\n\nThe function takes a single argument, the file-route's path as a string.\n\n**‚ùì‚ùì‚ùì \"Wait, you're making me pass the path of the route file to ?\"**\n\nYes! But don't worry, this path is **automatically written and managed by the\nrouter for you via the TanStack Router plugin or Router CLI.** So, as you create\nnew routes, move routes around or rename routes, the path will be updated for\nyou automatically.\n\n> üß† The reason for this pathname has everything to do with the magical type\n> safety of TanStack Router. Without this pathname, TypeScript would have no\n> idea what file we're in! (We wish TypeScript had a built-in for this, but they\n> don't yet ü§∑‚Äç‚ôÇÔ∏è)\nStatic routes match a specific path, for example , , are all static routes, as\nthey match the path exactly.\n\nLet's take a look at an route:\n\n```\n\n```\n\nStatic routes are simple and straightforward. They match the path exactly and\nrender the provided component.\n\nIndex routes specifically target their parent route when it is **matched exactly\nand no child route is matched**.\n\nLet's take a look at an index route for a URL:\n\n```\n\n// Note the trailing slash, which is used to target index routes\n\n```\n\n```\n\n// Note the trailing slash, which is used to target index routes\n\n```\n\nThis route will be matched when the URL is exactly.\n\nRoute path segments that start with a followed by a label are dynamic and\ncapture that section of the URL into the object for use in your application. For\nexample, a pathname of would match the route, and the object would be .\n\nThese params are then usable in your route's configuration and components! Let's\nlook at a route:\n\n```\n\n // Or in a component\n\n```\n\n```\n\n // Or in a component\n\n```\n\n> üß† Dynamic segments work at segment of the path. For example, you could have a\n> route with the path of and each segment would be captured into the object.\nA route with a path of only is called a \"splat\" route because it captures\nremaining section of the URL pathname from the to the end. The captured pathname\nis then available in the object under the special property.\n\nFor example, a route targeting the path is a splat route. If the URL pathname is\n, the object would contain under the special property:\n\n> ‚ö†Ô∏è In v1 of the router, splat routes are also denoted with a instead of a key\n> for backwards compatibility. This will be removed in v2.\n> üß† Why use ? Thanks to tools like Remix, we know that despite s being the most\n> common character to represent a wildcard, they do not play nice with filenames\n> or CLI tools, so just like them, we decided to use instead.\nRoutes that are prefixed with an underscore () are considered \"pathless\" and are\nused to wrap child routes with additional components and logic, without\nrequiring a matching in the URL. You can use pathless routes to:\n\n  * Wrap child routes with a layout component\n  * Enforce a requirement before displaying any child routes\n  * Validate and provide search params to child routes\n  * Provide fallbacks for error components or pending elements to child routes\n  * Provide shared context to all child routes\n\n> üß† The part of the path after the prefix is used as the route's ID and is\n> required because every route must be uniquely identifiable, especially when\n> using TypeScript so as to avoid type errors and accomplish autocomplete\n> effectively.\nLet's take a look at an example route called :\n\nIn the tree above, is a pathless route that wraps two child routes, and . The\nroute is used to wrap the child routes with a layout component:\n\n```\n\n```\n\nThe following table shows which component will be rendered based on the URL:\n\nNon-nested routes can be created by suffixing a parent file route segment with a\nand are used to a route from it's parents and render its own component tree.\n\nConsider the following flat route tree:\n\nThe following table shows which component will be rendered based on the URL:\n\n  * The route is nested as normal under the route and will render .\n  * The route the same prefix as the other routes and therefore will be treated as if it is a top-level route and will render .\n\n404 / Not-Found routes, while not an explicit part of the route tree, are a\nuseful abstraction on the concept.\n\nSure, you could technically (and monotonously) place a splat / catch-all route\nunder every route branch you create. But even at a small scale, this is\ncumbersome and prone to error. Instead, you can create a special and provide it\nto your router's option.\n\n> ‚ö†Ô∏è Never include a in your route tree. Doing so will not allow it to work at\n> every branch of your route tree.\n  * excess path segments are found in the URL beyond all possible route matches\n  * there is no dynamic segment or splat route to capture the excess path segments\n  * there is no index route to render when the parent route is matched\n  * a is provided to the router\n\ns are special versions of a that:\n\n  * Cannot parse or validate path params\n\nThey do however still have the ability to:\n\n  * Receive and search params from the root route\n\nWe'll cover how to configure a in the [Route Matching - Not-Found\nRoutes](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/guide/route-\nmatching#not-found-routes>) guide.\n\nPathless route group directories use as a way to group routes files together\nregardless of their path. They are purely organizational and do not affect the\nroute tree or component tree in any way.\n\n```\n\n```\n\n```\n\n```\n\nIn the example above, the and directories are purely organizational and do not\naffect the route tree or component tree in any way. They are used to group\nrelated routes together for easier navigation and organization.\n\nThe following table shows which component will be rendered based on the URL:\n\nAs you can see, the and directories are purely organizational and do not affect\nthe route tree or component tree in any way.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBDE2QNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/code-splitting\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nCode splitting and lazy loading is a powerful technique for improving the bundle\nsize and load performance of an application.\n\n  * Reduces the amount of code that needs to be loaded on initial page load\n  * Code is loaded on-demand when it is needed\n  * Results in more chunks that are smaller in size that can be cached more easily by the browser.\n\n## [How does TanStack Router split\ncode?](https://tanstack.com/router/latest/docs/framework/react/guide/<#how-does-\ntanstack-router-split-code>)\n\nTanStack Router separates code into two categories:\n\n  * - The code that is required to render the current route and kick off the data loading process as early as possible.\n    * All other route configuration not listed below\n  * - The code that is not required to match the route, and can be loaded on-demand.\n\n> üß† **Why is the loader not split?**\n>   * The loader is already an asynchronous boundary, so you pay double to both\n> get the chunk wait for the loader to execute.\n>   * Categorically, it is less likely to contribute to a large bundle size than\n> a component.\n>   * The loader is one of the most important preloadable assets for a route,\n> especially if you're using a default preload intent, like hovering over a\n> link, so it's important for the loader to be available without any additional\n> async overhead.\n> Knowing the disadvantages of splitting the loader, if you still want to go\n> ahead with it, head over to the section.\n>\n\nTanStack Router supports multiple approaches to code splitting. If you are using\ncode-based routing, skip to the section.\n\nWhen you are using file-based routing, you can use the following approaches to\ncode splitting:\n\n## [Encapsulating a route's files into a\ndirectory](https://tanstack.com/router/latest/docs/framework/react/guide/<#encapsulating-\na-routes-files-into-a-directory>)\n\nSince TanStack Router's file-based routing system is designed to support both\nflat and nested file structures, it's possible to encapsulate a route's files\ninto a single directory without any additional configuration.\n\nTo encapsulate a route's files into a directory, move the route file itself into\na file within a directory with the same name as the route file.\n\nFor example, if you have a route file named , you would create a new directory\nnamed and move the file into that directory, renaming it to .\n\nIf you're using the recommended approach, code splitting is **as easy as moving\nyour code into a separate file with a suffix** and use the function instead of\nthe class or function.\n\nHere are the options currently supported by the function:\n\nThe component to render for the route.  \n---  \nThe component to render when an error occurs while loading the route.  \nThe component to render while the route is loading.  \nThe component to render if a not-found error gets thrown.  \n  * The route file does not support code splitting, since it's always rendered regardless of the current route.\n\nWhen you are using you can split your route into two files to enable code\nsplitting:\n\n```\n\n```\n\n**After (Split into two files)**\n\nThis file would contain the critical route configuration:\n\n```\n\n```\n\nWith the non-critical route configuration going into the file with the suffix:\n\n```\n\n```\n\nYou might run into a situation where you end up splitting out everything from a\nroute file, leaving it empty! In this case, simply **delete the route file\nentirely**! A virtual route will automatically be generated for you to serve as\nan anchor for your code split files. This virtual route will live directly in\nthe generated route tree file.\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\nWhen using the feature, TanStack Router will automatically code split your route\nfiles based on the non-critical route configuration mentioned above.\n\nThe automatic code-splitting feature is available when you are using file-based\nrouting with one of our . This will work if you are using the CLI ().\n\nIf this is your first time using TanStack Router, then you can skip the\nfollowing steps and head over to . If you've already been using TanStack Router,\nthen you might need to make some changes to your route files to enable automatic\ncode-splitting.\n\n### [Preparing your route files for automatic code-\nsplitting](https://tanstack.com/router/latest/docs/framework/react/guide/<#preparing-\nyour-route-files-for-automatic-code-splitting>)\n\nWhen using automatic code-splitting, you should use the suffix. Instead, any\nroutes that are split into two using the suffix should be merged back into a\nsingle file.\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\nAlso, if you were previously using virtual routes, you should then have their\nsuffixes removed.\n\n```\n\n```\n\n```\n\n```\n\nOnce you've done this, your route files are ready for automatic code-splitting.\n\nAt this time, when using automatic code-splitting, ALL of your route files will\nbe code-split. This means that you should only use this feature if you are sure\nthat you want to code-split all of your route files.\n\nTo enable automatic code-splitting, you can add the following to your :\n\nThat's it! TanStack Router will automatically code-split all your route files by\ntheir critical and non-critical route configurations.\n\nIf you're not using the file-based routing system, you can still manually split\nyour code using the method and the function. You'd need to:\n\nCreate a lazy route using the function.\n\n```\n\n```\n\nThen, call the method on the route definition in your to import the lazy/code-\nsplit route with the non-critical route configuration.\n\n> ‚ö†Ô∏è Splitting a data loader will incur 2 round trips to the server to retrieve\n> the loader data. One round trip to load the loader code bundle itself and\n> another to execute the loader code and retrieve the data. Do not proceed\n> unless you are VERY sure that your loader is contributing to the bundle size\n> enough to warrant these round trips.\nYou can code split your data loading logic using the Route's option. While this\nprocess makes it difficult to maintain type-safety with the parameters passed to\nyour loader, you can always use the generic type to get most of the way there:\n\n```\n\n```\n\n```\n\n```\n\nThis process can feel heavy-handed, so TanStack Router exports a utility called\nwhich is very similar to that can help simplify this process:\n\n```\n\n```\n\n```\n\n```\n\n## [Manually accessing Route APIs in other files with the\nhelper](https://tanstack.com/router/latest/docs/framework/react/guide/<#manually-\naccessing-route-apis-in-other-files-with-the-getrouteapi-helper>)\n\nAs you might have guessed, placing your component code in a separate file than\nyour route can make it difficult to consume the route itself. To help with this,\nTanStack Router exports a handy function that you can use to access a route's\ntype-safe APIs in a file without importing the route itself.\n\n```\n\n```\n\n```\n\n //  ^? { foo: string }\n\n```\n\n```\n\n //  ^? { foo: string }\n\n```\n\nThe function is useful for accessing other type-safe APIs:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DP5QKC67DT2QYF67IT27YCA7IK2JWFTBDE2JLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/virtual-file-routes\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n> We'd like to thank the Remix team for [pioneering the concept of virtual file\n> routes](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/www.youtube.com/watch?v=fjTX8hQTlEc&t=730s>).\n> We've taken inspiration from their work and adapted it to work with TanStack\n> Router's existing file-based route-tree generation.\nVirtual file routes are a powerful concept that allows you to build a route tree\nprogrammatically using code that references real files in your project. This can\nbe useful if:\n\n  * You have an existing route organization that you want to keep.\n  * You want to customize the location of your route files.\n  * You want to completely override TanStack Router's file-based route generation and build your own convention.\n\nHere's a quick example of using virtual file routes to map a route tree to a set\nof real files in your project:\n\n```\n\n```\n\nVirtual file routes can be configured either via:\n\n  * The file for the TanStack Router CLI\n\n## [Configuration via the TanStackRouter\nPlugin](https://tanstack.com/router/latest/docs/framework/react/guide/<#configuration-\nvia-the-tanstackrouter-plugin>)\n\nIf you're using the plugin for Vite/Rspack/Webpack, you can configure virtual\nfile routes by passing the path of your routes file to the option when setting\nup the plugin:\n\n```\n\n```\n\nOr, you choose to define the virtual routes directly in the configuration:\n\n```\n\n // ... the rest of your virtual route tree\n\n```\n\n```\n\n // ... the rest of your virtual route tree\n\n```\n\nTo create virtual file routes, you'll need to import the package. This package\nprovides a set of functions that allow you to create virtual routes that\nreference real files in your project. A few utility functions are exported from\nthe package:\n\n  * - Creates a virtual root route.\n  * - Creates a virtual route.\n  * - Creates a virtual index route.\n  * - Creates a virtual layout route.\n  * - Creates a physical virtual route (more on this later).\n\nThe function is used to create a virtual root route. It takes a file name and an\narray of children routes. Here's an example of a virtual root route:\n\n```\n\n```\n\n```\n\n```\n\nThe function is used to create a virtual route. It takes a path, a file name,\nand an array of children routes. Here's an example of a virtual route:\n\n```\n\n```\n\n```\n\n```\n\nYou can also define a virtual route without a file name. This allows to set a\ncommon path prefix for its children:\n\n```\n\n// full path will be \"/hello/world\"\n\n// full path will be \"/hello/universe\"\n\n```\n\n```\n\n // full path will be \"/hello/world\"\n\n // full path will be \"/hello/universe\"\n\n```\n\nThe function is used to create a virtual index route. It takes a file name.\nHere's an example of a virtual index route:\n\nThe function is used to create a virtual layout route. It takes a file name, an\narray of children routes, and an optional layout ID. Here's an example of a\nvirtual layout route:\n\n```\n\n```\n\n```\n\n```\n\nYou can also specify a layout ID to give the layout a unique identifier that is\ndifferent from the filename:\n\n```\n\n```\n\n```\n\n```\n\nPhysical virtual routes are a way to \"mount\" a directory of good ol' TanStack\nRouter File Based routing convention under a specific URL path. This can be\nuseful if you are using virtual routes to customize a small portion of your\nroute tree high up in the hierarchy, but want to use the standard file-based\nrouting convention for sub-routes and directories.\n\nConsider the following file structure:\n\n```\n\n```\n\n```\n\n```\n\nLet's use virtual routes to customize our route tree for everything but , then\nuse physical virtual routes to mount the directory under the path:\n\n```\n\n // Set up your virtual routes as normal\n\n  // Mount the `posts` directory under the `/posts` path\n\n```\n\n```\n\n // Set up your virtual routes as normal\n\n  // Mount the `posts` directory under the `/posts` path\n\n```\n\n## [Virtual Routes inside of TanStack Router File Based\nrouting](https://tanstack.com/router/latest/docs/framework/react/guide/<#virtual-\nroutes-inside-of-tanstack-router-file-based-routing>)\n\nThe previous section showed you how you can use TanStack Router's File Based\nrouting convention inside of a virtual route configuration. However, the\nopposite is possible as well.You can configure the main part of your app's route\ntree using TanStack Router's File Based routing convention and opt into virtual\nroute configuration for specific subtrees.\n\nConsider the following file structure:\n\n```\n\n‚îÇ  ‚îÇ  ‚îú‚îÄ‚îÄ __virtual.ts\n\n‚îÇ  ‚îÇ  ‚îú‚îÄ‚îÄ details.tsx\n\n‚îÇ  ‚îÇ  ‚îú‚îÄ‚îÄ home.tsx\n\n‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ route.ts\n\n```\n\n```\n\n‚îÇ  ‚îÇ  ‚îú‚îÄ‚îÄ __virtual.ts\n\n‚îÇ  ‚îÇ  ‚îú‚îÄ‚îÄ details.tsx\n\n‚îÇ  ‚îÇ  ‚îú‚îÄ‚îÄ home.tsx\n\n‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ route.ts\n\n```\n\nLet's look at the directory which contains a special file named . This file\ninstructs the generator to switch over to virtual file route configuration for\nthis directory (and its child directories).\n\nconfigures the virtual routes for that particular subtree of the route tree. It\nuses the same API as explained above, with the only difference being that no is\ndefined for that subtree:\n\nThe helper function is closely modeled after vite's and allows you to define a\nsubtree configuration via a default export. The default export can either be\n\n  * a function returning a subtree config object\n  * an async function returning a subtree config object\n\nYou can mix and match TanStack Router's File Based routing convention and\nvirtual route configuration however you like.Let's go deeper!Check out the\nfollowing example that starts off using File Based routing convention, switches\nover to virtual route configuration for , switches back to File Based routing\nconvention for only to switch over to virtual route configuration again for .\n\n```\n\n‚îÇ    ‚îú‚îÄ‚îÄ deeper\n\n‚îÇ    ‚îÇ  ‚îú‚îÄ‚îÄ __virtual.ts\n\n‚îÇ    ‚îÇ  ‚îî‚îÄ‚îÄ home.tsx\n\n‚îÇ    ‚îî‚îÄ‚îÄ index.tsx\n\n```\n\n```\n\n‚îÇ    ‚îú‚îÄ‚îÄ deeper\n\n‚îÇ    ‚îÇ  ‚îú‚îÄ‚îÄ __virtual.ts\n\n‚îÇ    ‚îÇ  ‚îî‚îÄ‚îÄ home.tsx\n\n‚îÇ    ‚îî‚îÄ‚îÄ index.tsx\n\n```\n\n## [Configuration via the TanStack Router\nCLI](https://tanstack.com/router/latest/docs/framework/react/guide/<#configuration-\nvia-the-tanstack-router-cli>)\n\nIf you're using the TanStack Router CLI, you can configure virtual file routes\nby defining the path to your routes file in the file:\n\nOr you can define the virtual routes directly in the configuration, while much\nless common allows you to configure them via the TanStack Router CLI by adding a\nobject to your file and defining your virtual routes and passing the resulting\nJSON that is generated by calling the actual ///etc functions from the package:\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBDEK3MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/code-based-routing\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * If you're using , .\n  * If you are new to TanStack Router, please be aware that **file-based routing is the recommended way to configure TanStack Router**. If you're not sure which to use, please read the guide first.\n  * If you still insist on using code-based routing, you must read the guide first as it also covers core concepts of the router that are not repeated here.\n\nCode-based routing is no different from file-based routing in that it uses the\nsame route tree concept to organize, match and compose matching routes into a\ncomponent tree. The only difference is that instead of using the filesystem to\norganize your routes, you use code.\n\nLet's consider the same route tree from the guide, and convert it to code-based\nrouting:\n\nHere is the file-based version:\n\n```\n\n```\n\n```\n\n```\n\nAnd here is a summarized code-based version:\n\n```\n\n```\n\nBelieve it or not, file-based routing is really a superset of code-based routing\nand uses the filesystem and a bit of code-generation abstraction on top of it to\ngenerate this structure you see above automatically.\n\nWe're going to assume you've read the guide and are familiar with each of these\nmain concepts:\n\n**Now, let's take a look at how to create each of these route types in code.**\n\nCreating a root route in code-based routing is thankfully the same as doing so\nin file-based routing. Call the function.\n\nUnlike file-based routing however, you do not need to export the root route if\nyou don't want to. It's certainly not recommended to build an entire route tree\nand application in a single file (although you can and we do this in the\nexamples to demonstrate routing concepts in brevity).\n\n> üß† You can also create a root route via the function, which is a type-safe way\n> of doing dependency injection for the entire router. Read more about this in\n> the -->\nAll other routes other than the root route are configured using the function:\n\nThe option is a function that returns the parent route of the route you're\ncreating.\n\n**‚ùì‚ùì‚ùì \"Wait, you're making me pass the parent route for every route I make?\"**\n\nAbsolutely! The reason for passing the parent route has **everything to do with\nthe magical type safety** of TanStack Router. Without the parent route,\nTypeScript would have no idea what types to supply your route with!\n\nFor every route that **is not the root route or a pathless route** , a option is\nrequired. This is the path that will be matched against the URL pathname to\ndetermine if the route is a match.\n\nWhen configuring routes via code, route paths ignore leading and trailing\nslashes (this does not include \"index\" route paths ). You can include them if\nyou want, but they will be normalized internally by TanStack Router. Here is a\ntable of valid paths and what they will be normalized to:\n\n## [Manually building the route\ntree](https://tanstack.com/router/latest/docs/framework/react/guide/<#manually-\nbuilding-the-route-tree>)\n\nWhen building a route tree in code, it's not enough to define the parent route\nof each route. You must also construct the final route tree by adding each route\nto its parent route's array. This is because the route tree is not built\nautomatically for you like it is in file-based routing.\n\n```\n\n```\n\n```\n\n```\n\nTo create a static route, simply provide a normal string to the function:\n\nUnlike file-based routing, which uses the filename to denote an index route,\ncode-based routing uses a single slash to denote an index route. For example,\nthe file from our example route tree above would be represented in code-based\nrouting like this:\n\n```\n\n // Notice the single slash `/` here\n\n```\n\n```\n\n // Notice the single slash `/` here\n\n```\n\nDynamic route segments work exactly the same in code-based routing as they do in\nfile-based routing. Simply prefix a segment of the path with a and it will be\ncaptured into the object of the route's or :\n\n```\n\n // Or in a component\n\n```\n\n```\n\n // Or in a component\n\n```\n\nIf your component is code-split, you can use the to avoid having to import the\nconfiguration to get access to the typed hook.\n\nAs expected, splat/catch-all routes also work the same in code-based routing as\nthey do in file-based routing. Simply prefix a segment of the path with a and it\nwill be captured into the object under the key:\n\nFor the URL , the object will look like this:\n\nIn file-based routing a pathless route is prefixed with a , but in code-based\nrouting, a pathless route is simply a route with an instead of a option. This is\nbecause code-based routing does not use the filesystem to organize routes, so\nthere is no need to prefix a route with a to denote that it has no path.\n\n```\n\n // The layout route has no path, only an id\n\n // So its children will be nested under the layout route\n\n```\n\n```\n\n // The layout route has no path, only an id\n\n // So its children will be nested under the layout route\n\n```\n\nNow both and will render their contents inside of the :\n\n```\n\n```\n\n```\n\n```\n\nBuilding non-nested routes in code-based routing does not require using a\ntrailing in the path, but does require you to build your route and route tree\nwith the right paths and nesting. Let's consider the route tree where we want\nthe post editor to be nested under the posts route:\n\nTo do this we need to build a separate route for the post editor and include the\nentire path in the option from the root of where we want the route to be nested\n(in this case, the root):\n\n```\n\n// The posts editor route is nested under the root route\n\n // The path includes the entire path we need to match\n\n // The post editor route is nested under the root route\n\n```\n\n```\n\n// The posts editor route is nested under the root route\n\n // The path includes the entire path we need to match\n\n // The post editor route is nested under the root route\n\n```\n\nWe'll cover how to configure a in the guide.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBDEKQLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/creating-a-router\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nWhen you're ready to start using your router, you'll need to create a new\ninstance. The router instance is the core brains of TanStack Router and is\nresponsible for managing the route tree, matching routes, and coordinating\nnavigations and route transitions. It also serves as a place to configure\nrouter-wide settings.\n\nYou'll probably notice quickly that the constructor requires a option. This is\nthe route tree that the router will use to match routes and render components.\n\nWhether you used or , you'll need to pass your route tree to the function:\n\nIf you used our recommended file-based routing, then it's likely your generated\nroute tree file was created at the default location. If you used a custom\nlocation, then you'll need to import your route tree from that location.\n\nIf you used code-based routing, then you likely created your route tree manually\nusing the root route's method:\n\nDO NOT SKIP THIS SECTION! ‚ö†Ô∏è\n\nTanStack Router provides amazing support for TypeScript, even for things you\nwouldn't expect like bare imports straight from the library! To make this\npossible, you must register your router's types using TypeScripts' feature. This\nis done by extending the interface on with a property that has the type of your\ninstance:\n\n```\n\n  // This infers the type of our router and registers it across your entire\nproject\n\n```\n\n```\n\n  // This infers the type of our router and registers it across your entire\nproject\n\n```\n\nWith your router registered, you'll now get type-safety across your entire\nproject for anything related to routing.\n\nAs promised in earlier guides, we'll now cover the option. This option is used\nto configure a route that will render when no other suitable match is found.\nThis is useful for rendering a 404 page or redirecting to a default route.\n\nIf you used file-based routing, then you'll need to import your root route from\nit's location and then use the method to create a instance:\n\n```\n\n```\n\nIf You used code-based routing, then you'll need to create a with a reference to\nyour root route, then pass it to your router's option:\n\n```\n\n```\n\nThere are many other options that can be passed to the constructor. You can find\na full list of them in the .\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Build chat, video, moderation & feeds, faster. Start coding FREE. No CC\nrequired\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKSIPZ3JCA7ILK3LCKAD4K7KC67DT2QYF67IT27YCA7IK2JWFTBDEKJEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type contains all of the options that can be used to configure a router\ninstance.\n\nThe type accepts an object with the following properties and methods:\n\n  * The route tree that will be used to configure the router instance.\n\n  * The history object that will be used to manage the browser history. If not provided, a new instance will be created and used.\n\n  * Type: (search: Record<string, any>) => string\n  * A function that will be used to stringify search params when generating links.\n\n  * Type: (search: string) => Record<string, any>\n  * A function that will be used to parse search params when parsing the current location.\n\n  * Configures how unknown search params (= not returned by any ) are treated.\n  * If , unknown search params will be kept.\n  * If , unknown search params will be removed.\n\n  * Type: undefined | false | 'intent' | 'viewport' | 'render'\n  * If , routes will not be preloaded by default in any way.\n  * If , routes will be preloaded by default when the user hovers over a link or a event is detected on a .\n  * If , routes will be preloaded by default when they are within the viewport of the browser.\n  * If , routes will be preloaded by default as soon as they are rendered in the DOM.\n\n  * The delay in milliseconds that a route must be hovered over or touched before it is preloaded.\n\n  * The default a route should use if no component is provided.\n\n  * The default a route should use if no error component is provided.\n\n  * The default a route should use if no notFound component is provided.\n\n  * The default a route should use if no pending component is provided.\n\n  * The default a route should use if no pendingMs is provided.\n\n  * The default a route should use if no pendingMinMs is provided.\n\n  * The default a route should use if no staleTime is provided.\n\n  * The default a route should use if no preloadStaleTime is provided.\n\n  * Defaults to , which defaults to 30 minutes.\n  * The default a route should use if no preloadGcTime is provided.\n\n  * The default a route should use if no gcTime is provided.\n\n  * Type: (error: Error, errorInfo: ErrorInfo) => void\n  * The default handler for errors caught by the Router ErrorBoundary\n\n  * If , route navigations will be called using .\n  * If , route navigations will be called using where will be the strings array passed with . If the browser does not support viewTransition types, the navigation will fall back to normal , same as if was passed.\n  * If the browser does not support this api, this option will be ignored.\n  * See for more information on how this function works.\n  * See for more informations on viewTransition types\n\n  * Defaults to so the element with an id matching the hash will be scrolled into view after the location is committed to history.\n  * If , the element with an id matching the hash will not be scrolled into view after the location is committed to history.\n  * If an object is provided, it will be passed to the method as options.\n\n  * If , all routes will be matched as case-sensitive.\n\n  * The basepath for then entire router. This is useful for mounting a router instance at a subpath.\n\n  * Optional or required if the root route was created with .\n  * The root context that will be provided to all routes in the route tree. This can be used to provide a context to all routes in the tree without having to provide it to each route individually.\n\n  * A function that will be called when the router is dehydrated. The return value of this function will be serialized and stored in the router's dehydrated state.\n\n  * A function that will be called when the router is hydrated. The return value of this function will be serialized and stored in the router's dehydrated state.\n\n  * An array of route masks that will be used to mask routes in the route tree. Route masking is when you display a route at a different path than the one it is configured to match, like a modal popup that when shared will unmask to the modal's content instead of the modal's context.\n\n  * If , route masks will, by default, be removed when the page is reloaded. This can be overridden on a per-mask basis by setting the option on the mask, or on a per-navigation basis by setting the option in the options.\n\n  * A component that will be used to wrap the entire router. This is useful for providing a context to the entire router. Only non-DOM-rendering components like providers should be used, anything else will cause a hydration error.\n\n```\n\n```\n\n  * A component that will be used to wrap the inner contents of the router. This is useful for providing a context to the inner contents of the router where you also need access to the router context and hooks. Only non-DOM-rendering components like providers should be used, anything else will cause a hydration error.\n\n```\n\n```\n\n  * This property controls how TanStack Router will handle scenarios where it cannot find a route to match the current location. See the for more information.\n\n  * A route that will be used as the default not found route for every branch of the route tree. This can be overridden on a per-branch basis by providing a not found route to the option on the root route of the branch.\n\n  * The serializer object that will be used to determine how errors are serialized and deserialized between the server and the client.\n\n  * This method is called to define how errors are serialized when they are stored in the router's dehydrated state.\n\n  * This method is called to define how errors are deserialized from the router's dehydrated state.\n\n  * Type: 'always' | 'never' | 'preserve'\n  * Configures how trailing slashes are treated. will add a trailing slash if not present, will remove the trailing slash if present and will not modify the trailing slash.\n\n  * Type: Array<';' | ':' | '@' | '&' | '=' | '+' | '$' | ','>\n  * Configures which URI characters are allowed in path params that would ordinarily be escaped by encodeURIComponent.\n\n  * Configures whether structural sharing is enabled by default for fine-grained selectors.\n  * See the for more information.\n\n  * A default function that will be called to determine whether a route component shall be remounted after navigation. If this function returns a different value than previously, it will remount.\n  * The return value needs to be JSON serializable.\n  * By default, a route component will not be remounted if it stays active after a navigation\n\nExample:If you want to configure to remount all route components upon change,\nuse:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Monitor K8s Applications Effortlessly. Get 100% Kubernetes production\nvisibility\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEKQKC67DT2QYF67IT27YCA7IK2JWFTBDEKJWHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/route-matching\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nRoute matching follows a consistent and predictable pattern. This guide will\nexplain how route trees are matched.\n\nWhen TanStack Router processes your route tree, all of your routes are\nautomatically sorted to match the most specific routes first. This means that\nregardless of the order your route tree is defined, routes will always be sorted\nin this order:\n\n  * Static Routes (most specific to least specific)\n  * Dynamic Routes (longest to shortest)\n\nConsider the following pseudo route tree:\n\n```\n\n```\n\n```\n\n```\n\nAfter sorting, this route tree will become:\n\n```\n\n```\n\n```\n\n```\n\nThis final order represents the order in which routes will be matched based on\nspecificity.\n\nUsing that route tree, let's follow the matching process for a few different\nURLs:\n\n  * ```\n\n```\n\n```\n\n```\n\n  * ```\n\n```\n\n```\n\n```\n\n  * ```\n\n```\n\n```\n\n```\n\n  * ```\n\n```\n\n```\n\n```\n\n## [Pathless / Layout Route\nMatching](https://tanstack.com/router/latest/docs/framework/react/guide/<#pathless\n--layout-route-matching>)\n\nDuring matching, are treated as if they are flat. If a route is not found in a\npathless route's children, matching will continue out of the pathless route's\nchildren and on through the rest of the parent subtree like normal.\n\nIf you choose to configure a for your router, it should be passed to the option\nand not as part of your . This is because s are not considered during matching\nand only render as a fallback when no other suitable match is found.\n\nYou can read more about s in the guide.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Google Cloud Next is April 9-11 to learn how the hottest startups are putting\nAI into action.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6ADTZ3JCA7ILK3LCE7IK2QKC67DT2QYF67IT27YCA7IK2JWFTBDEK7JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/outlets\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nNested routing means that routes can be nested within other routes, including\nthe way they render. So how do we tell our routes where to render this nested\ncontent?\n\nThe component is used to render the next potentially matching child route.\ndoesn't take any props and can be rendered anywhere within a route's component\ntree. If there is no matching child route, will render .\n\nIf a route's is left undefined, it will render an automatically.\n\nA great example is configuring the root route of your application. Let's give\nour root route a component that renders a title, then an for our top-level\nroutes to render.\n\n```\n\n/* This is where child routes will render */\n\n```\n\n```\n\n/* This is where child routes will render */\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBD527EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/path-params\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nPath params are used to match a single segment (the text until the next ) and\nprovide its value back to you as a variable. They are defined by using the\ncharacter prefix in the path, followed by the key variable to assign it to. The\nfollowing are valid path param paths:\n\nBecause path param routes only match to the next , child routes can be created\nto continue expressing hierarchy:\n\nLet's create a post route file that uses a path param to match the post ID:\n\n## [Path Params can be used by child\nroutes](https://tanstack.com/router/latest/docs/framework/react/guide/<#path-\nparams-can-be-used-by-child-routes>)\n\nOnce a path param has been parsed, it is available to all child routes. This\nmeans that if we define a child route to our , we can use the variable from the\nURL in the child route's path!\n\nPath params are passed to the loader as a object. The keys of this object are\nthe names of the path params, and the values are the values that were parsed out\nof the actual URL path. For example, if we were to visit the URL, the object\nwould be :\n\nThe object is also passed to the option:\n\n```\n\n  // do something with params.postId\n\n```\n\n```\n\n  // do something with params.postId\n\n```\n\nIf we add a component to our , we can access the variable from the URL by using\nthe route's hook:\n\n> üß† Quick tip: If your component is code-split, you can use the to avoid having\n> to import the configuration to get access to the typed hook.\n## [Path Params outside of\nRoutes](https://tanstack.com/router/latest/docs/framework/react/guide/<#path-\nparams-outside-of-routes>)\n\nYou can also use the globally exported hook to access any parsed path params\nfrom any component in your app. You'll need to pass the option to , denoting\nthat you want to access the params from an ambiguous location:\n\nWhen navigating to a route with path params, TypeScript will require you to pass\nthe params either as an object or as a function that returns an object of\nparams.\n\nLet's see what an object style looks like:\n\nAnd here's what a function style looks like:\n\nNotice that the function style is useful when you need to persist params that\nare already in the URL for other routes. This is because the function style will\nreceive the current params as an argument, allowing you to modify them as needed\nand return the final params object.\n\nBy default, path params are escaped with . If you want to allow other valid URI\ncharacters (e.g. or ), you can specify that in your\n\nThe following is the list of accepted allowed characters:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBD527IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/search-params\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nSimilar to how TanStack Query made handling server-state in your React\napplications a breeze, TanStack Router aims to unlock the power of URL search\nparams in your applications.\n\nWe get it, you've been hearing a lot of \"use the platform\" lately and for the\nmost part, we agree. However, we also believe it's important to recognize where\nthe platform falls short for more advanced use-cases and we believe is one of\nthese circumstances.\n\nTraditional Search Param APIs usually assume a few things:\n\n  * Search params are always strings\n  * Serializing and deserializing using is good enough (Spoiler alert: it's not.)\n  * Search params modifications are tightly coupled with the URL's pathname and must be updated together, even if the pathname is not changing.\n\nReality is very different from these assumptions though.\n\n  * Search params represent application state, so inevitably, we will expect them to have the same DX associated with other state managers. This means having the capability of distinguishing between primitive value types and efficiently storing and manipulating complex data structures like nested arrays and objects.\n  * There are many ways to serialize and deserialize state with different tradeoffs. You should be able to choose the best one for your application or at the very least get a better default than .\n  * Immutability & Structural Sharing. Every time you stringify and parse url search params, referential integrity and object identity is lost because each new parse creates a brand new data structure with a unique memory reference. If not properly managed over its lifetime, this constant serialization and parsing can result in unexpected and undesirable performance issues, especially in frameworks like React that choose to track reactivity via immutability or in Solid that normally relies on reconciliation to detect changes from deserialized data sources.\n  * Search params, while an important part of the URL, do frequently change independently of the URL's pathname. For example, a user may want to change the page number of a paginated list without touching the URL's pathname.\n\n## [Search Params, the \"OG\" State\nManager](https://tanstack.com/router/latest/docs/framework/react/guide/<#search-\nparams-the-og-state-manager>)\n\nYou've probably seen search params like or in the URL. There is no question that\nthis is truly **a form of global state** living inside of the URL. It's valuable\nto store specific pieces of state in the URL because:\n\n  * Users should be able to:\n    * Cmd/Ctrl + Click to open a link in a new tab and reliably see the state they expected\n    * Bookmark and share links from your application with others with assurances that they will see exactly the state as when the link was copied.\n    * Refresh your app or navigate back and forth between pages without losing their state\n  * Developers should be able to easily:\n    * Add, remove or modify state in the URL with the same great DX as other state managers\n    * Easily validate search params coming from the URL in a format and type that is safe for their application to consume\n    * Read and write to search params without having to worry about the underlying serialization format\n\nTo achieve the above, the first step built in to TanStack Router is a powerful\nsearch param parser that automatically converts the search string of your URL to\nstructured JSON. This means that you can store any JSON-serializable data\nstructure in your search params and it will be parsed and serialized as JSON.\nThis is a huge improvement over which has limited support for array-like\nstructures and nested data.\n\nFor example, navigating to the following route:\n\nWill result in the following URL:\n\nWhen this URL is parsed, the search params will be accurately converted back to\nthe following JSON:\n\nIf you noticed, there are a few things going on here:\n\n  * The first level of the search params is flat and string based, just like .\n  * First level values that are not strings are accurately preserved as actual numbers and booleans.\n  * Nested data structures are automatically converted to URL-safe JSON strings\n\n> üß† It's common for other tools to assume that search params are always flat and\n> string-based which is why we've chosen to keep things URLSearchParam compliant\n> at the first level. This ultimately means that even though TanStack Router is\n> managing your nested search params as JSON, other tools will still be able to\n> write to the URL and read first-level params normally.\n## [Validating and Typing Search\nParams](https://tanstack.com/router/latest/docs/framework/react/guide/<#validating-\nand-typing-search-params>)\n\nDespite TanStack Router being able to parse search params into reliable JSON,\nthey ultimately still came from . Similar to other serialization boundaries,\nthis means that before you consume search params, they should be validated into\na format that your application can trust and rely on.\n\nTanStack Router provides convenient APIs for validating and typing search\nparams. This all starts with the 's option:\n\n```\n\n  // validate and parse the search params into a typed state\n\n```\n\n```\n\n  // validate and parse the search params into a typed state\n\n```\n\nIn the above example, we're validating the search params of the and returning a\ntyped object. This typed object is then made available to this route's other\noptions **and any child routes, too!**\n\nThe option is a function that is provided the JSON parsed (but non-validated)\nsearch params as a and returns a typed object of your choice. It's usually best\nto provide sensible fallbacks for malformed or unexpected search params so your\nusers' experience stays non-interrupted.\n\n```\n\n  // validate and parse the search params into a typed state\n\n```\n\n```\n\n  // validate and parse the search params into a typed state\n\n```\n\nHere's an example using the library (but feel free to use any validation library\nyou want) to both validate and type the search params in a single step:\n\n```\n\n```\n\nBecause also accepts an object with the property, this can be shortened to:\n\nIn the above example, we used Zod's modifier instead of to avoid showing an\nerror to the user because we firmly believe that if a search parameter is\nmalformed, you probably don't want to halt the user's experience through the app\nto show a big fat error message. That said, there may be times that you **do\nwant to show an error message**. In that case, you can use instead of .\n\nThe underlying mechanics why this works relies on the function throwing an\nerror. If an error is thrown, the route's option will be triggered (and will be\nset to and the will be rendered instead of the route's where you can handle the\nsearch param error however you'd like.\n\nWhen using a library like to validate search params you might want to search\nparams before committing the search params to the URL. A common is for example.\n\n```\n\n```\n\nIt might be surprising that when you try to navigate to this route, is required.\nThe following will type error as is missing.\n\nFor validation libraries we recommend using adapters which infer the correct and\ntypes.\n\nAn adapter is provided for which will pipe through the correct type and type\n\n```\n\n```\n\nThe important part here is the following use of no longer requires params\n\nHowever the use of here overrides the types and makes , and causing type loss.\nWe have handled this case by providing a generic function which retains the\ntypes but provides a value when validation fails\n\n```\n\n```\n\nTherefore when navigating to this route, is optional and retains the correct\ntypes.\n\nWhile not recommended, it is also possible to configure and type in case the\ntype is more accurate than the type\n\nThis provides flexibility in which type you want to infer for navigation and\nwhich types you want to infer for reading search params.\n\nRouter expects the valibot 1.0 package to be installed.\n\nWhen using an adapter is not needed to ensure the correct and types are used for\nnavigation and reading search params. This is because implements\n\n```\n\n```\n\nRouter expects the arktype 2.0-rc package to be installed.\n\nWhen using an adapter is not needed to ensure the correct and types are used for\nnavigation and reading search params. This is because implements\n\n```\n\n'\"newest\" | \"oldest\" | \"price\" = \"newest\"'\n\n```\n\n```\n\n\"newest\" | \"oldest\" | \"price\" = \"newest\"\n\n```\n\nOnce your search params have been validated and typed, you're finally ready to\nstart reading and writing to them. There are a few ways to do this in TanStack\nRouter, so let's check them out.\n\n### [Using Search Params in\nLoaders](https://tanstack.com/router/latest/docs/framework/react/guide/<#using-\nsearch-params-in-loaders>)\n\nPlease read the section for more information about how to read search params in\nloaders with the option.\n\n### [Search Params are inherited from Parent\nRoutes](https://tanstack.com/router/latest/docs/framework/react/guide/<#search-\nparams-are-inherited-from-parent-routes>)\n\nThe search parameters and types of parents are merged as you go down the route\ntree, so child routes also have access to their parent's search params:\n\n```\n\n```\n\n```\n\n```\n\nYou can access your route's validated search params in your route's via the\nhook.\n\nIf your component is code-split, you can use the to avoid having to import the\nconfiguration to get access to the typed hook.\n\n### [Search Params outside of Route\nComponents](https://tanstack.com/router/latest/docs/framework/react/guide/<#search-\nparams-outside-of-route-components>)\n\nYou can access your route's validated search params anywhere in your app using\nthe hook. By passing the id/path of your origin route, you'll get even better\ntype safety:\n\n```\n\n```\n\nOr, you can loosen up the type-safety and get an optional object by passing :\n\n```\n\n //  page: number | undefined\n //  filter: string | undefined\n //  sort: 'newest' | 'oldest' | 'price' | undefined\n\n```\n\n```\n\n //  page: number | undefined\n //  filter: string | undefined\n //  sort: 'newest' | 'oldest' | 'price' | undefined\n\n```\n\nNow that you've learned how to read your route's search params, you'll be happy\nto know that you've already seen the primary APIs to modify and update them.\nLet's remind ourselves a bit\n\nThe best way to update search params is to use the prop on the component.\n\nIf the search for the current page shall be updated and the prop is specified,\nthe prop can be omitted.Here's an example:\n\n```\n\n```\n\nIf you want to update the search params in a generic component that is rendered\non multiple routes, specifying can be challenging.\n\nIn this scenario you can set which will give you access to loosely typed search\nparams.Here is an example that illustrates this:\n\n```\n\n// `page` is a search param that is defined in the __root route and hence\navailable on all routes.\n\n```\n\n```\n\n// `page` is a search param that is defined in the __root route and hence\navailable on all routes.\n\n```\n\nIf the generic component is only rendered in a specific subtree of the route\ntree, you can specify that subtree using . Here you can omit if you want.\n\n```\n\n// `page` is a search param that is defined in the /posts route and hence\navailable on all of its child routes.\n\n```\n\n```\n\n// `page` is a search param that is defined in the /posts route and hence\navailable on all of its child routes.\n\n```\n\nThe function also accepts a option that works the same way as the prop on :\n\n```\n\n```\n\nThe function works exactly the same way as the / hook/function above.\n\nThe component works exactly the same way as the / hook/function above, but\naccepts its options as props instead of a function argument.\n\n## [Transforming search with search\nmiddlewares](https://tanstack.com/router/latest/docs/framework/react/guide/<#transforming-\nsearch-with-search-middlewares>)\n\nWhen link hrefs are built, by default the only thing that matters for the query\nstring part is the property of a .\n\nTanStack Router provides a way to manipulate search params before the href is\ngenerated via . Search middlewares are functions that transform the search\nparameters when generating new links for a route or its descendants. They are\nalso executed upon navigation after search validation to allow manipulation of\nthe query string.\n\nThe following example shows how to make sure that for link that is being built,\nthe search param is added it is part of the current search params. If a link\nspecifies inside , then that value is used for building the link.\n\n```\n\n```\n\nSince this specific use case is quite common, TanStack Router provides a generic\nimplementation to retain search params via :\n\n```\n\n```\n\nAnother common use case is to strip out search params from links if their\ndefault value is set. TanStack Router provides a generic implementation for this\nuse case via :\n\n```\n\n```\n\nMultiple middlewares can be chained. The following example shows how to combine\nboth and .\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBD527UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/link-options\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nYou may want to reuse options that are intended to be passed to , or . In which\ncase you may decide an object literal is a good way to represent options passed\nto .\n\n```\n\n```\n\nThere are a few problems here. is inferred as which by default will resolve to\nevery route when passed to , or (this particular issue could be fixed by ). The\nother issue here is we do not know even passes the type checker until it is\nspread into . We could very easily create incorrect navigation options and only\nwhen the options are spread into do we know there is a type error.\n\n### [Using function to create re-usable\noptions](https://tanstack.com/router/latest/docs/framework/react/guide/<#using-\nlinkoptions-function-to-create-re-usable-options>)\n\nis a function which type checks an object literal and returns the inferred input\nas is. This provides type safety on options exactly like before it is used\nallowing for easier maintenance and re-usability. Our above example using looks\nlike this:\n\n```\n\n```\n\nThis allows eager type checking of which can then be re-used anywhere\n\n```\n\n  // can used in redirect\n\n/** can be used in navigate */\n\n/** can be used in Link */\n\n```\n\n```\n\n  // can used in redirect\n\n/** can be used in navigate */\n\n/** can be used in Link */\n\n```\n\nWhen creating navigation you might loop over an array to construct a navigation\nbar. In which case can be used to type check an array of object literals which\nare intended for props\n\n```\n\n```\n\n```\n\n```\n\nThe input of is inferred and returned, as shown with the use of as this does not\nexist on props\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Develop and launch modern apps with MongoDB Atlas, a resilient data platform.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKBDCZ3JCA7ILK3ICWAI423KC67DT2QYF67IT27YCA7IK2JWFTBD553UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/custom-link\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nWhile repeating yourself can be acceptable in many situations, you might find\nthat you do it too often. At times, you may want to create cross-cutting\ncomponents with additional behavior or styles. You might also consider using\nthird-party libraries in combination with TanStack Router‚Äôs type safety.\n\ncreates a custom component with the same type parameters as . This means you can\ncreate your own component which provides the same type safety and typescript\nperformance as .\n\nIf you want to create a basic custom link component, you can do so with the\nfollowing:\n\n```\n\n // Add any additional props you want to pass to the anchor element\n\n```\n\n```\n\n // Add any additional props you want to pass to the anchor element\n\n```\n\nYou can then use your newly created component as any other\n\nReact Aria Components‚Äô component does not support the standard and events.\nTherefore, you cannot use it directly with TanStack Router‚Äôs prop.\n\nExplanation for this can be found here:\n\nIt is possible to work around this by using the hook from with a standard anchor\nelement.\n\n```\n\n```\n\n```\n\n // Add any additional props you want to pass to the link\n\n```\n\n```\n\n // Add any additional props you want to pass to the link\n\n```\n\n```\n\n // Add any additional props you want to pass to the button\n\n```\n\n```\n\n // Add any additional props you want to pass to the button\n\n```\n\n```\n\n // Add any additional props you want to pass to the anchor\n\n```\n\n```\n\n // Add any additional props you want to pass to the anchor\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBD55QJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/deferred-data-loading\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nTanStack Router is designed to run loaders in parallel and wait for all of them\nto resolve before rendering the next route. This is great most of the time, but\noccasionally, you may want to show the user something sooner while the rest of\nthe data loads in the background.\n\nDeferred data loading is a pattern that allows the router to render the next\nlocation's critical data/markup while slower, non-critical route data is\nresolved in the background. This process works on both the client and server\n(via streaming) and is a great way to improve the perceived performance of your\napplication.\n\nIf you are using a library like or any other data fetching library, then\ndeferred data loading works a bit differently. Skip ahead to the [Deferred Data\nLoading with External\nLibraries](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/guide/deferred-\ndata-loading/#deferred-data-loading-with-external-libraries>) section for more\ninformation.\n\nTo defer slow or non-critical data, return an promise anywhere in your loader\nresponse:\n\n```\n\n  // Fetch some slower data, but do not await it\n\n  // Fetch and await some data that resolves quickly\n\n```\n\n```\n\n  // Fetch some slower data, but do not await it\n\n  // Fetch and await some data that resolves quickly\n\n```\n\nAs soon as any awaited promises are resolved, the next route will begin\nrendering while the deferred promises continue to resolve.\n\nIn the component, deferred promises can be resolved and utilized using the\ncomponent:\n\n```\n\n // do something with fastData\n\n```\n\n```\n\n // do something with fastData\n\n```\n\nIf your component is code-split, you can use the to avoid having to import the\nconfiguration to get access to the typed hook.\n\nThe component resolves the promise by triggering the nearest suspense boundary\nuntil it is resolved, after which it renders the component's as a function with\nthe resolved data.\n\nIf the promise is rejected, the component will throw the serialized error, which\ncan be caught by the nearest error boundary.\n\nIn React 19, you can use the hook instead of\n\n## [Deferred Data Loading with External\nlibraries](https://tanstack.com/router/latest/docs/framework/react/guide/<#deferred-\ndata-loading-with-external-libraries>)\n\nWhen your strategy for fetching information for the route relies on with an\nexternal library like , deferred data loading works a bit differently, as the\nlibrary handles the data fetching and caching for you outside of TanStack\nRouter.\n\nSo, instead of using and , you'll instead want to use the Route's to kick off\nthe data fetching and then use the library's hooks to access the data in your\ncomponents.\n\n```\n\n  // Kick off the fetching of some slower data, but do not await it\n\n  // Fetch and await some data that resolves quickly\n\n```\n\n```\n\n  // Kick off the fetching of some slower data, but do not await it\n\n  // Fetch and await some data that resolves quickly\n\n```\n\nThen in your component, you can use the library's hooks to access the data:\n\n```\n\n // do something with fastData\n\n```\n\n```\n\n // do something with fastData\n\n```\n\nStreamed promises follow the same lifecycle as the loader data they are\nassociated with. They can even be preloaded!\n\n## [SSR & Streaming Deferred\nData](https://tanstack.com/router/latest/docs/framework/react/guide/<#ssr--\nstreaming-deferred-data>)\n\n**Streaming requires a server that supports it and for TanStack Router to be\nconfigured to use it properly.**\n\nPlease read the entire for step by step instructions on how to set up your\nserver for streaming.\n\nThe following is a high-level overview of how deferred data streaming works with\nTanStack Router:\n\n  * Server\n    * Promises are marked and tracked as they are returned from route loaders\n    * All loaders resolve and any deferred promises are serialized and embedded into the html\n    * The route begins to render\n    * Deferred promises rendered with the component trigger suspense boundaries, allowing the server to stream html up to that point\n  * Client\n    * The client receives the initial html from the server\n    * components suspend with placeholder promises while they wait for their data to resolve on the server\n  * Server\n    * As deferred promises resolve, their results (or errors) are serialized and streamed to the client via an inline script tag\n    * The resolved components and their suspense boundaries are resolved and their resulting HTML is streamed to the client along with their dehydrated data\n  * Client\n    * The suspended placeholder promises within are resolved with the streamed data/error responses and either render the result or throw the error to the nearest error boundary\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBD55QNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/external-data-loading\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThis guide is geared towards external state management libraries and their\nintegration with TanStack Router for data fetching, ssr, hydration/dehydration\nand streaming. If you haven't read the standard guide, please do so first.\n\nWhile Router is very capable of storing and managing most data needs out of the\nbox, sometimes you just might want something more robust!\n\nRouter is designed to be a perfect for external data fetching and caching\nlibraries. This means that you can use any data fetching/caching library you\nwant, and the router will coordinate the loading of your data in a way that\naligns with your users' navigation and expectations of freshness.\n\n## [What data fetching libraries are\nsupported?](https://tanstack.com/router/latest/docs/framework/react/guide/<#what-\ndata-fetching-libraries-are-supported>)\n\nAny data fetching library that supports asynchronous promises can be used with\nTanStack Router. This includes:\n\nLiterally any library that **can return a promise and read/write data** can be\nintegrated.\n\n## [Using Loaders to ensure data is\nloaded](https://tanstack.com/router/latest/docs/framework/react/guide/<#using-\nloaders-to-ensure-data-is-loaded>)\n\nThe easiest way to use integrate and external caching/data library into Router\nis to use s to ensure that the data required inside of a route has been loaded\nand is ready to be displayed.\n\n> ‚ö†Ô∏è BUT WHY? It's very important to preload your critical render data in the\n> loader for a few reasons:\n>   * No \"flash of loading\" states\n>   * No waterfall data fetching, caused by component based fetching\n>   * Better for SEO. If you data is available at render time, it will be\n> indexed by search engines.\n>\n\nHere is a naive illustration (don't do this) of using a Route's option to seed\nthe cache for some data:\n\nThis example is , but illustrates the point that you can use a route's option to\nseed your cache with data. Let's take a look at a more realistic example using\nTanStack Query.\n\n  * Replace with your preferred data fetching library's prefetching API\n  * Replace with your preferred data fetching library's read-or-fetch API or hook\n\n## [A more realistic example using TanStack\nQuery](https://tanstack.com/router/latest/docs/framework/react/guide/<#a-more-\nrealistic-example-using-tanstack-query>)\n\nLet's take a look at a more realistic example using TanStack Query.\n\n```\n\n // Use the `loader` option to ensure that the data is loaded\n\n  // Read the data from the cache and subscribe to updates\n\n```\n\n```\n\n // Use the `loader` option to ensure that the data is loaded\n\n  // Read the data from the cache and subscribe to updates\n\n```\n\n### [Error handling with TanStack\nQuery](https://tanstack.com/router/latest/docs/framework/react/guide/<#error-\nhandling-with-tanstack-query>)\n\nWhen an error occurs while using with , you'll need to let queries know that you\nwant to try again when re-rendering. This can be done by using the function\nprovided by the hook. We can invoke this function in an effect as soon as the\nerror component mounts. This will make sure that the query is reset and will try\nto fetch data again when the route component is rendered again. This will also\ncover cases where users navigate away from our route instead of clicking the\nbutton.\n\n```\n\n   // Reset the query error boundary\n\n      // Invalidate the route to reload the loader, and reset any router error boundaries\n\n```\n\n```\n\n   // Reset the query error boundary\n\n      // Invalidate the route to reload the loader, and reset any router error boundaries\n\n```\n\nTools that are able can integrate with TanStack Router's convenient\nDehydration/Hydration APIs to shuttle dehydrated data between the server and\nclient and rehydrate it where needed. Let's go over how to do this with both 3rd\nparty critical data and 3rd party deferred data.\n\n**For critical data needed for the first render/paint** , TanStack Router\nsupports options when configuring the . These callbacks are functions that are\nautomatically called on the server and client when the router dehydrates and\nhydrates normally and allow you to augment the dehydrated data with your own\ndata.\n\nThe function can return any serializable JSON data which will get merged and\ninjected into the dehydrated payload that is sent to the client. This payload is\ndelivered via the component which, when rendered, provides the data back to you\nin the function on the client.\n\nFor example, let's dehydrate and hydrate a TanStack Query so that our data we\nfetched on the server will be available for hydration on the client.\n\n```\n\n // Make sure you create your loader client or similar data\n\n // stores inside of your `createRouter` function. This ensures\n\n // that your data stores are unique to each request and\n\n // always present on both server and client.\n\n  // Optionally provide your loaderClient to the router context for\n\n  // convenience (you can provide anything you want to the router\n\n  // On the server, dehydrate the loader client so the router\n\n  // can serialize it and send it to the client for us\n\n  // On the client, hydrate the loader client with the data\n\n  // we dehydrated on the server\n\n  // Optionally, we can use `Wrap` to wrap our router in the loader client\nprovider\n\n```\n\n```\n\n // Make sure you create your loader client or similar data\n\n // stores inside of your `createRouter` function. This ensures\n\n // that your data stores are unique to each request and\n\n // always present on both server and client.\n\n  // Optionally provide your loaderClient to the router context for\n\n  // convenience (you can provide anything you want to the router\n\n  // On the server, dehydrate the loader client so the router\n\n  // can serialize it and send it to the client for us\n\n  // On the client, hydrate the loader client with the data\n\n  // we dehydrated on the server\n\n  // Optionally, we can use `Wrap` to wrap our router in the loader client\nprovider\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBD5K77HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/react/overview\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nTanStack Query (FKA React Query) is often described as the missing data-fetching\nlibrary for web applications, but in more technical terms, it makes **fetching,\ncaching, synchronizing and updating server state** in your web applications a\nbreeze.\n\nMost core web frameworks come with an opinionated way of fetching or updating\ndata in a holistic way. Because of this developers end up building either meta-\nframeworks which encapsulate strict opinions about data-fetching, or they invent\ntheir own ways of fetching data. This usually means cobbling together component-\nbased state and side-effects, or using more general purpose state management\nlibraries to store and provide asynchronous data throughout their apps.\n\nWhile most traditional state management libraries are great for working with\nclient state, they are **not so great at working with async or server state**.\nThis is because **server state is totally different**. For starters, server\nstate:\n\n  * Is persisted remotely in a location you may not control or own\n  * Requires asynchronous APIs for fetching and updating\n  * Implies shared ownership and can be changed by other people without your knowledge\n  * Can potentially become \"out of date\" in your applications if you're not careful\n\nOnce you grasp the nature of server state in your application, **even more\nchallenges will arise** as you go, for example:\n\n  * Caching... (possibly the hardest thing to do in programming)\n  * Deduping multiple requests for the same data into a single request\n  * Updating \"out of date\" data in the background\n  * Knowing when data is \"out of date\"\n  * Reflecting updates to data as quickly as possible\n  * Performance optimizations like pagination and lazy loading data\n  * Managing memory and garbage collection of server state\n  * Memoizing query results with structural sharing\n\nIf you're not overwhelmed by that list, then that must mean that you've probably\nsolved all of your server state problems already and deserve an award. However,\nif you are like a vast majority of people, you either have yet to tackle all or\nmost of these challenges and we're only scratching the surface!\n\nReact Query is hands down one of the libraries for managing server state. It\nworks amazingly well **out-of-the-box, with zero-config, and can be customized**\nto your liking as your application grows.\n\nReact Query allows you to defeat and overcome the tricky challenges and hurdles\nof and control your app data before it starts to control you.\n\nOn a more technical note, React Query will likely:\n\n  * Help you remove lines of complicated and misunderstood code from your application and replace with just a handful of lines of React Query logic.\n  * Make your application more maintainable and easier to build new features without worrying about wiring up new server state data sources\n  * Have a direct impact on your end-users by making your application feel faster and more responsive than ever before.\n  * Potentially help you save on bandwidth and increase memory performance\n\n## [Enough talk, show me some code\nalready!](https://tanstack.com/query/latest/docs/react/<#enough-talk-show-me-\nsome-code-already>)\n\nIn the example below, you can see React Query in its most basic and simple form\nbeing used to fetch the GitHub stats for the React Query GitHub project itself:\n\n```\n\n 'An error has occurred: '\n\n```\n\n## [You talked me into it, so what\nnow?](https://tanstack.com/query/latest/docs/react/<#you-talked-me-into-it-so-\nwhat-now>)\n\n  * Consider taking the official (or buying it for your whole team!)\n  * Learn React Query at your own pace with our amazingly thorough and \n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/react/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/latest/docs/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBD523WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/react/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/type-safety\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nTanStack Router is built to be as type-safe as possible within the limits of the\nTypeScript compiler and runtime. This means that it's not only written in\nTypeScript, but that it also **fully infers the types it's provided and\ntenaciously pipes them through the entire routing experience**.\n\nUltimately, this means that you write **less types as a developer** and have\n**more confidence in your code** as it evolves.\n\nRoutes are hierarchical, and so are their definitions. If you're using file-\nbased routing, much of the type-safety is already taken care of for you.\n\nIf you're using the class directly, you'll need to be aware of how to ensure\nyour routes are typed properly using the 's option. This is because child routes\nneed to be aware of of their parent routes types. Without this, those precious\nsearch params you parsed out of your layout route 3 levels up would be lost to\nthe JS void.\n\nSo, don't forget to pass the parent route to your child routes!\n\n## [Exported Hooks, Components, and\nUtilities](https://tanstack.com/router/latest/docs/framework/react/guide/<#exported-\nhooks-components-and-utilities>)\n\nFor the types of your router to work with top-level exports like , , , etc. they\nmust permeate the type-script module boundary and be registered right into the\nlibrary. To do this, we use declaration merging on the exported interface.\n\nBy registering your router with the module, you can now use the exported hooks,\ncomponents, and utilities with your router's exact types.\n\n## [Fixing the Component Context\nProblem](https://tanstack.com/router/latest/docs/framework/react/guide/<#fixing-\nthe-component-context-problem>)\n\nComponent context is a wonderful tool in React and other frameworks for\nproviding dependencies to components. However, if that context is changing types\nas it moves throughout your component hierarchy, it becomes impossible for\nTypeScript to know how to infer those changes. To get around this, context-based\nhooks and components require that you give them a hint on how and where they are\nbeing used.\n\n```\n\n // Each route has type-safe versions of most of the built-in hooks from\nTanStack Router\n\n // Some hooks require context from the *entire* router, not just the current\nroute. To achieve type-safety here,\n\n // we must pass the `from` param to tell the hook our relative position in the\nroute hierarchy.\n\n```\n\n```\n\n // Each route has type-safe versions of most of the built-in hooks from\nTanStack Router\n\n // Some hooks require context from the *entire* router, not just the current\nroute. To achieve type-safety here,\n\n // we must pass the `from` param to tell the hook our relative position in the\nroute hierarchy.\n\n```\n\nEvery hook and component that requires a context hint will have a param where\nyou can pass the ID or path of the route you are rendering within.\n\n> üß† Quick tip: If your component is code-split, you can use the to avoid having\n> to pass in the to get access to the typed and hooks.\n### [What if I don't know the route? What if it's a shared\ncomponent?](https://tanstack.com/router/latest/docs/framework/react/guide/<#what-\nif-i-dont-know-the-route-what-if-its-a-shared-component>)\n\nThe property is optional, which means if you don't pass it, you'll get the\nrouter's best guess on what types will be available. Usually, that means you'll\nget a union of all of the types of all of the routes in the router.\n\n### [What if I pass the wrong\npath?](https://tanstack.com/router/latest/docs/framework/react/guide/<#what-if-\ni-pass-the-wrong-from-path>)\n\nIt's technically possible to pass a that satisfies TypeScript, but may not match\nthe actual route you are rendering within at runtime. In this case, each hook\nand component that supports will detect if your expectations don't match the\nactual route you are rendering within, and will throw a runtime error.\n\n### [What if I don't know the route, or it's a shared component, and I can't\npass ?](https://tanstack.com/router/latest/docs/framework/react/guide/<#what-if-\ni-dont-know-the-route-or-its-a-shared-component-and-i-cant-pass-from>)\n\nIf you are rendering a component that is shared across multiple routes, or you\nare rendering a component that is not within a route, you can pass instead of a\noption. This will not only silence the runtime error, but will also give you\nrelaxed, but accurate types for the potential hook you are calling. A good\nexample of this is calling from a shared component:\n\nIn this case, the variable will be typed as a union of all possible search\nparams from all routes in the router.\n\nRouter context is so extremely useful as it's the ultimate hierarchical\ndependency injection. You can supply context to the router and to each and every\nroute it renders. As you build up this context, TanStack Router will merge it\ndown with the hierarchy of routes, so that each route has access to the context\nof all of its parents.\n\nThe factory creates a new router with the instantiated type, which then creates\na requirement for you to fulfill the same type contract to your router, and will\nalso ensure that your context is properly typed throughout the entire route\ntree.\n\n```\n\n // ... all child routes will have access to `whateverYouWant` in their context\n\n  // This will be required to be passed now\n\n```\n\n```\n\n // ... all child routes will have access to `whateverYouWant` in their context\n\n  // This will be required to be passed now\n\n```\n\nAs your application scales, TypeScript check times will naturally increase.\nThere are a few things to keep in mind when your application scales to keep your\nTS check times down.\n\n### [Only infer types you\nneed](https://tanstack.com/router/latest/docs/framework/react/guide/<#only-\ninfer-types-you-need>)\n\nA great pattern with client side data caches (TanStack Query, etc.) is to\nprefetch data. For example with TanStack Query you might have a route which\ncalls in a .\n\n```\n\n```\n\nThis may look fine and for small route trees and you may not notice any TS\nperformance issues. However in this case TS has to infer the loader's return\ntype, despite it never being used in your route. If the loader data is a complex\ntype with many routes that prefetch in this manner, it can slow down editor\nperformance. In this case, the change is quite simple and let typescript infer\nPromise\n\n```\n\n```\n\nThis way the loader data is never inferred and it moves the inference out of the\nroute tree to the first time you use .\n\n### [Narrow to relevant routes as much as you possibly\ncan](https://tanstack.com/router/latest/docs/framework/react/guide/<#narrow-to-\nrelevant-routes-as-much-as-you-possibly-can>)\n\nConsider the following usage of\n\n```\n\n```\n\n**These examples are bad for TS performance**. That's because resolves to a\nunion of all params for all routes and TS has to check whatever you pass to the\nprop against this potentially big union. As your application grows, this check\ntime will increase linearly to number of routes and search params. We have done\nour best to optimize for this case (TypeScript will typically do this work once\nand cache it) but the initial check against this large union is expensive. This\nalso applies to and other API's such as , , etc.\n\nInstead you should try to narrow to relevant routes with or .\n\nRemember you can always pass a union to or to narrow the routes you're\ninterested in.\n\nYou can also pass branches to to only resolve or to be from any descendants of\nthat branch:\n\ncould be a branch with many descendants which share the same or\n\n### [Consider using the object syntax of\n](https://tanstack.com/router/latest/docs/framework/react/guide/<#consider-\nusing-the-object-syntax-of-addchildren>)\n\nIt's typical of routes to have , or that can even reference external\ndependencies which are also heavy on TS inference. For such applications, using\nobjects for creating the route tree can be more performant than tuples.\n\nalso can accept an object. For large route trees with complex routes and\nexternal libraries, objects can be much faster for TS to type check as opposed\nto large tuples. The performance gains depend on your project, what external\ndependencies you have and how the types for those libraries are written\n\n```\n\n```\n\nNote this syntax is more verbose but has better TS performance. With file based\nrouting, the route tree is generated for you so a verbose route tree is not a\nconcern\n\n### [Avoid internal types without\nnarrowing](https://tanstack.com/router/latest/docs/framework/react/guide/<#avoid-\ninternal-types-without-narrowing>)\n\nIt's common you might want to re-use types exposed. For example you might be\ntempted to use like so\n\n**This is VERY bad for TS Performance**. The problem here is has no type\narguments and is therefore an extremely large type. It includes which is a union\nof all params, it contains which is a union of all . When merging this object\nwith it will do a structural comparison of this huge type.\n\nInstead you can use to infer a precise type and not directly to avoid the huge\ncheck\n\nAs is not of type and therefore this check is cheaper because the type is much\nmore precise. You can also improve type checking further by narrowing\n\nThis is even faster as we're checking against the narrowed type.\n\nYou can also use this to narrow the type of to a specific type to be used as a\nprop or parameter to a function\n\nThis is faster than using directly in a component because is a much more precise\ntype\n\nAnother solution is not to use and to provide inversion of control to render a\ncomponent narrowed to a specific route. Render props are a good method of\ninverting control to the user of a component\n\nThis particular example is very fast as we've inverted control of where we're\nnavigating to the user of the component. The is narrowed to the exact route we\nwant to navigate to\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Secure Homebrew and gain visibility into your software supply chain. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCKSDK23KC67DT2QYF67IT27YCA7IK2JWFTBD523YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/preloading\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nPreloading in TanStack Router is a way to load a route before the user actually\nnavigates to it. This is useful for routes that are likely to be visited by the\nuser next. For example, if you have a list of posts and the user is likely to\nclick on one of them, you can preload the post route so that it's ready to go\nwhen the user clicks on it.\n\n  * Intent\n    * Preloading by works by using hover and touch start events on components to preload the dependencies for the destination route.\n    * This strategy is useful for preloading routes that the user is likely to visit next.\n  * Viewport Visibility\n    * Preloading by \" works by using the Intersection Observer API to preload the dependencies for the destination route when the component is in the viewport.\n    * This strategy is useful for preloading routes that are below the fold or off-screen.\n  * Render\n    * Preloading by works by preloading the dependencies for the destination route as soon as the component is rendered in the DOM.\n    * This strategy is useful for preloading routes that are always needed.\n\n## [How long does preloaded data stay in\nmemory?](https://tanstack.com/router/latest/docs/framework/react/guide/<#how-\nlong-does-preloaded-data-stay-in-memory>)\n\nPreloaded route matches are temporarily cached in memory with a few important\ncaveats:\n\n  * **Unused preloaded data is removed after 30 seconds by default.** This can be configured by setting the option on your router.\n  * **Obviously, when a a route is loaded, its preloaded version is promoted to the router's normal pending matches state.**\n\nIf you need more control over preloading, caching and/or garbage collection of\npreloaded data, you should use an external caching library like .\n\nThe simplest way to preload routes for your application is to set the option to\nfor your entire router:\n\nThis will turn on preloading by default for all components in your application.\nYou can also set the prop on individual components to override the default\nbehavior.\n\nBy default, preloading will start after of the user hovering or touching a\ncomponent. You can change this delay by setting the option on your router:\n\nYou can also set the prop on individual components to override the default\nbehavior on a per-link basis.\n\nIf you're using the built-in loaders, you can control how long preloaded data is\nconsidered fresh until another preload is triggered by setting either or to a\nnumber of milliseconds. **By default, preloaded data is considered fresh for 30\nseconds.**.\n\nTo change this, you can set the option on your router:\n\nOr, you can use the option on individual routes:\n\n```\n\n // Preload the route again if the preload cache is older than 10 seconds\n\n```\n\n```\n\n // Preload the route again if the preload cache is older than 10 seconds\n\n```\n\nWhen integrating external caching libraries like React Query, which have their\nown mechanisms for determining stale data, you may want to override the default\npreloading and stale-while-revalidate logic of TanStack Router. These libraries\noften use options like staleTime to control the freshness of data.\n\nTo customize the preloading behavior in TanStack Router and fully leverage your\nexternal library's caching strategy, you can bypass the built-in caching by\nsetting routerOptions.defaultPreloadStaleTime or routeOptions.preloadStaleTime\nto 0. This ensures that all preloads are marked as stale internally, and loaders\nare always invoked, allowing your external library, such as React Query, to\nmanage data loading and caching.\n\nThis would then allow you, for instance, to use an option like React Query's to\ncontrol the freshness of your preloads.\n\nIf you need to manually preload a route, you can use the router's method. It\naccepts a standard TanStack object and returns a promise that resolves when the\nroute is preloaded.\n\n```\n\n    // Failed to preload route\n\n```\n\n```\n\n    // Failed to preload route\n\n```\n\nIf you need to preload only the JS chunk of a route, you can use the router's\nmethod. It accepts a route object and returns a promise that resolves when the\nroute chunk is loaded.\n\n```\n\n    // Failed to preload route chunk\n\n```\n\n```\n\n    // Failed to preload route chunk\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Get free expert guidance and resources to empower your best work. Join the Arm\nDeveloper Program.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDV53KC67DT2QYF67IT27YCA7IK2JWFTBD52QWHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/route-masking\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nRoute masking is a way to mask the actual URL of a route that gets persisted to\nthe browser's history and URL bar. This is useful for scenarios where you want\nto show a different URL than the one that is actually being navigated to and\nthen falling back to the displayed URL when it is shared and (optionally) when\nthe page is reloaded. Here's a few examples:\n\n  * Navigating to a modal route like , but masking the actual URL as \n  * Navigating to a modal route like , but masking the actual URL as \n  * Navigating to a route with the search param , but masking the URL to contain the search param\n  * Navigating to a route with the search param , but masking the URL as `/settings'\n\nEach of these scenarios can be achieved with route masking and even extended to\nsupport more advanced patterns like .\n\n## [How does route masking\nwork?](https://tanstack.com/router/latest/docs/framework/react/guide/<#how-does-\nroute-masking-work>)\n\nYou need to understand how route masking works in order to use it. This section\nis for those who are curious about how it works under the hood. Skip to [How do\nI use route\nmasking?](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/guide/route-\nmasking/#how-do-i-use-route-masking>) to learn how to use it!.\n\nRoute masking utilizes the API to store the desired runtime location inside of\nthe location that will get written to the URL. It stores this runtime location\nunder the state property:\n\nWhen the router parses a location from history with the property, it will use\nthat location instead of the one that was parsed from the URL. This allows you\nto navigate to a route like and have the router actually navigate to instead.\nWhen this happens, the history location is saved back into the property, just in\ncase we need to know what the is. One example of where this is used is in the\nDevtools where we detect if a route is masked and show the actual URL instead of\nthe masked one!\n\nRemember, you don't need to worry about any of this. It's all handled for you\nautomatically under the hood!\n\n## [How do I use route\nmasking?](https://tanstack.com/router/latest/docs/framework/react/guide/<#how-\ndo-i-use-route-masking>)\n\nRoute masking is a simple API that can be used in 2 ways:\n\n  * Imperatively via the option available on the and APIs\n\nWhen using either route masking APIs, the option accepts the same navigation\nobject that the and APIs accept. This means you can use the same , , , and\noptions that you're already familiar with. The only difference is that the\noption will be used to mask the URL of the route being navigated to.\n\n> üß† The mask option is also ! This means that if you're using TypeScript, you'll\n> get type errors if you try to pass an invalid navigation object to the option.\n> Booyah!\nThe and APIs both accept a option that can be used to mask the URL of the route\nbeing navigated to. Here's an example of using it with the component:\n\nAnd here's an example of using it with the API:\n\n```\n\n```\n\nIn addition to the imperative API, you can also use the Router's option to\ndeclaratively mask routes. Instead of needing to pass the option to every or\ncall, you can instead create a route mask on the Router to mask routes that\nmatch a certain pattern. Here's an example of the same route mask from above,\nbut using the option instead:\n\n// Use the following for the example below\n\n```\n\n```\n\nWhen creating a route mask, you'll need to pass 1 argument with at least:\n\n  * - The route tree that the route mask will be applied to\n  * - The route ID that the route mask will be applied to\n  * - The standard , , , , etc options that the and APIs accept\n\n> üß† The option is also ! This means that if you're using TypeScript, you'll get\n> type errors if you try to pass an invalid route mask to the option.\n## [Unmasking when sharing the\nURL](https://tanstack.com/router/latest/docs/framework/react/guide/<#unmasking-\nwhen-sharing-the-url>)\n\nURLs are automatically unmasked when they are shared since as soon as a URL is\ndetached from your browsers local history stack, the URL masking data is no\nlonger available. Essentially, as soon as you copy and paste a URL out of your\nhistory, its masking data is lost... after all, that's the point of masking a\nURL!\n\n**By default, URLs are not unmasked when the page is reloaded locally**. Masking\ndata is stored in the property of the history location, so as long as the\nhistory location is still in memory in your history stack, the masking data will\nbe available and the URL will continue to be masked.\n\n**As stated above, URLs are not unmasked when the page is reloaded by default**.\n\nIf you want to unmask a URL locally when the page is reloaded, you have 3\noptions, each overriding the previous one in priority if passed:\n\n  * Set the Router's default option to \n  * Return the option from the masking function when creating a route mask with \n  * Pass the option to the > component or API\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBD52Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/parallel-routes\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nWe haven't covered this yet. Stay tuned!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DP5QKC67DT2QYF67IT27YCA7IK2JWFTBD52JIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/navigation-blocking\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nNavigation blocking is a way to prevent navigation from happening. This is\ntypical if a user attempts to navigate while they:\n\n  * Are in the middle of a form\n  * Are in the middle of a payment\n\nIn these situations, a prompt or custom UI should be shown to the user to\nconfirm they want to navigate away.\n\n  * If the user confirms, navigation will continue as normal\n  * If the user cancels, all pending navigations will be blocked\n\n## [How does navigation blocking\nwork?](https://tanstack.com/router/latest/docs/framework/react/guide/<#how-does-\nnavigation-blocking-work>)\n\nNavigation blocking adds one or more layers of \"blockers\" to the entire\nunderlying history API. If any blockers are present, navigation will be paused\nvia one of the following ways:\n\n  * Custom UI\n    * If the navigation is triggered by something we control at the router level, we can allow you to perform any task or show any UI you'd like to the user to confirm the action. Each blocker's function will be asynchronously and sequentially executed. If any blocker function resolves or returns , the navigation will be allowed and all other blockers will continue to do the same until all blockers have been allowed to proceed. If any single blocker resolves or returns , the navigation will be canceled and the rest of the functions will be ignored.\n  * The event\n    * For page events that we cannot control directly, we rely on the browser's event. If the user attempts to close the tab or window, refresh, or \"unload\" the page assets in any way, the browser's generic \"Are you sure you want to leave?\" dialog will be shown. If the user confirms, all blockers will be bypassed and the page will unload. If the user cancels, the unload will be cancelled, and the page will remain as is.\n\n## [How do I use navigation\nblocking?](https://tanstack.com/router/latest/docs/framework/react/guide/<#how-\ndo-i-use-navigation-blocking>)\n\nThere are 2 ways to use navigation blocking:\n\nLet's imagine we want to prevent navigation if a form is dirty. We can do this\nby using the hook:\n\n```\n\n'Are you sure you want to leave?'\n\n```\n\n```\n\nAre you sure you want to leave?\n\n```\n\ngives you type safe access to the and location:\n\n```\n\n // always block going from /foo to /bar/123?hello=world\n\n```\n\n```\n\n // always block going from /foo to /bar/123?hello=world\n\n```\n\nYou can find more information about the hook in the .\n\nIn addition to logical/hook based blocking, can use the component to achieve\nsimilar results:\n\n```\n\n'Are you sure you want to leave?'\n\n```\n\n```\n\nAre you sure you want to leave?\n\n```\n\n## [How can I show a custom\nUI?](https://tanstack.com/router/latest/docs/framework/react/guide/<#how-can-i-\nshow-a-custom-ui>)\n\nIn most cases, using in the function with in the hook is enough since it will\nclearly show the user that the navigation is being blocked and resolve the\nblocking based on their response.\n\nHowever, in some situations, you might want to show a custom UI that is\nintentionally less disruptive and more integrated with your app's design.\n\nThe return value of does not resolve the blocking if is .\n\n### [Hook/logical-based custom UI with\nresolver](https://tanstack.com/router/latest/docs/framework/react/guide/<#hooklogical-\nbased-custom-ui-with-resolver>)\n\n```\n\n>Are you sure you want to leave?</\n\n```\n\n```\n\nAre you sure you want to leave?\n\n```\n\n### [Hook/logical-based custom UI without\nresolver](https://tanstack.com/router/latest/docs/framework/react/guide/<#hooklogical-\nbased-custom-ui-without-resolver>)\n\n```\n\n    // Using a modal manager of your choice\n\n'Are you sure you want to leave?'\n\n```\n\n```\n\n    // Using a modal manager of your choice\n\nAre you sure you want to leave?\n\n```\n\nSimilarly to the hook, the component returns the same state and functions as\nrender props:\n\n```\n\n>Are you sure you want to leave?</\n\n```\n\n```\n\nAre you sure you want to leave?\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBD52JNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useBlockerHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe method is a hook that when a condition is met.\n\n> ‚ö†Ô∏è The following new API is currently .\nThe hook accepts a single argument, an option object:\n\n  * This function should return a or a that tells the blocker if it should block the current navigation\n  * The function has the argument of type passed to it, which tells you information about the current and next route and the action performed\n  * Think of this function as telling the router if it should block the navigation, so returning mean that it should block the navgation and that it should be allowed\n\n  * Specifies if the blocker should be entirely disabled or not\n\n  * Type: boolean | (() => boolean)\n  * Tell the blocker to sometimes or always block the browser event or not\n\n  * Specify if the resolver returned by the hook should be used or whether your function itself resolves the blocking\n\n  * The function that returns a or indicating whether to allow navigation.\n\n  * A navigation attempt is blocked when this condition is .\n\nAn object with the controls to allow manual blocking and unblocking of\nnavigation.\n\n  * - A string literal that can be either or \n  * - When status is , a type narrrowable object that contains information about the next location\n  * - When status is , a type narrrowable object that contains information about the current location\n  * - When status is , a string that shows the action that triggered the navigation\n  * - When status is , a function that allows navigation to continue\n  * - When status is , a function that cancels navigation ( will be be reset to )\n\nTwo common use cases for the hook are:\n\n```\n\n```\n\n```\n\n>You are navigating to {next.pathname}</\n\n>Are you sure you want to leave?</\n\n```\n\n```\n\nAre you sure you want to leave?\n\n```\n\n```\n\n>Are you sure you want to leave?</\n\n```\n\n```\n\nAre you sure you want to leave?\n\n```\n\n```\n\n'Are you sure you want to leave?'\n\n```\n\n```\n\nAre you sure you want to leave?\n\n```\n\n```\n\n // block going from editor-1 to /foo/123?hello=world\n\n```\n\n```\n\n // block going from editor-1 to /foo/123?hello=world\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Get free resources, expert support & access to community events. Join the Arm\nDeveloper Program.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDV5QKC67DT2QYF67IT27YCA7IK2JWFTBD5K3UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/custom-search-param-serialization\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nBy default, TanStack Router parses and serializes your URL Search Params\nautomatically using and . This process involves escaping and unescaping the\nsearch string, which is a common practice for URL search params, in addition to\nthe serialization and deserialization of the search object.\n\nFor instance, using the default configuration, if you have the following search\nobject:\n\nIt would be serialized and escaped into the following search string:\n\nWe can implement the default behavior with the following code:\n\nHowever, this default behavior may not be suitable for all use cases. For\nexample, you may want to use a different serialization format, such as base64\nencoding, or you may want to use a purpose-built serialization/deserialization\nlibrary, like , , or .\n\nThis can be achieved by providing your own serialization and deserialization\nfunctions to the and options in the configuration. When doing this, you can\nutilize TanStack Router's built-in helper functions, and , to simplify the\nprocess.\n\nAn important aspect of serialization and deserialization, is that you are able\nto get the same object back after deserialization. This is important because if\nthe serialization and deserialization process is not done correctly, you may\nlose some information. For example, if you are using a library that does not\nsupport nested objects, you may lose the nested object when deserializing the\nsearch string.\n\nHere are some examples of how you can customize the search param serialization\nin TanStack Router:\n\nIt's common to base64 encode your search params to achieve maximum compatibility\nacross browsers and URL unfurlers, etc. This can be done with the following\ncode:\n\n> [‚ö†Ô∏è Why does this snippet not use\n> atob/btoa?](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/guide/custom-\n> search-param-serialization/#safe-binary-encodingdecoding>)\nSo, if we were to turn the previous object into a search string using this\nconfiguration, it would look like this:\n\nIf you are serializing user input into Base64, you run the risk of causing a\ncollision with the URL deserialization. This can lead to unexpected behavior,\nsuch as the URL not being parsed correctly or being interpreted as a different\nvalue. To avoid this, you should encode the search params using a safe binary\nencoding/decoding method (see below).\n\nThe library is a popular for being able to reliably parse and stringify query\nstrings. You can use it to customize the serialization format of your search\nparams. This can be done with the following code:\n\n```\n\n```\n\nSo, if we were to turn the previous object into a search string using this\nconfiguration, it would look like this:\n\nis a non-standard library that can compress URLs while still maintaining\nreadability. This can be done with the following code:\n\n```\n\n```\n\nSo, if we were to turn the previous object into a search string using this\nconfiguration, it would look like this:\n\nis a very user-friendly and performant JSON compression library (both in runtime\nperformance and the resulting compression performance). To compress your search\nparams with it (which requires escaping/unescaping and base64 encoding/decoding\nthem as well), you can use the following code:\n\n```\n\n```\n\n> [‚ö†Ô∏è Why does this snippet not use\n> atob/btoa?](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/guide/custom-\n> search-param-serialization/#safe-binary-encodingdecoding>)\nSo, if we were to turn the previous object into a search string using this\nconfiguration, it would look like this:\n\nIn the browser, the and functions are not guaranteed to work properly with non-\nUTF8 characters. We recommend using these encoding/decoding utilities instead:\n\nTo encode from a string to a binary string:\n\nTo decode from a binary string to a string:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBD5KQLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/history-types\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nWhile it's not required to know the API itself to use TanStack Router, it's a\ngood idea to understand how it works. Under the hood, TanStack Router requires\nand uses a abstraction to manage the routing history.\n\nIf you don't create a history instance, a browser-oriented instance of this API\nis created for you when the router is initialized. If you need a special history\nAPI type, You can use the package to create your own:\n\n  * : The default history type.\n  * : A history type that uses a hash to track history.\n  * : A history type that keeps the history in memory.\n\nOnce you have a history instance, you can pass it to the constructor:\n\n```\n\n// Pass your initial url\n\n({ routeTree, history: memoryHistory })\n\n```\n\n```\n\n // Pass your initial url\n\n```\n\nThe is the default history type. It uses the browser's history API to manage the\nbrowser history.\n\nHash routing can be helpful if your server doesn't support rewrites to\nindex.html for HTTP requests (among other environments that don't have a\nserver).\n\n```\n\n({ routeTree, history: hashHistory })\n\n```\n\nMemory routing is useful in environments that are not a browser or when you do\nnot want components to interact with the URL.\n\n```\n\n// Pass your initial url\n\n({ routeTree, history: memoryHistory })\n\n```\n\n```\n\n // Pass your initial url\n\n```\n\nRefer to the for usage on the server for server-side rendering.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBD5KQYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/router-context\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nTanStack Router's router context is a very powerful tool that can be used for\ndependency injection among many other things. Aptly named, the router context is\npassed through the router and down through each matching route. At each route in\nthe hierarchy, the context can be modified or added to. Here's a few ways you\nmight use the router context practically:\n\n  * Dependency Injection\n    * You can supply dependencies (e.g. a loader function, a data fetching client, a mutation service) which the route and all child routes can access and use without importing or creating directly.\n  * Breadcrumbs\n    * While the main context object for each route is merged as it descends, each route's unique context is also stored making it possible to attach breadcrumbs or methods to each route's context.\n  * Dynamic meta tag management\n    * You can attach meta tags to each route's context and then use a meta tag manager to dynamically update the meta tags on the page as the user navigates the site.\n\nThese are just suggested uses of the router context. You can use it for whatever\nyou want!\n\nLike everything else, the root router context is strictly typed. This type can\nbe augmented via any route's option as it is merged down the route match tree.\nTo constrain the type of the root router context, you must use the function to\ncreate a new router context instead of the function to create your root route.\nHere's an example:\n\n```\n\n// Use the routerContext to create your root route\n\n// Use the routerContext to create your router\n\n```\n\n```\n\n// Use the routerContext to create your root route\n\n// Use the routerContext to create your router\n\n```\n\n## [Passing the initial Router\nContext](https://tanstack.com/router/latest/docs/framework/react/guide/<#passing-\nthe-initial-router-context>)\n\nThe router context is passed to the router at instantiation time. You can pass\nthe initial router context to the router via the option:\n\nIf your context has any required properties, you will see a TypeScript error if\nyou don't pass them in the initial router context. If all of your context\nproperties are optional, you will not see a TypeScript error and passing the\ncontext will be optional. If you don't pass a router context, it defaults to .\n\n```\n\n// Use the routerContext you created to create your router\n\n```\n\n```\n\n// Use the routerContext you created to create your router\n\n```\n\nIf you need to invalidate the context state you are passing into the router, you\ncan call the method to tell the router to recompute the context. This is useful\nwhen you need to update the context state and have the router recompute the\ncontext for all routes.\n\nOnce you have defined the router context type, you can use it in your route\ndefinitions:\n\nYou can even inject data fetching and mutation implementations themselves! In\nfact, this is highly recommended üòú\n\nLet's try this with a simple function to fetch some todos:\n\n### [How about an external data fetching\nlibrary?](https://tanstack.com/router/latest/docs/framework/react/guide/<#how-\nabout-an-external-data-fetching-library>)\n\n```\n\n, { userId: user.id }],\n\n```\n\n## [How about using React\nContext/Hooks?](https://tanstack.com/router/latest/docs/framework/react/guide/<#how-\nabout-using-react-contexthooks>)\n\nWhen trying to use React Context or Hooks in your route's or functions, it's\nimportant to remember React's . You can't use hooks in a non-React function, so\nyou can't use hooks in your or functions.\n\nSo, how do we use React Context or Hooks in our route's or functions? We can use\nthe router context to pass down the React Context or Hooks to our route's or\nfunctions.\n\nLet's look at the setup for an example, where we pass down a hook to our route's\nfunction:\n\n```\n\n// First, make sure the context for the root route is typed\n\n```\n\n```\n\n// First, make sure the context for the root route is typed\n\n```\n\nIn this example, we'd instantiate the hook before rendering the router using the\n. This way, the hook would be called in React-land, therefore adhering to the\nRules of Hooks.\n\n```\n\n// We'll set this in React-land\n\n```\n\n```\n\n // We'll set this in React-land\n\n```\n\n```\n\n // Inject the returned value from the hook into the router context\n\n```\n\n```\n\n // Inject the returned value from the hook into the router context\n\n```\n\nSo, now in our route's function, we can access the hook from the router context:\n\n```\n\n```\n\nThe router context is passed down the route tree and is merged at each route.\nThis means that you can modify the context at each route and the modifications\nwill be available to all child routes. Here's an example:\n\n```\n\n```\n\n```\n\n```\n\nContext, especially the isolated route objects, make it trivial to accumulate\nand process the route context objects for all matched routes. Here's an example\nwhere we use all of the matched route contexts to generate a breadcrumb trail:\n\n```\n\n```\n\nUsing that same route context, we could also generate a title tag for our page's\n:\n\n```\n\n```\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Develop and launch modern apps with MongoDB Atlas, a resilient data platform.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKBDCZ3JCA7ILK3ICWAI423KC67DT2QYF67IT27YCA7IK2JWFTBD5KJJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/not-found-errors\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n> ‚ö†Ô∏è This page covers the newer function and API for handling not found errors.\n> The route is deprecated and will be removed in a future release. See for more\n> information.\nThere are 2 uses for not-found errors in TanStack Router:\n\n  * : When a path does not match any known route matching pattern when it partially matches a route, but with extra path segments\n    * The will automatically throw a not-found error when a path does not match any known route matching pattern\n    * If the router's is set to , the nearest parent route with a will handle the error. If the router's is set to , the root route will handle the error.\n    * Examples:\n      * Attempting to access when there is no route\n      * Attempting to access when the route tree only handles \n  * : When a resource cannot be found, such as a post with a given ID or any asynchronous data that is not available or does not exist\n    * must throw a not-found error when a resource cannot be found. This can be done in the or functions using the utility.\n    * Will be handled by the nearest parent route with a or the root route\n    * Examples:\n      * Attempting to access when the post with ID 1 does not exist\n      * Attempting to access when the document does not exist\n\nUnder the hood, both of these cases are implemented using the same function and\nAPI.\n\nWhen TanStack Router encounters a that doesn't match any known route pattern\npartially matches a route pattern but with extra trailing pathname segments, it\nwill automatically throw a not-found error.\n\nDepending on the option, the router will handle these automatic errors\ndifferently::\n\n  * (default): The router will intelligently find the closest matching suitable route and display the .\n  * : All not-found errors will be handled by the root route's , regardless of the nearest matching route.\n\nBy default, the router's is set to , which indicates that if a pathname doesn't\nmatch any known route, the router will attempt to use the closest matching route\nwith children/(an outlet) and a configured not found component.\n\n> **‚ùì Why is this the default?** Fuzzy matching to preserve as much parent\n> layout as possible for the user gives them more context to navigate to a\n> useful location based on where they thought they would arrive.\nThe nearest suitable route is found using the following criteria:\n\n  * The route must have children and therefore an to render the \n  * The route must have a configured or the router must have a configured\n\nFor example, consider the following route tree:\n\nIf provided the path of , the following component structure will be rendered:\n\nThe of the route will be rendered because it is the **nearest suitable parent\nroute with children (and therefore an outlet) and a configured**.\n\nWhen is set to , all not-found errors will be handled by the root route's\ninstead of bubbling up from the nearest fuzzy-matched route.\n\nFor example, consider the following route tree:\n\nIf provided the path of , the following component structure will be rendered:\n\nThe of the route will be rendered because the is set to .\n\nTo handle both types of not-found errors, you can attach a to a route. This\ncomponent will be rendered when a not-found error is thrown.\n\nFor example, configuring a for a route to handle non-existing settings pages:\n\n```\n\n>This setting page doesn't exist!</\n\n```\n\n```\n\nThis setting page doesn't exist!\n\n```\n\nOr configuring a for a route to handle posts that don't exist:\n\n```\n\n```\n\n## [Default Router-Wide Not Found\nHandling](https://tanstack.com/router/latest/docs/framework/react/guide/<#default-\nrouter-wide-not-found-handling>)\n\nYou may want to provide a default not-found component for every route in your\napp with child routes.\n\n> Why only routes with children? **Leaf-node routes (routes without children)\n> will never render an and therefore are not able to handle not-found errors.**\nTo do this, pass a to the function:\n\nYou can manually throw not-found errors in loader methods and components using\nthe function. This is useful when you need to signal that a resource cannot be\nfound.\n\nThe function works in a similar fashion to the function. To cause a not-found\nerror, you can .\n\n```\n\n  // Returns `null` if the post doesn't exist\n\n   // Alternatively, you can make the notFound function throw:\n\n   // notFound({ throw: true })\n\n  // Post is guaranteed to be defined here because we threw an error\n\n```\n\n```\n\n  // Returns `null` if the post doesn't exist\n\n   // Alternatively, you can make the notFound function throw:\n\n   // notFound({ throw: true })\n\n  // Post is guaranteed to be defined here because we threw an error\n\n```\n\nThe not-found error above will be handled by the same route or nearest parent\nroute that has either a route option or the router option configured.\n\nIf neither the route nor any suitable parent route is found to handle the error,\nthe root route will handle it using TanStack Router's **extremely basic (and\npurposefully undesirable)** default not-found component that simply renders .\nIt's highly recommended to either attach at least one to the root route or\nconfigure a router-wide to handle not-found errors.\n\n## [Specifying Which Routes Handle Not Found\nErrors](https://tanstack.com/router/latest/docs/framework/react/guide/<#specifying-\nwhich-routes-handle-not-found-errors>)\n\nSometimes you may want to trigger a not-found on a specific parent route and\nbypass the normal not-found component propagation. To do this, pass in a route\nid to the option in the function.\n\n```\n\n  // This will make LayoutRoute handle the not-found error\n\n  //           ^^^^^^^^^ This will autocomplete from the registered router\n\n // This WILL NOT render\n\n```\n\n```\n\n  // This will make LayoutRoute handle the not-found error\n\n  //           ^^^^^^^^^ This will autocomplete from the registered router\n\n // This WILL NOT render\n\n```\n\n### [Manually targeting the root\nroute](https://tanstack.com/router/latest/docs/framework/react/guide/<#manually-\ntargeting-the-root-route>)\n\nYou can also target the root route by passing the exported variable to the\nfunction's property:\n\n```\n\n```\n\n### [Throwing Not Found Errors in\nComponents](https://tanstack.com/router/latest/docs/framework/react/guide/<#throwing-\nnot-found-errors-in-components>)\n\nYou can also throw not-found errors in components. However, **it is recommended\nto throw not-found errors in loader methods instead of components in order to\ncorrectly type loader data and prevent flickering.**\n\nTanStack Router exposes a component similar to that can be used to catch not-\nfound errors in components and display UI accordingly.\n\nis a special case when it comes to data loading. **may not be defined depending\non which route you are trying to access and where the not-found error gets\nthrown**. However, , , , etc. will return a defined value.\n\n**If you need to pass incomplete loader data to ,** pass the data via the option\nin the function and validate it in .\n\n```\n\n    // Forward some data to the notFoundComponent\n\n // `data: unknown` is passed to the component via the `data` option when\ncalling `notFound`\n\n  // ‚ùå useLoaderData is not valid here: const { post } = Route.useLoaderData()\n\n>Post with id {postId} not found!</\n\n```\n\n```\n\n    // Forward some data to the notFoundComponent\n\n // `data: unknown` is passed to the component via the `data` option when\ncalling `notFound`\n\n  // ‚ùå useLoaderData is not valid here: const { post } = Route.useLoaderData()\n\n```\n\nThe API is deprecated in favor of . The API will be removed in a future release.\n\n**The function and will not work when using .**\n\n  * is a route that requires an on its parent route to render. is a component that can be attached to any route.\n  * When using , you can't use layouts. can be used with layouts.\n  * When using , path matching is strict. This means that if you have a route at , a not-found error will be thrown if you try to access . With , would match the and only render it if there is an .\n\nTo migrate from to , follow these steps:\n\n  * Replace with s on the routes that need to handle not-found errors. For \"global\" not-found errors, attach a to the root route.\n  * Remove s from the routes that used .\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBD5KJYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/authenticated-routes\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nAuthentication is an extremely common requirement for web applications. In this\nguide, we'll walk through how to use TanStack Router to build protected routes,\nand how to redirect users to login if they try to access them.\n\nThe option allows you to specify a function that will be called before a route\nis loaded. It receives all of the same arguments that the function does. This is\na great place to check if a user is authenticated, and redirect them to a login\npage if they are not.\n\nThe function runs in relative order to these other route loading functions:\n\n**It's important to know that the function for a route is called _before any of\nits child routes' functions_.** It is essentially a middleware function for the\nroute and all of its children.\n\n**If you throw an error in , none of its children will attempt to load**.\n\nWhile not required, some authentication flows require redirecting to a login\npage. To do this, you can from :\n\n```\n\n     // Use the current location to power a redirect after login\n     // (Do not use `router.state.resolvedLocation` as it can\n     // potentially lag behind the actual current location)\n\n```\n\n```\n\n     // Use the current location to power a redirect after login\n     // (Do not use `router.state.resolvedLocation` as it can\n     // potentially lag behind the actual current location)\n\n```\n\nThe function takes all of the same options as the function, so you can pass\noptions like if you want to replace the current history entry instead of adding\na new one.\n\nOnce you have authenticated a user, it's also common practice to redirect them\nback to the page they were trying to access. To do this, you can utilize the\nsearch param that we added in our original redirect. Since we'll be replacing\nthe entire URL with what it was, is better suited for this than :\n\nSome applications choose to not redirect users to a login page, and instead keep\nthe user on the same page and show a login form that either replaces the main\ncontent or hides it via a modal. This is also possible with TanStack Router by\nsimply short circuiting rendering the that would normally render the child\nroutes:\n\nThis keeps the user on the same page, but still allows you to render a login\nform. Once the user is authenticated, you can simply render the and the child\nroutes will be rendered.\n\nIf your authentication flow relies on interactions with React context and/or\nhooks, you'll need to pass down your authentication state to TanStack Router\nusing option.\n\nReact hooks are not meant to be consumed outside of React components. If you\nneed to use a hook outside of a React component, you need to extract the\nreturned state from the hook in a component that wraps your and then pass the\nreturned value down to TanStack Router.\n\nWe'll cover the options in-detail in the section.\n\nHere's an example that uses React context and hooks for protecting authenticated\nroutes in TanStack Router. See the entire working setup in the .\n\n```\n\n // The ReturnType of your useAuth hook or the value of your AuthContext\n\n```\n\n```\n\n // The ReturnType of your useAuth hook or the value of your AuthContext\n\n```\n\n```\n\n  // auth will initially be undefined\n\n  // We'll be passing down the auth state from within a React component\n\n```\n\n```\n\n  // auth will initially be undefined\n\n  // We'll be passing down the auth state from within a React component\n\n```\n\n```\n\n```\n\nThen in the authenticated route, you can check the auth state using the\nfunction, and to your if the user is not signed-in.\n\n```\n\n```\n\nYou can , also use the approach to show a login form instead of calling a .\n\nThis approach can also be used in conjunction with Layout or Parent Routes to\nprotect all routes under a specific layout.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBD5K7IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/scroll-restoration\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nOut of the box, TanStack Router supports both and without any additional\nconfiguration.\n\n## [Scroll-to-top & Nested Scrollable\nAreas](https://tanstack.com/router/latest/docs/framework/react/guide/<#scroll-\nto-top--nested-scrollable-areas>)\n\nBy default, scroll-top-top mimics the behavior of the browser, which means only\nthe itself is scrolled to the top after successful navigation. For many apps\nhowever, it's common for the main scrollable area to be a nested div or similar\nbecause of advanced layouts. If you would like TanStack Router to also scroll\nthese main scrollable areas for you, you can add selectors to target them using\nthe :\n\nThese selectors are handled which cannot be disabled currently.\n\nScroll restoration is the process of restoring the scroll position of a page\nwhen the user navigates back to it. This is normally a built-in feature for\nstandard HTML based websites, but can be difficult to replicate for SPA\napplications because:\n\n  * SPAs typically use the API for navigation, so the browser doesn't know to restore the scroll position natively\n  * SPAs sometimes render content asynchronously, so the browser doesn't know the height of the page until after it's rendered\n  * SPAs can sometimes use nested scrollable containers to force specific layouts and features.\n\nNot only that, but it's very common for applications to have multiple scrollable\nareas within an app, not just the body. For example, a chat application might\nhave a scrollable sidebar and a scrollable chat area. In this case, you would\nwant to restore the scroll position of both areas independently.\n\nTo alleviate this problem, TanStack Router provides a scroll restoration\ncomponent and hook that handle the process of monitoring, caching and restoring\nscroll positions for you.\n\n  * Monitoring the DOM for scroll events\n  * Registering scrollable areas with the scroll restoration cache\n  * Listening to the proper router events to know when to cache and restore scroll positions\n  * Storing scroll positions for each scrollable area in the cache (including and )\n  * Restoring scroll positions after successful navigations before DOM paint\n\nThat may sound like a lot, but for you, it's as simple as this:\n\nThe component still works, but has been deprecated.\n\nFalling in behind Remix's own Scroll Restoration APIs, you can also customize\nthe key used to cache scroll positions for a given scrollable area using the\noption. This could be used, for example, to force the same scroll position to be\nused regardless of the users browser history.\n\nThe option receives the relevant state from TanStack Router and expects you to\nreturn a string to uniquely identify the scrollable measurements for that state.\n\nThe default is , where is the unique key generated for each entry in the\nhistory.\n\nYou could sync scrolling to the pathname:\n\nYou can conditionally sync only some paths, then use the key for the rest:\n\nSometimes you may want to prevent scroll restoration from happening. To do this\nyou can utilize the option available on the following APIs:\n\nWhen is set to , the scroll position for the next navigation will not be\nrestored (if navigating to an existing history event in the stack) or reset to\nthe top (if it's a new history event in the stack).\n\nMost of the time, you won't need to do anything special to get scroll\nrestoration to work. However, there are some cases where you may need to\nmanually control scroll restoration. The most common example is .\n\nTo manually control scroll restoration, you can use the hook and the DOM\nattribute:\n\n```\n\n // We need a unique ID for manual scroll restoration on a specific element\n\n // It should be as unique as possible for this element across your app\n\n // We use that ID to get the scroll entry for this element\n\n // Let's use TanStack Virtual to virtualize some content!\n\n  // We pass the scrollY from the scroll restoration entry to the virtualizer\n\n  // as the initial offset\n\n   // We pass the scroll restoration ID to the element\n\n   // as a custom attribute that will get picked up by the\n\n\"flex-1 border rounded-lg overflow-auto relative\"\n\n```\n\n```\n\n // We need a unique ID for manual scroll restoration on a specific element\n\n // It should be as unique as possible for this element across your app\n\n // We use that ID to get the scroll entry for this element\n\n // Let's use TanStack Virtual to virtualize some content!\n\n  // We pass the scrollY from the scroll restoration entry to the virtualizer\n\n  // as the initial offset\n\n   // We pass the scroll restoration ID to the element\n\n   // as a custom attribute that will get picked up by the\n\nflex-1 border rounded-lg overflow-auto relative\n\n```\n\nTo control the scroll behavior when navigating between pages, you can use the\noption. This allows you to make the transition between pages instant instead of\na smooth scroll. The global configuration of scroll restoration behavior has the\nsame options as those supported by the browser, which are , , and (see for more\ninformation).\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Bryntum Grid: Advanced data tables for exceptional UX and lightning-fast\nperformance.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEBDEZ3JCA7ILK3LCKYD6KJKC67DT2QYF67IT27YCA7IK2JWFTBDK27IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/static-route-data\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nWhen creating routes, you can optionally specify a property in the route's\noptions. This object can literally contain anything you want as long as it's\nsynchronously available when you create your route.\n\nIn addition to being able to access this data from the route itself, you can\nalso access it from any match under the property.\n\nYou can then access this data anywhere you have access to your routes, including\nmatches that can be mapped back to their routes.\n\nIf you want to enforce that a route has static data, you can use declaration\nmerging to add a type to the route's static option:\n\nNow, if you try to create a route without the property, you'll get a type error:\n\n```\n\n  // Property 'customData' is missing in type '{ customData: number; }' but\nrequired in type 'StaticDataRouteOption'.ts(2741)\n\n```\n\n```\n\n  // Property 'customData' is missing in type '{ customData: number; }' but\nrequired in type 'StaticDataRouteOption'.ts(2741)\n\n```\n\nIf you want to make static data optional, simply add a to the property:\n\nAs long as there are any required properties on the , you'll be required to pass\nin an object.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBDK27YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/ssr\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nServer Side Rendering (SSR) is the process of rendering a component on the\nserver and sending the HTML markup to the client. The client then hydrates the\nmarkup into a fully interactive component.\n\nThere are usually two different flavors of SSR to be considered:\n\n  * Non-streaming SSR\n    * The entire page is rendered on the server and sent to the client in one single HTML request, including the serialized data the application needs to hydrate on the client.\n  * Streaming SSR\n    * The critical first paint of the page is rendered on the server and sent to the client in one single HTML request, including the serialized data the application needs to hydrate on the client\n    * The rest of the page is then streamed to the client as it is rendered on the server.\n\nThis guide will explain how to implement both flavors of SSR with TanStack\nRouter!\n\nNon-Streaming server-side rendering is the classic process of rendering the\nmarkup for your entire application page on the server and sending the completed\nHTML markup (and data) to the client. The client then hydrates the markup into a\nfully interactive application again.\n\nTo implement non-streaming SSR with TanStack Router, you will need the following\nutilities:\n\n  * from \n    * Rendering this component in your server entry will render your application and also automatically handle application-level hydration/dehydration and implement the component option on \n  * from \n    * Rendering this component in your client entry will render your application and also automatically implement the component option on \n\nSince your router will exist both on the server and the client, it's important\nthat you create your router in a way that is consistent between both of these\nenvironments. The easiest way to do this is to expose a function in a shared\nfile that can be imported and called by both your server and client entry files.\n\n```\n\n```\n\nNow you can import this function in both your server and client entry files and\ncreate your router.\n\nOn the client, Router defaults to using an instance of , which is the preferred\ntype of history to use on the client. On the server, however, you will want to\nuse an instance of instead. This is because uses the object, which does not\nexist on the server.\n\n> üß† Make sure you initialize your memory history with the server URL that is\n> being rendered.\nAfter creating the memory history instance, you can update the router to use it.\n\n### [Loading Critical Router Data on the\nServer](https://tanstack.com/router/latest/docs/framework/react/guide/<#loading-\ncritical-router-data-on-the-server>)\n\nIn order to render your application on the server, you will need to ensure that\nthe router has loaded any critical data via it's route loaders. To do this, you\ncan before rendering your application. This will quite literally wait for each\nof the matching route matches found for this url to run their route's functions\nin parallel.\n\nResolved loader data fetched by routes is automatically dehydrated and\nrehydrated by TanStack Router so long as you complete the standard SSR steps\noutlined in this guide.\n\n‚ö†Ô∏è If you are using deferred data streaming, you will also need to ensure that\nyou have implemented the [SSR Streaming & Stream\nTransform](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/guide/ssr/#streaming-\nssr>) pattern near the end of this guide.\n\nFor more information on how to utilize data loading and data streaming, see the\nand guides.\n\n### [Rendering the Application on the\nServer](https://tanstack.com/router/latest/docs/framework/react/guide/<#rendering-\nthe-application-on-the-server>)\n\nNow that you have a router instance that has loaded all of the critical data for\nthe current URL, you can render your application on the server:\n\nhas a method to check if a not-found error has occurred during the rendering\nprocess. Use this method to check if a not-found error has occurred and set the\nresponse status code accordingly:\n\nHere is a complete example of a server entry file that uses all of the concepts\ndiscussed above.\n\n```\n\n```\n\n## [Rendering the Application on the\nClient](https://tanstack.com/router/latest/docs/framework/react/guide/<#rendering-\nthe-application-on-the-client>)\n\nOn the client, things are much simpler.\n\n  * Render your application using the component\n\n```\n\n```\n\nWith this setup, your application will be rendered on the server and then\nhydrated on the client!\n\nStreaming SSR is the most modern flavor of SSR and is the process of\ncontinuously and incrementally sending HTML markup to the client as it is\nrendered on the server. This is slightly different from traditional SSR in\nconcept because beyond being able to dehydrate and rehydrate a critical first\npaint, markup and data with less priority or slower response times can be\nstreamed to the client after the initial render, but in the same request.\n\nThis pattern can be useful for pages that have slow or high-latency data\nfetching requirements. For example, if you have a page that needs to fetch data\nfrom a third-party API, you can stream the critical initial markup and data to\nthe client and then stream the less-critical third-party data to the client as\nit is resolved.\n\n**This streaming pattern is all automatic as long as you are using**.\n\nStreaming dehydration/hydration is an advanced pattern that goes beyond markup\nand allows you to dehydrate and stream any supporting data from the server to\nthe client and rehydrate it on arrival. This is useful for applications that may\nneed to further use/manage the underlying data that was used to render the\ninitial markup on the server.\n\nWhen using SSR, data passed between the server and the client must be serialized\nbefore it is sent across network-boundaries. TanStack Router handles this\nserialization using a very lightweight serializer that supports common data\ntypes beyond JSON.stringify/JSON.parse.\n\nOut of the box, the following types are supported:\n\nIf you feel that there are other types that should be supported by default,\nplease open an issue on the TanStack Router repository.\n\nIf you are using more complex data types like , , , etc, you may need to use a\ncustom serializer to ensure that your type-definitions are accurate and your\ndata is correctly serialized and deserialized. We are currently working on both\na more robust serializer and a way to customize the serializer for your\napplication. Open an issue if you are interested in helping out!\n\nThe Data Serialization API allows the usage of a custom serializer that can\nallow us to transparently use these data types when communicating across the\nnetwork.\n\nJust like that, TanStack Router will now appropriately use SuperJSON to\nserialize data across the network.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBDK53JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/data-streaming\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe page you are looking for does not exist.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBDK53UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/render-optimizations\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nTanStack Router includes several optimizations to ensure your components only\nre-render when necessary. These optimizations include:\n\nTanStack Router uses a technique called \"structural sharing\" to preserve as many\nreferences as possible between re-renders, which is particularly useful for\nstate stored in the URL, such as search parameters.\n\nFor example, consider a route with two search parameters, and , accessed like\nthis:\n\nWhen only is changed by navigating from to , will be referentially stable and\nonly will be replaced.\n\nYou can access and subscribe to the router state using various hooks like , ,\nand others. If you only want a specific component to re-render when a particular\nsubset of the router state such as a subset of the search parameters changes,\nyou can use partial subscriptions with the property.\n\n```\n\n// component won't re-render when `bar` changes\n\n```\n\n```\n\n// component won't re-render when `bar` changes\n\n```\n\n### [structural sharing with fine-grained\nselectors](https://tanstack.com/router/latest/docs/framework/react/guide/<#structural-\nsharing-with-fine-grained-selectors>)\n\nThe function can perform various calculations on the router state, allowing you\nto return different types of values, such as objects. For example:\n\nAlthough this works, it will cause your component to re-render each time, since\nis now returning a new object each time it‚Äôs called.\n\nYou can avoid this re-rendering issue by using \"structural sharing\" as described\nabove. By default, structural sharing is turned off to maintain backward\ncompatibility, but this may change in v2.\n\nTo enable structural sharing for fine grained selectors, you have two options:\n\n#### [Enable it by default in the router\noptions:](https://tanstack.com/router/latest/docs/framework/react/guide/<#enable-\nit-by-default-in-the-router-options>) #### [Enable it per hook usage as shown\nhere:](https://tanstack.com/router/latest/docs/framework/react/guide/<#enable-\nit-per-hook-usage-as-shown-here>)\n\nStructural sharing only works with JSON-compatible data. This means you cannot\nuse to return items like class instances if structural sharing is enabled.\n\nIn line with TanStack Router's type-safe design, TypeScript will raise an error\nif you attempt the following:\n\nIf structural sharing is enabled by default in the router options, you can\nprevent this error by setting .\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Google Cloud Next is April 9-11 to learn how the hottest startups are putting\nAI into action.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6ADTZ3JCA7ILK3LCE7IK2QKC67DT2QYF67IT27YCA7IK2JWFTBDK5QEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * Types\n  * ‚ö†Ô∏è Deprecated\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/router/latest/docs/framework/react/api/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBDK5QWHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/createFileRouteFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe function is a factory that can be used to create a file-based route\ninstance. This route instance can then be used to automatically generate a route\ntree with the and commands.\n\nThe function accepts a single argument of type that represents the of the file\nthat the route will be generated from.\n\n  * Required, but **automatically inserted and updated by the and commands**\n  * The full path of the file that the route will be generated from\n\nA new function that accepts a single argument of type that will be used to\nconfigure the file instance.\n\n> ‚ö†Ô∏è Note: For and to work properly, the file route instance must be exported\n> from the file using the identifier.\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Bryntum Grid: Advanced data tables for exceptional UX and lightning-fast\nperformance.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEBDEZ3JCA7ILK3LCKYD6KJKC67DT2QYF67IT27YCA7IK2JWFTBDK5QUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/createLazyFileRouteFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe function is used for creating a partial file-based route route instance that\nis lazily loaded when matched. This route instance can only be used to configure\nthe of the route, such as , , , and the .\n\nThe function accepts a single argument of type that represents the of the file\nthat the route will be generated from.\n\n  * Required, but **automatically inserted and updated by the and commands**\n  * The full path of the file that the route will be generated from.\n\nA new function that accepts a single argument of partial of the type that will\nbe used to configure the file instance.\n\n> ‚ö†Ô∏è Note: For and to work properly, the file route instance must be exported\n> from the file using the identifier.\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBD5K3JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/createRootRouteFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe function returns a new root route instance. A root route instance can then\nbe used to create a route-tree.\n\nThe options that will be used to configure the root route instance.\n\n```\n\n { createRootRoute, createRouter, Outlet }\n\n // ... root route options\n\n```\n\n```\n\n // ... root route options\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBDK23EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/createRouteFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe function implements returns a instance. A route instance can then be passed\nto a root route's children to create a route tree, which is then passed to the\nrouter.\n\n  * The options that will be used to configure the route instance\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBDK23WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/createLazyRouteFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe function is used for creating a partial code-based route route instance that\nis lazily loaded when matched. This route instance can only be used to configure\nthe of the route, such as , , , and the .\n\nThe function accepts a single argument of type that represents the of the route.\n\n  * The route id of the route.\n\nA new function that accepts a single argument of partial of the type that will\nbe used to configure the file instance.\n\n> ‚ö†Ô∏è Note: This route instance must be manually lazily loaded against its\n> critical route instance using the method returned by the function.\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBDK23UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/createRouteMaskFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe function is a helper function that can be used to create a route mask\nconfiguration that can be passed to the option.\n\n  * The options that will be used to configure the route mask\n\n  * A object with the type signature of that can be passed to the option.\n\n```\n\n// Set up a Router instance\n\n```\n\n```\n\n// Set up a Router instance\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Build chat, video, moderation & feeds, faster. Start coding FREE. No CC\nrequired\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKSIPZ3JCA7ILK3LCKAD4K7KC67DT2QYF67IT27YCA7IK2JWFTBDK2QEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/createRouterFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe function accepts a object and creates a new instance.\n\n  * The options that will be used to configure the router instance.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBDK2QIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/deferFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nYou don't need to call manually anymore, Promises are handled automatically now.\n\nThe function wraps a promise with a deferred state object that can be used to\ninspect the promise's state. This deferred promise can then be passed to the\nhook or the component for suspending until the promise is resolved or rejected.\n\nThe function accepts a single argument, the to wrap with a deferred state\nobject.\n\n  * The promise to wrap with a deferred state object.\n\n  * A promise that can be passed to the hook or the component.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBDK2QNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/getRouteApiFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe function provides type-safe version of common hooks like , , , , , and that\nare pre-bound to a specific route ID and corresponding registered route types.\n\nThe function accepts a single argument, a string literal.\n\n  * The route ID to which the instance will be bound\n\n  * An instance of the that is pre-bound to the route ID that the function was called with.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBDK2JEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/isNotFoundFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe function can be used to determine if an object is a object.\n\nThe function accepts a single argument, an .\n\n  * An object to check if it is a .\n\n  * if the object is a .\n  * if the object is not a .\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBDK2JIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/isRedirectFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe function can be used to determine if an object is a redirect object.\n\nThe function accepts a single argument, an .\n\n  * An object to check if it is a redirect object\n\n  * if the object is a redirect object\n  * if the object is not a redirect object\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBDK2JNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/lazyRouteComponentFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nIf you are using file-based routing, it's recommended to use the function\ninstead.\n\nThe function can be used to create a one-off code-split route component that can\nbe preloaded using a method.\n\n  * A function that returns a promise that resolves to an object that contains the component to be loaded.\n\n  * The name of the component to be loaded from the imported object. Defaults to .\n\n  * A component that can be preloaded using a method.\n\n```\n\n```\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBDK27EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/linkOptions\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nis a function which type checks an object literal with the intention of being\nused for , or\n\nAn object literal with the exact type inferred from the input\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBDKK37HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/notFoundFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe function returns a new object that can be either returned or thrown from\nplaces like a Route's or callbacks to trigger the .\n\nThe function accepts a single optional argument, the to create the not-found\nerror object.\n\n  * If the property is in the object, the object will be thrown from within the function call.\n  * If the property is in the object, the object will be returned.\n\n```\n\n // throwing a not-found object\n\n // or if you want to show a not-found on the whole page\n\n // ... other route options\n\n```\n\n```\n\n // throwing a not-found object\n\n // or if you want to show a not-found on the whole page\n\n // ... other route options\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBDKKQLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/redirectFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe function returns a new object that can be either returned or thrown from\nplaces like a Route's or callbacks to trigger to a new location.\n\nThe function accepts a single argument, the to determine the redirect behavior.\n\n  * If the property is in the object, the object will be thrown from within the function call.\n  * If the property is in the object, the object will be returned.\n\n```\n\n // throwing a redirect object\n\n // or forcing `redirect` to throw itself\n\n // ... other route options\n\n```\n\n```\n\n // throwing a redirect object\n\n // or forcing `redirect` to throw itself\n\n // ... other route options\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBDKKQMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/retainSearchParamsFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# Search middleware to retain search params\n\nis a search middleware that allows to keep search params.\n\nThe either accepts or a list of keys of those search params that shall be\nretained. If is passed in, all search params will be retained.\n\n```\n\n```\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBDKKQ7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/stripSearchParamsFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# Search middleware to strip search params\n\nis a search middleware that allows to remove search params.\n\naccepts one of the following inputs:\n\n  * : if the search schema has no required params, can be used to strip all search params\n  * a list of keys of those search params that shall be removed; only keys of optional search params are allowed.\n  * an object that conforms to the partial input search schema. The search params are compared against the values of this object; if the value is deeply equal, it will be removed. This is especially useful to strip out default search params.\n\n```\n\n```\n\n```\n\n```\n\n```\n\n  // remove all search params\n\n```\n\n```\n\n  // remove all search params\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBDKKJLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/awaitComponent\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe component is a component that suspends until the provided promise is\nresolved or rejected. This is only necessary for React 18. If you are using\nReact 19, you can use the hook instead.\n\nThe component accepts the following props:\n\n  * A function that will be called with the resolved value of the promise.\n\n  * Throws an error if the promise is rejected.\n  * Suspends (throws a promise) if the promise is pending.\n  * Returns the resolved value of a deferred promise if the promise is resolved using as the render function.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBDKKJNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/catchBoundaryComponent\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe component is a component that catches errors thrown by its children, renders\nan error component and optionally calls the callback. It also accepts a function\nthat can be used to declaratively reset the component's state when the key\nchanges.\n\nThe component accepts the following props:\n\n  * A function that returns a string that will be used to reset the component's state when the key changes.\n\n  * The component's children to render when there is no error\n\n  * The component to render when there is an error.\n\n  * A callback that will be called with the error that was thrown by the component's children.\n\n  * Returns the component's children if there is no error.\n  * Returns the if there is an error.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBDKKJ7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/catchNotFoundComponent\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe component is a component that catches not-found errors thrown by its\nchildren, renders a fallback component and optionally calls the callback. It\nresets when the pathname changes.\n\nThe component accepts the following props:\n\n  * The component's children to render when there is no error\n\n  * The component to render when there is an error\n\n  * A callback that will be called with the error that was thrown by the component's children\n\n  * Returns the component's children if there is no error.\n  * Returns the if there is an error.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBDKK7LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/defaultGlobalNotFoundComponent\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe component is a component that renders \"Not Found\" on the root route when\nthere is no other route that matches and a is not provided.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Your fast track into the future of software development. Join the Arm\nDeveloper Program today.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDPK3KC67DT2QYF67IT27YCA7IK2JWFTBDKK7NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/errorComponentComponent\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe component is a component that renders an error message and optionally the\nerror's message.\n\nThe component accepts the following props:\n\n  * The error that was thrown by the component's children\n\n  * A function to programmatically reset the error state\n\n  * Returns a formatted error message with the error's message if it exists.\n  * The error message can be toggled by clicking the \"Show Error\" button.\n  * By default, the error message will be shown in development.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBDKK77HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/linkComponent\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe component is a component that can be used to create a link that can be used\nto navigate to a new location. This includes changes to the pathname, search\nparams, hash, and location state.\n\nThe component accepts the following props:\n\nAn anchor element that can be used to navigate to a new location.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Get free resources, expert support & access to community events. Join the Arm\nDeveloper Program.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDV5QKC67DT2QYF67IT27YCA7IK2JWFTBDP27YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/matchRouteComponent\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nA component version of the hook. It accepts the same options as the with\nadditional props to aid in conditional rendering.\n\nThe component accepts the same options as the hook with additional props to aid\nin conditional rendering.\n\n  *     * The component that will be rendered if the route is matched.\n  * ((params: TParams | false) => React.ReactNode)\n    * A function that will be called with the matched route's params or if no route was matched. This can be useful for components that need to always render, but render different props based on a route match or not.\n\nEither the prop or the return value of the function.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBDP53JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/navigateComponent\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe component is a component that can be used to navigate to a new location when\nrendered. This includes changes to the pathname, search params, hash, and\nlocation state. The underlying navigation will happen inside of a hook when\nsuccessfully rendered.\n\nThe component accepts the following props:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ High-Performance GPU-accelerated rendering to Visualize Trillion Points in\nReal-Time. Free Trial.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6SI5Z3JCA7ILK3LCE7I62JKC67DT2QYF67IT27YCA7IK2JWFTBDP53WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/outletComponent\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe component is a component that can be used to render the next child route of\na parent route.\n\nThe component does not accept any props.\n\n  * If matched, the child route match's ///.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBDP53UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useAwaitedHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe method is a hook that suspends until the provided promise is resolved or\nrejected.\n\nThe hook accepts a single argument, an object.\n\n  * The deferred promise to await.\n\n  * Throws an error if the promise is rejected.\n  * Suspends (throws a promise) if the promise is pending.\n  * Returns the resolved value of a deferred promise if the promise is resolved.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Legacy vendor lock-in, out. A truly cloud-native APM, in.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEKJKC67DT2QYF67IT27YCA7IK2JWFTBDP5QEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useCanGoBack\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe hook returns a boolean representing if the router history can safely go back\nwithout exiting the application.\n\n> ‚ö†Ô∏è The following new API is currently .\n  * If the router history is not at index , .\n  * If the router history is at index , .\n\nThe router history index is reset after a navigation with set as . This causes\nthe router history to consider the new location as the initial one and will\ncause to return .\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBDP5QIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useChildMatchesHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe hook returns all of the child objects from the closest match down to the\nleaf-most match. **It does not include the current match, which can be obtained\nusing the hook.**\n\nIf the router has pending matches and they are showing their pending component\nfallbacks, will used instead of .\n\nThe hook accepts a single argument, an object.\n\n  * If supplied, this function will be called with the route matches and the return value will be returned from . This value will also be used to determine if the hook should re-render its parent component using shallow equality checks.\n\n  * Configures whether structural sharing is enabled for the value returned by .\n  * See the for more information.\n\n  * If a function is provided, the return value of the function.\n  * If no function is provided, an array of objects.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBDP5QUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useLinkPropsHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe hook that takes an object as its argument and returns a props object. These\nprops can then be safely applied to an anchor element to create a link that can\nbe used to navigate to the new location. This includes changes to the pathname,\nsearch params, hash, and location state.\n\n  * The options are used to build a object.\n  * It also extends the type, so that any additional props that are passed to the hook will be merged with the object.\n\n  * A object that can be applied to an anchor element to create a link that can be used to navigate to the new location\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBDKK3EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useLoaderDataHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe hook returns the loader data from the closest in the component tree.\n\n  * The route id of the closest parent match\n  * Optional, but recommended for full type safety.\n  * If is , TypeScript will warn for this option if it is not provided.\n  * If is , TypeScript will provided loosened types for the returned loader data.\n\n  * If , the option will be ignored and types will be loosened to to reflect the shared types of all possible loader data.\n\n  * If supplied, this function will be called with the loader data and the return value will be returned from . This value will also be used to determine if the hook should re-render its parent component using shallow equality checks.\n\n  * Configures whether structural sharing is enabled for the value returned by .\n  * See the for more information.\n\n  * If a function is provided, the return value of the function.\n  * If no function is provided, the loader data or a loosened version of the loader data if is .\n\n```\n\n //   ^? { postId: string, body: string, ... }\n\n```\n\n```\n\n //   ^? { postId: string, body: string, ... }\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCKSDK2QKC67DT2QYF67IT27YCA7IK2JWFTBDKK3IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useLoaderDepsHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe hook is a hook that returns an object with the dependencies that are used to\ntrigger the for a given route.\n\n  * The RouteID or path to get the loader dependencies from.\n\n  * If supplied, this function will be called with the loader dependencies object and the return value will be returned from .\n\n  * Configures whether structural sharing is enabled for the value returned by .\n  * See the for more information.\n\n  * An object of the loader dependencies or if a function is provided.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBDKK3NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useLocationHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe method is a hook that returns the current object. This hook is useful for\nwhen you want to perform some side effect whenever the current location changes.\n\n  * If supplied, this function will be called with the object and the return value will be returned from .\n\n  * The current object or if a function is provided.\n\n```\n\n```\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Simplify infrastructure with MongoDB Atlas, the leading developer data\nplatform.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKBDCZ3JCA7ILK3ICWAI42QKC67DT2QYF67IT27YCA7IK2JWFTBDP23MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useMatchHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe hook returns a in the component tree. The raw route match contains all of\nthe information about a route match in the router and also powers many other\nhooks under the hood like , , , and .\n\nThe hook accepts a single argument, an object.\n\n  * The route id of a match\n  * Optional, but recommended for full type safety.\n  * If is , is required and TypeScript will warn for this option if it is not provided.\n  * If is , must not be set and TypeScript will provided loosened types for the returned .\n\n  * If , the must not be set and types will be loosened to to reflect the shared types of all matches.\n\n  * If supplied, this function will be called with the route match and the return value will be returned from . This value will also be used to determine if the hook should re-render its parent component using shallow equality checks.\n\n  * Configures whether structural sharing is enabled for the value returned by .\n  * See the for more information.\n\n  * If , will not throw an invariant exception in case a match was not found in the currently rendered matches; in this case, it will return .\n\n  * If a function is provided, the return value of the function.\n  * If no function is provided, the object or a loosened version of the object if is .\n\n```\n\n //   ^? strict match for RouteMatch\n\n```\n\n```\n\n //   ^? strict match for RouteMatch\n\n```\n\n### [Accessing the root route's\nmatch](https://tanstack.com/router/latest/docs/framework/react/api/router/<#accessing-\nthe-root-routes-match>)\n\n```\n\n// <<<< use this token!\n\n //   ^? strict match for RouteMatch\n\n```\n\n```\n\n // <<<< use this token!\n\n //   ^? strict match for RouteMatch\n\n```\n\n### [Checking if a specific route is currently\nrendered](https://tanstack.com/router/latest/docs/framework/react/api/router/<#checking-\nif-a-specific-route-is-currently-rendered>)\n\n```\n\n //   ^? RouteMatch | undefined\n\n```\n\n```\n\n //   ^? RouteMatch | undefined\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBDP237HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useMatchRouteHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe hook is a hook that returns a function that can be used to match a route\nagainst either the current or pending location.\n\n  * A function that can be used to match a route against either the current or pending location.\n\nThe function is a function that can be used to match a route against either the\ncurrent or pending location.\n\nThe function accepts a single argument, an object.\n\n  * The matched route's params or if no route was matched\n\n```\n\n //  ^ { postId: '123' }\n\n //  ^ { postId: '123' }\n\n //  ^ { postId: '123', fooId: '456' }\n\n //  ^ { postId: '123', fooId: '456' }\n\n //  ^ { postId: '123', fooId: '456' }\n\n //  ^ { postId: '123', fooId: '456' }\n\n```\n\n```\n\n //  ^ { postId: '123' }\n\n //  ^ { postId: '123' }\n\n //  ^ { postId: '123', fooId: '456' }\n\n //  ^ { postId: '123', fooId: '456' }\n\n //  ^ { postId: '123', fooId: '456' }\n\n //  ^ { postId: '123', fooId: '456' }\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBDP2QIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useMatchesHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe hook returns all of the objects from the router **regardless of its callers\nposition in the React component tree**.\n\nIf you only want the parent or child matches, then you can use the or the based\non the selection you need.\n\nThe hook accepts a single argument, an object.\n\n  * If supplied, this function will be called with the route matches and the return value will be returned from . This value will also be used to determine if the hook should re-render its parent component using shallow equality checks.\n\n  * Configures whether structural sharing is enabled for the value returned by .\n  * See the for more information.\n\n  * If a function is provided, the return value of the function.\n  * If no function is provided, an array of objects.\n\n```\n\n //   ^? [RouteMatch, RouteMatch, ...]\n\n```\n\n```\n\n //   ^? [RouteMatch, RouteMatch, ...]\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBDP2QUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useNavigateHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe hook is a hook that returns a function that can be used to navigate to a new\nlocation. This includes changes to the pathname, search params, hash, and\nlocation state.\n\nThe hook accepts a single argument, an object.\n\n  * Description: The location to navigate from. This is useful when you want to navigate to a new location from a specific location, rather than the current location.\n\n  * A function that can be used to navigate to a new location.\n\nThe function is a function that can be used to navigate to a new location.\n\nThe function accepts a single argument, an object.\n\n  * A that resolves when the navigation is complete\n\n```\n\n```\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKKQKC67DT2QYF67IT27YCA7IK2JWFTBDP2JEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useParentMatchesHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe hook returns all of the parent objects from the root down to the immediate\nparent of the current match in context. **It does not include the current match,\nwhich can be obtained using the hook.**\n\nIf the router has pending matches and they are showing their pending component\nfallbacks, will used instead of .\n\n  * If supplied, this function will be called with the route matches and the return value will be returned from . This value will also be used to determine if the hook should re-render its parent component using shallow equality checks.\n\n  * Configures whether structural sharing is enabled for the value returned by .\n  * See the for more information.\n\n  * If a function is provided, the return value of the function.\n  * If no function is provided, an array of objects.\n\n```\n\n //  ^ [RouteMatch, RouteMatch, ...]\n\n```\n\n```\n\n //  ^ [RouteMatch, RouteMatch, ...]\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBDP2JWHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useParamsHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe method returns all of the path parameters that were parsed for the closest\nmatch and all of its parent matches.\n\n  * If , the option will be ignored and types will be loosened to to reflect the shared types of all params.\n\n  * If , will not throw an invariant exception in case a match was not found in the currently rendered matches; in this case, it will return .\n\n  * If supplied, this function will be called with the params object and the return value will be returned from . This value will also be used to determine if the hook should re-render its parent component using shallow equality checks.\n\n  * Configures whether structural sharing is enabled for the value returned by .\n  * See the for more information.\n\n  * An object of of the match's and parent match path params or if a function is provided.\n\n```\n\n```\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBDP2JYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useRouteContextHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe method is a hook that returns the current context for the current route.\nThis hook is useful for accessing the current route context in a component.\n\n  * The RouteID to match the route context from.\n\n  * If supplied, this function will be called with the route context object and the return value will be returned from .\n\n  * The current context for the current route or if a function is provided.\n\n```\n\n```\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBDP27JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useRouterHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe method is a hook that returns the current instance of from context. This\nhook is useful for accessing the router instance in a component.\n\n> ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è **is always up to date, but NOT REACTIVE. If you use in a component,\n> the component will not re-render when the router state changes. To get a\n> reactive version of the router state, use the hook.**\n```\n\n```\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Legacy vendor lock-in, out. A truly cloud-native APM, in.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEKJKC67DT2QYF67IT27YCA7IK2JWFTBDP27WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useRouterStateHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe method is a hook that returns the current internal state of the router. This\nhook is useful for accessing the current state of the router in a component.\n\nIf you want to access the current location or the current matches, you should\ntry out the and hooks first. These hooks are designed to be more ergonomic and\neasier to use than accessing the router state directly.\n\n  * If supplied, this function will be called with the object and the return value will be returned from .\n\n  * Configures whether structural sharing is enabled for the value returned by .\n  * See the for more information.\n\n  * The current object or if a function is provided.\n\n```\n\n```\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBDPKQIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/useSearchHook\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe method is a hook that returns the current search query parameters as an\nobject for the current location. This hook is useful for accessing the current\nsearch string and query parameters in a component.\n\n  * The RouteID to match the search query parameters from.\n\n  * If , will not throw an invariant exception in case a match was not found in the currently rendered matches; in this case, it will return .\n\n  * If supplied, this function will be called with the search object and the return value will be returned from .\n\n  * Configures whether structural sharing is enabled for the value returned by .\n  * See the for more information.\n\n  * If , the option will be ignored and types will be loosened to to reflect the shared types of all search query parameters.\n\n  * If is provided, an object of the search query parameters for the current location or if a function is provided.\n  * If is , an object of the search query parameters for the current location or if a function is provided.\n\n```\n\n```\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Instantly monitor any environment with our proprietary eBPF sensor\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEK3KC67DT2QYF67IT27YCA7IK2JWFTBDPKQNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/ActiveLinkOptionsType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type extends the type and contains additional options that can be used to\ndescribe how a link should be styled when it is active.\n\nThe object accepts/contains the following properties:\n\n  * The props that will be applied to the anchor element when the link is active\n\n  * The props that will be applied to the anchor element when the link is inactive\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKKQKC67DT2QYF67IT27YCA7IK2JWFTBDPKJEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/AsyncRouteComponentType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type is used to describe a code-split route component that can be preloaded\nusing a method.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Get free resources, expert support & access to community events. Join the Arm\nDeveloper Program.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDV5QKC67DT2QYF67IT27YCA7IK2JWFTBDPKJIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/historyStateInterface\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe interface is an interface exported by the package that describes the shape\nof the state object that can be used in conjunction with the package and the\nAPI.\n\nYou can extend this interface to add additional properties to the state object\nacross your application.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBDPKJNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/LinkOptionsType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type extends the type and contains additional options that can be used by\nTanStack Router when handling actual anchor element attributes.\n\nThe object accepts/contains the following properties:\n\n  * The standard anchor tag target attribute\n\n  * The options that will be used to determine if the link is active\n\n  * Type: false | 'intent' | 'viewport' | 'render'\n  * If set, the link's preloading strategy will be set to this value.\n  * See the for more information.\n\n  * Delay intent preloading by this many milliseconds. If the intent exits before this delay, the preload will be cancelled.\n\n  * If true, will render the link without the href attribute\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBDPKJYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/LinkPropsType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type extends the and types and contains additional props specific to the\ncomponent.\n\n  * All of the props from \n  * All of the props from \n\n  * Type: React.ReactNode | ((state: { isActive: boolean }) => React.ReactNode)\n  * The children that will be rendered inside of the anchor element. If a function is provided, it will be called with an object that contains the boolean value that can be used to determine if the link is active.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBDPK7LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/MatchRouteOptionsType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type is used to describe the options that can be used when matching a route.\n\nThe type has the following properties:\n\n  * If , will match against pending location instead of the current location\n\n  * If , will match against the current location with case sensitivity\n\n  * If , will match against the current location's search params using a deep inclusive check. e.g. will match for a current location of { a: 1, b: 2 }\n\n  * If , will match against the current location using a fuzzy match. e.g. will match for a current location of \n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBDPK7WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/NavigateOptionsType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type is used to describe the options that can be used when describing a\nnavigation action in TanStack Router.\n\nThe object accepts the following properties:\n\n  * If , the location will be committed to the browser history using instead of .\n\n  * Defaults to so that the scroll position will be reset to 0,0 after the location is committed to the browser history.\n  * If , the scroll position will not be reset to 0,0 after the location is committed to history.\n\n  * If , navigation will ignore any blockers that might prevent it.\n\n  * If , navigation to a route inside of router will trigger a full page load instead of the traditional SPA navigation.\n\n  * This can be used instead of to navigate to a fully built href, e.g. pointing to an external target.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBDPK7YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/NotFoundErrorType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type is used to represent a not-found error in TanStack Router.\n\nThe object accepts/contains the following properties:\n\n  * Custom data that is passed into to when the not-found error is handled\n\n  * If true, the not-found error will be handled by the of the root route instead of bubbling up from the route that threw it. This has the same behavior as importing the root route and calling .\n\n  * The ID of the route that will attempt to handle the not-found error. If the route does not have a , the error will bubble up to the parent route (and be handled by the root route if necessary). By default, TanStack Router will attempt to handle the not-found error with the route that threw it.\n\n  * If provided, will throw the not-found object instead of returning it. This can be useful in places where in a function might cause it to have a return type of . In that case, you can use to throw the not-found object instead of returning it.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBDP23JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/ParsedHistoryStateType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type represents a parsed state object. Additionally to , it contains the\nindex and the unique key of the route.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBDV53EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/ParsedLocationType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type represents a parsed location in TanStack Router. It contains a lot of\nuseful information about the current location, including the pathname, search\nparams, hash, location state, and route masking information.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBDV53IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RedirectType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type is used to represent a redirect action in TanStack Router.\n\nThe object accepts/contains the following properties:\n\n  * The HTTP status code to use when redirecting\n\n  * If provided, will throw the redirect object instead of returning it. This can be useful in places where in a function might cause it to have a return type of . In that case, you can use to throw the redirect object instead of returning it.\n\n  * The HTTP headers to use when redirecting.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBDV53NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RouteType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type is used to describe a route instance.\n\nAn instance of the has the following properties and methods:\n\n  * Adds child routes to the route instance and returns the route instance (but with updated types to reflect the new children).\n\n  * Updates the route instance with new options and returns the route instance (but with updated types to reflect the new options).\n  * In some circumstances, it can be useful to update a route instance's options after it has been created to avoid circular type references.\n\n  * Type: (lazyImporter: () => Promise<Partial<UpdatableRouteOptions>>) => this\n  * Updates the route instance with a new lazy importer which will be resolved lazily when loading the route. This can be useful for code splitting.\n\n  * All of the methods from are available.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBDV537HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RouteApiType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe describes an instance that provides type-safe versions of common hooks like\n, , , , , and that are pre-bound to a specific route ID and corresponding\nregistered route types.\n\nThe has the following properties and methods:\n\n  * A type-safe version of the hook that is pre-bound to the route ID that the instance was created with.\n  * Options\n    *       * If supplied, this function will be called with the route match and the return value will be returned from . This value will also be used to determine if the hook should re-render its parent component using shallow equality checks.\n    *       * Configures whether structural sharing is enabled for the value returned by .\n      * See the for more information.\n  * Returns\n    * If a function is provided, the return value of the function.\n    * If no function is provided, the object or a loosened version of the object if is .\n\n  * A type-safe version of the hook that is pre-bound to the route ID that the instance was created with.\n  * Options\n    *       * If supplied, this function will be called with the route match and the return value will be returned from . This value will also be used to determine if the hook should re-render its parent component using shallow equality checks.\n  * Returns\n    * If a function is provided, the return value of the function.\n    * If no function is provided, the object or a loosened version of the object if is .\n\n  * A type-safe version of the hook that is pre-bound to the route ID that the instance was created with.\n  * Options\n    *       * If supplied, this function will be called with the route match and the return value will be returned from . This value will also be used to determine if the hook should re-render its parent component using shallow equality checks.\n    *       * Configures whether structural sharing is enabled for the value returned by .\n      * See the for more information.\n  * Returns\n    * If a function is provided, the return value of the function.\n    * If no function is provided, the object or a loosened version of the object if is .\n\n  * A type-safe version of the hook that is pre-bound to the route ID that the instance was created with.\n  * Options\n    *       * If supplied, this function will be called with the route match and the return value will be returned from . This value will also be used to determine if the hook should re-render its parent component using shallow equality checks.\n    *       * Configures whether structural sharing is enabled for the value returned by .\n      * See the for more information.\n  * Returns\n    * If a function is provided, the return value of the function.\n    * If no function is provided, the object or a loosened version of the object if is .\n\n  * A type-safe version of the hook that is pre-bound to the route ID that the instance was created with.\n  * Options\n    *       * If supplied, this function will be called with the route match and the return value will be returned from . This value will also be used to determine if the hook should re-render its parent component using shallow equality checks.\n    *       * Configures whether structural sharing is enabled for the value returned by .\n      * See the for more information.\n  * Returns\n    * If a function is provided, the return value of the function.\n    * If no function is provided, the object or a loosened version of the object if is .\n\n  * A type-safe version of the hook that is pre-bound to the route ID that the instance was created with.\n  * Options\n    *       * If supplied, this function will be called with the route match and the return value will be returned from .\n    *       * Configures whether structural sharing is enabled for the value returned by .\n      * See the for more information.\n  * Returns\n    * If a function is provided, the return value of the function.\n    * If no function is provided, the object.\n\n  * A type-safe version of that is pre-bound to the route ID that the instance was created with.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Ready to discover the latest startup AI innovations? Join us April 9-11 at\nGoogle Cloud Next.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6ADTZ3JCA7ILK3LCE7IK23KC67DT2QYF67IT27YCA7IK2JWFTBDV5QLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RouteMaskType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type extends the type and has other the necessary properties to create a\nroute mask.\n\nThe type accepts an object with the following properties:\n\n  * The options that will be used to configure the route mask\n\n  * The route tree that this route mask will support\n\n  * If , the route mask will be removed when the page is reloaded\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBDV5QUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RouteMatchType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type represents a route match in TanStack Router.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCE7I52JKC67DT2QYF67IT27YCA7IK2JWFTBDPK3EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RouteOptionsType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type is used to describe the options that can be used when creating a route.\n\nThe type accepts an object with the following properties:\n\n  * A function that returns the parent route of the route being created. This is required to provide full type safety to child route configurations and to ensure that the route tree is built correctly.\n\n  * Required, unless an is provided to configure the route as a layout route\n  * The path segment that will be used to match the route.\n\n  * Optional, but required if a is not provided\n  * The unique identifier for the route if it is to be configured as a layout route. If provided, the, the route will not match against the location pathname and its routes will be flattened into its parent route for matching.\n\n  * Optional - Defaults to \n  * The content to be rendered when the route is matched.\n\n  * The content to be rendered when the route encounters an error.\n\n  * The content to be rendered if and when the route is pending and has reached its pendingMs threshold.\n\n  * The content to be rendered when the route is not found.\n\n  * A function that will be called when this route is matched and passed the raw search params from the current location and return valid parsed search params. If this function throws, the route will be put into an error state and the error will be thrown during render. If this function does not throw, its return value will be used as the route's search params and the return type will be inferred into the rest of the router.\n  * Optionally, the parameter type can be tagged with the type like this: (searchParams: TSearchSchemaInput & SearchSchemaInput) => TSearchSchema. If this tag is present, will be used to type the property of and . The difference between and can be useful, for example, to express optional search parameters.\n\n  * Type: (({search: TSearchSchema, next: (newSearch: TSearchSchema) => TSearchSchema}) => TSearchSchema)[]\n  * Search middlewares are functions that transform the search parameters when generating new links for a route or its descendants.\n  * A search middleware is passed in the current search (if it is the first middleware to run) or is invoked by the previous middleware calling .\n\n  * Type: (rawParams: Record<string, string>) => TParams\n  * A function that will be called when this route is matched and passed the raw params from the current location and return valid parsed params. If this function throws, the route will be put into an error state and the error will be thrown during render. If this function does not throw, its return value will be used as the route's params and the return type will be inferred into the rest of the router.\n\n  * Type: (params: TParams) => Record<string, string>\n  * A function that will be called when this routes parsed params are being used to build a location. This function should return a valid object of mapping.\n\n  * Type: (rawParams: Record<string, string>) => TParams\n  * A function that will be called when this route is matched and passed the raw params from the current location and return valid parsed params. If this function throws, the route will be put into an error state and the error will be thrown during render. If this function does not throw, its return value will be used as the route's params and the return type will be inferred into the rest of the router.\n\n  * Type: (params: TParams) => Record<string, string>\n  * A function that will be called when this routes parsed params are being used to build a location. This function should return a valid object of mapping.\n\n  * This async function is called before a route is loaded. If an error is thrown here, the route's loader will not be called and the route will not render. If thrown during a navigation, the navigation will be cancelled and the error will be passed to the function. If thrown during a preload event, the error will be logged to the console and the preload will fail.\n  * If this function returns a promise, the route will be put into a pending state and cause rendering to suspend until the promise resolves. If this routes pendingMs threshold is reached, the will be shown until it resolved. If the promise rejects, the route will be put into an error state and the error will be thrown during render.\n  * If this function returns a object, that object will be merged into the route's context and be made available in the and other related route components/methods.\n  * It's common to use this function to check if a user is authenticated and redirect them to a login page if they are not. To do this, you can either return or throw a object from this function.\n\n> üöß has been deprecated and will be removed in the next major release. Use throw\n> redirect({ to: '/somewhere' }) instead. Read more about the function .\n  * This async function is called when a route is matched and passed the route's match object. If an error is thrown here, the route will be put into an error state and the error will be thrown during render. If thrown during a navigation, the navigation will be cancelled and the error will be passed to the function. If thrown during a preload event, the error will be logged to the console and the preload will fail.\n  * If this function returns a promise, the route will be put into a pending state and cause rendering to suspend until the promise resolves. If this routes pendingMs threshold is reached, the will be shown until it resolved. If the promise rejects, the route will be put into an error state and the error will be thrown during render.\n  * If this function returns a object, that object will be stored on the route match until the route match is no longer active. It can be accessed using the hook in any component that is a child of the route match before another is rendered.\n\n> üöß has been deprecated and will be removed in the next major release. Use throw\n> redirect({ to: '/somewhere' }) instead. Read more about the function .\n  * A function that will be called before this route is matched to provide additional unique identification to the route match and serve as a dependency tracker for when the match should be reloaded. It should return any serializable value that can uniquely identify the route match from navigation to navigation.\n  * By default, path params are already used to uniquely identify a route match, so it's unnecessary to return these here.\n  * If your route match relies on search params for unique identification, it's required that you return them here so they can be made available in the 's argument.\n\n  * Defaults to , which defaults to \n  * The amount of time in milliseconds that a route match's loader data will be considered fresh. If a route match is matched again within this time frame, its loader data will not be reloaded.\n\n  * Defaults to , which defaults to ms (30 seconds)\n  * The amount of time in milliseconds that a route match's loader data will be considered fresh when preloading. If a route match is preloaded again within this time frame, its loader data will not be reloaded. If a route match is loaded (for navigation) within this time frame, the normal is used instead.\n\n  * Defaults to , which defaults to 30 minutes.\n  * The amount of time in milliseconds that a route match's loader data will be kept in memory after a preload or it is no longer in use.\n\n  * Type: boolean | ((args: LoaderArgs) => boolean)\n  * If or returns , the route match's loader data will not be reloaded on subsequent matches.\n  * If or returns , the route match's loader data will be reloaded on subsequent matches.\n  * If or returns , the route match's loader data will adhere to the default stale-while-revalidate behavior.\n\n  * If , this route will be matched as case-sensitive\n\n  * If , this route will be forcefully wrapped in a suspense boundary, regardless if a reason is found to do so from inspecting its provided components.\n\n  * Defaults to , which defaults to \n  * The threshold in milliseconds that a route must be pending before its is shown.\n\n  * The minimum amount of time in milliseconds that the pending component will be shown for if it is shown. This is useful to prevent the pending component from flashing on the screen for a split second.\n\n  * The maximum amount of time in milliseconds that a route's preloaded route data will be cached for. If a route is not matched within this time frame, its loader data will be discarded.\n\n  * An array of functions that will be called when generating any new links to this route or its grandchildren.\n  * Each function will be called with the current search params and should return a new search params object that will be used to generate the link.\n  * It has a prefix because it is called before the user-provided function that is passed to / etc has a chance to modify the search params.\n\n  * An array of functions that will be called when generating any new links to this route or its grandchildren.\n  * Each function will be called with the current search params and should return a new search params object that will be used to generate the link.\n  * It has a prefix because it is called after the user-provided function that is passed to / etc has modified the search params.\n\n  * A function that will be called when an error is thrown during a navigation or preload event.\n  * If this function throws a , then the router will process and apply the redirect immediately.\n\n  * A function that will be called when a route is matched and loaded after not being matched in the previous location.\n\n  * A function that will be called when a route is matched and loaded after being matched in the previous location.\n\n  * A function that will be called when a route is no longer matched after being matched in the previous location.\n\n  * Type: (error: Error, errorInfo: ErrorInfo) => void\n  * A function that will be called when errors are caught when the route encounters an error.\n\n  * A function that will be called to determine whether a route component shall be remounted after navigation. If this function returns a different value than previously, it will remount.\n  * The return value needs to be JSON serializable.\n  * By default, a route component will not be remounted if it stays active after a navigation\n\nExample:If you want to configure to remount a route component upon change, use:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBDPK3IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RouterType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type is used to describe a router instance.\n\nAn instance of the has the following properties and methods:\n\n  * Updates the router instance with new options.\n\n  * The current state of the router.\n\n> ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è **is always up to date, but NOT REACTIVE. If you use in a component,\n> the component will not re-render when the router state changes. To get a\n> reactive version of the router state, use the hook.**\n  * Type: (eventType: TType, fn: ListenerFn<RouterEvents[TType]>) => (event: RouterEvent) => void\n  * Returns a function that can be used to unsubscribe from the event.\n  * The callback provided to the returned function will be called with the event that was emitted.\n\n  * Type: (pathname: string, locationSearch: Record<string, any>, opts?: { throwOnError?: boolean; }) => RouteMatch[]\n  * Matches a pathname and search params against the router's route tree and returns an array of route matches.\n  * If is , any errors that occur during the matching process will be thrown (in addition to being returned in the route match's property).\n\n  * Cancels a route match that is currently pending by calling .\n\n  * Cancels all route matches that are currently pending by calling on each one.\n\nBuilds a new parsed location object that can be used later to navigate to a new\nlocation.\n\n  * Properties\n    *       * The path to navigate from. If not provided, the current path will be used.\n    *       * Type: string | number | null\n      * The path to navigate to. If , the current path will be used.\n    *       * If , the current params will be used. If a function is provided, it will be called with the current params and the return value will be used.\n    *       * If , the current search params will be used. If a function is provided, it will be called with the current search params and the return value will be used.\n    *       * If , the current hash will be used. If a function is provided, it will be called with the current hash and the return value will be used.\n    *       * If , the current state will be used. If a function is provided, it will be called with the current state and the return value will be used.\n    *       * Contains all of the same BuildNextOptions, with the addition of .\n      *         * If , the route mask will be removed when the page is reloaded. This can be overridden on a per-navigation basis by setting the option in the options.\n\nCommits a new location object to the browser history.\n\n  * Properties\n    *       * The location to commit to the browser history.\n    *       * If , the location will be committed to the browser history using instead of .\n    *       * Defaults to so that the scroll position will be reset to 0,0 after the location is committed to the browser history.\n      * If , the scroll position will not be reset to 0,0 after the location is committed to history.\n    *       * Defaults to so the element with an id matching the hash will be scrolled into view after the location is committed to history.\n      * If , the element with an id matching the hash will not be scrolled into view after the location is committed to history.\n      * If an object is provided, it will be passed to the method as options.\n    *       * If , navigation will ignore any blockers that might prevent it.\n\nNavigates to a new location.\n\nInvalidates route matches by forcing their and functions to be called again.\n\n  * Type: (opts?: {filter?: (d: MakeRouteMatchUnion<TRouter>) => boolean, sync?: boolean}) => Promise<void>\n  * This is useful any time your loader data might be out of date or stale. For example, if you have a route that displays a list of posts, and you have a loader function that fetches the list of posts from an API, you might want to invalidate the route matches for that route any time a new post is created so that the list of posts is always up-to-date.\n  * if is not supplied, all matches will be invalidated\n  * if is supplied, only matches for which returns will be invalidated.\n  * if is true, the promise returned by this function will only resolve once all loaders have finished.\n  * You might also want to invalidate the Router if you imperatively the router's to trigger loaders again.\n\n  * Type: (opts?: {filter?: (d: MakeRouteMatchUnion<TRouter>) => boolean}) => void\n  * if is not supplied, all cached matches will be removed\n  * if is supplied, only matches for which returns will be removed.\n\nLoads all of the currently matched route matches and resolves when they are all\nloaded and ready to be rendered.\n\n> ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è **respects and will not forcefully reload a route match if it is still\n> fresh. If you need to forcefully reload a route match, use instead.**\n  * Type: (opts?: {sync?: boolean}) => Promise<void>\n  * if is true, the promise returned by this function will only resolve once all loaders have finished.\n  * The most common use case for this method is to call it when doing SSR to ensure that all of the critical data for the current route is loaded before attempting to stream or render the application to the client.\n\nPreloads all of the matches that match the provided .\n\n> ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è **Preloaded route matches are not stored long-term in the router state.\n> They are only stored until the next attempted navigation action.**\n  * Properties\n    *       * Optional, defaults to the current location.\n      * The options that will be used to determine which route matches to preload.\n  * Returns\n    * A promise that resolves with an array of all of the route matches that were preloaded.\n\nLoads the JS chunk of the route.\n\nMatches a pathname and search params against the router's route tree and returns\na route match's params or false if no match was found.\n\n  * Type: (dest: ToOptions, matchOpts?: MatchRouteOptions) => RouteMatch | false\n  * Properties\n    *       * The destination to match against.\n    *       * Options that will be used to match the destination.\n  * Returns\n    * A route match object if a match was found.\n    * if no match was found.\n\nDehydrates the router's critical state into a serializable object that can be\nsent to the client in an initial request.\n\n  * Returns\n    * A serializable object that contains the router's critical state.\n\nHydrates the router's critical state from a serializable object that was sent\nfrom the server in an initial request.\n\n  * Properties\n    *       * The dehydrated router state that was sent from the server.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBDPK37HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RouterEventsType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type contains all of the events that the router can emit. Each top-level key\nof this type, represents the name of an event that the router can emit. The\nvalues of the keys are the event payloads.\n\nOnce an event is emitted, the following properties will be present on the event\npayload.\n\n  * Type: onBeforeNavigate | onBeforeLoad | onLoad | onBeforeRouteMount | onResolved\n  * The type of the event\n  * This is useful for discriminating between events in a listener function.\n\n  * The location that the router is transitioning from.\n\n  * The location that the router is transitioning to.\n\n  * if the path has changed between the and .\n\n  * if the href has changed between the and .\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIV27MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RouterStateType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type represents shape of the internal state of the router. The Router's\ninternal state is useful, if you need to access certain internals of the router,\nsuch as any pending matches, is the router in its loading state, etc.\n\nThe type contains all of the properties that are available on the router state.\n\n  * The current status of the router. If the router is pending, it means that it is currently loading a route or the router is still transitioning to the new route.\n\n  * if the router is currently loading a route or waiting for a route to finish loading.\n\n  * if the router is currently transitioning to a new route.\n\n  * An array of all of the route matches that have been resolved and are currently active.\n\n  * An array of all of the route matches that are currently pending.\n\n  * The latest location that the router has parsed from the browser history. This location may not be resolved and loaded yet.\n\n  * The location that the router has resolved and loaded.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIV277HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/ToMaskOptionsType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type extends the type and describes additional options available when using\nroute masks.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBIV53LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/ToOptionsType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type contains several properties that can be used to describe a router\ndestination.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBIV53MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/UseMatchRouteOptionsType\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe type extends the type and describes additional options available when using\nthe hook.\n\n```\n\nexport type UseMatchRouteOptions = ToOptions & MatchRouteOptions\n\n```\n\n```\n\nexport type UseMatchRouteOptions = ToOptions & MatchRouteOptions\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/FileRouteClass\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThis class has been deprecated and will be removed in the next major version of\nTanStack Router. Please use the function instead.\n\nThe class is a factory that can be used to create a file-based route instance.\nThis route instance can then be used to automatically generate a route tree with\nthe and commands.\n\nThe constructor accepts a single argument: the of the file that the route will\nbe generated for.\n\n  * Required, but **automatically inserted and updated by the and commands**.\n  * The full path of the file that the route will be generated from.\n\n  * An instance of the class that can be used to create a route.\n\nThe class implements the following method(s):\n\nThe method is a method that can be used to configure the file route instance. It\naccepts a single argument: the that will be used to configure the file route\ninstance.\n\n  * Type: Omit<RouteOptions, 'getParentRoute' | 'path' | 'id'>\n  * The same options that are available to the class, but with the , , and options omitted since they are unnecessary for file-based routing.\n\nA instance that can be used to configure the route to be inserted into the\nroute-tree.\n\n> ‚ö†Ô∏è Note: For and to work properly, the file route instance must be exported\n> from the file using the identifier.\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the only place where enterprises build mission‚Äëcritical software.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKK3KC67DT2QYF67IT27YCA7IK2JWFTBIV5QJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RouteClass\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThis class has been deprecated and will be removed in the next major version of\nTanStack Router. Please use the function instead.\n\nThe class implements the class and can be used to create route instances. A\nroute instance can then be used to create a route tree.\n\nThe constructor accepts an object as its only argument.\n\n  * The options that will be used to configure the route instance\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBIV5QWHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RouterClass\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThis class has been deprecated and will be removed in the next major version of\nTanStack Router. Please use the function instead.\n\nThe class is used to instantiate a new router instance.\n\nThe constructor accepts a single argument: the that will be used to configure\nthe router instance.\n\n  * The options that will be used to configure the router instance.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Legacy vendor lock-in, out. A truly cloud-native APM, in.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEKJKC67DT2QYF67IT27YCA7IK2JWFTBIV5QYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RouteApiClass\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThis class has been deprecated and will be removed in the next major version of\nTanStack Router. Please use the function instead.\n\nThe class provides type-safe version of common hooks like , , , , , and that are\npre-bound to a specific route ID and corresponding registered route types.\n\nThe constructor accepts a single argument: the that will be used to configure\nthe instance.\n\n  * The route ID to which the instance will be bound\n\n  * An instance of the that is pre-bound to the route ID that it was called with.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Google Cloud Next is coming to Las Vegas April 9-11. Register now to fuel your\nstartup‚Äôs growth.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6ADTZ3JCA7ILK3LCE7IKK7KC67DT2QYF67IT27YCA7IK2JWFTBIPK3JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/RootRouteClass\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThis class has been deprecated and will be removed in the next major version of\nTanStack Router. Please use the function instead.\n\nThe class extends the class and can be used to create a root route instance. A\nroot route instance can then be used to create a route tree.\n\nThe constructor accepts an object as its only argument.\n\nThe options that will be used to configure the root route instance.\n\n```\n\n { RootRoute, createRouter, Outlet }\n\n // ... root route options\n\n```\n\n```\n\n // ... root route options\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBIV23EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/NotFoundRouteClass\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThis class has been deprecated and will be removed in the next major version of\nTanStack Router. Please use the route option that is present during route\nconfiguration. See the for more information.\n\nThe class extends the class and can be used to create a not found route\ninstance. A not found route instance can be passed to the option to configure a\ndefault not-found/404 route for every branch of the route tree.\n\nThe constructor accepts an object as its only argument.\n\n  * The options that will be used to configure the not found route instance.\n\n```\n\n```\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIV23WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/api/router/rootRouteWithContextFunction\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/api/router/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThis function is deprecated and will be removed in the next major version of\nTanStack Router. Please use the function instead.\n\nThe function is a helper function that can be used to create a root route\ninstance that requires a context type to be fulfilled when the router is\ncreated.\n\nThe function accepts a single generic argument:\n\n  * The context type that will be required to be fulfilled when the router is created\n\n  * A factory function that can be used to create a new instance.\n  * It accepts a single argument, the same as the function.\n\n```\n\n // ... root route options\n\n```\n\n```\n\n // ... root route options\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/router/latest/docs/framework/react/api/router/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBIV23UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/eslint/eslint-plugin-router\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nTanStack Router comes with its own ESLint plugin. This plugin is used to enforce\nbest practices and to help you avoid common mistakes.\n\nThe plugin is a separate package that you need to install:\n\nThe release of ESLint 9.0 introduced a new way to configure ESLint using a flat\nconfig format. This new format is more flexible and allows you to configure\nESLint in a more granular way than the legacy format. The TanStack Router ESLint\nPlugin supports this new format and provides a recommended config that you can\nuse to enable all of the recommended rules for the plugin .\n\nTo enable all of the recommended rules for our plugin, add the following config:\n\n```\n\n```\n\n```\n\n```\n\nAlternatively, you can load the plugin and configure only the rules you want to\nuse:\n\n```\n\n```\n\n```\n\n```\n\nPrior to the ESLint 9.0 release, the most common way of configuring EsLint was\nusing a file. The TanStack Router ESLint Plugin still supports this\nconfiguration method.\n\nTo enable all of the recommended rules for our plugin, add in extends:\n\nAlternatively, add to the plugins section, and configure the rules you want to\nuse:\n\nThe following rules are available in the TanStack Router ESLint Plugin:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/router/latest/docs/eslint/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBIV2QJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/eslint/create-route-property-order\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/eslint/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# Ensure correct order of inference sensitive properties for createRoute\nfunctions\n\nFor the following functions, the property order of the passed in object matters\ndue to type inference:\n\nThe correct property order is as follows\n\nAll other properties are insensitive to the order as they do not depend on type\ninference.\n\nExamples of code for this rule:\n\n```\n\n/* eslint \"@tanstack/router/create-route-property-order\": \"warn\" */\n\n```\n\n```\n\n/* eslint \"@tanstack/router/create-route-property-order\": \"warn\" */\n\n```\n\nExamples of code for this rule:\n\n```\n\n/* eslint \"@tanstack/router/create-route-property-order\": \"warn\" */\n\n```\n\n```\n\n/* eslint \"@tanstack/router/create-route-property-order\": \"warn\" */\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Build chat, video, moderation & feeds, faster. Start coding FREE. No CC\nrequired\n](https://tanstack.com/router/latest/docs/eslint/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKSIPZ3JCA7ILK3LCKAD4K7KC67DT2QYF67IT27YCA7IK2JWFTBIV2QMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/quickstart-file-based\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: Quickstart File Based\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Ready to discover the latest startup AI innovations? Join us April 9-11 at\nGoogle Cloud Next.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6ADTZ3JCA7ILK3LCE7IK23KC67DT2QYF67IT27YCA7IK2JWFTBIV2Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/quickstart\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBIV2JLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/basic-file-based\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: Basic File Based\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBIV2JMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/basic\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n[Basic + React Query (file-based)\n](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-\nreact-query-file-based>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Build chat, video, moderation & feeds, faster. Start coding FREE. No CC\nrequired\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKSIPZ3JCA7ILK3LCKAD4K7KC67DT2QYF67IT27YCA7IK2JWFTBIV2JYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/basic-react-query-file-based\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: Basic React Query File Based\n\n[Basic + React Query (code-based)\n](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-\nreact-query>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBIV27JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/basic-react-query\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: Basic React Query\n\n[Basic + React Query (file-\nbased)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-\nreact-query-file-based>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBIVKQEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/basic-ssr-file-based\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: Basic Ssr File Based\n\n[Basic + React Query (code-\nbased)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-\nreact-query>)\n\n[Basic + SSR Streaming (file-based)\n](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-\nssr-streaming-file-based>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Legacy vendor lock-in, out. A truly cloud-native APM, in.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEKJKC67DT2QYF67IT27YCA7IK2JWFTBIVKQIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: Basic Ssr Streaming File Based\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBIVKQNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/kitchen-sink\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n[Kitchen Sink + React Query (file-based)\n](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-\nsink-react-query-file-based>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Develop and launch modern apps with MongoDB Atlas, a resilient data platform.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKBDCZ3JCA7ILK3ICWAI423KC67DT2QYF67IT27YCA7IK2JWFTBIVKQ7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: Kitchen Sink React Query File Based\n\n[Kitchen Sink + React Query (code-based)\n](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-\nsink-react-query>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Google Cloud Next is coming to Las Vegas April 9-11. Register now to fuel your\nstartup‚Äôs growth.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6ADTZ3JCA7ILK3LCE7IKK7KC67DT2QYF67IT27YCA7IK2JWFTBIVKJJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/kitchen-sink-react-query\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: Kitchen Sink React Query\n\n[Kitchen Sink + React Query (file-\nbased)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-\nsink-react-query-file-based>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBIVKJWHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/location-masking\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n[Kitchen Sink + React Query (code-\nbased)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-\nsink-react-query>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Build chat, video, moderation & feeds, faster. Start coding FREE. No CC\nrequired\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKSIPZ3JCA7ILK3LCKAD4K7KC67DT2QYF67IT27YCA7IK2JWFTBIVKJYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/authenticated-routes\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBIVK7EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/scroll-restoration\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBIVK7IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/deferred-data\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Secure Homebrew and gain visibility into your software supply chain. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCKSDK23KC67DT2QYF67IT27YCA7IK2JWFTBIVK7NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/navigation-blocking\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ See what your team could do with The DevSecOps Platform. Take GitLab for a\nspin.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKK7KC67DT2QYF67IT27YCA7IK2JWFTBIVK77HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/with-trpc\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n[With tRPC + React Query\n](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-\ntrpc-react-query>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBIC27YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/with-trpc-react-query\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: With Trpc React Query\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Bryntum Gantt: Flexible and powerful JS Gantt charts for smarter project\nplanning.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEBDEZ3JCA7ILK3LCKYD6K7KC67DT2QYF67IT27YCA7IK2JWFTBIC53JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/router-monorepo-simple\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: Router Monorepo Simple\n\n[With tRPC + React\nQuery](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-\ntrpc-react-query>)\n\n[Monorepo basic (with lazy loading)\n](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-\nmonorepo-simple-lazy>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBIC53WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/router-monorepo-simple-lazy\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: Router Monorepo Simple Lazy\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBIC53UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/examples/router-monorepo-react-query\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n# React Example: Router Monorepo React Query\n\n[Monorepo basic (with lazy\nloading)](https://tanstack.com/router/latest/docs/framework/react/examples/</router/latest/docs/framework/react/examples/router-\nmonorepo-simple-lazy>)\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Secure Homebrew and gain visibility into your software supply chain. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/router/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCKSDK23KC67DT2QYF67IT27YCA7IK2JWFTBIC5QEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/overview\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n**TanStack Router is a router for building React applications**. Some of its\nfeatures include:\n\n  * Nested Routing and layout routes\n  * Built-in Route Loaders w/ SWR Caching\n  * Designed for client-side data caches (TanStack Query, SWR, etc.)\n  * Asynchronous route elements and error boundaries\n  * Typesafe JSON-first Search Params state management APIs\n  * Path and Search Parameter Schema Validation\n  * Custom Search Param parser/serializer support\n\nTo get started quickly, head to the next page. For a more lengthy explanation,\nbuckle up while I bring you up to speed!\n\n## [\"A Fork in the\nRoute\"](https://tanstack.com/router/latest/docs/framework/react/<#a-fork-in-the-\nroute>)\n\nUsing a router to build applications is widely regarded as a must-have and is\nusually one of the first choices you‚Äôll make in your tech stack.\n\n**So, why should you choose TanStack Router over another router?**\n\nTo answer this question, we need to look at the other options in the space.\nThere are many if you look hard enough, but in my experience, only a couple are\nworth exploring seriously:\n\n  * - Widely regarded as the de facto framework for starting a new React project, it‚Äôs laser focused on performance, workflow, and bleeding edge technology. Its APIs and abstractions are powerful, but can sometimes come across as non-standard. Its extremely fast growth and adoption in the industry has resulted in a featured packed experience, but not at the expense of feeling overwhelming and sometimes bloated.\n  * - A full-stack framework based on the historically successful React Router offers a similarly powerful developer and user experience, with APIs and vision based firmly on web standards like Request/Response and a focus on running anywhere JS can run. Many of its APIs and abstractions are wonderfully designed and were inspiration for more than a few TanStack Router APIs. That said, its rigid design, bolted-on type safety and sometimes strict over-adherence to platform APIs can leave some developers wanting more.\n\nBoth of these frameworks (and their routers) are great, and I can personally\nattest that both are very good solutions for building React applications. My\nexperience has also taught me that these solutions could also be much better,\nespecially around the actual routing APIs that are available to developers to\nmake their apps faster, easier, and more enjoyable to work with.\n\nIt's probably no surprise at this point that picking a router is so important\nthat it is often tied 1-to-1 with your choice of framework, since most\nframeworks rely on a specific router.\n\n**Does this mean that TanStack Router is a framework?**\n\nTanStack Router itself is not a \"framework\" in the traditional sense, since it\ndoesn't address a few other common full-stack concerns. However TanStack Router\nhas been designed to be upgradable to a full-stack framework when used in\nconjunction with other tools that address bundling, deployments, and server-\nside-specific functionality. This is why we are currently developing , a full-\nstack framework that is built on top of TanStack Router and tools like Nitro,\nand Vite.\n\nFor a deeper dive on the history of TanStack Router, feel free to read .\n\nTanStack Router delivers on the same fundamental expectations as other routers\nthat you‚Äôve come to expect:\n\n  * Nested routes, layout routes, grouped routes\n\nAnd it also delivers some new features that raise the bar:\n\n  * Built-in SWR Caching for loaders\n  * Designed for client-side data caches (TanStack Query, SWR, etc.)\n  * Typesafe JSON-first Search Params state management APIs\n  * Path and Search Parameter Schema Validation\n  * Custom Search Param parser/serializer support\n  * Mixed file-based and code-based routing\n\nLet‚Äôs dive into some of the more important ones in more detail!\n\nEverything these days is written ‚Äúin Typescript‚Äù or at the very least offers\ntype definitions that are veneered over runtime functionality, but too few\npackages in the ecosystem actually design their APIs with TypeScript in mind. So\nwhile I‚Äôm pleased that your router is auto-completing your option fields and\ncatching a few property/method typos here and there, there is much more to be\nhad.\n\n  * TanStack Router is fully aware of all of your routes and their configuration at any given point in your code. This includes the path, path params, search params, context, and any other configuration you‚Äôve provided. Ultimately this means that you can navigate to any route in your app with 100% type safety and confidence that your link or navigate call will succeed.\n  * TanStack Router provides lossless type-inference. It uses countless generic type parameters to enforce and propagate any type information you give it throughout the rest its API and ultimately your app. No other router offers this level of type safety and developer confidence.\n\nWhat does all of that mean for you?\n\n  * Faster feature development with auto-completion and type hints\n  * Confidence that your code will work as expected\n\nSearch parameters are often an afterthought, treated like a black box of strings\n(or string) that you can parse and update, but not much else. Existing solutions\nare type-safe either, adding to the caution that is required to deal with them.\nEven the most \"modern\" frameworks and routers and leave it up to you to figure\nout how to manage this state. Sometimes they'll parse the search string into an\nobject for you, or sometimes you're left to do it yourself with .\n\nLet's step back and remember that **search params are the most powerful state\nmanager in your entire application.** They are global, serializable,\nbookmarkable, and shareable making them the perfect place to store any kind of\nstate that needs to survive a page refresh or a social share.\n\nTo live up to that responsibility, search parameters are a first-class citizen\nin TanStack Router. While still based on standard URLSearchParams, TanStack\nRouter uses a powerful parser/serializer to manage deeper and more complex data\nstructures in your search params, all while keeping them type-safe and easy to\nwork with.\n\n**It's like having right in the URL!**\n\n  * Automatically parsed and serialized as JSON\n  * Accessible in loaders, components, and hooks\n  * Easily modified with the useSearch hook, Link, navigate, and router.navigate APIs\n  * Customizable with a custom search filters and middleware\n  * Subscribed via fine-grained search param selectors for efficient re-renders\n\nOnce you start using TanStack Router's search parameters, you'll wonder how you\never lived without them.\n\n## [Built-In Caching and Friendly Data\nLoading](https://tanstack.com/router/latest/docs/framework/react/<#built-in-\ncaching-and-friendly-data-loading>)\n\nData loading is a critical part of any application and while most existing\nrouters offer some form of critical data loading APIs, they often fall short\nwhen it comes to caching and data lifecycle management. Existing solutions\nsuffer from a few common problems:\n\n  * No caching at all. Data is always fresh, but your users are left waiting for frequently accessed data to load over and over again.\n  * Overly-aggressive caching. Data is cached for too long, leading to stale data and a poor user experience.\n  * Blunt invalidation strategies and APIs. Data may be invalidated too often, leading to unnecessary network requests and wasted resources, or you may not have any fine-grained control over when data is invalidated at all.\n\nTanStack Router solves these problems with a two-prong approach to caching and\ndata loading:\n\nTanStack Router provides a light-weight built-in caching layer that works\nseamlessly with the Router. This caching layer is loosely based on TanStack\nQuery, but with fewer features and a much smaller API surface area. Like\nTanStack Query, sane but powerful defaults guarantee that your data is cached\nfor reuse, invalidated when necessary, and garbage collected when not in use. It\nalso provides a simple API for invalidating the cache manually when needed.\n\n### [Flexible & Powerful Data Lifecycle\nAPIs](https://tanstack.com/router/latest/docs/framework/react/<#flexible--\npowerful-data-lifecycle-apis>)\n\nTanStack Router is designed with a flexible and powerful data loading API that\nmore easily integrates with existing data fetching libraries like TanStack\nQuery, SWR, Apollo, Relay, or even your own custom data fetching solution.\nConfigurable APIs like , , and work in unison to make it easy to define\ndeclarative data dependencies, prefetch data, and manage the lifecycle of an\nexternal data source with ease.\n\nTanStack Router's router and route context is a powerful feature that allows you\nto define context that is specific to a route which is then inherited by all\nchild routes. Even the router and root routes themselves can provide context.\nContext can be built up both synchronously and asynchronously, and can be used\nto share data, configuration, or even functions between routes and route\nconfigurations. This is especially useful for scenarios like:\n\n  * Hybrid SSR/CSR data fetching and preloading\n  * Curried or partial application across preloading, loading, and rendering stages\n\nAlso, what would route context be if it weren't type-safe? TanStack Router's\nroute context is fully type-safe and inferred at zero cost to you.\n\nTanStack Router supports both file-based and code-based routing at the same\ntime. This flexibility allows you to choose the approach that best fits your\nproject's needs.\n\nTanStack Router's file-based routing approach is uniquely user-facing. Route\nconfiguration is generated for you either by the Vite plugin or TanStack Router\nCLI, leaving the usage of said generated code up to you! This means that you're\nalways in total control of your routes and router, even if you use file-based\nrouting.\n\nTanStack Router builds on concepts and patterns popularized by many other OSS\nprojects, including:\n\nWe acknowledge the investment, risk and research that went into their\ndevelopment, but are excited to push the bar they have set even higher.\n\nEnough overview, there's so much more to do with TanStack Router. Hit that next\nbutton and let's get started!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/router/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JMCTBI4Z3JCA7IE2JMCT7ICKJKC67DT2QYF67IT27YCA7IK2JWCAYI62JMHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# UI for building powerful tables & datagrids\nURL: https://tanstack.com/table\n\n##  UI for building powerful tables & datagrids\n\nSupercharge your tables or build a datagrid from scratch for TS/JS, React, Vue,\nSolid, Svelte & Lit while retaining 100% control over markup and styles.\n\nWhat good is a powerful table if that super hip designer you just hired can't\nwork their UI magic on it? TanStack Table is headless by design, which means\n100% control down to the very smallest HTML tag, component, class and style.\nPixel Perfection? Go for it!\n\nDon't be fooled by the small bundle size. TanStack Table is a workhorse. It's\nbuilt to materialize, filter, sort, group, aggregate, paginate and display\nmassive data sets using a very small API surface. Wire up your new or existing\ntables and watch your users become instantly more productive.\n\nTanStack table ships with excellent defaults to get you off the ground as fast\nas possible, but nothing is stopping you from customizing and overriding\nliterally everything to your liking. Feeling tenacious enough to build your own\nSheets/Excel/AirTable clone? Be our guest üòâ\n\n### Framework Agnostic & Feature Rich\n\nTanStack Table's API and engine are highly modular and framework-independent\nwhile still prioritizing ergonomics. Behold, the obligatory feature-list:\n\n[TanStack Table and AG Grid are respectfully the and together are working hard\nto ensure the highest quality table/datagrid experience for the entire JS/TS\necosystem. Whether it's a lightweight table or a complex datagrid, we've we've\ngot you covered.](https://tanstack.com/<https:/ag-grid.com/react-data-\ngrid/?utm_source=reacttable&utm_campaign=githubreacttable>)\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52QNCEAD6Z3JCA7IE2JWFTSILK7KC67DT2QYF67IT27YCA7IK2JWCAYI653MHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\n### Take it for a spin!\n\nWith some basic styles, some table markup and few columns, you're already well\non your way to creating a drop-dead powerful table.\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/basic\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# UI for building powerful tables & datagrids\nURL: https://tanstack.com/table/latest\n\n##  UI for building powerful tables & datagrids\n\nSupercharge your tables or build a datagrid from scratch for TS/JS, React, Vue,\nSolid, Svelte & Lit while retaining 100% control over markup and styles.\n\nWhat good is a powerful table if that super hip designer you just hired can't\nwork their UI magic on it? TanStack Table is headless by design, which means\n100% control down to the very smallest HTML tag, component, class and style.\nPixel Perfection? Go for it!\n\nDon't be fooled by the small bundle size. TanStack Table is a workhorse. It's\nbuilt to materialize, filter, sort, group, aggregate, paginate and display\nmassive data sets using a very small API surface. Wire up your new or existing\ntables and watch your users become instantly more productive.\n\nTanStack table ships with excellent defaults to get you off the ground as fast\nas possible, but nothing is stopping you from customizing and overriding\nliterally everything to your liking. Feeling tenacious enough to build your own\nSheets/Excel/AirTable clone? Be our guest üòâ\n\n### Framework Agnostic & Feature Rich\n\nTanStack Table's API and engine are highly modular and framework-independent\nwhile still prioritizing ergonomics. Behold, the obligatory feature-list:\n\n[TanStack Table and AG Grid are respectfully the and together are working hard\nto ensure the highest quality table/datagrid experience for the entire JS/TS\necosystem. Whether it's a lightweight table or a complex datagrid, we've we've\ngot you covered.](https://tanstack.com/table/<https:/ag-grid.com/react-data-\ngrid/?utm_source=reacttable&utm_campaign=githubreacttable>)\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/table/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBIC5QMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\n### Take it for a spin!\n\nWith some basic styles, some table markup and few columns, you're already well\non your way to creating a drop-dead powerful table.\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank\nTracker](https://tanstack.com/table/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/overview\n\nTanStack Table's core is , which means its API is the same regardless of the\nframework you're using. Adapters are provided to make working with the table\ncore easier depending on your framework. See the Adapters menu for available\nadapters.\n\nWhile TanStack Table is written in , using TypeScript in your application is\noptional (but recommended as it comes with outstanding benefits to both you and\nyour codebase)\n\nIf you use TypeScript, you will get top-notch type safety and editor\nautocomplete for all table APIs and state.\n\nAs it was mentioned extensively in the section, TanStack Table is . This means\nthat it doesn't render any DOM elements, and instead relies on you, the UI/UX\ndeveloper to provide the table's markup and styles. This is a great way to build\na table that can be used in any UI framework, including React, Vue, Solid,\nSvelte, Qwik, Angular, and even JS-to-native platforms like React Native!\n\nSince TanStack Table is headless and runs on a vanilla JavaScript core, it is\nagnostic in a couple of ways:\n\n  1. TanStack Table is , which means you can use it with any JavaScript framework (or library) that you want. TanStack Table provides ready-to-use adapters for React, Vue, Solid, Svelte, and Qwik out of the box, but you can create your own adapter if you need to.\n  2. TanStack Table is **CSS / Component Library Agnostic** , which means that you can use TanStack Table with whatever CSS strategy or component library you want. TanStack Table itself does not render any table markup or styles. You bring your own! Want to use Tailwind or ShadCN? No problem! Want to use Material UI or Bootstrap? No problem! Have your own custom design system? TanStack Table was made for you!\n\nThe table core uses the following abstractions, commonly exposed by adapters:\n\n  * - The core data array you provide the table\n  * : Objects used to configure a column and its data model, display templates, and more\n  * : The core table object containing both state and API\n  * : How the array is transformed into useful rows depending on the features you are using\n  * : Each row mirrors its respective row data and provides row-specific APIs\n  * : Each cell mirrors its respective row-column intersection and provides cell-specific APIs\n  * : Header groups are computed slices of nested header levels, each containing a group of headers\n  * : Each header is either directly associated with or derived from its column def and provides header-specific APIs\n  * : Each column mirrors its respective column def and also provides column-specific APIs\n\nTanStack Table will help you build just about any type of table you can imagine.\nIt has built-in state and APIs for the following features:\n\n  * - List unique lists of column values or min/max values for a column\n  * - Filter rows based on search values for a column\n  * - Group columns together, run aggregations, and more\n  * - Dynamically change the order of columns\n  * - Pin (Freeze) columns to the left or right of the table\n  * - Dynamically change the size of columns (column resizing handles)\n  * - List unique lists of column values or min/max values for the entire table\n  * - Filter rows based on search values for the entire table\n  * - Expand/collapse rows (sub-rows)\n  * - Pin (Freeze) rows to the top or bottom of the table\n  * - Select/deselect rows (checkboxes)\n  * - Sort rows by column values\n\nThese are just some of the capabilities that you can build with TanStack Table.\nThere are many more features that are possible with TanStack Table that you can\nadd along-side the built-in features.\n\nis an example of a feature that is not built-in to TanStack Table, but can be\nachieved by using another library (like ) and adding it along-side your other\ntable rendering logic.\n\nTanStack Table also supports (plugins) that you can use to modify the table\ninstance to add your own custom logic to the table in a more integrated way.\n\nAnd of course, you can just write your own state and hooks to add whatever other\nfeatures you want for your table. The features from the TanStack Table core are\njust a solid foundation to build on, with a large focus on performance and DX.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Ready to discover the latest startup AI innovations? Join us April 9-11 at\nGoogle Cloud Next.\n](https://tanstack.com/table/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6ADTZ3JCA7ILK3LCE7IK23KC67DT2QYF67IT27YCA7IK2JWFTBIVK3LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# UI for Virtualizing Large Element Lists\nURL: https://tanstack.com/virtual/v3\n\n##  UI for Virtualizing Large Element Lists\n\nVirtualize only the visible DOM nodes within massive scrollable elements at\n60FPS in TS/JS, React, Vue, Solid, Svelte, Lit & Angular while retaining 100%\ncontrol over markup and styles.\n\nHeadless Virtualization means you're always in control of your . Go design and\nimplement the most beautiful UI you can dream up and let us take care of the\nhard parts.\n\nDon't be fooled by the small bundle size. TanStack Virtual uses every byte to\ndeliver powerful performance. After all, these days and we refuse to sacrifice\nanything for that üßà-y smooth UX.\n\nWith a single function/hook, you'll get limitless virtualization for layouts.\nThe API is tiny (literally 1 function), but its composability is not.\n\n### Framework Agnostic & Feature Rich\n\nTanStack Virtual's API and engine are highly modular and framework-independent\nwhile still prioritizing ergonomics. Behold, the obligatory feature-list:\n\nWe're looking for a TanStack Virtual OSS Partner to go above and beyond the call\nof sponsorship. Are you as invested in TanStack Virtual as we are? Let's push\nthe boundaries of Virtual together!\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/virtual/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBIVK3NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\n### Take it for a spin!\n\nWith just a few divs and some inline styles, you're already well on your way to\ncreating an extremely powerful virtualization experience.\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank\nTracker](https://tanstack.com/virtual/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/installation\n\nBefore we dig in to the API, let's get you set up!\n\nInstall your table adapter as a dependency using your favorite npm package\nmanager.\n\n_Only install ONE of the following packages:_\n\nThe package works with React 16.8, React 17, React 18, and React 19.\n\n> NOTE: Even though the react adapter works with React 19, it may not work with\n> the new React Compiler that's coming out along-side React 19. This may be\n> fixed in future TanStack Table updates.\nThe package works with Vue 3.\n\nThe package works with Solid-JS 1\n\nThe package works with Svelte 3 and Svelte 4.\n\n> NOTE: There is not a built-in Svelte 5 adapter yet, but you can still use\n> TanStack Table with Svelte 5 by installing the package and using a custom\n> adapter from the community. See this for inspiration.\nThe package works with Qwik 1.\n\n> NOTE: There will be a \"breaking change\" release in the near future to support\n> Qwik 2. This will be released as a minor version bump, but will be documented.\n> Qwik 2 itself will have no breaking changes, but its name on the npm registry\n> will change, and require different peer dependencies.\n> NOTE: The current qwik adapter only works with CSR. More improvements may not\n> be available until a future table version.\nThe package works with Angular 17. The Angular adapter uses a new Angular Signal\nimplementation.\n\nThe package works with Lit 3.\n\nDon't see your favorite framework (or favorite version of your framework)\nlisted? You can always just use the package and build your own adapter in your\nown codebase. Usually, only a thin wrapper is needed to manage state and\nrendering for your specific framework. Browse the of all of the other adapters\nto see how they work.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/table/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKKQKC67DT2QYF67IT27YCA7IK2JWFTBIC23UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/migrating\n\nTanStack Table V8 was a major rewrite of React Table v7 from the ground up in\nTypeScript. The overall structure/organization of your markup and CSS will\nlargely remain the same, but many of the APIs have been renamed or replaced.\n\n  * Full rewrite to TypeScript with types included in the base package\n  * Removal of plugin system to favor more inversion of control\n  * Vastly larger and improved API (and new features like pinning)\n  * Better support for server-side operations\n  * Complete (but optional) data pipeline control\n  * Agnostic core with framework adapters for React, Solid, Svelte, Vue, and potentially more in the future\n\nThe new version of TanStack Table is published under the scope. Install the new\npackage using your favorite package manager:\n\n```\n\n```\n\nTypes are now included in the base package, so you can remove the package.\n\n> If you want, you can keep the old packages installed so that you can gradually\n> migrate your code. You should be able to use both packages side-by-side for\n> separate tables without any issues.\n  * The old hook and plugin systems have been removed, but they have replaced with tree-shakable row model imports for each feature.\n\n```\n\n { useTable, usePagination, useSortBy }\n\n//order of hooks used to matter\n\n```\n\n```\n\n //order of hooks used to matter\n\n```\n\n  * All table options were renamed to table options. (e.g. is now , is now , etc.)\n\n  * accessor was renamed to either or (depending on whether you are using a string or function)\n  * width, minWidth, maxWidth were renamed to size, minSize, maxSize\n  * Optionally, you can use the new function around each column definition for better TypeScript hints. (You can still just use an array of column definitions if you prefer.)\n    * The first parameter is the accessor function or accessor string.\n    * The second parameter is an object of column options.\n\n```\n\n// Best TypeScript experience, especially when using `cell.getValue()` later on\n\n// OR (if you prefer)\n\n```\n\n```\n\n// Best TypeScript experience, especially when using `cell.getValue()` later on\n\n// OR (if you prefer)\n\n```\n\n> Note: If defining columns inside a component, you should still try to give the\n> column definitions a stable identity. This will help with performance and\n> prevent unnecessary re-renders. Store the column definitions in either a or\n> hook.\n  *     * was renamed to (The cell render function has also changed. See below)\n    * All column options were renamed to column options. (e.g. is now , is now , etc.)\n  * Changes to custom cell renderers\n    * was renamed (Throughout the upgrade, instead of providing the value directly, a function is exposed for evaluating the value. This change aims to improve performance by evaluating the value only when is called and then caching it.)\n    * cell: { isGrouped, isPlaceholder, isAggregated } is now cell: { getIsGrouped, getIsPlaceholder, getIsAggregated }\n    * : The base level props are now RT-specific. Values that you added to the object when defining it are now one level deeper in .\n    * : Props passed into the hook now appear under .\n\n  * , , , , etc. have all been .\n    * TanStack Table does not provide any default or accessibility attributes like anymore. These are still important for you to get right, but it had to be removed in order to support being framework-agnostic.\n    * You will need to define handlers manually, but there are new helpers to keep this simple.\n    * You will need to define the props manually\n    * You will need to define the prop manually if using features that require it (grouped headers, aggregation, etc.)\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n// in column definitions in this case\n\n```\n\n```\n\n// in column definitions in this case\n\n```\n\n  * custom (now called ) have a new function signature as it only returns a boolean for whether the row should be included or not.\n\n> This guide is a work in progress. Please consider contributing to it if you\n> have time!\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIC2QLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/faq\n\n## [How do I stop infinite rendering\nloops?](https://tanstack.com/table/latest/docs/<#how-do-i-stop-infinite-\nrendering-loops>)\n\nIf you are using React, there is a very common pitfall that can cause infinite\nrendering. If you fail to give your , , or a stable reference, React will enter\nan infinite loop of re-rendering upon any change to the table state.\n\nWhy does this happen? Is this a bug in TanStack Table? , it is not. _This is\nfundamentally how React works_ , and properly managing your columns, data, and\nstate will prevent this from happening.\n\nTanStack Table is designed to trigger a re-render whenever either the or that\nare passed into the table change, or whenever any of the table's state changes.\n\n> Failing to give or stable references can cause an infinite loop of re-renders.\n### [Pitfall 1: Creating new columns or data on every\nrender](https://tanstack.com/table/latest/docs/<#pitfall-1-creating-new-columns-\nor-data-on-every-render>)\n\n```\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `columns` is\nredefined as a new array on every render!\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `data` is\nredefined as a new array on every render!\n\n //‚ùå Columns and data are defined in the same scope as `useReactTable` without a\nstable reference, will cause infinite loop!\n\n```\n\n```\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `columns` is\nredefined as a new array on every render!\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `data` is\nredefined as a new array on every render!\n\n //‚ùå Columns and data are defined in the same scope as `useReactTable` without a\nstable reference, will cause infinite loop!\n\n```\n\n### [Solution 1: Stable references with useMemo or\nuseState](https://tanstack.com/table/latest/docs/<#solution-1-stable-references-\nwith-usememo-or-usestate>)\n\nIn React, you can give a \"stable\" reference to variables by defining them\noutside/above the component, or by using or , or by using a 3rd party state\nmanagement library (like Redux or React Query üòâ)\n\n```\n\n//‚úÖ OK: Define columns outside of the component\n\n//‚úÖ OK: Define data outside of the component\n\n// Usually it's more practical to define columns and data inside the component,\nso use `useMemo` or `useState` to give them stable references\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `columns`\nis a stable reference\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `data` is\na stable reference\n\n // Columns and data are defined in a stable reference, will not cause infinite\nloop!\n\n```\n\n```\n\n//‚úÖ OK: Define columns outside of the component\n\n//‚úÖ OK: Define data outside of the component\n\n// Usually it's more practical to define columns and data inside the component,\nso use `useMemo` or `useState` to give them stable references\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `columns`\nis a stable reference\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `data` is\na stable reference\n\n // Columns and data are defined in a stable reference, will not cause infinite\nloop!\n\n```\n\n### [Pitfall 2: Mutating columns or data in\nplace](https://tanstack.com/table/latest/docs/<#pitfall-2-mutating-columns-or-\ndata-in-place>)\n\nEven if you give your initial and stable references, you can still run into\ninfinite loops if you mutate them in place. This is a common pitfall that you\nmay not notice that you are doing at first. Something as simple as an inline can\ncause an infinite loop if you are not careful.\n\n```\n\n //‚úÖ GOOD (React Query provides stable references to data automatically)\n\n  //‚ùå BAD: This will cause an infinite loop of re-renders because `data` is\nmutated in place (destroys stable reference)\n\n```\n\n```\n\n //‚úÖ GOOD (React Query provides stable references to data automatically)\n\n  //‚ùå BAD: This will cause an infinite loop of re-renders because `data` is\nmutated in place (destroys stable reference)\n\n```\n\n### [Solution 2: Memoize your data\ntransformations](https://tanstack.com/table/latest/docs/<#solution-2-memoize-\nyour-data-transformations>)\n\nTo prevent infinite loops, you should always memoize your data transformations.\nThis can be done with or similar.\n\n```\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because\n`filteredData` is memoized\n\n```\n\n```\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because\n`filteredData` is memoized\n\n```\n\nWhen React Forget is released, these problems might be a thing of the past. Or\njust use Solid.js... ü§ì\n\n## [How do I stop my table state from automatically resetting when my data\nchanges?](https://tanstack.com/table/latest/docs/<#how-do-i-stop-my-table-state-\nfrom-automatically-resetting-when-my-data-changes>)\n\nMost plugins use state that normally reset when the data sources changes, but\nsometimes you need to suppress that from happening if you are filtering your\ndata externally, or immutably editing your data while looking at it, or simply\ndoing anything external with your data that you don't want to trigger a piece of\ntable state to reset automatically.\n\nFor those situations, each plugin provides a way to disable the state from\nautomatically resetting internally when data or other dependencies for a piece\nof state change. By setting any of them to , you can stop the automatic resets\nfrom being triggered.\n\nHere is a React-based example of stopping basically every piece of state from\nchanging as they normally do while we edit the source for a table:\n\n```\n\n // When data gets updated with this function, set a flag\n\n // to disable all of the auto resetting\n\n // After the table has updated, always remove the flag\n\n```\n\n```\n\n // When data gets updated with this function, set a flag\n\n // to disable all of the auto resetting\n\n // After the table has updated, always remove the flag\n\n```\n\nNow, when we update our data, the above table states will not automatically\nreset!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBIC2QUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/react-table\n\nThe adapter is a wrapper around the core table logic. Most of its job is related\nto managing state the \"react\" way, providing types and the rendering\nimplementation of cell/header/footer templates.\n\nTakes an object and returns a table.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBIC2JLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/data\n\nTables start with your data. Your column definitions and rows will depend on the\nshape of your data. TanStack Table has some TypeScript features that will help\nyou create the rest of your table code with a great type-safe experience. If you\nset up your data and types correctly, TanStack Table will be able to infer the\nshape of your data and enforce that your column definitions are made correctly.\n\nTypeScript is NOT required to use the TanStack Table packages... TanStack Table\nis written and organized in such a way that makes the awesome TypeScript\nexperience that you get feel like it is one of the main selling points of the\nlibrary. If you are not using TypeScript, you will be missing out on a lot of\ngreat autocompletion and type-checking features that will both speed up your\ndevelopment time and reduce the number of bugs in your code.\n\nHaving a basic understanding of what TypeScript Generics are and how they work\nwill help you understand this guide better, but it should be easy enough to pick\nup as you go. The official may be helpful for those not yet familiar with\nTypeScript.\n\nis an array of objects that will be turned into the rows of your table. Each\nobject in the array represents a row of data (under normal circumstances). If\nyou are using TypeScript, we usually define a type for the shape of our data.\nThis type is used as a generic type for all of the other table, column, row, and\ncell instances. This Generic is usually referred to as throughout the rest of\nthe TanStack Table types and APIs.\n\nFor example, if we have a table that displays a list of users in an array like\nthis:\n\nThen we can define a User (TData) type like this:\n\nWe can then define our array with this type, and then TanStack Table will be\nable to intelligently infer lots of types for us later on in our columns, rows,\ncells, etc. This is because the type is literally defined as the generic type.\nWhatever you pass to the table option will become the type for the rest of the\ntable instance. Just make sure your column definitions use the same type as the\ntype when you define them later.\n\n```\n\n//note: data needs a \"stable\" reference in order to prevent infinite re-renders\n\n```\n\n```\n\n//note: data needs a \"stable\" reference in order to prevent infinite re-renders\n\n```\n\nIf your data is not a nice flat array of objects, that's okay! Once you get\naround to defining your columns, there are strategies for accessing deeply\nnested data in your accessors.\n\nIf your looks something like this:\n\n```\n\n```\n\nYou can define a type like this:\n\nAnd you will be able to access the data in your column definitions with either\ndot notation in an accessorKey or simply by using an accessorFn.\n\nThis is discussed in more detail in the .\n\n> NOTE: The \"keys\" in your json data can usually be anything, but any periods in\n> the keys will be interpreted as a deep key and will cause errors.\nIf you are using expanding features, it can be common to have nested sub-rows in\nyour data. This results in a recursive type that is a bit different.\n\nSo if your data looks like this:\n\nYou can define a type like this:\n\n```\n\n//does not have to be called \"subRows\", can be called anything\n\n```\n\n```\n\n //does not have to be called \"subRows\", can be called anything\n\n```\n\nWhere is an optional array of objects. This is discussed in more detail in the .\n\n### [Give Data a \"Stable\"\nReference](https://tanstack.com/table/latest/docs/guide/<#give-data-a-stable-\nreference>)\n\nThe array that you pass to the table instance have a \"stable\" reference in order\nto prevent bugs that cause infinite re-renders (especially in React).\n\nThis will depend on which framework adapter you are using, but in React, you\nshould often use , , or similar to ensure that both the and table options have\nstable references.\n\n```\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `columns`\nis a stable reference\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `data` is\na stable reference\n\n // Columns and data are defined in a stable reference, will not cause infinite\nloop!\n\n//also good to use a fallback array that is defined outside of the component\n(stable reference)\n\n```\n\n```\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `columns`\nis a stable reference\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `data` is\na stable reference\n\n // Columns and data are defined in a stable reference, will not cause infinite\nloop!\n\n //also good to use a fallback array that is defined outside of the component\n(stable reference)\n\n```\n\nand are not the only ways to give your data a stable reference. You can also\ndefine your data outside of the component or use a 3rd party state management\nlibrary like Redux, Zustand, or TanStack Query.\n\nThe main thing to avoid is defining the array inside the same scope as the call.\nThat will cause the array to be redefined on every render, which will cause an\ninfinite loop of re-renders.\n\n```\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `columns` is\nredefined as a new array on every render!\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `data` is\nredefined as a new array on every render!\n\n //‚ùå Columns and data are defined in the same scope as `useReactTable` without a\nstable reference, will cause infinite loop!\n\n//‚ùå Also bad because the fallback array is re-created on every render\n\n```\n\n```\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `columns` is\nredefined as a new array on every render!\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `data` is\nredefined as a new array on every render!\n\n //‚ùå Columns and data are defined in the same scope as `useReactTable` without a\nstable reference, will cause infinite loop!\n\n//‚ùå Also bad because the fallback array is re-created on every render\n\n```\n\n### [How TanStack Table Transforms\nData](https://tanstack.com/table/latest/docs/guide/<#how-tanstack-table-\ntransforms-data>)\n\nLater, in other parts of these docs, you will see how TanStack Table processes\nthe that you pass to the table and generates the row and cell objects that are\nused to create the table. The that you pass to the table is never mutated by\nTanStack Table, but the actual values in the rows and cells may be transformed\nby the accessors in your column definitions, or by other features performed by\nlike grouping or aggregation.\n\n### [How Much Data Can TanStack Table\nHandle?](https://tanstack.com/table/latest/docs/guide/<#how-much-data-can-\ntanstack-table-handle>)\n\nBelieve it or not, TanStack Table was actually built to scale up to handle\npotentially hundreds of thousands of rows of data in the client. This is\nobviously not always possible, depending on the size of each column's data and\nthe number of columns. However, the sorting, filtering, pagination, and grouping\nfeatures are all built with performance in mind for large datasets.\n\nThe default mindset of a developer building a data grid is to implement server-\nside pagination, sorting, and filtering for large datasets. This is still\nusually a good idea, but a lot of developers underestimate how much data can\nactually be handled in the client with modern browsers and the right\noptimizations. If your table will never have more than a few thousand rows, you\ncan probably take advantage of the client-side features in TanStack Table\ninstead of implementing them yourself on the server. Before committing to\nletting TanStack Table's client-side features handle your large dataset, you\nshould test it with your actual data to see if it performs well enough for your\nneeds, of course.\n\nThis is discussed in more detail in the .\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBIC2JMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/column-defs\n\n> Note: This guide is about setting up column definitions for your table and NOT\n> about the actual objects that are generated within the table instance.\nColumn defs are the single most important part of building a table. They are\nresponsible for:\n\n  * Building the underlying data model that will be used for everything including sorting, filtering, grouping, etc.\n  * Formatting the data model into what will be displayed in the table\n  * Creating columns for display-only purposes, eg. action buttons, checkboxes, expanders, sparklines, etc.\n\nThe following \"types\" of column defs aren't actually TypeScript types, but more\nso a way to talk about and describe overall categories of column defs:\n\n  *     * Accessor columns have an underlying data model which means they can be sorted, filtered, grouped, etc.\n  *     * Display columns do have a data model which means they cannot be sorted, filtered, etc, but they can be used to display arbitrary content in the table, eg. a row actions button, checkbox, expander, etc.\n  *     * Group columns do have a data model so they too cannot be sorted, filtered, etc, and are used to group other columns together. It's common to define a header or footer for a column group.\n\nWhile column defs are just plain objects at the end of the day, a function is\nexposed from the table core which, when called with a row type, returns a\nutility for creating different column definition types with the highest type-\nsafety possible.\n\nHere's an example of creating and using a column helper:\n\n```\n\n// Define your row shape\n\n```\n\n```\n\n// Define your row shape\n\n```\n\nData columns are unique in that they must be configured to extract primitive\nvalues for each item in your array.\n\nThere are 3 ways to do this:\n\n  * If your items are , use an object-key that corresponds to the value you want to extract.\n  * If your items are nested , use an array index that corresponds to the value you want to extract.\n  * Use an accessor function that returns the value you want to extract.\n\nIf each of your items is an object with the following shape:\n\nYou could extract the value like so:\n\nIf each of your items is an object with the following shape:\n\nYou could extract the value like so:\n\nIf each of your items is an array with the following shape:\n\nYou could extract the value like so:\n\nIf each of your items is an object with the following shape:\n\nYou could extract a computed full-name value like so:\n\n```\n\n```\n\n> üß† Remember, the accessed value is what is used to sort, filter, etc. so you'll\n> want to make sure your accessor function returns a primitive value that can be\n> manipulated in a meaningful way. If you return a non-primitive value like an\n> object or array, you will need the appropriate filter/sort/grouping functions\n> to manipulate them, or even supply your own! üò¨\nColumns are uniquely identified with 3 strategies:\n\n  * If defining an accessor column with an object key or array index, the same will be used to uniquely identify the column.\n    * Any periods () in an object key will be replaced by underscores ().\n  * If defining an accessor column with an accessor function\n    * The columns property will be used to uniquely identify the column OR\n    * If a primitive header is supplied, that header string will be used to uniquely identify the column\n\n> üß† An easy way to remember: If you define a column with an accessor function,\n> either provide a string header or provide a unique property.\nBy default, columns cells will display their data model value as a string. You\ncan override this behavior by providing custom rendering implementations. Each\nimplementation is provided relevant information about the cell, header or footer\nand returns something your framework adapter can render eg.\nJSX/Components/strings/etc. This will depend on which adapter you are using.\n\nThere are a couple of formatters available to you:\n\n  * : Used for formatting cells.\n  * : Used for formatting cells when aggregated.\n  * : Used for formatting headers.\n  * : Used for formatting footers.\n\nYou can provide a custom cell formatter by passing a function to the property\nand using the function to access your cell's value:\n\nCell formatters are also provided the and objects, allowing you to customize the\ncell formatting beyond just the cell value. The example below provides as the\naccessor, but also displays a prefixed user ID located on the original row\nobject:\n\nFor more info on aggregated cells, see .\n\nHeaders and footers do not have access to row data, but still use the same\nconcepts for displaying custom content.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIC27JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# The page you are looking for does not exist.\nURL: https://tanstack.com/table/latest/api/core/header-group\n\nThe page you are looking for does not exist.\n\n---\n\n# The page you are looking for does not exist.\nURL: https://tanstack.com/table/latest/api/core/header\n\nThe page you are looking for does not exist.\n\n---\n\n# The page you are looking for does not exist.\nURL: https://tanstack.com/table/latest/api/core/column-def\n\nThe page you are looking for does not exist.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/tables\n\nTanStack Table is a headless UI library. When we talk about the or \"table\ninstance\", we're not talking about a literal element. Instead, we're referring\nto the core table object that contains the table state and APIs. The instance is\ncreated by calling your adapter's function (e.g. , , , , , ).\n\nThe instance that is returned from the function (from the framework adapter) is\nthe main object that you will interact with to read and mutate the table state.\nIt is the one place where everything happens in TanStack Table. When you get to\nthe point where you are rendering your UI, you will use APIs from this instance.\n\nTo create a table instance, 3 are required: , , and a implementation. There are\ndozens of other table options to configure features and behavior, but these 3\nare required.\n\nDefine your data as an array of objects with a stable reference. can come from\nanywhere like an API response or defined statically in your code, but it must\nhave a stable reference to prevent infinite re-renders. If using TypeScript, the\ntype that you give your data will be used as a generic. See the for more info.\n\nColumn definitions are covered in detail in the previous section in the . We'll\nnote here, however, that when you define the type of your columns, you should\nuse the same type that you used for your data.\n\n```\n\n//Pass User type as the generic TData type\n\n//Pass User type as the generic TData type\n\n```\n\n```\n\n //Pass User type as the generic TData type\n\n //Pass User type as the generic TData type\n\n```\n\nThe column definitions are where we will tell TanStack Table how each column\nshould access and/or transform row data with either an or . See the for more\ninfo.\n\nThis is explained in much more detail in the , but for now, just import the\nfunction from TanStack Table and pass it in as a table option. Depending on the\nfeatures you plan to use, you may need to pass in additional row models later.\n\n```\n\n```\n\nWith our , , and defined, we can now create our basic table instance, along side\nany other table options that we want to pass in.\n\n```\n\n```\n\nSo what's in the instance? Let's take a look at what interactions we can have\nwith the table instance.\n\nThe table instance contains all of the table state, which can be accessed via\nthe API. Each table feature registers various states in the table state. For\nexample, the row selection feature registers state, the pagination feature\nregisters state, etc.\n\nEach feature will also have corresponding state setter APIs and state resetter\nAPIs on the table instance. For example, the row selection feature will have a\nAPI and a .\n\n```\n\n//read the row selection state\n\n//set the row selection state\n\n//reset the row selection state\n\n```\n\n```\n\n //read the row selection state\n\n //set the row selection state\n\n //reset the row selection state\n\n```\n\nThis is covered in more detail in the\n\nThere are dozens of table APIs created by each feature to help you either read\nor mutate the table state in different ways.\n\nAPI reference docs for the core table instance and all other feature APIs can be\nfound throughout the API docs.\n\nFor example, you can find the core table instance API docs here:\n\nThere is a special set of table instance APIs for reading rows out of the table\ninstance called row models. TanStack Table has advanced features where the rows\nthat are generated may be very different than the array of that you originally\npassed in. To learn more about the different row models that you can pass in as\na table option, see the .\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Instantly monitor any environment with our proprietary eBPF sensor\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEK3KC67DT2QYF67IT27YCA7IK2JWFTBICKJEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/row-models\n\nIf you take a look at the most basic example of TanStack Table, you'll see a\ncode snippet like this:\n\n```\n\n```\n\nWhat is this function? And why do you have to import it from TanStack Table only\nto just pass it back to itself?\n\nWell, the answer is that TanStack Table is a modular library. Not all code for\nevery single feature is included in the createTable functions/hooks by default.\nYou only need to import and include the code that you will need to correctly\ngenerate rows based on the features you want to use.\n\nRow models run under the hood of TanStack Table to transform your original data\nin useful ways that are needed for data grid features like filtering, sorting,\ngrouping, expanding, and pagination. The rows that get generated and render on\nscreen won't necessarily be a 1:1 mapping of the original data that you passed\nto the table. They may be sorted, filtered, paginated, etc.\n\nYou should only import the row models that you need. Here are all of the row\nmodels that are available:\n\n```\n\n//only import the row models you need\n\n```\n\n```\n\n//only import the row models you need\n\n```\n\nYou don't have to use the exact row models that are provided by TanStack Table.\nIf you need some advanced customization for certain row models, feel free to\ncopy the for the row model you want to customize and modify it to your needs.\n\nOnce your table instance has been created, you can access all of the row models\nthat you may need directly from the table instance. There are even more derived\nrow models available apart from the ones that you may have imported.\n\nFor normal rendering use cases, you will probably only need to use the method,\nas this row model will use all/any of the other row models depending on which\nfeatures you have enabled or disabled. All of the other row models are available\nfor you to \"dig into\" some of the underlying data transformations that are\nhappening in the table.\n\n### [Available Row Models on Table\nInstance](https://tanstack.com/table/latest/docs/guide/<#available-row-models-\non-table-instance>)\n\n  * - This is the main row model that you should use for rendering your table rows markup. It will use all of the other row models to generate the final row model that you will use to render your table rows.\n  * - returns a basic row model that is just a 1:1 mapping of the original data passed to the table.\n  * - returns a row model that accounts for column filtering and global filtering.\n  * - returns a row model before column filtering and global filtering are applied.\n  * - returns a row model that applies grouping and aggregation to the data and creates sub-rows.\n  * - returns a row model before grouping and aggregation are applied.\n  * - returns a row model that has had sorting applied to it.\n  * - returns a row model before sorting is applied (rows are in original order).\n  * - returns a row model that accounts for expanded/hidden sub-rows.\n  * - returns a row model that only includes root level rows with no expanded sub-rows included. Still includes sorting.\n  * - returns a row model that only includes the rows that should be displayed on the current page based on the pagination state.\n  * - returns a row model without pagination applied (includes all rows).\n  * - returns a row model of all selected rows (but only based on the data that was passed to the table). Runs after getCoreRowModel.\n  * - returns a row model before row selection is applied (Just returns getCoreRowModel).\n  * - returns a row model of selected rows after grouping. Runs after getSortedRowModel, which runs after getGroupedRowModel, which runs after getFilteredRowModel.\n  * - returns a row model of selected rows after column filtering and global filtering. Runs after getFilteredRowModel.\n\n### [The Order of Row Model\nExecution](https://tanstack.com/table/latest/docs/guide/<#the-order-of-row-\nmodel-execution>)\n\nKnowing how TanStack Table processes rows internally can help you gain a better\nunderstanding of what is happening under the hood, and help you debug any issues\nyou may encounter.\n\nInternally, this is the order in which each of the row models are applied to the\ndata, if their respective features are enabled:\n\nIf in any case the respective feature is disabled or turned off with a table\noption, the will be used instead in that step of the process.\n\nAs you can see above, first the data is filtered, then grouped, then sorted,\nthen expanded, and then finally paginated as the final step.\n\nEach row model will provide you the rows in 3 different useful formats:\n\n  1. - An array of rows.\n  2. - An array of rows, but all sub-rows are flattened into the top level.\n  3. - An object of rows, where each row is keyed by its . This is useful for quickly looking up rows by their with better performance.\n\n```\n\n// array of rows, but all sub-rows are flattened into the top level\n\n// object of rows, where each row is keyed by its `id`\n\n```\n\n```\n\n // array of rows, but all sub-rows are flattened into the top level\n\n // object of rows, where each row is keyed by its `id`\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBICKJMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/rows\n\nThis quick guide will discuss the different ways you can retrieve and interact\nwith row objects in TanStack Table.\n\n### [Where to Get Rows\nFrom](https://tanstack.com/table/latest/docs/guide/<#where-to-get-rows-from>)\n\nThere are multiple instance APIs you can use to retrieve rows from the table\ninstance.\n\nIf you need to access a specific row by its , you can use the table instance\nAPI.\n\nThe instance generates objects and stores them in useful arrays called . This is\ndiscussed in much more detail in the , but here are the most common ways you may\naccess the row models.\n\nEvery row object contains row data and many APIs to either interact with the\ntable state or extract cells from the row based on the state of the table.\n\nEvery row object has an property that makes it unique within the table instance.\nBy default the is the same as the that is created in the row model. However, it\ncan be useful to override each row's with a unique identifier from the row's\ndata. You can use the table option to do this.\n\n```\n\n//override the row.id with the uuid from the original row's data\n\n```\n\n```\n\n //override the row.id with the uuid from the original row's data\n\n```\n\n> Note: In some features like grouping and expanding, the will have additional\n> string appended to it.\nThe recommended way to access data values from a row is to use either the or\nAPIs. Using either of these APIs will cache the results of the accessor\nfunctions and keep rendering efficient. The only difference between the two is\nthat will return either the value or the if the value is undefined, whereas will\nreturn the value or if the value is undefined.\n\n```\n\n// Access data from any of the columns\n\n// read the row value from the firstName column\n\n// render the value from the lastName column\n\n```\n\n```\n\n// Access data from any of the columns\n\n // read the row value from the firstName column\n\n // render the value from the lastName column\n\n```\n\n> Note: and are shortcuts for the and APIs, respectively.\nFor every row object, you can access the original corresponding that was passed\nto the table instance via the property. None of the data in the will have been\nmodified by the accessors in your column definitions, so if you were doing any\nsort of data transformations in your accessors, those will not be reflected in\nthe object.\n\n```\n\n// Access any data from the original row\n\n// { firstName: 'John', lastName: 'Doe' }\n\n```\n\n```\n\n// Access any data from the original row\n\n // { firstName: 'John', lastName: 'Doe' }\n\n```\n\nIf you are using either grouping or expanding features, your rows may contain\nsub-rows or parent row references. This is discussed in much more detail in the\n, but here is a quick overview of useful properties and methods for working with\nsub-rows.\n\n  * : An array of sub-rows for the row.\n  * : The depth of the row (if nested or grouped) relative to the root row array. 0 for root level rows, 1 for child rows, 2 for grandchild rows, etc.\n  * : The unique ID of the parent row for the row (The row that contains this row in its subRows array).\n  * : Returns the parent row for the row, if it exists.\n\nDepending on the features that you are using for your table, there are dozens\nmore useful APIs for interacting with rows. See each features' respective API\ndocs or guide for more information.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBICK7EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/cells\n\nThis quick guide will discuss the different ways you can retrieve and interact\nwith objects in TanStack Table.\n\n### [Where to Get Cells\nFrom](https://tanstack.com/table/latest/docs/guide/<#where-to-get-cells-from>)\n\nCells come from . Enough said, right?\n\nThere are multiple instance APIs you can use to retrieve the appropriate cells\nfrom a row depending on which features you are using. Most commonly, you will\nuse the or APIs (if you are using column visibility features), but there are a\nhandful of other similar APIs that you can use.\n\nEvery cell object can be associated with a or similar cell element in your UI.\nThere are a few properties and methods on objects that you can use to interact\nwith the table state and extract cell values from the table based on the state\nof the table.\n\nEvery cell object has an property that makes it unique within the table\ninstance. Each is constructed simply as a union of its parent row and column IDs\nseparated by an underscore.\n\nDuring grouping or aggregation features, the will have additional string\nappended to it.\n\nEvery cell stores a reference to its parent and objects.\n\nThe recommended way to access data values from a cell is to use either the or\nAPIs. Using either of these APIs will cache the results of the accessor\nfunctions and keep rendering efficient. The only difference between the two is\nthat will return either the value or the if the value is undefined, whereas will\nreturn the value or if the value is undefined.\n\n> Note: The and APIs are shortcuts and APIs, respectively.\n```\n\n// Access data from any of the columns\n\n// read the cell value from the firstName column\n\n// render the value from the lastName column\n\n```\n\n```\n\n// Access data from any of the columns\n\n // read the cell value from the firstName column\n\n // render the value from the lastName column\n\n```\n\n#### [Access Other Row Data from Any\nCell](https://tanstack.com/table/latest/docs/guide/<#access-other-row-data-from-\nany-cell>)\n\nSince every cell object is associated with its parent row, you can access any\ndata from the original row that you are using in your table using .\n\n```\n\n// Even if we are in the scope of a different cell, we can still access the\noriginal row data\n\n// { firstName: 'John', lastName: 'Doe' }\n\n```\n\n```\n\n// Even if we are in the scope of a different cell, we can still access the\noriginal row data\n\n // { firstName: 'John', lastName: 'Doe' }\n\n```\n\nDepending on the features that you are using for your table, there are dozens\nmore useful APIs for interacting with cells. See each features' respective API\ndocs or guide for more information.\n\nYou can just use the or APIs to render the cells of your table. However, these\nAPIs will only spit out the raw cell values (from accessor functions). If you\nare using the column definition options, you will want to use the API utility\nfrom your adapter.\n\nUsing the API will allow the cell to be rendered correctly with any extra markup\nor JSX and it will call the callback function with the correct parameters.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBICK7WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/header-groups\n\nThis quick guide will discuss the different ways you can retrieve and interact\nwith header group objects in TanStack Table.\n\nHeader Groups are simply \"rows\" of headers. Don't let the name confuse you, it's\njust that simple. The large majority of tables will only have one row of headers\n(a single header group), but if you define your column structure with nested\ncolumns as with the , you can have multiple rows of headers (multiple header\ngroups).\n\n### [Where to Get Header Groups\nFrom](https://tanstack.com/table/latest/docs/guide/<#where-to-get-header-groups-\nfrom>)\n\nThere are multiple instance APIs you can use to retrieve header groups from the\ntable instance. is the most common API to use, but depending on the features\nthat you are using, you may need to use other APIs, such as if you are using\ncolumn pinning features.\n\nHeader Group objects are similar to objects, though simpler since there is not\nas much going on in header rows as there are in the body rows.\n\nBy default, header groups only have three properties:\n\n  * : The unique identifier for the header group that is generated from its depth (index). This is useful as a key for React components.\n  * : The depth of the header group, zero-indexed based. Think of this as the row index amongst all header rows.\n  * : An array of cell objects that belong to this header group (row).\n\nTo render the header cells in a header group, you just map over the array from\nthe header group object.\n\n```\n\n// map over the headerGroup headers array\n\n```\n\n```\n\n // map over the headerGroup headers array\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBICK77HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/headers\n\nThis quick guide will discuss the different ways you can retrieve and interact\nwith objects in TanStack Table.\n\nHeaders are the equivalent of cells, but meant for the section of the table\ninstead of the section.\n\n### [Where to Get Headers\nFrom](https://tanstack.com/table/latest/docs/guide/<#where-to-get-headers-from>)\n\nHeaders come from , which are the equivalent of rows, but meant for the section\nof the table instead of the section.\n\nIf you are in a header group, the headers are stored as an array in the\nproperty. Usually you will just map over this array to render your headers.\n\n```\n\n// map over the headerGroup headers array\n\n```\n\n```\n\n // map over the headerGroup headers array\n\n```\n\nThere are multiple instance APIs that you can use to retrieve a list of headers\ndepending on the features that you are using. The most common API you might use\nis , which will return a flat list of all headers in the table, but there are at\nleast a dozen other headers that are useful in tandem with the column visibility\nand column pinning features. APIs like or could be useful depending on your use\ncase.\n\nHeader objects are similar to objects, but meant for the section of the table\ninstead of the section. Every header object can be associated with a or similar\ncell element in your UI. There are a few properties and methods on objects that\nyou can use to interact with the table state and extract cell values from the\ntable based on the state of the table.\n\nEvery header object has an property that makes it unique within the table\ninstance. Usually you only need this as a unique identifier for React keys or if\nyou are following the .\n\nFor simple headers with no advanced nested or grouped headers logic, the will be\nthe same as it's parent . However, if the header is part group column or a\nplaceholder cell, it will have a more complicated id that is constructed from\nthe header family, depth/header row index, column id, and header group id.\n\nThere are a few properties on objects that are only useful if the header is part\nof a nested or grouped header structure. These properties include:\n\n  * : The number of columns that the header should span. This is useful for rendering the attribute on the element.\n  * : The number of rows that the header should span. This is useful for rendering the attribute on the element. (Currently not implemented in default TanStack Table)\n  * : The header group \"row index\" that the header group belongs to.\n  * : A boolean flag that is true if the header is a placeholder header. Placeholder headers are used to fill in the gaps when a column is hidden or when a column is part of a group column.\n  * : The unique identifier for the placeholder header.\n  * : The array of sub/child headers that belong to this header. Will be empty if the header is a leaf header.\n\n> Note: refers to its index within the header group (row of headers), i.e. its\n> position from left to right. It is not the same as , which refers to the\n> header group \"row index\".\nEvery header stores a reference to its parent object and its parent object.\n\nHeaders have a few more useful APIs attached to them that are useful for\ninteracting with the table state. Most of them relate to the Column sizing and\nresizing features. See the for more information.\n\nSince the column option you defined can be either a string, jsx, or a function\nreturning either of those, the best way to render the headers is to use the\nutility from your adapter, which will handle all of those cases for you.\n\n```\n\n/* Handles all possible header column def scenarios for `header` */\n\n```\n\n```\n\n/* Handles all possible header column def scenarios for `header` */\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBIC23IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/column-resizing\n\nThe page you are looking for does not exist.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBI653IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/columns\n\n> Note: This guide is about the actual objects that are generated within the\n> table instance and NOT about setting up the for your table.\nThis quick guide will discuss the different ways you can retrieve and interact\nwith objects in TanStack Table.\n\n### [Where to Get Columns\nFrom](https://tanstack.com/table/latest/docs/guide/<#where-to-get-columns-from>)\n\nYou can find the objects in many places. They are often attached\n\nBefore you reach for one of the instance APIs, consider if you actually need to\nretrieve either or instead of . If you are rending out the markup for your\ntable, you will most likely want to reach for the APIs that return headers or\ncells instead of columns. The column objects themselves are not really meant to\nrender out the headers or cells, but the and objects will contain references to\nthese objects from which they can derive the necessary information to render\ntheir UI.\n\n```\n\n// get column from cell\n\n// get column from header\n\n```\n\n```\n\n // get column from cell\n\n // get column from header\n\n```\n\nThere are dozens of instance APIs you can use to retrieve columns from the table\ninstance. Which APIs you will use will depend entirely on which features you are\nusing in your table and your use-case.\n\nIf you need to just get a single column by its ID, you can use the API.\n\nThe simplest column API is , which will return a list of all columns in the\ntable. There are dozens of other column APIs that are affected by other features\nand the state of the table that come alongside this API though. , , , are just\nsome examples of other column APIs that you might use in tandem with the column\nvisibility or column pinning features.\n\nColumn objects are not actually meant to be used to render out the table UI\ndirectly, so they are not associated 1-to-1 with any or elements in your table,\nbut they contain a lot of useful properties and methods that you can use to\ninteract with the table state.\n\nEvery column must have a unique defined in their associated . Usually, you\ndefine this yourself, or it is derived from the or properties in the column\ndefinition.\n\nA reference to the original object that was used to created the column is always\navailable on the column object.\n\nThere are a few properties on objects that are only useful if the column is part\nof a nested or grouped column structure. These properties include:\n\n  * : An array of child columns that belong to a group column.\n  * : The header group \"row index\" that the column group belongs to.\n  * : The parent column of the column. If the column is a top-level column, this will be .\n\nThere are dozens of Column APIs that you can use to interact with the table\nstate and extract cell values from the table based on the state of the table.\nSee each features column API documentation for more information.\n\nDon't necessarily use objects to render or directly. Instead, use the and\nobjects, as discussed above.\n\nBut if you are just rendering a list of columns somewhere else in your UI for\nsomething like a column visibility menu or something similar, you can just map\nover a columns array and render out the UI as you normally would.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBI653NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/guide/table-state\n\nWant to skip to the implementation? Check out these examples:\n\nTanStack Table has a simple underlying internal state management system to store\nand manage the state of the table. It also lets you selectively pull out any\nstate that you need to manage in your own state management. This guide will walk\nyou through the different ways in which you can interact with and manage the\nstate of the table.\n\nYou do not need to set up anything special in order for the table state to work.\nIf you pass nothing into either , , or any of the table options, the table will\nmanage its own state internally. You can access any part of this internal state\nby using the table instance API.\n\n```\n\n//access the entire internal state\n\n//access just the row selection state\n\n```\n\n```\n\n //access the entire internal state\n\n //access just the row selection state\n\n```\n\nIf all you need to do for certain states is customize their initial default\nvalues, you still do not need to manage any of the state yourself. You can\nsimply set values in the option of the table instance.\n\n```\n\n//customize the initial column order\n\n //hide the id column by default\n\n//expand all rows by default\n\n //sort by age in descending order by default\n\n```\n\n```\n\n //customize the initial column order\n\n //hide the id column by default\n\n //expand all rows by default\n\n //sort by age in descending order by default\n\n```\n\n> : Only specify each particular state in either or , but not both. If you pass\n> in a particular state value to both and , the initialized state in will take\n> overwrite any corresponding value in .\nIf you need easy access to the table state in other areas of your application,\nTanStack Table makes it easy to control and manage any or all of the table state\nin your own state management system. You can do this by passing in your own\nstate and state management functions to the and table options.\n\nYou can control just the state that you need easy access to. You do NOT have to\ncontrol all of the table state if you do not need to. It is recommended to only\ncontrol the state that you need on a case-by-case basis.\n\nIn order to control a particular state, you need to both pass in the\ncorresponding value and the function to the table instance.\n\nLet's take filtering, sorting, and pagination as an example in a \"manual\"\nserver-side data fetching scenario. You can store the filtering, sorting, and\npagination state in your own state management, but leave out any other state\nlike column order, column visibility, etc. if your API does not care about those\nvalues.\n\n```\n\n//sort by age in descending order by default\n\n//Use our controlled state values to fetch data\n\n//pass controlled state back to the table (overrides internal state)\n\n//hoist columnFilters state into our own state management\n\n```\n\n```\n\n //sort by age in descending order by default\n\n//Use our controlled state values to fetch data\n\n //pass controlled state back to the table (overrides internal state)\n\n //hoist columnFilters state into our own state management\n\n```\n\nAlternatively, you can control the entire table state with the table option. It\nwill hoist out the entire table state into your own state management system. Be\ncareful with this approach, as you might find that raising some frequently\nchanging state values up a react tree, like state`, might cause bad performance\nissues.\n\nA couple of more tricks may be needed to make this work. If you use the table\noption, the initial values of the must be populated with all of the relevant\nstate values for all of the features that you want to use. You can either\nmanually type out all of the initial state values, or use the API in a special\nway as shown below.\n\n```\n\n//create a table instance with default state values\n\n //... Note: `state` values are NOT passed in yet\n\n//populate the initial state with all of the default state values from the table\ninstance\n\n //optionally customize the initial pagination state.\n\n//Use the table.setOptions API to merge our fully controlled state onto the\ntable instance\n\n//preserve any other options that we have set up above\n\n//our fully controlled state overrides the internal state\n\n//any state changes will be pushed up to our own state management\n\n```\n\n```\n\n//create a table instance with default state values\n\n //... Note: `state` values are NOT passed in yet\n\n //populate the initial state with all of the default state values from the\ntable instance\n\n //optionally customize the initial pagination state.\n\n//Use the table.setOptions API to merge our fully controlled state onto the\ntable instance\n\n //preserve any other options that we have set up above\n\n //our fully controlled state overrides the internal state\n\n //any state changes will be pushed up to our own state management\n\n```\n\nSo far, we have seen the and table options work to \"hoist\" the table state\nchanges into our own state management. However, there are a few things about\nusing these options that you should be aware of.\n\n#### [1. **State Change Callbacks MUST have their corresponding state value in\nthe\noption**.](https://tanstack.com/table/latest/docs/framework/react/guide/<#1-state-\nchange-callbacks-must-have-their-corresponding-state-value-in-the-state-option>)\n\nSpecifying an callback tells the table instance that this will be a controlled\nstate. If you do not specify the corresponding value, that state will be\n\"frozen\" with its initial value.\n\n```\n\n//required because we are using `onSortingChange`\n\n```\n\n```\n\n //required because we are using `onSortingChange`\n\n```\n\n#### [2. **Updaters can either be raw values or callback\nfunctions**.](https://tanstack.com/table/latest/docs/framework/react/guide/<#2-updaters-\ncan-either-be-raw-values-or-callback-functions>)\n\nThe and callbacks work exactly like the functions in React. The updater values\ncan either be a new state value or a callback function that takes the previous\nstate value and returns the new state value.\n\nWhat implications does this have? It means that if you want to add in some extra\nlogic in any of the callbacks, you can do so, but you need to check whether or\nnot the new incoming updater value is a function or value.\n\n```\n\n   //do something with the new pagination value\n\n  //do something with the new sorting value\n\n```\n\n```\n\n   //do something with the new pagination value\n\n  //do something with the new sorting value\n\n```\n\nAll complex states in TanStack Table have their own TypeScript types that you\ncan import and use. This can be handy for ensuring that you are using the\ncorrect data structures and properties for the state values that you are\ncontrolling.\n\n```\n\n//you should get autocomplete for the `id` and `desc` properties\n\n```\n\n```\n\n //you should get autocomplete for the `id` and `desc` properties\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/table/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBI65QJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/column-ordering\n\nWant to skip to the implementation? Check out these examples:\n\nBy default, columns are ordered in the order they are defined in the array.\nHowever, you can manually specify the column order using the state. Other\nfeatures like column pinning and grouping can also affect the column order.\n\nThere are 3 table features that can reorder columns, which happen in the\nfollowing order:\n\n  1. - If pinning, columns are split into left, center (unpinned), and right pinned columns.\n  2. Manual - A manually specified column order is applied.\n  3. - If grouping is enabled, a grouping state is active, and is set to , then the grouped columns are reordered to the start of the column flow.\n\n> state will only affect unpinned columns if used in conjunction with column\n> pinning.\nIf you don't provide a state, TanStack Table will just use the order of the\ncolumns in the array. However, you can provide an array of string column ids to\nthe state to specify the order of the columns.\n\nIf all you need to do is specify the initial column order, you can just specify\nthe state in the table option.\n\n> If you are using the table option to also specify the state, the will have no\n> effect. Only specify particular states in either or , not both.\nIf you need to dynamically change the column order, or set the column order\nafter the table has been initialized, you can manage the state just like any\nother table state.\n\n```\n\n//optionally initialize the column order\n\n```\n\n```\n\n //optionally initialize the column order\n\n```\n\nIf the table has UI that allows the user to reorder columns, you can set up the\nlogic something like this:\n\n```\n\n//depending on your dnd solution of choice, you may or may not need state like\nthis\n\n//util function to splice and reorder the columnOrder array\n\n//use your dnd solution of choice\n\n```\n\n```\n\n//depending on your dnd solution of choice, you may or may not need state like\nthis\n\n//util function to splice and reorder the columnOrder array\n\n//use your dnd solution of choice\n\n```\n\n#### [Drag and Drop Column Reordering Suggestions\n(React)](https://tanstack.com/table/latest/docs/guide/<#drag-and-drop-column-\nreordering-suggestions-react>)\n\nThere are undoubtedly many ways to implement drag and drop features along-side\nTanStack Table. Here are a few suggestions in order for you to not have a bad\ntime:\n\n  1. Do NOT try to use _if you are using React 18 or newer_. React DnD was an important library for its time, but it now does not get updated very often, and it has incompatibilities with React 18, especially in React Strict Mode. It is still possible to get it to work, but there are newer alternatives that have better compatibility and are more actively maintained. React DnD's Provider may also interfere and conflict with any other DnD solutions you may want to try in your app.\n  2. Use . DnD Kit is a modern, modular and lightweight drag and drop library that is highly compatible with the modern React ecosystem, and it works well with semantic markup. Both of the official TanStack DnD examples, and , now use DnD Kit.\n  3. Consider other DnD libraries like , but be aware of their potentially large bundle sizes, maintenance status, and compatibility with markup.\n  4. Consider using native browser events and state management to implement lightweight drag and drop features. However, be aware that this approach may not be best for mobile users if you do not go the extra mile to implement proper touch events. is an example of a library that implements TanStack Table with only browser drag and drop events such as , , and no other dependencies. Browse its source code to see how it is done.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBI65QNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/column-pinning\n\nWant to skip to the implementation? Check out these examples:\n\nTanStack Table offers state and APIs helpful for implementing column pinning\nfeatures in your table UI. You can implement column pinning in multiple ways.\nYou can either split pinned columns into their own separate tables, or you can\nkeep all columns in the same table, but use the pinning state to order the\ncolumns correctly and use sticky CSS to pin the columns to the left or right.\n\n### [How Column Pinning Affects Column\nOrder](https://tanstack.com/table/latest/docs/guide/<#how-column-pinning-\naffects-column-order>)\n\nThere are 3 table features that can reorder columns, which happen in the\nfollowing order:\n\n  1. - If pinning, columns are split into left, center (unpinned), and right pinned columns.\n  2. Manual - A manually specified column order is applied.\n  3. - If grouping is enabled, a grouping state is active, and is set to , then the grouped columns are reordered to the start of the column flow.\n\nThe only way to change the order of the pinned columns is in the and state\nitself. state will only affect the order of the unpinned (\"center\") columns.\n\nManaging the state is optional, and usually not necessary unless you are adding\npersistent state features. TanStack Table will already keep track of the column\npinning state for you. Manage the state just like any other table state if you\nneed to.\n\n```\n\n```\n\nA very common use case is to pin some columns by default. You can do this by\neither initializing the state with the pinned columnIds, or by using the table\noption\n\n```\n\n```\n\n> Note: Some of these APIs are new in v8.12.0\nThere are a handful of useful Column API methods to help you implement column\npinning features:\n\n  * : Use to determine if a column can be pinned.\n  * : Use to pin a column to the left or right. Or use to unpin a column.\n  * : Use to determine where a column is pinned.\n  * : Use to provide the correct CSS value for a pinned column.\n  * : Use to provide the correct CSS value for a pinned column.\n  * : Use to determine if a column is the last column in its pinned group. Useful for adding a box-shadow\n  * : Use to determine if a column is the first column in its pinned group. Useful for adding a box-shadow\n\nIf you are just using sticky CSS to pin columns, you can for the most part, just\nrender the table as you normally would with the and methods.\n\nHowever, if you are splitting up pinned columns into their own separate tables,\nyou can make use of the , , , , , and methods to only render the columns that\nare relevant to the current table.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Visualize Millions of Data Points in Real-time with LightningChart Python. Get\nFree Trial Today.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6SI5Z3JCA7ILK3LCE7I627KC67DT2QYF67IT27YCA7IK2JWFTBICK3EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/svelte/examples/column-pinning\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/latest/docs/framework/svelte/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBICK3WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/vue/examples/column-pinning\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/latest/docs/framework/vue/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBICK3UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/column-sizing\n\nWant to skip to the implementation? Check out these examples:\n\nThe column sizing feature allows you to optionally specify the width of each\ncolumn including min and max widths. It also allows you and your users the\nability to dynamically change the width of all columns at will, eg. by dragging\nthe column headers.\n\nColumns by default are given the following measurement options:\n\nThese defaults can be overridden by both and individual column defs, in that\norder.\n\n```\n\n//set column size for this column\n\n```\n\n```\n\n //set column size for this column\n\n```\n\nThe column \"sizes\" are stored in the table state as numbers, and are usually\ninterpreted as pixel unit values, but you can hook up these column sizing values\nto your css styles however you see fit.\n\nAs a headless utility, table logic for column sizing is really only a collection\nof states that you can apply to your own layouts how you see fit (our example\nabove implements 2 styles of this logic). You can apply these width measurements\nin a variety of ways:\n\n  * semantic elements or any elements being displayed in a table css mode\n  * elements or any elements being displayed in a non-table css mode\n    * Block level elements with strict widths\n    * Absolutely positioned elements with strict widths\n    * Flexbox positioned elements with loose widths\n    * Grid positioned elements with loose widths\n  * Really any layout mechanism that can interpolate cell widths into a table structure.\n\nEach of these approaches has its own tradeoffs and limitations which are usually\nopinions held by a UI/component library or design system, luckily not you üòâ.\n\nTanStack Table provides built-in column resizing state and APIs that allow you\nto easily implement column resizing in your table UI with a variety of options\nfor UX and performance.\n\nBy default, the API will return by default for all columns, but you can either\ndisable column resizing for all columns with the table option, or disable column\nresizing on a per-column basis with the column option.\n\n```\n\n//disable resizing for just this column\n\n```\n\n```\n\n //disable resizing for just this column\n\n```\n\nBy default, the column resize mode is set to . This means that the API will not\nreturn the new column size until the user has finished resizing (dragging) the\ncolumn. Usually a small UI indicator will be displayed while the user is\nresizing the column.\n\nIn React TanStack Table adapter, where achieving 60 fps column resizing renders\ncan be difficult, depending on the complexity of your table or web page, the\ncolumn resize mode can be a good default option to avoid stuttering or lagging\nwhile the user resizes columns. That is not to say that you cannot achieve 60\nfps column resizing renders while using TanStack React Table, but you may have\nto do some extra memoization or other performance optimizations in order to\nachieve this.\n\n> Advanced column resizing performance tips will be discussed .\nIf you want to change the column resize mode to for immediate column resizing\nrenders, you can do so with the table option.\n\n```\n\n//change column resize mode to \"onChange\"\n\n```\n\n```\n\n //change column resize mode to \"onChange\"\n\n```\n\nBy default, TanStack Table assumes that the table markup is laid out in a left-\nto-right direction. For right-to-left layouts, you may need to change the column\nresize direction to .\n\n```\n\n//change column resize direction to \"rtl\" for certain locales\n\n```\n\n```\n\n //change column resize direction to \"rtl\" for certain locales\n\n```\n\n#### [Connect Column Resizing APIs to\nUI](https://tanstack.com/table/latest/docs/guide/<#connect-column-resizing-apis-\nto-ui>)\n\nThere are a few really handy APIs that you can use to hook up your column\nresizing drag interactions to your UI.\n\nTo apply the size of a column to the column head cells, data cells, or footer\ncells, you can use the following APIs:\n\nHow you apply these size styles to your markup is up to you, but it is pretty\ncommon to use either CSS variables or inline styles to apply the column sizes.\n\nThough, as discussed in the [advanced column resizing performance\nsection](https://tanstack.com/table/latest/docs/guide/</table/latest/docs/guide/column-\nsizing/#advanced-column-resizing-performance>), you may want to consider using\nCSS variables to apply column sizes to your markup.\n\nTanStack Table provides a pre-built event handler to make your drag interactions\neasy to implement. These event handlers are just convenience functions that call\nother internal APIs to update the column sizing state and re-render the table.\nUse to connect to your column resize drag interactions, for both mouse and touch\nevents.\n\n##### [Column Resize Indicator with\nColumnSizingInfoState](https://tanstack.com/table/latest/docs/guide/<#column-\nresize-indicator-with-columnsizinginfostate>)\n\nTanStack Table keeps track of an state object called that you can use to render\na column resize indicator UI.\n\nIf you are creating large or complex tables (and using React üòâ), you may find\nthat if you do not add proper memoization to your render logic, your users may\nexperience degraded performance while resizing columns.\n\nWe have created a that demonstrates how to achieve 60 fps column resizing\nrenders with a complex table that may otherwise have slow renders. It is\nrecommended that you just look at that example to see how it is done, but these\nare the basic things to keep in mind:\n\n  1. Don't use on every header and every data cell. Instead, calculate all column widths once upfront, !\n  2. Memoize your Table Body while resizing is in progress.\n  3. Use CSS variables to communicate column widths to your table cells.\n\nIf you follow these steps, you should see significant performance improvements\nwhile resizing columns.\n\nIf you are not using React, and are using the Svelte, Vue, or Solid adapters\ninstead, you may not need to worry about this as much, but similar principles\napply.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBICKQEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/column-visibility\n\nWant to skip to the implementation? Check out these examples:\n\nThe column visibility feature allows table columns to be hidden or shown\ndynamically. In previous versions of react-table, this feature was a static\nproperty on a column, but in v8, there is a dedicated state and APIs for\nmanaging column visibility dynamically.\n\nThe state is a map of column IDs to boolean values. A column will be hidden if\nits ID is present in the map and the value is . If the column ID is not present\nin the map, or the value is , the column will be shown.\n\n```\n\n//hide this column by default\n\n```\n\n```\n\n //hide this column by default\n\n```\n\nAlternatively, if you don't need to manage the column visibility state outside\nof the table, you can still set the initial default column visibility state\nusing the option.\n\n> : If is provided to both and , the initialization will take precedence and\n> will be ignored. Do not provide to both and , only one or the other.\n```\n\n//hide this column by default\n\n```\n\n```\n\n //hide this column by default\n\n```\n\nBy default, all columns can be hidden or shown. If you want to prevent certain\ncolumns from being hidden, you set the column option to for those columns.\n\n```\n\n// disable hiding for this column\n\n```\n\n```\n\n // disable hiding for this column\n\n```\n\nThere are several column API methods that are useful for rendering column\nvisibility toggles in the UI.\n\n  * - Useful for disabling the visibility toggle for a column that has set to .\n  * - Useful for setting the initial state of the visibility toggle.\n  * - Useful for toggling the visibility of a column.\n  * - Shortcut for hooking up the method to a UI event handler.\n\n### [Column Visibility Aware Table\nAPIs](https://tanstack.com/table/latest/docs/guide/<#column-visibility-aware-\ntable-apis>)\n\nWhen you render your header, body, and footer cells, there are a lot of API\noptions available. You may see APIs like and , but if you use these APIs, they\nwill not take column visibility into account. Instead, you need to use the\n\"visible\" variants of these APIs, such as and .\n\n```\n\n// takes column visibility into account\n\n// takes column visibility into account\n\n```\n\n```\n\n // takes column visibility into account\n\n // takes column visibility into account\n\n```\n\nIf you are using the Header Group APIs, they will already take column visibility\ninto account.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBI62QLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/solid/examples/column-visibility\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/column-filtering\n\nWant to skip to the implementation? Check out these examples:\n\n  * (Autocomplete and Range filters)\n\nFiltering comes in 2 flavors: Column Filtering and Global Filtering.\n\nThis guide will focus on column filtering, which is a filter that is applied to\na single column's accessor value.\n\nTanStack table supports both client-side and manual server-side filtering. This\nguide will go over how to implement and customize both, and help you decide\nwhich one is best for your use-case.\n\nIf you have a large dataset, you may not want to load all of that data into the\nclient's browser in order to filter it. In this case, you will most likely want\nto implement server-side filtering, sorting, pagination, etc.\n\nHowever, as also discussed in the , a lot of developers underestimate how many\nrows can be loaded client-side without a performance hit. The TanStack table\nexamples are often tested to handle up to 100,000 rows or more with decent\nperformance for client-side filtering, sorting, pagination, and grouping. This\ndoesn't necessarily mean that your app will be able to handle that many rows,\nbut if your table is only going to have a few thousand rows at most, you might\nbe able to take advantage of the client-side filtering, sorting, pagination, and\ngrouping that TanStack table provides.\n\n> TanStack Table can handle thousands of client-side rows with good performance.\n> Don't rule out client-side filtering, pagination, sorting, etc. without some\n> thought first.\nEvery use-case is different and will depend on the complexity of the table, how\nmany columns you have, how large every piece of data is, etc. The main\nbottlenecks to pay attention to are:\n\n  1. Can your server query all of the data in a reasonable amount of time (and cost)?\n  2. What is the total size of the fetch? (This might not scale as badly as you think if you don't have many columns.)\n  3. Is the client's browser using too much memory if all of the data is loaded at once?\n\nIf you're not sure, you can always start with client-side filtering and\npagination and then switch to server-side strategies in the future as your data\ngrows.\n\nIf you have decided that you need to implement server-side filtering instead of\nusing the built-in client-side filtering, here's how you do that.\n\nNo table option is needed for manual server-side filtering. Instead, the that\nyou pass to the table should already be filtered. However, if you have passed a\ntable option, you can tell the table to skip it by setting the option to .\n\n```\n\n // getFilteredRowModel: getFilteredRowModel(), // not needed for manual server-\nside filtering\n\n```\n\n```\n\n // getFilteredRowModel: getFilteredRowModel(), // not needed for manual server-\nside filtering\n\n```\n\n> When using manual filtering, many of the options that are discussed in the\n> rest of this guide will have no effect. When is set to , the table instance\n> will not apply any filtering logic to the rows that are passed to it. Instead,\n> it will assume that the rows are already filtered and will use the that you\n> pass to it as-is.\nIf you are using the built-in client-side filtering features, first you need to\npass in a function to the table options. This function will be called whenever\nthe table needs to filter the data. You can either import the default function\nfrom TanStack Table or create your own.\n\n```\n\n// needed for client-side filtering\n\n```\n\n```\n\n // needed for client-side filtering\n\n```\n\nWhether or not you use client-side or server-side filtering, you can take\nadvantage of the built-in column filter state management that TanStack Table\nprovides. There are many table and column APIs to mutate and interact with the\nfilter state and retrieving the column filter state.\n\nThe column filtering state is defined as an array of objects with the following\nshape:\n\nSince the column filter state is an array of objects, you can have multiple\ncolumn filters applied at once.\n\nYou can access the column filter state from the table instance just like any\nother table state using the API.\n\n```\n\n// access the column filters state from the table instance\n\n```\n\n```\n\n // access the column filters state from the table instance\n\n```\n\nHowever, if you need to access the column filter state before the table is\ninitialized, you can \"control\" the column filter state like down below.\n\nIf you need easy access to the column filter state, you can control/manage the\ncolumn filter state in your own state management with the and table options.\n\n```\n\n// can set initial column filter state here\n\n```\n\n```\n\n // can set initial column filter state here\n\n```\n\nIf you do not need to control the column filter state in your own state\nmanagement or scope, but you still want to set an initial column filter state,\nyou can use the table option instead of .\n\n```\n\n// filter the name column by 'John' by default\n\n```\n\n```\n\n // filter the name column by 'John' by default\n\n```\n\n> : Do not use both and at the same time, as the initialized state in the will\n> override the .\nEach column can have its own unique filtering logic. Choose from any of the\nfilter functions that are provided by TanStack Table, or create your own.\n\nBy default there are 10 built-in filter functions to choose from:\n\n  * - Item inclusion within an array\n  * - All items included in an array\n  * - Some items included in an array\n\nYou can also define your own custom filter functions either as the column\noption, or as a global filter function using the table option.\n\n> These filter functions only run during client-side filtering.\nWhen defining a custom filter function in either the column option or the table\noption, it should have the following signature:\n\n  * The columnId to use to retrieve the row's value\n\nand should return if the row should be included in the filtered rows, and if it\nshould be removed.\n\n```\n\n// use built-in filter function\n\n// use custom global filter function\n\n  // use custom filter function directly\n\n // true or false based on your custom logic\n\n// add a custom global filter function\n\n // true or false based on your custom logic\n\n```\n\n```\n\n // use built-in filter function\n\n // use custom global filter function\n\n  // use custom filter function directly\n\n // true or false based on your custom logic\n\n // add a custom global filter function\n\n // true or false based on your custom logic\n\n```\n\nYou can attach a few other properties to filter functions to customize their\nbehavior:\n\n  * - This optional \"hanging\" method on any given allows the filter function to transform/sanitize/format the filter value before it is passed to the filter function.\n  * - This optional \"hanging\" method on any given is passed a filter value and expected to return if the filter value should be removed from the filter state. eg. Some boolean-style filters may want to remove the filter value from the table state if the filter value is set to .\n\n```\n\n//resolveFilterValue will transform this to a string\n\n// toString, toLowerCase, and trim the filter value in `resolveFilterValue`\n\n// remove the filter value from filter state if it is falsy (empty string in\nthis case)\n\n// transform/sanitize/format the filter value before it is passed to the filter\nfunction\n\n```\n\n```\n\n //resolveFilterValue will transform this to a string\n\n // toString, toLowerCase, and trim the filter value in `resolveFilterValue`\n\n// remove the filter value from filter state if it is falsy (empty string in\nthis case)\n\n// transform/sanitize/format the filter value before it is passed to the filter\nfunction\n\n```\n\nThere are a lot of table and column options that you can use to further\ncustomize the column filtering behavior.\n\nBy default, column filtering is enabled for all columns. You can disable the\ncolumn filtering for all columns or for specific columns by using the table\noption or the column option. You can also turn off both column and global\nfiltering by setting the table option to .\n\nDisabling column filtering for a column will cause the API to return for that\ncolumn.\n\n```\n\n// disable column filtering for this column\n\n// disable column filtering for all columns\n\n```\n\n```\n\n // disable column filtering for this column\n\n // disable column filtering for all columns\n\n```\n\nThere are a few additional table options to customize the behavior of column\nfiltering when using features like expanding, grouping, and aggregation.\n\nBy default, filtering is done from parent rows down, so if a parent row is\nfiltered out, all of its child sub-rows will be filtered out as well. Depending\non your use-case, this may be the desired behavior if you only want the user to\nbe searching through the top-level rows, and not the sub-rows. This is also the\nmost performant option.\n\nHowever, if you want to allow sub-rows to be filtered and searched through,\nregardless of whether the parent row is filtered out, you can set the table\noption to . Setting this option to will cause filtering to be done from leaf\nrows up, which means parent rows will be included so long as one of their child\nor grand-child rows is also included.\n\n```\n\n// filter and search through sub-rows\n\n```\n\n```\n\n // filter and search through sub-rows\n\n```\n\n##### [Max Leaf Row Filter\nDepth](https://tanstack.com/table/latest/docs/guide/<#max-leaf-row-filter-\ndepth>)\n\nBy default, filtering is done for all rows in a tree, no matter if they are root\nlevel parent rows or the child leaf rows of a parent row. Setting the table\noption to will cause filtering to only be applied to the root level parent rows,\nwith all sub-rows remaining unfiltered. Similarly, setting this option to will\ncause filtering to only be applied to child leaf rows 1 level deep, and so on.\n\nUse if you want to preserve a parent row's sub-rows from being filtered out\nwhile the parent row is passing the filter.\n\n```\n\n// only filter root level parent rows out\n\n```\n\n```\n\n // only filter root level parent rows out\n\n```\n\nThere are a lot of Column and Table APIs that you can use to interact with the\ncolumn filter state and hook up to your UI components. Here is a list of the\navailable APIs and their most common use-cases:\n\n  * - Overwrite the entire column filter state with a new state.\n  * - Useful for a \"clear all/reset filters\" button.\n  * - Useful for getting the default initial filter value for an input, or even directly providing the filter value to a filter input.\n  * - Useful for connecting filter inputs to their or handlers.\n  * - Useful for disabling/enabling filter inputs.\n  * - Useful for displaying a visual indicator that a column is currently being filtered.\n  * - Useful for displaying in what order the current filter is being applied.\n  * - Used internally to find the default filter function for a column if none is specified.\n  * - Useful for displaying which filter mode or function is currently being used.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBI62Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/global-filtering\n\nWant to skip to the implementation? Check out these examples:\n\nFiltering comes in 2 flavors: Column Filtering and Global Filtering.\n\nThis guide will focus on global filtering, which is a filter that is applied\nacross all columns.\n\nIf you have a large dataset, you may not want to load all of that data into the\nclient's browser in order to filter it. In this case, you will most likely want\nto implement server-side filtering, sorting, pagination, etc.\n\nHowever, as also discussed in the , a lot of developers underestimate how many\nrows can be loaded client-side without a performance hit. The TanStack table\nexamples are often tested to handle up to 100,000 rows or more with decent\nperformance for client-side filtering, sorting, pagination, and grouping. This\ndoesn't necessarily mean that your app will be able to handle that many rows,\nbut if your table is only going to have a few thousand rows at most, you might\nbe able to take advantage of the client-side filtering, sorting, pagination, and\ngrouping that TanStack table provides.\n\n> TanStack Table can handle thousands of client-side rows with good performance.\n> Don't rule out client-side filtering, pagination, sorting, etc. without some\n> thought first.\nEvery use-case is different and will depend on the complexity of the table, how\nmany columns you have, how large every piece of data is, etc. The main\nbottlenecks to pay attention to are:\n\n  1. Can your server query all of the data in a reasonable amount of time (and cost)?\n  2. What is the total size of the fetch? (This might not scale as badly as you think if you don't have many columns.)\n  3. Is the client's browser using too much memory if all of the data is loaded at once?\n\nIf you're not sure, you can always start with client-side filtering and\npagination and then switch to server-side strategies in the future as your data\ngrows.\n\nIf you have decided that you need to implement server-side global filtering\ninstead of using the built-in client-side global filtering, here's how you do\nthat.\n\nNo table option is needed for manual server-side global filtering. Instead, the\nthat you pass to the table should already be filtered. However, if you have\npassed a table option, you can tell the table to skip it by setting the option\nto .\n\n```\n\n // getFilteredRowModel: getFilteredRowModel(), // not needed for manual server-\nside global filtering\n\n```\n\n```\n\n // getFilteredRowModel: getFilteredRowModel(), // not needed for manual server-\nside global filtering\n\n```\n\nNote: When using manual global filtering, many of the options that are discussed\nin the rest of this guide will have no effect. When manualFiltering is set to\ntrue, the table instance will not apply any global filtering logic to the rows\nthat are passed to it. Instead, it will assume that the rows are already\nfiltered and will use the data that you pass to it as-is.\n\nIf you are using the built-in client-side global filtering, first you need to\npass in a getFilteredRowModel function to the table options.\n\n```\n\n// needed for client-side global filtering\n\n```\n\n```\n\n // needed for client-side global filtering\n\n```\n\nThe globalFilterFn option allows you to specify the filter function that will be\nused for global filtering. The filter function can be a string that references a\nbuilt-in filter function, a string that references a custom filter function\nprovided via the tableOptions.filterFns option, or a custom filter function.\n\nBy default there are 10 built-in filter functions to choose from:\n\n  * includesString - Case-insensitive string inclusion\n  * includesStringSensitive - Case-sensitive string inclusion\n  * equalsString - Case-insensitive string equality\n  * equalsStringSensitive - Case-sensitive string equality\n  * arrIncludes - Item inclusion within an array\n  * arrIncludesAll - All items included in an array\n  * arrIncludesSome - Some items included in an array\n  * equals - Object/referential equality Object.is/===\n  * weakEquals - Weak object/referential equality ==\n  * inNumberRange - Number range inclusion\n\nYou can also define your own custom filter functions either as the\nglobalFilterFn table option.\n\nThe global filter state is stored in the table's internal state and can be\naccessed via the table.getState().globalFilter property. If you want to persist\nthe global filter state outside of the table, you can use the\nonGlobalFilterChange option to provide a callback function that will be called\nwhenever the global filter state changes.\n\n```\n\n```\n\nThe global filtering state is defined as an object with the following shape:\n\n### [Adding global filter input to\nUI](https://tanstack.com/table/latest/docs/guide/<#adding-global-filter-input-\nto-ui>)\n\nTanStack table will not add a global filter input UI to your table. You should\nmanually add it to your UI to allow users to filter the table. For example, you\ncan add an input UI above the table to allow users to enter a search term.\n\nIf you want to use a custom global filter function, you can define the function\nand pass it to the globalFilterFn option.\n\n> It is often a popular idea to use fuzzy filtering functions for global\n> filtering. This is discussed in the .\n```\n\n```\n\n```\n\n```\n\nIf you want to set an initial global filter state when the table is initialized,\nyou can pass the global filter state as part of the table initialState option.\n\nHowever, you can also just specify the initial global filter state in the\nstate.globalFilter option.\n\n```\n\n//recommended to initialize globalFilter state here\n\n// if not managing globalFilter state, set initial state here\n\n// pass our managed globalFilter state to the table\n\n```\n\n```\n\n //recommended to initialize globalFilter state here\n\n // if not managing globalFilter state, set initial state here\n\n // pass our managed globalFilter state to the table\n\n```\n\n> NOTE: Do not use both initialState.globalFilter and state.globalFilter at the\n> same time, as the initialized state in the state.globalFilter will override\n> the initialState.globalFilter.\nBy default, global filtering is enabled for all columns. You can disable the\nglobal filtering for all columns by using the enableGlobalFilter table option.\nYou can also turn off both column and global filtering by setting the\nenableFilters table option to false.\n\nDisabling global filtering will cause the column.getCanGlobalFilter API to\nreturn false for that column.\n\n```\n\n// disable global filtering for this column\n\n// disable global filtering for all columns\n\n```\n\n```\n\n // disable global filtering for this column\n\n // disable global filtering for all columns\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBI62JUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/filters-global\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBI627LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/fuzzy-filtering\n\nWant to skip to the implementation? Check out these examples:\n\nFuzzy filtering is a technique that allows you to filter data based on\napproximate matches. This can be useful when you want to search for data that is\nsimilar to a given value, rather than an exact match.\n\nYou can implement a client side fuzzy filtering by defining a custom filter\nfunction. This function should take in the row, columnId, and filter value, and\nreturn a boolean indicating whether the row should be included in the filtered\ndata.\n\nFuzzy filtering is mostly used with global filtering, but you can also apply it\nto individual columns. We will discuss how to implement fuzzy filtering for both\ncases.\n\n> You will need to install the library to use fuzzy filtering. TanStack Match\n> Sorter Utils is a fork of by Kent C. Dodds. It was forked in order to work\n> better with TanStack Table's row by row filtering approach.\nUsing the match-sorter libraries is optional, but the TanStack Match Sorter\nUtils library provides a great way to both fuzzy filter and sort by the rank\ninformation it returns, so that rows can be sorted by their closest matches to\nthe search query.\n\n### [Defining a Custom Fuzzy Filter\nFunction](https://tanstack.com/table/latest/docs/guide/<#defining-a-custom-\nfuzzy-filter-function>)\n\nHere's an example of a custom fuzzy filter function:\n\n```\n\n // Store the itemRank info\n\n // Return if the item should be filtered in/out\n\n```\n\n```\n\n // Store the itemRank info\n\n // Return if the item should be filtered in/out\n\n```\n\nIn this function, we're using the rankItem function from the @tanstack/match-\nsorter-utils library to rank the item. We then store the ranking information in\nthe meta data of the row, and return whether the item passed the ranking\ncriteria.\n\n### [Using Fuzzy Filtering with Global\nFiltering](https://tanstack.com/table/latest/docs/guide/<#using-fuzzy-filtering-\nwith-global-filtering>)\n\nTo use fuzzy filtering with global filtering, you can specify the fuzzy filter\nfunction in the globalFilterFn option of the table instance:\n\n```\n\n// or your framework's equivalent function\n\n//define as a filter function that can be used in column definitions\n\n//apply fuzzy filter to the global filter (most common use case for fuzzy\nfilter)\n\n//client side sorting needed if you want to use sorting too.\n\n```\n\n```\n\n // or your framework's equivalent function\n\n //define as a filter function that can be used in column definitions\n\n //apply fuzzy filter to the global filter (most common use case for fuzzy\nfilter)\n\n //client side sorting needed if you want to use sorting too.\n\n```\n\n### [Using Fuzzy Filtering with Column\nFiltering](https://tanstack.com/table/latest/docs/guide/<#using-fuzzy-filtering-\nwith-column-filtering>)\n\nTo use fuzzy filtering with column filtering, you should first define the fuzzy\nfilter function in the filterFns option of the table instance. You can then\nspecify the fuzzy filter function in the filterFn option of the column\ndefinition:\n\n```\n\n//using our custom fuzzy filter function\n\n```\n\n```\n\n //using our custom fuzzy filter function\n\n```\n\nIn this example, we're applying the fuzzy filter to a column that combines the\nfirstName and lastName fields of the data.\n\nWhen using fuzzy filtering with column filtering, you might also want to sort\nthe data based on the ranking information. You can do this by defining a custom\nsorting function:\n\n```\n\n // Only sort by rank if the column has ranking information\n\n // Provide an alphanumeric fallback for when the item ranks are equal\n\n```\n\n```\n\n // Only sort by rank if the column has ranking information\n\n // Provide an alphanumeric fallback for when the item ranks are equal\n\n```\n\nIn this function, we're comparing the ranking information of the two rows. If\nthe ranks are equal, we fall back to alphanumeric sorting.\n\nYou can then specify this sorting function in the sortFn option of the column\ndefinition:\n\n```\n\n//using our custom fuzzy filter function\n\n//using our custom fuzzy sort function\n\n```\n\n```\n\n //using our custom fuzzy filter function\n\n //using our custom fuzzy sort function\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBI627NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/filters\n\nThe Filtering API docs are now split into multiple API doc pages:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBI6KQNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/column-faceting\n\nWant to skip to the implementation? Check out these examples:\n\nColumn Faceting is a feature that allows you to generate lists of values for a\ngiven column from that column's data. For example, a list of unique values in a\ncolumn can be generated from all rows in that column to be used as search\nsuggestions in an autocomplete filter component. Or, a tuple of minimum and\nmaximum values can be generated from a column of numbers to be used as a range\nfor a range slider filter component.\n\nIn order to use any of the column faceting features, you must include the\nappropriate row models in your table options.\n\n```\n\n//only import the row models you need\n\n//if you need a list of values for a column (other faceted row models depend on\nthis one)\n\n//if you need min/max values\n\n//if you need a list of unique values\n\n```\n\n```\n\n//only import the row models you need\n\n //if you need a list of values for a column (other faceted row models depend on\nthis one)\n\n //if you need min/max values\n\n //if you need a list of unique values\n\n```\n\nFirst, you must include the row model. This row model will generate a list of\nvalues for a given column. If you need a list of unique values, include the row\nmodel. If you need a tuple of minimum and maximum values, include the row model.\n\nOnce you have included the appropriate row models in your table options, you\nwill be able to use the faceting column instance APIs to access the lists of\nvalues generated by the faceted row models.\n\n```\n\n// list of unique values for autocomplete filter\n\n```\n\n```\n\n// list of unique values for autocomplete filter\n\n```\n\n```\n\n// tuple of min and max values for range filter\n\n```\n\n```\n\n// tuple of min and max values for range filter\n\n```\n\nIf instead of using the built-in client-side faceting features, you can\nimplement your own faceting logic on the server-side and pass the faceted values\nto the client-side. You can use the and table options to resolve the faceted\nvalues from the server-side.\n\nAlternatively, you don't have to put any of your faceting logic through the\nTanStack Table APIs at all. Just fetch your lists and pass them to your filter\ncomponents directly.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBI6KQ7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/global-faceting\n\nWant to skip to the implementation? Check out these examples:\n\nGlobal Faceting allows you to generate lists of values for all columns from the\ntable's data. For example, a list of unique values in a table can be generated\nfrom all rows in all columns to be used as search suggestions in an autocomplete\nfilter component. Or, a tuple of minimum and maximum values can be generated\nfrom a table of numbers to be used as a range for a range slider filter\ncomponent.\n\nIn order to use any of the global faceting features, you must include the\nappropriate row models in your table options.\n\n```\n\n//only import the row models you need\n\n//Faceting model for client-side faceting (other faceting methods depend on this\nmodel)\n\n//if you need min/max values\n\n//if you need a list of unique values\n\n```\n\n```\n\n//only import the row models you need\n\n //Faceting model for client-side faceting (other faceting methods depend on\nthis model)\n\n //if you need min/max values\n\n //if you need a list of unique values\n\n```\n\n### [Use Global Faceted Row\nModels](https://tanstack.com/table/latest/docs/guide/<#use-global-faceted-row-\nmodels>)\n\nOnce you have included the appropriate row models in your table options, you\nwill be able to use the faceting table instance APIs to access the lists of\nvalues generated by the faceted row models.\n\n```\n\n// list of unique values for autocomplete filter\n\n```\n\n```\n\n// list of unique values for autocomplete filter\n\n```\n\n```\n\n// tuple of min and max values for range filter\n\n```\n\n```\n\n// tuple of min and max values for range filter\n\n```\n\nIf instead of using the built-in client-side faceting features, you can\nimplement your own faceting logic on the server-side and pass the faceted values\nto the client-side. You can use the getGlobalFacetedUniqueValues and\ngetGlobalFacetedMinMaxValues table options to resolve the faceted values from\nthe server-side.\n\nIn this example, we use the hook from to fetch faceting data from the server.\nOnce the data is fetched, we set the and table options to return the faceted\nvalues from the server response. This will allow the table to use the server-\nside faceting data for generating autocomplete suggestions and range filters.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBI6KJWHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/grouping\n\nWant to skip to the implementation? Check out these examples:\n\nThere are 3 table features that can reorder columns, which happen in the\nfollowing order:\n\n  1. - If pinning, columns are split into left, center (unpinned), and right pinned columns.\n  2. Manual - A manually specified column order is applied.\n  3. - If grouping is enabled, a grouping state is active, and is set to , then the grouped columns are reordered to the start of the column flow.\n\nGrouping in TanStack table is a feature that applies to columns and allows you\nto categorize and organize the table rows based on specific columns. This can be\nuseful in cases where you have a large amount of data and you want to group them\ntogether based on certain criteria.\n\nTo use the grouping feature, you will need to use the grouped row model. This\nmodel is responsible for grouping the rows based on the grouping state.\n\n```\n\n```\n\nWhen grouping state is active, the table will add matching rows as subRows to\nthe grouped row. The grouped row will be added to the table rows at the same\nindex as the first matching row. The matching rows will be removed from the\ntable rows. To allow the user to expand and collapse the grouped rows, you can\nuse the expanding feature.\n\n```\n\n```\n\nThe grouping state is an array of strings, where each string is the ID of a\ncolumn to group by. The order of the strings in the array determines the order\nof the grouping. For example, if the grouping state is ['column1', 'column2'],\nthen the table will first group by column1, and then within each group, it will\ngroup by column2. You can control the grouping state using the setGrouping\nfunction:\n\nYou can also reset the grouping state to its initial state using the\nresetGrouping function:\n\nBy default, when a column is grouped, it is moved to the start of the table. You\ncan control this behavior using the groupedColumnMode option. If you set it to\n'reorder', then the grouped columns will be moved to the start of the table. If\nyou set it to 'remove', then the grouped columns will be removed from the table.\nIf you set it to false, then the grouped columns will not be moved or removed.\n\nWhen rows are grouped, you can aggregate the data in the grouped rows by columns\nusing the aggregationFn option. This is a string that is the ID of the\naggregation function. You can define the aggregation functions using the\naggregationFns option.\n\nIn the above example, the sum aggregation function will be used to aggregate the\ndata in the grouped rows. By default, numeric columns will use the sum\naggregation function, and non-numeric columns will use the count aggregation\nfunction. You can override this behavior by specifying the aggregationFn option\nin the column definition.\n\nThere are several built-in aggregation functions that you can use:\n\n  * sum - Sums the values in the grouped rows.\n  * count - Counts the number of rows in the grouped rows.\n  * min - Finds the minimum value in the grouped rows.\n  * max - Finds the maximum value in the grouped rows.\n  * extent - Finds the extent (min and max) of the values in the grouped rows.\n  * mean - Finds the mean of the values in the grouped rows.\n  * median - Finds the median of the values in the grouped rows.\n  * unique - Returns an array of unique values in the grouped rows.\n  * uniqueCount - Counts the number of unique values in the grouped rows.\n\nWhen rows are grouped, you can aggregate the data in the grouped rows using the\naggregationFns option. This is a record where the keys are the IDs of the\naggregation functions, and the values are the aggregation functions themselves.\nYou can then reference these aggregation functions in a column's aggregationFn\noption.\n\n```\n\n   // return the aggregated value\n\n```\n\n```\n\n   // return the aggregated value\n\n```\n\nIn the above example, myCustomAggregation is a custom aggregation function that\ntakes the column ID, the leaf rows, and the child rows, and returns the\naggregated value. You can then use this aggregation function in a column's\naggregationFn option:\n\nIf you are doing server-side grouping and aggregation, you can enable manual\ngrouping using the manualGrouping option. When this option is set to true, the\ntable will not automatically group rows using getGroupedRowModel() and instead\nwill expect you to manually group the rows before passing them to the table.\n\n> There are not currently many known easy ways to do server-side grouping with\n> TanStack Table. You will need to do lots of custom cell rendering to make this\n> work.\nIf you want to manage the grouping state yourself, you can use the\nonGroupingChange option. This option is a function that is called when the\ngrouping state changes. You can pass the managed state back to the table via the\ntableOptions.state.grouping option.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBI6KJYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/expanding\n\nWant to skip to the implementation? Check out these examples:\n\nExpanding is a feature that allows you to show and hide additional rows of data\nrelated to a specific row. This can be useful in cases where you have\nhierarchical data and you want to allow users to drill down into the data from a\nhigher level. Or it can be useful for showing additional information related to\na row.\n\n### [Different use cases for Expanding\nFeatures](https://tanstack.com/table/latest/docs/guide/<#different-use-cases-\nfor-expanding-features>)\n\nThere are multiple use cases for expanding features in TanStack Table that will\nbe discussed below.\n\n  1. Expanding sub-rows (child rows, aggregate rows, etc.)\n  2. Expanding custom UI (detail panels, sub-tables, etc.)\n\nTo use the client-side expanding features, you need to define the\ngetExpandedRowModel function in your table options. This function is responsible\nfor returning the expanded row model.\n\nExpanded data can either contain table rows or any other data you want to\ndisplay. We will discuss how to handle both cases in this guide.\n\n### [Table rows as expanded\ndata](https://tanstack.com/table/latest/docs/guide/<#table-rows-as-expanded-\ndata>)\n\nExpanded rows are essentially child rows that inherit the same column structure\nas their parent rows. If your data object already includes these expanded rows\ndata, you can utilize the function to specify these child rows. However, if your\ndata object does not contain the expanded rows data, they can be treated as\ncustom expanded data, which is discussed in next section.\n\nFor example, if you have a data object like this:\n\n```\n\n```\n\nThen you can use the getSubRows function to return the children array in each\nrow as expanded rows. The table instance will now understand where to look for\nthe sub rows on each row.\n\n```\n\n// return the children array as sub-rows\n\n```\n\n```\n\n // return the children array as sub-rows\n\n```\n\n> You can have a complicated function, but keep in mind that it will run for\n> every row and every sub-row. This can be expensive if the function is not\n> optimized. Async functions are not supported.\nIn some cases, you may wish to show extra details or information, which may or\nmay not be part of your table data object, such as expanded data for rows. This\nkind of expanding row UI has gone by many names over the years including\n\"expandable rows\", \"detail panels\", \"sub-components\", etc.\n\nBy default, the row instance API will return false unless it finds on a row.\nThis can be overridden by implementing your own function in the table instance\noptions.\n\n```\n\n// Add your logic to determine if a row can be expanded. True means all rows\ninclude expanded data\n\n/* Normal row UI */\n\n/* If the row is expanded, render the expanded UI as a separate row with a\nsingle cell that spans the width of the table */\n\n // The number of columns you wish to span for the expanded data if it is not a\nrow that shares the same columns as the parent row\n\n      // Your custom UI goes here\n\n```\n\n```\n\n // Add your logic to determine if a row can be expanded. True means all rows\ninclude expanded data\n\n/* Normal row UI */\n\n/* If the row is expanded, render the expanded UI as a separate row with a\nsingle cell that spans the width of the table */\n\n // The number of columns you wish to span for the expanded data if it is not a\nrow that shares the same columns as the parent row\n\n      // Your custom UI goes here\n\n```\n\nIf you need to control the expanded state of the rows in your table, you can do\nso by using the expanded state and the option. This allows you to manage the\nexpanded state according to your requirements.\n\n```\n\n// must pass expanded state back to the table\n\n```\n\n```\n\n // must pass expanded state back to the table\n\n```\n\nThe ExpandedState type is defined as follows:\n\nIf the ExpandedState is true, it means all rows are expanded. If it's a record,\nonly the rows with IDs present as keys in the record and have their value set to\ntrue are expanded. For example, if the expanded state is { row1: true, row2:\nfalse }, it means the row with ID row1 is expanded and the row with ID row2 is\nnot expanded. This state is used by the table to determine which rows are\nexpanded and should display their subRows, if any.\n\n### [UI toggling handler for expanded\nrows](https://tanstack.com/table/latest/docs/guide/<#ui-toggling-handler-for-\nexpanded-rows>)\n\nTanStack table will not add a toggling handler UI for expanded data to your\ntable. You should manually add it within each row's UI to allow users to expand\nand collapse the row. For example, you can add a button UI within the columns\ndefinition.\n\nBy default, the filtering process starts from the parent rows and moves\ndownwards. This means if a parent row is excluded by the filter, all its child\nrows will also be excluded. However, you can change this behavior by using the\noption. When this option is enabled, the filtering process starts from the leaf\n(child) rows and moves upwards. This ensures that a parent row will be included\nin the filtered results as long as at least one of its child or grandchild rows\nmeets the filter criteria. Additionally, you can control how deep into the child\nhierarchy the filter process goes by using the option. This option allows you to\nspecify the maximum depth of child rows that the filter should consider.\n\n```\n\n// search through the expanded rows\n\n// limit the depth of the expanded rows that are searched\n\n```\n\n```\n\n // search through the expanded rows\n\n // limit the depth of the expanded rows that are searched\n\n```\n\nBy default, expanded rows are paginated along with the rest of the table (which\nmeans expanded rows may span multiple pages). If you want to disable this\nbehavior (which means expanded rows will always render on their parents page.\nThis also means more rows will be rendered than the set page size) you can use\nthe option.\n\nPinning expanded rows works the same way as pinning regular rows. You can pin\nexpanded rows to the top or bottom of the table. Please refer to the for more\ninformation on row pinning.\n\nBy default, expanded rows are sorted along with the rest of the table.\n\nIf you are doing server-side expansion, you can enable manual row expansion by\nsetting the manualExpanding option to true. This means that the will not be used\nto expand rows and you would be expected to perform the expansion in your own\ndata model.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBI6K7IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/pinning\n\nPinning is split into 2 different feature guides:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCE7I52JKC67DT2QYF67IT27YCA7IK2JWFTBI6K77HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/pagination\n\nWant to skip to the implementation? Check out these examples:\n\nTanStack Table has great support for both client-side and server-side\npagination. This guide will walk you through the different ways to implement\npagination in your table.\n\nUsing client-side pagination means that the that you fetch will contain of the\nrows for the table, and the table instance will handle pagination logic in the\nfront-end.\n\n#### [Should You Use Client-Side\nPagination?](https://tanstack.com/table/latest/docs/guide/<#should-you-use-\nclient-side-pagination>)\n\nClient-side pagination is usually the simplest way to implement pagination when\nusing TanStack Table, but it might not be practical for very large datasets.\n\nHowever, a lot of people underestimate just how much data can be handled client-\nside. If your table will only ever have a few thousand rows or less, client-side\npagination can still be a viable option. TanStack Table is designed to scale up\nto 10s of thousands of rows with decent performance for pagination, filtering,\nsorting, and grouping. The loads 100,000 rows and still performs well, albeit\nwith only handful of columns.\n\nEvery use-case is different and will depend on the complexity of the table, how\nmany columns you have, how large every piece of data is, etc. The main\nbottlenecks to pay attention to are:\n\n  1. Can your server query all of the data in a reasonable amount of time (and cost)?\n  2. What is the total size of the fetch? (This might not scale as badly as you think if you don't have many columns.)\n  3. Is the client's browser using too much memory if all of the data is loaded at once?\n\nIf you're not sure, you can always start with client-side pagination and then\nswitch to server-side pagination in the future as your data grows.\n\n#### [Should You Use Virtualization\nInstead?](https://tanstack.com/table/latest/docs/guide/<#should-you-use-\nvirtualization-instead>)\n\nAlternatively, instead of paginating the data, you can render all rows of a\nlarge dataset on the same page, but only use the browser's resources to render\nthe rows that are visible in the viewport. This strategy is often called\n\"virtualization\" or \"windowing\". TanStack offers a virtualization library called\nthat can work well with TanStack Table. The UI/UX of both virtualization and\npagination have their own trade-offs, so see which one works best for your use-\ncase.\n\nIf you want to take advantage of the built-in client-side pagination in TanStack\nTable, you first need to pass in the pagination row model.\n\n```\n\n { useReactTable, getCoreRowModel, getPaginationRowModel }\n\n```\n\nIf you decide that you need to use server-side pagination, here is how you can\nimplement it.\n\nNo pagination row model is needed for server-side pagination, but if you have\nprovided it for other tables that do need it in a shared component, you can\nstill turn off the client-side pagination by setting the option to . Setting the\noption to will tell the table instance to use the row model under the hood, and\nit will make the table instance assume that the that you pass in is already\npaginated.\n\n#### [Page Count and Row\nCount](https://tanstack.com/table/latest/docs/guide/<#page-count-and-row-count>)\n\nThe table instance will have no way of knowing how many rows/pages there are in\ntotal in your back-end unless you tell it. Provide either the or table option to\nlet the table instance know how many pages there are in total. If you provide a\n, the table instance will calculate the internally from and . Otherwise, you can\ndirectly provide the if you already have it. If you don't know the page count,\nyou can just pass in for the , but the and row model functions will always\nreturn in this case.\n\n```\n\n { useReactTable, getCoreRowModel, getPaginationRowModel }\n\n // getPaginationRowModel: getPaginationRowModel(), //not needed for server-side\npagination\n\n//pass in the total row count so the table knows how many pages there are\n(pageCount calculated internally if not provided)\n\n // pageCount: dataQuery.data?.pageCount, //alternatively directly pass in\npageCount instead of rowCount\n\n```\n\n```\n\n // getPaginationRowModel: getPaginationRowModel(), //not needed for server-side\npagination\n\n //pass in the total row count so the table knows how many pages there are\n(pageCount calculated internally if not provided)\n\n // pageCount: dataQuery.data?.pageCount, //alternatively directly pass in\npageCount instead of rowCount\n\n```\n\n> : Setting the option to will make the table instance assume that the that you\n> pass in is already paginated.\nWhether or not you are using client-side or manual server-side pagination, you\ncan use the built-in state and APIs.\n\nThe state is an object that contains the following properties:\n\n  * : The current page index (zero-based).\n  * : The current page size.\n\nYou can manage the state just like any other state in the table instance.\n\n```\n\n { useReactTable, getCoreRowModel, getPaginationRowModel }\n\n//update the pagination state when internal APIs mutate the pagination state\n\n```\n\n```\n\n //update the pagination state when internal APIs mutate the pagination state\n\n```\n\nAlternatively, if you have no need for managing the state in your own scope, but\nyou need to set different initial values for the and , you can use the option.\n\n```\n\n```\n\n```\n\n```\n\n> : Do NOT pass the state to both the and options. will overwrite . Only use one\n> or the other.\nBesides the , , and options which are useful for manual server-side pagination\n(and discussed ), there is one other table option that is useful to understand.\n\nBy default, is reset to when page-altering state changes occur, such as when the\nis updated, filters change, grouping changes, etc. This behavior is\nautomatically disabled when is true but it can be overridden by explicitly\nassigning a boolean value to the table option.\n\n```\n\n//turn off auto reset of pageIndex\n\n```\n\n```\n\n //turn off auto reset of pageIndex\n\n```\n\nBe aware, however, that if you turn off , you may need to add some logic to\nhandle resetting the yourself to avoid showing empty pages.\n\nThere are several pagination table instance APIs that are useful for hooking up\nyour pagination UI components.\n\n  * : Useful for disabling the \"previous page\" button when on the first page.\n  * : Useful for disabling the \"next page\" button when there are no more pages.\n  * : Useful for going to the previous page. (Button click handler)\n  * : Useful for going to the next page. (Button click handler)\n  * : Useful for going to the first page. (Button click handler)\n  * : Useful for going to the last page. (Button click handler)\n  * : Useful for a \"go to page\" input.\n  * : Useful for resetting the table state to the original page index.\n  * : Useful for a \"page size\" input/select.\n  * : Useful for resetting the table state to the original page size.\n  * : Useful for setting all of the pagination state at once.\n  * : Useful for resetting the table state to the original pagination state.\n\n> : Some of these APIs are new in .\n  * : Useful for showing the total number of pages.\n  * : Useful for showing the total number of rows.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBI623LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# UI for Virtualizing Large Element Lists\nURL: https://tanstack.com/virtual/latest\n\n##  UI for Virtualizing Large Element Lists\n\nVirtualize only the visible DOM nodes within massive scrollable elements at\n60FPS in TS/JS, React, Vue, Solid, Svelte, Lit & Angular while retaining 100%\ncontrol over markup and styles.\n\nHeadless Virtualization means you're always in control of your . Go design and\nimplement the most beautiful UI you can dream up and let us take care of the\nhard parts.\n\nDon't be fooled by the small bundle size. TanStack Virtual uses every byte to\ndeliver powerful performance. After all, these days and we refuse to sacrifice\nanything for that üßà-y smooth UX.\n\nWith a single function/hook, you'll get limitless virtualization for layouts.\nThe API is tiny (literally 1 function), but its composability is not.\n\n### Framework Agnostic & Feature Rich\n\nTanStack Virtual's API and engine are highly modular and framework-independent\nwhile still prioritizing ergonomics. Behold, the obligatory feature-list:\n\nWe're looking for a TanStack Virtual OSS Partner to go above and beyond the call\nof sponsorship. Are you as invested in TanStack Virtual as we are? Let's push\nthe boundaries of Virtual together!\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/virtual/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBI453WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\n### Take it for a spin!\n\nWith just a few divs and some inline styles, you're already well on your way to\ncreating an extremely powerful virtualization experience.\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank\nTracker](https://tanstack.com/virtual/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/row-pinning\n\nWant to skip to the implementation? Check out these examples:\n\nThere are 2 table features that can reorder rows, which happen in the following\norder:\n\n  1. - If pinning, rows are split into top, center (unpinned), and bottom pinned rows.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Streamline software patching and vulnerability response on macOS. Deploy\nWorkbrew ‚Äì it‚Äôs free.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCKSDK2JKC67DT2QYF67IT27YCA7IK2JWFTBI45QEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/row-selection\n\nWant to skip to the implementation? Check out these examples:\n\nThe row selection feature keeps track of which rows are selected and allows you\nto toggle the selection of rows in a myriad of ways. Let's take a look at some\ncommon use cases.\n\nThe table instance already manages the row selection state for you (though as\nseen down below, it may be more convenient to manage the row selection state in\nyour own scope). You can access the internal row selection state or the selected\nrows from a few APIs.\n\n  * - returns the internal row selection state\n  * - returns selected rows after filtering\n  * - returns selected rows after grouping and sorting\n\n```\n\n//get the row selection state - { 1: true, 2: false, etc... }\n\n//get full client-side selected rows\n\n//get filtered client-side selected rows\n\n//get grouped client-side selected rows\n\n```\n\n```\n\n //get the row selection state - { 1: true, 2: false, etc... }\n\n //get full client-side selected rows\n\n //get filtered client-side selected rows\n\n //get grouped client-side selected rows\n\n```\n\n> Note: If you are using , be aware that the API will only return selected rows\n> on the current page because table row models can only generate rows based on\n> the that is passed in. Row selection state, however, can contain row ids that\n> are not present in the array just fine.\nEven though the table instance will already manage the row selection state for\nyou, it is usually more convenient to manage the state yourself in order to have\neasy access to the selected row ids that you can use to make API calls or other\nactions.\n\nUse the table option to hoist up the row selection state to your own scope. Then\npass the row selection state back to the table instance using in the table\noption.\n\n```\n\n//manage your own row selection state\n\n//hoist up the row selection state to your own scope\n\n//pass the row selection state back to the table instance\n\n```\n\n```\n\n //manage your own row selection state\n\n //hoist up the row selection state to your own scope\n\n //pass the row selection state back to the table instance\n\n```\n\nBy default, the row id for each row is simply the . If you are using row\nselection features, you most likely want to use a more useful row identifier,\nsince the row selection state is keyed by row id. You can use the table option\nto specify a function that returns a unique row id for each row.\n\n```\n\n//use the row's uuid from your database as the row id\n\n```\n\n```\n\n //use the row's uuid from your database as the row id\n\n```\n\nNow as rows are selected, the row selection state will look something like this:\n\nRow selection is enabled by default for all rows. To either enable row selection\nconditionally for certain rows or disable row selection for all rows, you can\nuse the table option which accepts either a boolean or a function for more\ngranular control.\n\n```\n\n//only enable row selection for adults\n\n```\n\n```\n\n //only enable row selection for adults\n\n```\n\nTo enforce whether a row is selectable or not in your UI, you can use the API\nfor your checkboxes or other selection UI.\n\nBy default, the table allows multiple rows to be selected at once. If, however,\nyou only want to allow a single row to be selected at once, you can set the\ntable option to to disable multi-row selection, or pass in a function to disable\nmulti-row selection conditionally for a row's sub-rows.\n\nThis is useful for making tables that have radio buttons instead of checkboxes.\n\n```\n\n//only allow a single row to be selected at once\n\n // enableMultiRowSelection: row => row.original.age > 18, //only allow a single\nrow to be selected at once for adults\n\n```\n\n```\n\n //only allow a single row to be selected at once\n\n // enableMultiRowSelection: row => row.original.age > 18, //only allow a single\nrow to be selected at once for adults\n\n```\n\nBy default, selecting a parent row will select all of its sub-rows. If you want\nto disable auto sub-row selection, you can set the table option to to disable\nsub-row selection, or pass in a function to disable sub-row selection\nconditionally for a row's sub-rows.\n\n```\n\n // enableSubRowSelection: row => row.original.age > 18, //disable sub-row\nselection for adults\n\n```\n\n```\n\n // enableSubRowSelection: row => row.original.age > 18, //disable sub-row\nselection for adults\n\n```\n\nTanStack table does not dictate how you should render your row selection UI. You\ncan use checkboxes, radio buttons, or simply hook up click events to the row\nitself. The table instance provides a few APIs to help you render your row\nselection UI.\n\n#### [Connect Row Selection APIs to Checkbox\nInputs](https://tanstack.com/table/latest/docs/guide/<#connect-row-selection-\napis-to-checkbox-inputs>)\n\nTanStack Table provides some handler functions that you can connect directly to\nyour checkbox inputs to make it easy to toggle row selection. These function\nautomatically call other internal APIs to update the row selection state and re-\nrender the table.\n\nUse the API to connect to your checkbox inputs to toggle the selection of a row.\n\nUse the or APIs to connect to your \"select all\" checkbox input to toggle the\nselection of all rows.\n\nIf you need more granular control over these function handlers, you can always\njust use the or APIs directly. Or you can even just call the API to directly set\nthe row selection state just as you would with any other state updater. These\nhandler functions are just a convenience.\n\n```\n\n```\n\n```\n\n```\n\n#### [Connect Row Selection APIs to\nUI](https://tanstack.com/table/latest/docs/guide/<#connect-row-selection-apis-\nto-ui>)\n\nIf you want a simpler row selection UI, you can just hook up click events to the\nrow itself. The API is also useful for this use case.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBI45QIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/vue/row-selection\n\nThe page you are looking for does not exist.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/table/latest/docs/framework/vue/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBI45Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/sorting\n\nWant to skip to the implementation? Check out these examples:\n\nTanStack Table provides solutions for just about any sorting use-case you might\nhave. This guide will walk you through the various options that you can use to\ncustomize the built-in client-side sorting functionality, as well as how to opt\nout of client-side sorting in favor of manual server-side sorting.\n\nThe sorting state is defined as an array of objects with the following shape:\n\nSince the sorting state is an array, it is possible to sort by multiple columns\nat once. Read more about the multi-sorting customizations down .\n\nYou can access the sorting state directly from the table instance just like any\nother state using the API.\n\n```\n\n// access the sorting state from the table instance\n\n```\n\n```\n\n // access the sorting state from the table instance\n\n```\n\nHowever, if you need to access the sorting state before the table is\ninitialized, you can \"control\" the sorting state like down below.\n\nIf you need easy access to the sorting state, you can control/manage the sorting\nstate in your own state management with the and table options.\n\n```\n\n// can set initial sorting state here\n\n// use sorting state to fetch data from your server or something...\n\n```\n\n```\n\n // can set initial sorting state here\n\n// use sorting state to fetch data from your server or something...\n\n```\n\nIf you do not need to control the sorting state in your own state management or\nscope, but you still want to set an initial sorting state, you can use the table\noption instead of .\n\n```\n\n// sort by name in descending order by default\n\n```\n\n```\n\n // sort by name in descending order by default\n\n```\n\n> : Do not use both and at the same time, as the initialized state in the will\n> override the .\nWhether or not you should use client-side or server-side sorting depends\nentirely on whether you are also using client-side or server-side pagination or\nfiltering. Be consistent, because using client-side sorting with server-side\npagination or filtering will only sort the data that is currently loaded, and\nnot the entire dataset.\n\nIf you plan to just use your own server-side sorting in your back-end logic, you\ndo not need to provide a sorted row model. But if you have provided a sorting\nrow model, but you want to disable it, you can use the table option.\n\n```\n\n //getSortedRowModel: getSortedRowModel(), //not needed for manual sorting\n\n//use pre-sorted row model instead of sorted row model\n\n```\n\n```\n\n //getSortedRowModel: getSortedRowModel(), //not needed for manual sorting\n\n //use pre-sorted row model instead of sorted row model\n\n```\n\n> : When is set to , the table will assume that the data that you provide is\n> already sorted, and will not apply any sorting to it.\nTo implement client-side sorting, first you have to provide a sorting row model\nto the table. You can import the function from TanStack Table, and it will be\nused to transform your rows into sorted rows.\n\n```\n\n//provide a sorting row model\n\n```\n\n```\n\n //provide a sorting row model\n\n```\n\nThe default sorting function for all columns is inferred from the data type of\nthe column. However, it can be useful to define the exact sorting function that\nyou want to use for a specific column, especially if any of your data is\nnullable or not a standard data type.\n\nYou can determine a custom sorting function on a per-column basis using the\ncolumn option.\n\nBy default, there are 6 built-in sorting functions to choose from:\n\n  * - Sorts by mixed alphanumeric values without case-sensitivity. Slower, but more accurate if your strings contain numbers that need to be naturally sorted.\n  * - Sorts by mixed alphanumeric values with case-sensitivity. Slower, but more accurate if your strings contain numbers that need to be naturally sorted.\n  * - Sorts by text/string values without case-sensitivity. Faster, but less accurate if your strings contain numbers that need to be naturally sorted.\n  * - Sorts by text/string values with case-sensitivity. Faster, but less accurate if your strings contain numbers that need to be naturally sorted.\n  * - Sorts by time, use this if your values are objects.\n  * - Sorts using a basic/standard a > b ? 1 : a < b ? -1 : 0 comparison. This is the fastest sorting function, but may not be the most accurate.\n\nYou can also define your own custom sorting functions either as the column\noption, or as a global sorting function using the table option.\n\nWhen defining a custom sorting function in either the table option or as a\ncolumn option, it should have the following signature:\n\n```\n\n//optionally use the SortingFn to infer the parameter types\n\n //-1, 0, or 1 - access any row data using rowA.original and rowB.original\n\n```\n\n```\n\n//optionally use the SortingFn to infer the parameter types\n\n //-1, 0, or 1 - access any row data using rowA.original and rowB.original\n\n```\n\n> Note: The comparison function does not need to take whether or not the column\n> is in descending or ascending order into account. The row models will take of\n> that logic. functions only need to provide a consistent comparison.\nEvery sorting function receives 2 rows and a column ID and are expected to\ncompare the two rows using the column ID to return , , or in ascending order.\nHere's a cheat sheet:\n\n```\n\n// use built-in sorting function by name\n\n// use custom global sorting function\n\n// recommended for date columns\n\n  // use custom sorting function directly\n\n//add a custom sorting function\n\n```\n\n```\n\n // use built-in sorting function by name\n\n // use custom global sorting function\n\n // recommended for date columns\n\n  // use custom sorting function directly\n\n //add a custom sorting function\n\n```\n\nThere are a lot of table and column options that you can use to further\ncustomize the sorting UX and behavior.\n\nYou can disable sorting for either a specific column or the entire table using\nthe column option or table option.\n\n```\n\n// disable sorting for this column\n\n// disable sorting for the entire table\n\n```\n\n```\n\n // disable sorting for this column\n\n // disable sorting for the entire table\n\n```\n\nBy default, the first sorting direction when cycling through the sorting for a\ncolumn using the APIs is ascending for string columns and descending for number\ncolumns. You can change this behavior with the column option or table option.\n\n```\n\n//sort by name in descending order first (default is ascending for string\ncolumns)\n\n//sort by age in ascending order first (default is descending for number\ncolumns)\n\n//sort by all columns in descending order first (default is ascending for string\ncolumns and descending for number columns)\n\n```\n\n```\n\n //sort by name in descending order first (default is ascending for string\ncolumns)\n\n //sort by age in ascending order first (default is descending for number\ncolumns)\n\n //sort by all columns in descending order first (default is ascending for\nstring columns and descending for number columns)\n\n```\n\n> : You may want to explicitly set the column option on any columns that have\n> nullable values. The table may not be able to properly determine if a column\n> is a number or a string if it contains nullable values.\nInverting sorting is not the same as changing the default sorting direction. If\ncolumn option is for a column, then the \"desc/asc\" sorting states will still\ncycle like normal, but the actual sorting of the rows will be inverted. This is\nuseful for values that have an inverted best/worst scale where lower numbers are\nbetter, eg. a ranking (1st, 2nd, 3rd) or golf-like scoring.\n\n```\n\n// invert the sorting for this column. 1st -> 2nd -> 3rd -> ... even if \"desc\"\nsorting is applied\n\n```\n\n```\n\n // invert the sorting for this column. 1st -> 2nd -> 3rd -> ... even if \"desc\"\nsorting is applied\n\n```\n\nAny undefined values will be sorted to the beginning or end of the list based on\nthe column option or table option. You can customize this behavior for your\nspecific use-case.\n\nIn not specified, the default value for is , and undefined values will be sorted\nwith lower priority (descending), if ascending, undefined will appear on the end\nof the list.\n\n  * - Undefined values will be pushed to the beginning of the list\n  * - Undefined values will be pushed to the end of the list\n  * - Undefined values will be considered tied and need to be sorted by the next column filter or original index (whichever applies)\n  * - Undefined values will be sorted with higher priority (ascending) (if ascending, undefined will appear on the beginning of the list)\n  * - Undefined values will be sorted with lower priority (descending) (if ascending, undefined will appear on the end of the list)\n\n> NOTE: and options are new in v8.16.0\n```\n\n// 'first' | 'last' | 1 | -1 | false\n\n```\n\n```\n\n // 'first' | 'last' | 1 | -1 | false\n\n```\n\nBy default, the ability to remove sorting while cycling through the sorting\nstates for a column is enabled. You can disable this behavior using the table\noption. This behavior is useful if you want to ensure that at least one column\nis always sorted.\n\nThe default behavior when using either the or APIs is to cycle through the\nsorting states like this:\n\n'none' -> 'desc' -> 'asc' -> 'none' -> 'desc' -> 'asc' -> ...\n\nIf you disable sorting removal, the behavior will be like this:\n\n'none' -> 'desc' -> 'asc' -> 'desc' -> 'asc' -> ...\n\nOnce a column is sorted and is , toggling the sorting on that column will never\nremove the sorting. However, if the user sorts by another column and it is not a\nmulti-sort event, then the sorting will be removed from the previous column and\njust applied to the new column.\n\n> Set to if you want to ensure that at least one column is always sorted.\n```\n\n// disable the ability to remove sorting on columns (always none -> asc -> desc\n-> asc)\n\n```\n\n```\n\n // disable the ability to remove sorting on columns (always none -> asc -> desc\n-> asc)\n\n```\n\nSorting by multiple columns at once is enabled by default if using the API. If\nthe user holds the key while clicking on a column header, the table will sort by\nthat column in addition to the columns that are already sorted. If you use the\nAPI, you have to manually pass in whether or not to use multi-sorting. ().\n\nYou can disable multi-sorting for either a specific column or the entire table\nusing the column option or table option. Disabling multi-sorting for a specific\ncolumn will replace all existing sorting with the new column's sorting.\n\n```\n\n// always sort by just this column if sorting by this column\n\n// disable multi-sorting for the entire table\n\n```\n\n```\n\n // always sort by just this column if sorting by this column\n\n // disable multi-sorting for the entire table\n\n```\n\nBy default, the key is used to trigger multi-sorting. You can change this\nbehavior with the table option. You can even specify that all sorting events\nshould trigger multi-sorting by returning from the custom function.\n\n```\n\n// normal click triggers multi-sorting\n\n// also use the `Ctrl` key to trigger multi-sorting\n\n```\n\n```\n\n // normal click triggers multi-sorting\n\n // also use the `Ctrl` key to trigger multi-sorting\n\n```\n\nBy default, there is no limit to the number of columns that can be sorted at\nonce. You can set a limit using the table option.\n\n```\n\n// only allow 3 columns to be sorted at once\n\n```\n\n```\n\n // only allow 3 columns to be sorted at once\n\n```\n\nBy default, the ability to remove multi-sorts is enabled. You can disable this\nbehavior using the table option.\n\n```\n\n// disable the ability to remove multi-sorts\n\n```\n\n```\n\n // disable the ability to remove multi-sorts\n\n```\n\nThere are a lot of sorting related APIs that you can use to hook up to your UI\nor other logic. Here is a list of all of the sorting APIs and some of their use-\ncases.\n\n  * - Set the sorting state directly.\n  * - Reset the sorting state to the initial state or clear it.\n  * - Useful for enabling/disabling the sorting UI for a column.\n  * - Useful for showing a visual sorting indicator for a column.\n  * - Useful for hooking up the sorting UI for a column. Add to a sort arrow (icon button), menu item, or simply the entire column header cell. This handler will call with the correct parameters.\n  * - Useful for hooking up the sorting UI for a column. If using instead of , you have to manually pass in whether or not to use multi-sorting. ()\n  * - Useful for a \"clear sorting\" button or menu item for a specific column.\n  * - Useful for showing which direction the column will sort by next. (asc/desc/clear in a tooltip/menu item/aria-label or something)\n  * - Useful for showing which direction the column will sort by first. (asc/desc in a tooltip/menu item/aria-label or something)\n  * - Determines whether the first sorting direction will be ascending or descending for a column.\n  * - Used internally to find the default sorting function for a column if none is specified.\n  * - Returns the exact sorting function being used for a column.\n  * - Useful for enabling/disabling the multi-sorting UI for a column.\n  * - Useful for showing a badge or indicator of the column's sort order in a multi-sort scenario. i.e. whether or not it is the first, second, third, etc. column to be sorted.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBI6K3LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/virtualization\n\nWant to skip to the implementation? Check out these examples:\n\nThe TanStack Table packages do not come with any virtualization APIs or features\nbuilt-in, but TanStack Table can easily work with other virtualization libraries\nlike or TanStack's own . This guide will show some strategies for using TanStack\nTable with TanStack Virtual.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Simplify infrastructure with MongoDB Atlas, the leading developer data\nplatform.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKBDCZ3JCA7ILK3ICWAI42QKC67DT2QYF67IT27YCA7IK2JWFTBI6K37HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Wow, it looks like you could be our first partner for this library!\nURL: https://tanstack.com/virtual/v3/docs/framework/react/examples/table\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/virtual/v3/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBI6KQLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# The class is the core of TanStack Virtual. Virtualizer instances are usually\nURL: https://tanstack.com/virtual/v3/docs/api/virtualizer\n\nThe class is the core of TanStack Virtual. Virtualizer instances are usually\ncreated for you by your framework adapter, but you do receive the virtualizer\ndirectly.\n\nThe total number of items to virtualize.\n\nA function that returns the scrollable element for the virtualizer. It may\nreturn null if the element is not available yet.\n\n> üß† If you are dynamically measuring your elements, it's recommended to estimate\n> the largest possible size (width/height, within comfort) of your items. This\n> will ensure features like smooth-scrolling will have a better chance at\n> working correctly.\nThis function is passed the index of each item and should return the actual size\n(or estimated size if you will be dynamically measuring items with ) for each\nitem. This measurement should return either the width or height depending on the\norientation of your virtualizer.\n\nSet to to disable scrollElement observers and reset the virtualizer's state\n\nSet to to enable debug logs\n\nThe initial of the scrollElement. This is mostly useful if you need to run the\nvirtualizer in an SSR environment, otherwise the initialRect will be calculated\non mount by the implementation.\n\nA callback function that fires when the virtualizer's internal state changes.\nIt's passed the virtualizer instance.\n\nThe number of items to render above and below the visible area. Increasing this\nnumber will increase the amount of time it takes to render the virtualizer, but\nmight decrease the likelihood of seeing slow-rendering blank items at the top\nand bottom of the virtualizer when scrolling.\n\nSet this to if your virtualizer is oriented horizontally.\n\nThe padding to apply to the start of the virtualizer in pixels.\n\nThe padding to apply to the end of the virtualizer in pixels.\n\nThe padding to apply to the start of the virtualizer in pixels when scrolling to\nan element.\n\nThe padding to apply to the end of the virtualizer in pixels when scrolling to\nan element.\n\nThe initial offset to apply to the virtualizer. This is usually only useful if\nyou are rendering the virtualizer in a SSR environment.\n\nThis function is passed the index of each item and should return a unique key\nfor that item. The default functionality of this function is to return the index\nof the item, but you should override this when possible to return a unique\nidentifier for each item across the entire set. This function should be memoized\nto prevent unnecessary re-renders.\n\nThis function receives visible range indexes and should return array of indexes\nto render. This is useful if you need to add or remove items from the\nvirtualizer manually regardless of the visible range, eg. rendering sticky\nitems, headers, footers, etc. The default range extractor implementation will\nreturn the visible range indexes and is exported as .\n\n```\n\n options: { adjustments?: number; behavior\n\n```\n\nAn optional function that (if provided) should implement the scrolling behavior\nfor your scrollElement. It will be called with the following arguments:\n\n  * An (in pixels) to scroll towards.\n  * An object indicating whether there was a difference between the estimated size and actual size () and/or whether scrolling was called with a smooth animation ().\n\nNote that built-in scroll implementations are exported as and , which are\nautomatically configured by the framework adapter functions like or .\n\n> ‚ö†Ô∏è Attempting to use smoothScroll with dynamically measured elements will not\n> work.\n```\n\n```\n\nAn optional function that if provided is called when the scrollElement changes\nand should implement the initial measurement and continuous monitoring of the\nscrollElement's (an object with and ). It's called with the instance (which also\ngives you access to the scrollElement via . Built-in implementations are\nexported as and which are automatically configured for you by your framework\nadapter's exported functions like or .\n\n```\n\n```\n\nAn optional function that if provided is called when the scrollElement changes\nand should implement the initial measurement and continuous monitoring of the\nscrollElement's scroll offset (a number). It's called with the instance (which\nalso gives you access to the scrollElement via . Built-in implementations are\nexported as and which are automatically configured for you by your framework\nadapter's exported functions like or .\n\n```\n\n```\n\nThis optional function is called when the virtualizer needs to dynamically\nmeasure the size (width or height) of an item.\n\n> üß† You can use to determine if the width or height of the item should be\n> measured.\nWith this option, you can specify where the scroll offset should originate.\nTypically, this value represents the space between the beginning of the\nscrolling element and the start of the list. This is especially useful in common\nscenarios such as when you have a header preceding a window virtualizer or when\nmultiple virtualizers are utilized within a single scrolling element. If you are\nusing absolute positioning of elements, you should take into account the in your\nCSS transform:\n\nTo dynamically measure value for you can use or ResizeObserver. This is helpful\nin scenarios when items above your virtual list might change their height.\n\nThis option allows you to set the spacing between items in the virtualized list.\nIt's particularly useful for maintaining a consistent visual separation between\nitems without having to manually adjust each item's margin or padding. The value\nis specified in pixels.\n\nThe number of lanes the list is divided into (aka columns for vertical lists and\nrows for horizontal lists).\n\nThis option allows you to specify the duration to wait after the last scroll\nevent before resetting the isScrolling instance property. The default value is\n150 milliseconds.\n\nThe implementation of this option is driven by the need for a reliable mechanism\nto handle scrolling behavior across different browsers. Until all browsers\nuniformly support the scrollEnd event.\n\nThis option allows you to switch to use debounced fallback to reset the\nisScrolling instance property after milliseconds. The default value is .\n\nThe implementation of this option is driven by the need for a reliable mechanism\nto handle scrolling behavior across different browsers. Until all browsers\nuniformly support the scrollEnd event.\n\nWhether to invert horizontal scrolling to support right-to-left language\nlocales.\n\nThis option enables wrapping ResizeObserver measurements in\nrequestAnimationFrame for smoother updates and reduced layout thrashing. The\ndefault value is .\n\nIt helps prevent the \"ResizeObserver loop completed with undelivered\nnotifications\" error by ensuring that measurements align with the rendering\ncycle. This can improve performance and reduce UI jitter, especially when\nresizing elements dynamically. However, since ResizeObserver already runs\nasynchronously, adding requestAnimationFrame may introduce a slight delay in\nmeasurements, which could be noticeable in some cases. If resizing operations\nare lightweight and do not cause reflows, enabling this option may not provide\nsignificant benefits.\n\nThe following properties and methods are available on the virtualizer instance:\n\nThe current options for the virtualizer. This property is updated via your\nframework adapter and is read-only.\n\nThe current scrollElement for the virtualizer. This property is updated via your\nframework adapter and is read-only.\n\nReturns the virtual items for the current state of the virtualizer.\n\nReturns the virtual row indexes for the current state of the virtualizer.\n\nScrolls the virtualizer to the pixel offset provided. You can optionally pass an\nalignment mode to anchor the scroll to a specific part of the scrollElement.\n\nScrolls the virtualizer to the items of the index provided. You can optionally\npass an alignment mode to anchor the scroll to a specific part of the\nscrollElement.\n\nReturns the total size in pixels for the virtualized items. This measurement\nwill incrementally change if you choose to dynamically measure your elements as\nthey are rendered.\n\nResets any prev item measurements.\n\nMeasures the element using your configured virtualizer option. You are\nresponsible for calling this in your virtualizer markup when the component is\nrendered (eg. using something like React's ref callback prop) also adding\n\nBy default the virtualizer option is configured to measure elements with .\n\nChange the virtualized item's size manually. Use this function to manually set\nthe size calculated for this index. Useful in occations when using some custom\nmorphing transition and you know the morphed item's size beforehand.\n\nYou can also use this method with a throttled ResizeObserver instead of to\nreduce re-rendering.\n\n> ‚ö†Ô∏è Please be aware that manually changing the size of an item when using to\n> monitor that item, will result in unpredictable behaviour as the is also\n> changing the size. However you can use one of resizeItem or measureElement in\n> the same virtualizer instance but on different item indexes.\nThe shouldAdjustScrollPositionOnItemSizeChange method enables fine-grained\ncontrol over the adjustment of scroll position when the size of dynamically\nrendered items differs from the estimated size. When jumping in the middle of\nthe list and scrolling backward new elements may have a different size than the\ninitially estimated size. This discrepancy can cause subsequent items to shift,\npotentially disrupting the user's scrolling experience, particularly when\nnavigating backward through the list.\n\nBoolean flag indicating if list is currently being scrolled.\n\nThis option indicates the direction of scrolling, with possible values being\n'forward' for scrolling downwards and 'backward' for scrolling upwards. The\nvalue is set to null when there is no active scrolling.\n\nThis option represents the current scroll position along the scrolling axis. It\nis measured in pixels from the starting point of the scrollable area.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/virtual/v3/docs/api/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBI6KQMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/custom-features\n\nWant to skip to the implementation? Check out these examples:\n\nIn this guide, we'll cover how to extend TanStack Table with custom features,\nand along the way, we'll learn more about how the TanStack Table v8 codebase is\nstructured and how it works.\n\n### [TanStack Table Strives to be\nLean](https://tanstack.com/table/latest/docs/guide/<#tanstack-table-strives-to-\nbe-lean>)\n\nTanStack Table has a core set of features that are built into the library such\nas sorting, filtering, pagination, etc. We've received a lot of requests and\nsometimes even some well thought out PRs to add even more features to the\nlibrary. While we are always open to improving the library, we also want to make\nsure that TanStack Table remains a lean library that does not include too much\nbloat and code that is unlikely to be used in most use cases. Not every PR can,\nor should, be accepted into the core library, even if it does solve a real\nproblem. This can be frustrating to developers where TanStack Table solves 90%\nof their use case, but they need a little bit more control.\n\nTanStack Table has always been built in a way that allows it to be highly\nextensible (at least since v7). The instance that is returned from whichever\nframework adapter that you are using (, , etc) is a plain JavaScript object that\ncan have extra properties or APIs added to it. It has always been possible to\nuse composition to add custom logic, state, and APIs to the table instance.\nLibraries like have simply created custom wrapper hooks around the hook to\nextend the table instance with custom functionality.\n\nHowever, starting in version 8.14.0, TanStack Table has exposed a new table\noption that allows you to more tightly and cleanly integrate custom code into\nthe table instance in exactly the same way that the built-in table features are\nalready integrated.\n\n> TanStack Table v8.14.0 introduced a new option that allows you to add custom\n> features to the table instance.\nWith this new tighter integration, you can easily add more complex custom\nfeatures to your tables, and possibly even package them up and share them with\nthe community. We'll see how this evolves over time. In a future v9 release, we\nmay even lower the bundle size of TanStack Table by making all features opt-in,\nbut that is still being explored.\n\n### [How TanStack Table Features\nWork](https://tanstack.com/table/latest/docs/guide/<#how-tanstack-table-\nfeatures-work>)\n\nTanStack Table's source code is arguably somewhat simple (at least we think so).\nAll code for each feature is split up into its own object/file with\ninstantiation methods to create initial state, default table and column options,\nand API methods that can be added to the , , , , and instances.\n\nAll of the functionality of a feature object can be described with the type that\nis exported from TanStack Table. This type is a TypeScript interface that\ndescribes the shape of a feature object needed to create a feature.\n\nThis might be a bit confusing, so let's break down what each of these methods\ndo:\n\n#### [Default Options and Initial\nState](https://tanstack.com/table/latest/docs/guide/<#default-options-and-\ninitial-state>)\n\nThe method in a table feature is responsible for setting the default table\noptions for that feature. For example, in the feature, the method sets the\ndefault option with a default value of .\n\nThe method in a table feature is responsible for setting the default column\noptions for that feature. For example, in the feature, the method sets the\ndefault column option with a default value of .\n\nThe method in a table feature is responsible for setting the default state for\nthat feature. For example, in the feature, the method sets the default state\nwith a value of and the default state with a value of .\n\nThe method in a table feature is responsible for adding methods to the instance.\nFor example, in the feature, the method adds many table instance API methods\nsuch as , , , etc. So then, when you call , you are calling a method that was\nadded to the table instance by the feature.\n\nThe method in a table feature is responsible for adding methods to the instance.\nFor example, in the feature, the method adds many header instance API methods\nsuch as , and many others. So then, when you call , you are calling a method\nthat was added to the header instance by the feature.\n\nThe method in a table feature is responsible for adding methods to the instance.\nFor example, in the feature, the method adds many column instance API methods\nsuch as , , etc. So then, when you call , you are calling a method that was\nadded to the column instance by the feature.\n\nThe method in a table feature is responsible for adding methods to the instance.\nFor example, in the feature, the method adds many row instance API methods such\nas , , etc. So then, when you call , you are calling a method that was added to\nthe row instance by the feature.\n\nThe method in a table feature is responsible for adding methods to the instance.\nFor example, in the feature, the method adds many cell instance API methods such\nas , , etc. So then, when you call , you are calling a method that was added to\nthe cell instance by the feature.\n\nLet's walk through making a custom table feature for a hypothetical use case.\nLet's say we want to add a feature to the table instance that allows the user to\nchange the \"density\" (padding of cells) of the table.\n\nCheck out the full example to see the full implementation, but here's an in-\ndepth look at the steps to create a custom feature.\n\n#### [Step 1: Set up TypeScript\nTypes](https://tanstack.com/table/latest/docs/guide/<#step-1-set-up-typescript-\ntypes>)\n\nAssuming you want the same full type-safety that the built-in features in\nTanStack Table have, let's set up all of the TypeScript types for our new\nfeature. We'll create types for new table options, state, and table instance API\nmethods.\n\nThese types are following the naming convention used internally within TanStack\nTable, but you can name them whatever you want. We are not adding these types to\nTanStack Table yet, but we'll do that in the next step.\n\n```\n\n// define types for our new feature's custom state\n\n// define types for our new feature's table options\n\n// Define types for our new feature's table APIs\n\n```\n\n```\n\n// define types for our new feature's custom state\n\n// define types for our new feature's table options\n\n// Define types for our new feature's table APIs\n\n```\n\n#### [Step 2: Use Declaration Merging to Add New Types to TanStack\nTable](https://tanstack.com/table/latest/docs/guide/<#step-2-use-declaration-\nmerging-to-add-new-types-to-tanstack-table>)\n\nWe can tell TypeScript to modify the exported types from TanStack Table to\ninclude our new feature's types. This is called \"declaration merging\" and it's a\npowerful feature of TypeScript. This way, we should not have to use any\nTypeScript hacks such as or in our new feature's code or in our application\ncode.\n\n```\n\n// Use declaration merging to add our new feature APIs and state types to\nTanStack Table's existing types.\n\n// or whatever framework adapter you are using\n\n //merge our new feature's state with the existing table state\n\n //merge our new feature's options with the existing table options\n\n //merge our new feature's instance APIs with the existing table instance APIs\n\n // if you need to add cell instance APIs...\n\n // interface Cell<TData extends RowData, TValue> extends DensityCell\n\n // if you need to add row instance APIs...\n\n // interface Row<TData extends RowData> extends DensityRow\n\n // if you need to add column instance APIs...\n\n // interface Column<TData extends RowData, TValue> extends DensityColumn\n\n // if you need to add header instance APIs...\n\n // interface Header<TData extends RowData, TValue> extends DensityHeader\n\n // Note: declaration merging on `ColumnDef` is not possible because it is a\ncomplex type, not an interface.\n\n // But you can still use declaration merging on `ColumnDef.meta`\n\n```\n\n```\n\n// Use declaration merging to add our new feature APIs and state types to\nTanStack Table's existing types.\n\n// or whatever framework adapter you are using\n\n //merge our new feature's state with the existing table state\n\n //merge our new feature's options with the existing table options\n\n //merge our new feature's instance APIs with the existing table instance APIs\n\n // if you need to add cell instance APIs...\n\n // interface Cell<TData extends RowData, TValue> extends DensityCell\n\n // if you need to add row instance APIs...\n\n // interface Row<TData extends RowData> extends DensityRow\n\n // if you need to add column instance APIs...\n\n // interface Column<TData extends RowData, TValue> extends DensityColumn\n\n // if you need to add header instance APIs...\n\n // interface Header<TData extends RowData, TValue> extends DensityHeader\n\n // Note: declaration merging on `ColumnDef` is not possible because it is a\ncomplex type, not an interface.\n\n // But you can still use declaration merging on `ColumnDef.meta`\n\n```\n\nOnce we do this correctly, we should have no TypeScript errors when we try to\nboth create our new feature's code and use it in our application.\n\n##### [Caveats of Using Declaration\nMerging](https://tanstack.com/table/latest/docs/guide/<#caveats-of-using-\ndeclaration-merging>)\n\nOne caveat of using declaration merging is that it will affect the TanStack\nTable types for every table across your codebase. This is not a problem if you\nplan on loading the same feature set for every table in your application, but it\ncould be a problem if some of your tables load extra features and some do not.\nAlternatively, you can just make a bunch of custom types that extend off of the\nTanStack Table types with your new features added. This is what does in order to\navoid affecting the types of vanilla TanStack Table tables, but it's a bit more\ntedious, and requires a lot of type casting at certain points.\n\n#### [Step 3: Create the Feature\nObject](https://tanstack.com/table/latest/docs/guide/<#step-3-create-the-\nfeature-object>)\n\nWith all of that TypeScript setup out of the way, we can now create the feature\nobject for our new feature. This is where we define all of the methods that will\nbe added to the table instance.\n\nUse the type to ensure that you are creating the feature object correctly. If\nthe TypeScript types are set up correctly, you should have no TypeScript errors\nwhen you create the feature object with the new state, options, and instance\nAPIs.\n\n```\n\n // define the new feature's initial state\n\n // define the new feature's default options\n\n // if you need to add a default column definition...\n\n // getDefaultColumnDef: <TData extends RowData>(): Partial<ColumnDef<TData>> =>\n{\n\n //  return { meta: {} } //use meta instead of directly adding to the columnDef\nto avoid typescript stuff that's hard to workaround\n\n // define the new feature's table instance methods\n\n //cycle through the 3 options\n\n // if you need to add row instance APIs...\n\n // createRow: <TData extends RowData>(row, table): void => {},\n\n // if you need to add cell instance APIs...\n\n // createCell: <TData extends RowData>(cell, column, row, table): void => {},\n\n // if you need to add column instance APIs...\n\n // createColumn: <TData extends RowData>(column, table): void => {},\n\n // if you need to add header instance APIs...\n\n // createHeader: <TData extends RowData>(header, table): void => {},\n\n```\n\n```\n\n // define the new feature's initial state\n\n // define the new feature's default options\n\n // if you need to add a default column definition...\n\n // getDefaultColumnDef: <TData extends RowData>(): Partial<ColumnDef<TData>> =>\n{\n\n //  return { meta: {} } //use meta instead of directly adding to the columnDef\nto avoid typescript stuff that's hard to workaround\n\n // define the new feature's table instance methods\n\n //cycle through the 3 options\n\n // if you need to add row instance APIs...\n\n // createRow: <TData extends RowData>(row, table): void => {},\n\n // if you need to add cell instance APIs...\n\n // createCell: <TData extends RowData>(cell, column, row, table): void => {},\n\n // if you need to add column instance APIs...\n\n // createColumn: <TData extends RowData>(column, table): void => {},\n\n // if you need to add header instance APIs...\n\n // createHeader: <TData extends RowData>(header, table): void => {},\n\n```\n\n#### [Step 4: Add the Feature to the\nTable](https://tanstack.com/table/latest/docs/guide/<#step-4-add-the-feature-to-\nthe-table>)\n\nNow that we have our feature object, we can add it to the table instance by\npassing it to the option when we create the table instance.\n\n```\n\n//pass the new feature to merge with all of the built-in features under the hood\n\n```\n\n```\n\n //pass the new feature to merge with all of the built-in features under the\nhood\n\n```\n\n#### [Step 5: Use the Feature in Your\nApplication](https://tanstack.com/table/latest/docs/guide/<#step-5-use-the-\nfeature-in-your-application>)\n\nNow that the feature is added to the table instance, you can use the new\ninstance APIs options, and state in your application.\n\n```\n\n//pass our custom feature to the table to be instantiated upon creation\n\n//passing the density state to the table, TS is still happy :)\n\n//using the new onDensityChange option, TS is still happy :)\n\n   //using our new feature in the code\n\n```\n\n```\n\n //pass our custom feature to the table to be instantiated upon creation\n\n //passing the density state to the table, TS is still happy :)\n\n //using the new onDensityChange option, TS is still happy :)\n\n   //using our new feature in the code\n\n```\n\n#### [Do We Have to Do It This\nWay?](https://tanstack.com/table/latest/docs/guide/<#do-we-have-to-do-it-this-\nway>)\n\nThis is just a new way to integrate custom code along-side the built-in features\nin TanStack Table. In our example up above, we could have just as easily stored\nthe state in a , defined our own handler wherever, and just used it in our code\nseparately from the table instance. Building table features along-side TanStack\nTable instead of deeply integrating them into the table instance is still a\nperfectly valid way to build custom features. Depending on your use case, this\nmay or may not be the cleanest way to extend TanStack Table with custom\nfeatures.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Google Cloud Next is April 9-11 to learn how the hottest startups are putting\nAI into action.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6ADTZ3JCA7ILK3LCE7IK2QKC67DT2QYF67IT27YCA7IK2JWFTBI42Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/core/column-def\n\nColumn definitions are plain objects with the following options:\n\nThe unique identifier for the column.\n\n> üß† A column ID is optional when:\n>   * An accessor column is created with an object key accessor\n>   * The column header is defined as a string\n>\n\nThe key of the row object to use when extracting the value for the column.\n\nThe accessor function to use when extracting the value for the column from each\nrow.\n\nThe child column defs to include in a group column.\n\nThe header to display for the column. If a string is passed, it can be used as a\ndefault for the column ID. If a function is passed, it will be passed a props\nobject for the header and should return the rendered header value (the exact\ntype depends on the adapter being used).\n\nThe footer to display for the column. If a function is passed, it will be passed\na props object for the footer and should return the rendered footer value (the\nexact type depends on the adapter being used).\n\nThe cell to display each row for the column. If a function is passed, it will be\npassed a props object for the cell and should return the rendered cell value\n(the exact type depends on the adapter being used).\n\n```\n\n// This interface is extensible via declaration merging. See below!\n\n```\n\n```\n\n // This interface is extensible via declaration merging. See below!\n\n```\n\nThe meta data to be associated with the column. We can access it anywhere when\nthe column is available via . This type is global to all tables and can be\nextended like so:\n\n```\n\n //or vue, svelte, solid, qwik, etc.\n\n```\n\n```\n\n //or vue, svelte, solid, qwik, etc.\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/table/latest/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBI42JMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/core/table\n\nThese functions are used to create a table. Which one you use depends on which\nframework adapter you are using.\n\nThese are options and API properties for the table. More options and API\nproperties are available for other .\n\nThe data for the table to display. This array should match the type you provided\nto , but in theory could be an array of anything. It's common for each item in\nthe array to be an object of key/values but this is not required. Columns can\naccess this data via string/index or a functional accessor to return anything\nthey want.\n\nWhen the option changes reference (compared via ), the table will reprocess the\ndata. Any other data processing that relies on the core data model (such as\ngrouping, sorting, filtering, etc) will also be reprocessed.\n\n> üß† Make sure your option is only changing when you want the table to reprocess.\n> Providing an inline or constructing the data array as a new object every time\n> you want to render the table will result in a of unnecessary re-processing.\n> This can easily go unnoticed in smaller tables, but you will likely notice it\n> in larger tables.\nThe array of column defs to use for the table. See the for more information on\ncreating column definitions.\n\nDefault column options to use for all column defs supplied to the table. This is\nuseful for providing default cell/header/footer renderers,\nsorting/filtering/grouping options, etc. All column definitions passed to are\nmerged with this default column definition to produce the final column\ndefinitions.\n\nUse this option to optionally pass initial state to the table. This state will\nbe used when resetting various table states either automatically by the table\n(eg. ) or via functions like . Most reset function allow you optionally pass a\nflag to reset to a blank/default state instead of the initial state.\n\n> üß† Table state will not be reset when this object changes, which also means\n> that the initial state object does not need to be stable.\nSet this option to override any of the feature options.\n\n```\n\n// This interface is extensible via declaration merging. See below!\n\n```\n\n```\n\n // This interface is extensible via declaration merging. See below!\n\n```\n\nYou can pass any object to and access it anywhere the is available via This type\nis global to all tables and can be extended like so:\n\n> üß† Think of this option as an arbitrary \"context\" for your table. This is a\n> great way to pass arbitrary data or functions to your table without having to\n> pass it to every thing the table touches. A good example is passing a locale\n> object to your table to use for formatting dates, numbers, etc or even a\n> function that can be used to update editable data like in the .\nThe option can be used to optionally part or all of the table state. The state\nyou pass here will merge with and overwrite the internal automatically-managed\nstate to produce the final state for the table. You can also listen to state\nchanges via the option.\n\nThe option can be used to optionally listen to state changes within the table.\nIf you provide this options, you will be responsible for controlling and\nupdating the table state yourself. You can provide the state back to the table\nwith the option.\n\n> ‚ö†Ô∏è Debugging is only available in development mode.\nSet this option to true to output all debugging information to the console.\n\n> ‚ö†Ô∏è Debugging is only available in development mode.\nSet this option to true to output table debugging information to the console.\n\n> ‚ö†Ô∏è Debugging is only available in development mode.\nSet this option to true to output header debugging information to the console.\n\n> ‚ö†Ô∏è Debugging is only available in development mode.\nSet this option to true to output column debugging information to the console.\n\n> ‚ö†Ô∏è Debugging is only available in development mode.\nSet this option to true to output row debugging information to the console.\n\nAn array of extra features that you can add to the table instance.\n\n> ‚ö†Ô∏è This option is only necessary if you are implementing a table adapter.\nThe option provides a renderer implementation for the table. This implementation\nis used to turn a table's various column header and cell templates into a result\nthat is supported by the user's framework.\n\n> ‚ö†Ô∏è This option is only necessary if you are implementing a table adapter.\nThis option is used to optionally implement the merging of table options. Some\nframework like solid-js use proxies to track reactivity and usage, so merging\nreactive objects needs to be handled carefully. This option inverts control of\nthis process to the adapter.\n\nThis required option is a factory for a function that computes and returns the\ncore row model for the table. It is called per table and should return a which\nwill calculate and return the row model for the table.\n\nA default implementation is provided via any table adapter's export.\n\nThis optional function is used to access the sub rows for any given row. If you\nare using nested rows, you will need to use this function to return the sub rows\nobject (or undefined) from the row.\n\nThis optional function is used to derive a unique ID for any given row. If not\nprovided the rows index is used (nested rows join together with using their\ngrandparents' index eg. ). If you need to identify individual rows that are\noriginating from any server-side operations, it's suggested you use this\nfunction to return an ID that makes sense regardless of network IO/ambiguity eg.\na userId, taskId, database ID field, etc.\n\nThese properties and methods are available on the table object:\n\nThis is the resolved initial state of the table.\n\nCall this function to reset the table state to the initial state.\n\nCall this function to get the table's current state. It's recommended to use\nthis function and its state, especially when managing the table state manually.\nIt is the exact same state used internally by the table for every feature and\nfunction it provides.\n\n> üß† The state returned by this function is the shallow-merged result of the\n> automatically-managed internal table-state and any manually-managed state\n> passed via .\nCall this function to update the table state. It's recommended you pass an\nupdater function in the form of to update the state, but a direct object can\nalso be passed.\n\n> üß† If is provided, it will be triggered by this function with the new state.\nA read-only reference to the table's current options.\n\n> ‚ö†Ô∏è This property is generally used internally or by adapters. It can be\n> updated by passing new options to your table. This is different per adapter.\n> For adapters themselves, table options must be updated via the function.\n> ‚ö†Ô∏è This function is generally used by adapters to update the table options. It\n> can be used to update the table options directly, but it is generally not\n> recommended to bypass your adapters strategy for updating table options.\n```\n\n```\n\nReturns the core row model before any processing has been applied.\n\n```\n\n```\n\nReturns the final model after all processing from other used features has been\napplied.\n\nReturns all columns in the table in their normalized and nested hierarchy,\nmirrored from the column defs passed to the table.\n\nReturns all columns in the table flattened to a single level. This includes\nparent column objects throughout the hierarchy.\n\nReturns all leaf-node columns in the table flattened to a single level. This\ndoes not include parent columns.\n\nReturns a single column by its ID.\n\nReturns the header groups for the table.\n\nReturns the footer groups for the table.\n\nReturns a flattened array of Header objects for the table, including parent\nheaders.\n\nReturns a flattened array of leaf-node Header objects for the table.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/latest/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBI42J7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/guide/features\n\nTanStack Table comes with many features, each with their own associated options\nand API:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/table/latest/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBI427NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/docs/guide/column-defs\n\nThe page you are looking for does not exist.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/table/latest/docs/api/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBI4277HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/core/column\n\nThese are options and API properties for all columns. More options and API\nproperties are available for other .\n\nAll column objects have the following properties:\n\nThe resolved unique identifier for the column resolved in this priority:\n\n  * A manual property from the column def\n  * The accessor key from the column def\n  * The header string from the column def\n\nThe depth of the column (if grouped) relative to the root column def array.\n\nThe resolved accessor function to use when extracting the value for the column\nfrom each row. Will only be defined if the column def has a valid accessor key\nor function defined.\n\nThe original column def used to create the column.\n\nThe child column (if the column is a group column). Will be an empty array if\nthe column is not a group column.\n\nThe parent column for this column. Will be undefined if this is a root column.\n\nReturns the flattened array of this column and all child/grand-child columns for\nthis column.\n\nReturns an array of all leaf-node columns for this column. If a column has no\nchildren, it is considered the only leaf-node column.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Built by devs, for devs. Start coding for FREE with real-time communication\nAPIs\n](https://tanstack.com/table/latest/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKSIPZ3JCA7ILK3LCKAD423KC67DT2QYF67IT27YCA7IK2JWFTBI453IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/core/header-group\n\nThese are options and API properties for all header groups. More options and API\nproperties may be available for other .\n\nAll header group objects have the following properties:\n\nThe unique identifier for the header group.\n\nThe depth of the header group, zero-indexed based.\n\nAn array of objects that belong to this header group\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/table/latest/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBI4KJLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/core/header\n\nThese are options and API properties for all headers. More options and API\nproperties may be available for other .\n\nAll header objects have the following properties:\n\nThe unique identifier for the header.\n\nThe index for the header within the header group.\n\nThe depth of the header, zero-indexed based.\n\nThe header's hierarchical sub/child headers. Will be empty if the header's\nassociated column is a leaf-column.\n\nThe col-span for the header.\n\nThe row-span for the header.\n\nReturns the leaf headers hierarchically nested under this header.\n\nA boolean denoting if the header is a placeholder header\n\nIf the header is a placeholder header, this will be a unique header ID that does\nnot conflict with any other headers across the table\n\n```\n\n```\n\nReturns the rendering context (or props) for column-based components like\nheaders, footers and filters. Use these props with your framework's utility to\nrender these using the template of your choice:\n\nReturns all header groups for the table.\n\nIf pinning, returns the header groups for the left pinned columns.\n\nIf pinning, returns the header groups for columns that are not pinned.\n\nIf pinning, returns the header groups for the right pinned columns.\n\nReturns all footer groups for the table.\n\nIf pinning, returns the footer groups for the left pinned columns.\n\nIf pinning, returns the footer groups for columns that are not pinned.\n\nIf pinning, returns the footer groups for the right pinned columns.\n\nReturns headers for all columns in the table, including parent headers.\n\nIf pinning, returns headers for all left pinned columns in the table, including\nparent headers.\n\nIf pinning, returns headers for all columns that are not pinned, including\nparent headers.\n\nIf pinning, returns headers for all right pinned columns in the table, including\nparent headers.\n\nReturns headers for all leaf columns in the table, (not including parent\nheaders).\n\nIf pinning, returns headers for all left pinned leaf columns in the table, (not\nincluding parent headers).\n\nIf pinning, returns headers for all columns that are not pinned, (not including\nparent headers).\n\nIf pinning, returns headers for all right pinned leaf columns in the table, (not\nincluding parent headers).\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/latest/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBI4KJMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/core/row\n\nThese are options and API properties for all rows. More options and API\nproperties are available for other .\n\nAll row objects have the following properties:\n\nThe resolved unique identifier for the row resolved via the option. Defaults to\nthe row's index (or relative index if it is a subRow)\n\nThe depth of the row (if nested or grouped) relative to the root row array.\n\nThe index of the row within its parent array (or the root data array)\n\nThe original row object provided to the table.\n\n> üß† If the row is a grouped row, the original row object will be the first\n> original in the group.\nIf nested, this row's parent row id.\n\nReturns the value from the row for a given columnId\n\nRenders the value from the row for a given columnId, but will return the if no\nvalue is found.\n\nReturns a unique array of values from the row for a given columnId.\n\nAn array of subRows for the row as returned and created by the option.\n\nReturns the parent row for the row, if it exists.\n\nReturns the parent rows for the row, all the way up to a root row.\n\nReturns the leaf rows for the row, not including any parent rows.\n\nAn array of the original subRows as returned by the option.\n\nReturns all of the for the row.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Loved by developers. Trusted by enterprises. Start your free 60 day trial.\n](https://tanstack.com/table/latest/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKKJKC67DT2QYF67IT27YCA7IK2JWFTBI4K7JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/core/cell\n\nThese are options and API properties for all cells. More options and API\nproperties are available for other .\n\nAll cell objects have the following properties:\n\nThe unique ID for the cell across the entire table.\n\nReturns the value for the cell, accessed via the associated column's accessor\nkey or accessor function.\n\nRenders the value for a cell the same as , but will return the if no value is\nfound.\n\nThe associated Row object for the cell.\n\nThe associated Column object for the cell.\n\n```\n\n```\n\nReturns the rendering context (or props) for cell-based components like cells\nand aggregated cells. Use these props with your framework's utility to render\nthese using the template of your choice:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/table/latest/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBI4K7MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/column-filtering\n\nThe ability for a column to be filtered is determined by the following:\n\n  * The column was defined with a valid /.\n\nFilter state is stored on the table using the following shape:\n\nThe following filter functions are built-in to the table core:\n\n  *     * Item inclusion within an array\n  *     * All items included in an array\n  *     * Some items included in an array\n\n  * The columnId to use to retrieve the row's value\n\nand should return if the row should be included in the filtered rows, and if it\nshould be removed.\n\nThis is the type signature for every filter function:\n\nThis optional \"hanging\" method on any given allows the filter function to\ntransform/sanitize/format the filter value before it is passed to the filter\nfunction.\n\nThis optional \"hanging\" method on any given is passed a filter value and\nexpected to return if the filter value should be removed from the filter state.\neg. Some boolean-style filters may want to remove the filter value from the\ntable state if the filter value is set to .\n\nFilter functions can be used/referenced/defined by passing the following to :\n\n  * A that references a built-in filter function\n  * A function directly provided to the option\n\nThe final list of filter functions available for the option use the following\ntype:\n\nFiltering data can often expose additional information about the data that can\nbe used to aid other future operations on the same data. A good example of this\nconcept is a ranking-system like that of that simultaneously ranks, filters and\nsorts data. While utilities like make a lot of sense for single-dimensional\nfilter+sort tasks, the decoupled filtering/sorting architecture of building a\ntable makes them very difficult and slow to use.\n\nTo make a ranking/filtering/sorting system work with tables, s can optionally\nmark results with a value that can be used later to sort/group/etc the data to\nyour liking. This is done by calling the function supplied to your custom .\n\nBelow is an example using our own package (a utility fork of ) to rank, filter,\nand sort the data\n\n```\n\n // Store the ranking info\n\n // Return if the item should be filtered in/out\n\n // Only sort by rank if the column has ranking information\n\n // Provide an alphanumeric fallback for when the item ranks are equal\n\n```\n\n```\n\n // Store the ranking info\n\n // Return if the item should be filtered in/out\n\n // Only sort by rank if the column has ranking information\n\n // Provide an alphanumeric fallback for when the item ranks are equal\n\n```\n\nThe filter function to use with this column.\n\nEnables/disables the filter for this column.\n\nReturns whether or not the column can be filtered.\n\nReturns the index (including ) of the column filter in the table's array.\n\nReturns whether or not the column is currently filtered.\n\nReturns the current filter value of the column.\n\nA function that sets the current filter value for the column. You can pass it a\nvalue or an updater function for immutability-safe operations on existing\nvalues.\n\nReturns an automatically calculated filter function for the column based off of\nthe columns first known value.\n\nReturns the filter function (either user-defined or automatic, depending on\nconfiguration) for the columnId specified.\n\nThe column filters map for the row. This object tracks whether a row is\npassing/failing specific filters by their column ID.\n\nThe column filters meta map for the row. This object tracks any filter meta for\na row as optionally provided during the filtering process.\n\nThis option allows you to define custom filter functions that can be referenced\nin a column's option by their key. Example:\n\n```\n\n   // return the filtered rows\n\n```\n\n```\n\n   // return the filtered rows\n\n```\n\nBy default, filtering is done from parent rows down (so if a parent row is\nfiltered out, all of its children will be filtered out as well). Setting this\noption to will cause filtering to be done from leaf rows up (which means parent\nrows will be included so long as one of their child or grand-child rows is also\nincluded).\n\nBy default, filtering is done for all rows (max depth of 100), no matter if they\nare root level parent rows or the child leaf rows of a parent row. Setting this\noption to will cause filtering to only be applied to the root level parent rows,\nwith all sub-rows remaining unfiltered. Similarly, setting this option to will\ncause filtering to only be applied to child leaf rows 1 level deep, and so on.\n\nThis is useful for situations where you want a row's entire child hierarchy to\nbe visible regardless of the applied filter.\n\nEnables/disables all filters for the table.\n\nDisables the from being used to filter data. This may be useful if your table\nneeds to dynamically support both client-side and server-side filtering.\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will need to persist the state\nchange either fully or partially outside of the table.\n\nEnables/disables column filters for the table.\n\nIf provided, this function is called per table and should return a which will\ncalculate and return the row model for the table when it's filtered.\n\n  * For server-side filtering, this function is unnecessary and can be ignored since the server should already return the filtered row model.\n  * For client-side filtering, this function is required. A default implementation is provided via any table adapter's export.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nReturns the row model for the table before any filtering has been applied.\n\nReturns the row model for the table after filtering has been applied.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Visualize Millions of Data Points in Real-time with LightningChart Python. Get\nFree Trial Today.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6SI5Z3JCA7ILK3LCE7I627KC67DT2QYF67IT27YCA7IK2JWFTBI4K77HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/column-faceting\n\n> ‚ö†Ô∏è Requires that you pass a valid function to . A default implementation is\n> provided via the exported function.\nReturns the row model with all other column filters applied, excluding its own\nfilter. Useful for displaying faceted result counts.\n\n> ‚ö†Ô∏è Requires that you pass a valid function to . A default implementation is\n> provided via the exported function.\nA function that a of unique values and their occurrences derived from . Useful\nfor displaying faceted result values.\n\n> ‚ö†Ô∏è Requires that you pass a valid function to . A default implementation is\n> provided via the exported function.\nA function that a min/max tuple derived from . Useful for displaying faceted\nresult values.\n\nReturns the faceted row model for a given columnId.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBI423NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/column-ordering\n\nColumn ordering state is stored on the table using the following shape:\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will need to persist the state\nchange either fully or partially outside of the table.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nReturns the index of the column in the order of the visible columns. Optionally\npass a parameter to get the index of the column in a sub-section of the table.\n\nReturns if the column is the first column in the order of the visible columns.\nOptionally pass a parameter to check if the column is the first in a sub-section\nof the table.\n\nReturns if the column is the last column in the order of the visible columns.\nOptionally pass a parameter to check if the column is the last in a sub-section\nof the table.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBI42QEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/column-pinning\n\nThe ability for a column to be is determined by the following:\n\nPinning state is stored on the table using the following shape:\n\nEnables/disables column pinning for all columns in the table.\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will also need to supply from your\nown managed state.\n\nEnables/disables pinning for the column.\n\nResets the state to , or can be passed to force a default blank state reset to {\nleft: [], right: [], }.\n\nReturns whether or not any columns are pinned. Optionally specify to only check\nfor pinned columns in either the or position.\n\n_Note: Does not account for column visibility_\n\nReturns the left pinned header groups for the table.\n\nReturns the unpinned/center header groups for the table.\n\nReturns the right pinned header groups for the table.\n\nReturns the left pinned footer groups for the table.\n\nReturns the unpinned/center footer groups for the table.\n\nReturns the right pinned footer groups for the table.\n\nReturns a flat array of left pinned headers for the table, including parent\nheaders.\n\nReturns a flat array of unpinned/center headers for the table, including parent\nheaders.\n\nReturns a flat array of right pinned headers for the table, including parent\nheaders.\n\nReturns a flat array of leaf-node left pinned headers for the table.\n\nReturns a flat array of leaf-node unpinned/center headers for the table.\n\nReturns a flat array of leaf-node right pinned headers for the table.\n\nReturns all left pinned leaf columns.\n\nReturns all right pinned leaf columns.\n\nReturns all center pinned (unpinned) leaf columns.\n\nReturns whether or not the column can be pinned.\n\nReturns the numeric pinned index of the column within a pinned column group.\n\nReturns the pinned position of the column. (, or )\n\nPins a column to the or , or unpins the column to the center if is passed.\n\nReturns all left pinned leaf cells in the row.\n\nReturns all right pinned leaf cells in the row.\n\nReturns all center pinned (unpinned) leaf cells in the row.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBIT5QEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/column-sizing\n\nColumn sizing state is stored on the table using the following shape:\n\nEnables or disables column resizing for the column.\n\nThe desired size for the column\n\nThe minimum allowed size for the column\n\nThe maximum allowed size for the column\n\nReturns the current size of the column\n\nReturns the offset measurement along the row-axis (usually the x-axis for\nstandard tables) for the column, measuring the size of all preceding columns.\n\nUseful for sticky or absolute positioning of columns. (e.g. or )\n\nReturns the offset measurement along the row-axis (usually the x-axis for\nstandard tables) for the column, measuring the size of all succeeding columns.\n\nUseful for sticky or absolute positioning of columns. (e.g. or )\n\nReturns if the column can be resized.\n\nReturns if the column is currently being resized.\n\nResets the column size to its initial size.\n\nReturns the size for the header, calculated by summing the size of all leaf-\ncolumns that belong to it.\n\nReturns the offset measurement along the row-axis (usually the x-axis for\nstandard tables) for the header. This is effectively a sum of the offset\nmeasurements of all preceding headers.\n\nReturns an event handler function that can be used to resize the header. It can\nbe used as an:\n\nThe dragging and release events are automatically handled for you.\n\nEnables/disables column resizing for *all columns**.\n\nDetermines when the columnSizing state is updated. updates the state when the\nuser is dragging the resize handle. updates the state when the user releases the\nresize handle.\n\nEnables or disables right-to-left support for resizing the column. defaults to\n'ltr'.\n\nThis optional function will be called when the columnSizing state changes. If\nyou provide this function, you will be responsible for maintaining its state\nyourself. You can pass this state back to the table via the table option.\n\nThis optional function will be called when the columnSizingInfo state changes.\nIf you provide this function, you will be responsible for maintaining its state\nyourself. You can pass this state back to the table via the table option.\n\nSets the column sizing state using an updater function or a value. This will\ntrigger the underlying function if one is passed to the table options, otherwise\nthe state will be managed automatically by the table.\n\nSets the column sizing info state using an updater function or a value. This\nwill trigger the underlying function if one is passed to the table options,\notherwise the state will be managed automatically by the table.\n\nResets column sizing to its initial state. If is , the default state for the\ntable will be used instead of the initialValue provided to the table.\n\nResets column sizing info to its initial state. If is , the default state for\nthe table will be used instead of the initialValue provided to the table.\n\nReturns the total size of the table by calculating the sum of the sizes of all\nleaf-columns.\n\nIf pinning, returns the total size of the left portion of the table by\ncalculating the sum of the sizes of all left leaf-columns.\n\nIf pinning, returns the total size of the center portion of the table by\ncalculating the sum of the sizes of all unpinned/center leaf-columns.\n\nIf pinning, returns the total size of the right portion of the table by\ncalculating the sum of the sizes of all right leaf-columns.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIT5QNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/column-visibility\n\nColumn visibility state is stored on the table using the following shape:\n\nReturns whether the column can be hidden\n\nReturns whether the column is visible\n\nReturns a function that can be used to toggle the column visibility. This\nfunction can be used to bind to an event handler to a checkbox.\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will need to persist the state\nchange either fully or partially outside of the table.\n\nReturns a flat array of columns that are visible, including parent columns.\n\nReturns a flat array of leaf-node columns that are visible.\n\nIf column pinning, returns a flat array of leaf-node columns that are visible in\nthe left portion of the table.\n\nIf column pinning, returns a flat array of leaf-node columns that are visible in\nthe right portion of the table.\n\nIf column pinning, returns a flat array of leaf-node columns that are visible in\nthe unpinned/center portion of the table.\n\nUpdates the column visibility state via an updater function or value\n\nResets the column visibility state to the initial state. If is provided, the\nstate will be reset to\n\nToggles the visibility of all columns\n\nReturns whether all columns are visible\n\nReturns whether some columns are visible\n\nReturns a handler for toggling the visibility of all columns, meant to be bound\nto a element.\n\nReturns an array of cells that account for column visibility for the row.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBI4K3LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/global-faceting\n\nReturns the faceted row model for the global filter.\n\nReturns the faceted unique values for the global filter.\n\nReturns the faceted min and max values for the global filter.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBI4K3NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/global-filtering\n\nThe ability for a column to be filtered is determined by the following:\n\n  * The column was defined a valid /.\n  * If provided, returns for the given column. If it is not provided, the column is assumed to be globally filterable if the value in the first row is a or type.\n\nFilter state is stored on the table using the following shape:\n\nYou can use the same filter functions that are available for column filtering\nfor global filtering. See the to learn more about filter functions.\n\nFilter functions can be used/referenced/defined by passing the following to :\n\n  * A that references a built-in filter function\n  * A function directly provided to the option\n\nThe final list of filter functions available for the options use the following\ntype:\n\nFiltering data can often expose additional information about the data that can\nbe used to aid other future operations on the same data. A good example of this\nconcept is a ranking-system like that of that simultaneously ranks, filters and\nsorts data. While utilities like make a lot of sense for single-dimensional\nfilter+sort tasks, the decoupled filtering/sorting architecture of building a\ntable makes them very difficult and slow to use.\n\nTo make a ranking/filtering/sorting system work with tables, s can optionally\nmark results with a value that can be used later to sort/group/etc the data to\nyour liking. This is done by calling the function supplied to your custom .\n\nBelow is an example using our own package (a utility fork of ) to rank, filter,\nand sort the data\n\n```\n\n // Store the ranking info\n\n // Return if the item should be filtered in/out\n\n // Only sort by rank if the column has ranking information\n\n // Provide an alphanumeric fallback for when the item ranks are equal\n\n```\n\n```\n\n // Store the ranking info\n\n // Return if the item should be filtered in/out\n\n // Only sort by rank if the column has ranking information\n\n // Provide an alphanumeric fallback for when the item ranks are equal\n\n```\n\nEnables/disables the filter for this column.\n\nReturns whether or not the column can be filtered. Set to to disable a column\nfrom being scanned during global filtering.\n\nThe column filters meta map for the row. This object tracks any filter meta for\na row as optionally provided during the filtering process.\n\nThis option allows you to define custom filter functions that can be referenced\nin a column's option by their key. Example:\n\n```\n\n   // return the filtered rows\n\n```\n\n```\n\n   // return the filtered rows\n\n```\n\nBy default, filtering is done from parent rows down (so if a parent row is\nfiltered out, all of its children will be filtered out as well). Setting this\noption to will cause filtering to be done from leaf rows up (which means parent\nrows will be included so long as one of their child or grand-child rows is also\nincluded).\n\nBy default, filtering is done for all rows (max depth of 100), no matter if they\nare root level parent rows or the child leaf rows of a parent row. Setting this\noption to will cause filtering to only be applied to the root level parent rows,\nwith all sub-rows remaining unfiltered. Similarly, setting this option to will\ncause filtering to only be applied to child leaf rows 1 level deep, and so on.\n\nThis is useful for situations where you want a row's entire child hierarchy to\nbe visible regardless of the applied filter.\n\nEnables/disables all filters for the table.\n\nDisables the from being used to filter data. This may be useful if your table\nneeds to dynamically support both client-side and server-side filtering.\n\nIf provided, this function is called per table and should return a which will\ncalculate and return the row model for the table when it's filtered.\n\n  * For server-side filtering, this function is unnecessary and can be ignored since the server should already return the filtered row model.\n  * For client-side filtering, this function is required. A default implementation is provided via any table adapter's export.\n\nThe filter function to use for global filtering.\n\n  * A that references a custom filter functions provided via the option\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will need to persist the state\nchange either fully or partially outside of the table.\n\nEnables/disables the global filter for the table.\n\nIf provided, this function will be called with the column and should return or\nto indicate whether this column should be used for global filtering. This is\nuseful if the column can contain data that is not or (i.e. ).\n\nReturns the row model for the table before any filtering has been applied.\n\nReturns the row model for the table after filtering has been applied.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nCurrently, this function returns the built-in filter function. In future\nreleases, it may return more dynamic filter functions based on the nature of the\ndata provided.\n\nReturns the global filter function (either user-defined or automatic, depending\non configuration) for the table.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBI4KQEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/sorting\n\nSorting state is stored on the table using the following shape:\n\nThe following sorting functions are built-in to the table core:\n\n  *     * Sorts by mixed alphanumeric values without case-sensitivity. Slower, but more accurate if your strings contain numbers that need to be naturally sorted.\n  *     * Sorts by mixed alphanumeric values with case-sensitivity. Slower, but more accurate if your strings contain numbers that need to be naturally sorted.\n  *     * Sorts by text/string values without case-sensitivity. Faster, but less accurate if your strings contain numbers that need to be naturally sorted.\n  *     * Sorts by text/string values with case-sensitivity. Faster, but less accurate if your strings contain numbers that need to be naturally sorted.\n  *     * Sorts by time, use this if your values are objects.\n  *     * Sorts using a basic/standard a > b ? 1 : a < b ? -1 : 0 comparison. This is the fastest sorting function, but may not be the most accurate.\n\nEvery sorting function receives 2 rows and a column ID and are expected to\ncompare the two rows using the column ID to return , , or in ascending order.\nHere's a cheat sheet:\n\nThis is the type signature for every sorting function:\n\nSorting functions can be used/referenced/defined by passing the following to :\n\n  * A that references a built-in sorting function\n  * A that references a custom sorting functions provided via the option\n  * A function directly provided to the option\n\nThe final list of sorting functions available for the use the following type:\n\nThe sorting function to use with this column.\n\nSet to for sorting toggles on this column to start in the descending direction.\n\nEnables/Disables sorting for this column.\n\nEnables/Disables multi-sorting for this column.\n\nInverts the order of the sorting for this column. This is useful for values that\nhave an inverted best/worst scale where lower numbers are better, eg. a ranking\n(1st, 2nd, 3rd) or golf-like scoring\n\n  *     * Undefined values will be pushed to the beginning of the list\n  *     * Undefined values will be pushed to the end of the list\n  *     * Undefined values will be considered tied and need to be sorted by the next column filter or original index (whichever applies)\n  *     * Undefined values will be sorted with higher priority (ascending) (if ascending, undefined will appear on the beginning of the list)\n  *     * Undefined values will be sorted with lower priority (descending) (if ascending, undefined will appear on the end of the list)\n\n> NOTE: and options are new in v8.16.0\nReturns a sorting function automatically inferred based on the columns values.\n\nReturns a sort direction automatically inferred based on the columns values.\n\nReturns the resolved sorting function to be used for this column\n\nReturns the next sorting order.\n\nReturns whether this column can be sorted.\n\nReturns whether this column can be multi-sorted.\n\nReturns the index position of this column's sorting within the sorting state\n\nReturns whether this column is sorted.\n\nReturns the first direction that should be used when sorting this column.\n\nRemoves this column from the table's sorting state\n\nToggles this columns sorting state. If is provided, it will force the sort\ndirection to that value. If is provided, it will additivity multi-sort the\ncolumn (or toggle it if it is already sorted).\n\nReturns a function that can be used to toggle this column's sorting state. This\nis useful for attaching a click handler to the column header.\n\nThis option allows you to define custom sorting functions that can be referenced\nin a column's option by their key. Example:\n\n```\n\n```\n\nEnables manual sorting for the table. If this is , you will be expected to sort\nyour data before it is passed to the table. This is useful if you are doing\nserver-side sorting.\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will need to persist the state\nchange either fully or partially outside of the table.\n\nEnables/Disables sorting for the table.\n\nEnables/Disables the ability to remove sorting for the table.\n\n  * If then changing sort order will circle like: 'none' -> 'desc' -> 'asc' -> 'none' -> ...\n  * If then changing sort order will circle like: 'none' -> 'desc' -> 'asc' -> 'desc' -> 'asc' -> ...\n\nEnables/disables the ability to remove multi-sorts\n\nEnables/Disables multi-sorting for the table.\n\nIf , all sorts will default to descending as their first toggle state.\n\nThis function is used to retrieve the sorted row model. If using server-side\nsorting, this function is not required. To use client-side sorting, pass the\nexported from your adapter to your table or implement your own.\n\nSet a maximum number of columns that can be multi-sorted.\n\nPass a custom function that will be used to determine if a multi-sort event\nshould be triggered. It is passed the event from the sort toggle handler and\nshould return if the event should trigger a multi-sort.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nReturns the row model for the table before any sorting has been applied.\n\nReturns the row model for the table after sorting has been applied.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBI4KQNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/grouping\n\nGrouping state is stored on the table using the following shape:\n\nThe following aggregation functions are built-in to the table core:\n\n  *     * Sums the values of a group of rows\n  *     * Finds the minimum value of a group of rows\n  *     * Finds the maximum value of a group of rows\n  *     * Finds the minimum and maximum values of a group of rows\n  *     * Finds the mean/average value of a group of rows\n  *     * Finds the median value of a group of rows\n  *     * Finds the unique values of a group of rows\n  *     * Finds the number of unique values of a group of rows\n  *     * Calculates the number of rows in a group\n\n  * A function to retrieve the leaf values of the groups rows\n  * A function to retrieve the immediate-child values of the groups rows\n\nand should return a value (usually primitive) to build the aggregated row model.\n\nThis is the type signature for every aggregation function:\n\nAggregation functions can be used/referenced/defined by passing the following to\n:\n\n  * A that references a built-in aggregation function\n  * A that references a custom aggregation functions provided via the option\n  * A function directly provided to the option\n\nThe final list of aggregation functions available for the use the following\ntype:\n\nThe aggregation function to use with this column.\n\n```\n\n```\n\nThe cell to display each row for the column if the cell is an aggregate. If a\nfunction is passed, it will be passed a props object with the context of the\ncell and should return the property type for your adapter (the exact type\ndepends on the adapter being used).\n\nEnables/disables grouping for this column.\n\nSpecify a value to be used for grouping rows on this column. If this option is\nnot specified, the value derived from / will be used instead.\n\nThe resolved aggregation function for the column.\n\nReturns whether or not the column can be grouped.\n\nReturns whether or not the column is currently grouped.\n\nReturns the index of the column in the grouping state.\n\nToggles the grouping state of the column.\n\nReturns a function that toggles the grouping state of the column. This is useful\nfor passing to the prop of a button.\n\nReturns the automatically inferred aggregation function for the column.\n\nReturns the aggregation function for the column.\n\nIf this row is grouped, this is the id of the column that this row is grouped\nby.\n\nIf this row is grouped, this is the unique/shared value for the for all of the\nrows in this group.\n\nReturns whether or not the row is currently grouped.\n\nReturns the grouping value for any row and column (including leaf rows).\n\nThis option allows you to define custom aggregation functions that can be\nreferenced in a column's option by their key. Example:\n\n```\n\n   // return the aggregated value\n\n```\n\n```\n\n   // return the aggregated value\n\n```\n\nEnables manual grouping. If this option is set to , the table will not\nautomatically group rows using and instead will expect you to manually group the\nrows before passing them to the table. This is useful if you are doing server-\nside grouping and aggregation.\n\nIf this function is provided, it will be called when the grouping state changes\nand you will be expected to manage the state yourself. You can pass the managed\nstate back to the table via the option.\n\nEnables/disables grouping for all columns.\n\nReturns the row model after grouping has taken place, but no further.\n\nGrouping columns are automatically reordered by default to the start of the\ncolumns list. If you would rather remove them or leave them as-is, set the\nappropriate mode here.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nReturns the row model for the table before any grouping has been applied.\n\nReturns the row model for the table after grouping has been applied.\n\nReturns whether or not the cell is currently aggregated.\n\nReturns whether or not the cell is currently grouped.\n\nReturns whether or not the cell is currently a placeholder.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBIT2Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/expanding\n\nExpanding state is stored on the table using the following shape:\n\nToggles the expanded state (or sets it if is provided) for the row.\n\nReturns whether the row is expanded.\n\nReturns whether all parent rows of the row are expanded.\n\nReturns whether the row can be expanded.\n\nReturns a function that can be used to toggle the expanded state of the row.\nThis function can be used to bind to an event handler to a button.\n\nEnables manual row expansion. If this is set to , will not be used to expand\nrows and you would be expected to perform the expansion in your own data model.\nThis is useful if you are doing server-side expansion.\n\nThis function is called when the table state changes. If a function is provided,\nyou will be responsible for managing this state on your own. To pass the managed\nstate back to the table, use the option.\n\nEnable this setting to automatically reset the expanded state of the table when\nexpanding state changes.\n\nEnable/disable expanding for all rows.\n\nThis function is responsible for returning the expanded row model. If this\nfunction is not provided, the table will not expand rows. You can use the\ndefault exported function to get the expanded row model or implement your own.\n\nIf provided, allows you to override the default behavior of determining whether\na row is currently expanded.\n\nIf provided, allows you to override the default behavior of determining whether\na row can be expanded.\n\nIf expanded rows will be paginated along with the rest of the table (which means\nexpanded rows may span multiple pages).\n\nIf expanded rows will not be considered for pagination (which means expanded\nrows will always render on their parents page. This also means more rows will be\nrendered than the set page size)\n\nUpdates the expanded state of the table via an update function or value\n\nToggles the expanded state for all rows. Optionally, provide a value to set the\nexpanded state to.\n\nReset the expanded state of the table to the initial state. If is provided, the\nexpanded state will be reset to\n\nReturns whether there are any rows that can be expanded.\n\nReturns a handler that can be used to toggle the expanded state of all rows.\nThis handler is meant to be used with an element.\n\nReturns whether there are any rows that are currently expanded.\n\nReturns whether all rows are currently expanded.\n\nReturns the maximum depth of the expanded rows.\n\nReturns the row model after expansion has been applied.\n\nReturns the row model before expansion has been applied.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Get free expert guidance and resources to empower your best work. Join the Arm\nDeveloper Program.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDV53KC67DT2QYF67IT27YCA7IK2JWFTBIT2JNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/pagination\n\nPagination state is stored on the table using the following shape:\n\nEnables manual pagination. If this option is set to , the table will not\nautomatically paginate rows using and instead will expect you to manually\npaginate the rows before passing them to the table. This is useful if you are\ndoing server-side pagination and aggregation.\n\nWhen manually controlling pagination, you can supply a total value to the table\nif you know it. If you do not know how many pages there are, you can set this to\n. Alternatively, you can provide a value and the table will calculate the\ninternally.\n\nWhen manually controlling pagination, you can supply a total value to the table\nif you know it. will be calculated internally from and .\n\nIf set to , pagination will be reset to the first page when page-altering state\nchanges eg. is updated, filters change, grouping changes, etc.\n\n> üß† Note: This option defaults to if is set to\nIf this function is provided, it will be called when the pagination state\nchanges and you will be expected to manage the state yourself. You can pass the\nmanaged state back to the table via the option.\n\nReturns the row model after pagination has taken place, but no further.\n\nPagination columns are automatically reordered by default to the start of the\ncolumns list. If you would rather remove them or leave them as-is, set the\nappropriate mode here.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nUpdates the page index using the provided function or value.\n\nResets the page index to its initial state. If is , the page index will be reset\nto regardless of initial state.\n\nUpdates the page size using the provided function or value.\n\nResets the page size to its initial state. If is , the page size will be reset\nto regardless of initial state.\n\nReturns an array of page options (zero-index-based) for the current page size.\n\nReturns whether the table can go to the previous page.\n\nReturns whether the table can go to the next page.\n\nDecrements the page index by one, if possible.\n\nIncrements the page index by one, if possible.\n\nSets the page index to .\n\nSets the page index to the last available page.\n\nReturns the page count. If manually paginating or controlling the pagination\nstate, this will come directly from the table option, otherwise it will be\ncalculated from the table data using the total row count and current page size.\n\nReturns the row model for the table before any pagination has been applied.\n\nReturns the row model for the table after pagination has been applied.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCE7I52JKC67DT2QYF67IT27YCA7IK2JWFTBIT27LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/row-pinning\n\nThe ability for a row to be is determined by the following:\n\nPinning state is stored on the table using the following shape:\n\nEnables/disables row pinning for all rows in the table.\n\nWhen , pinned rows will not be visible if they are filtered or paginated out of\nthe table. When , pinned rows will always be visible regardless of filtering or\npagination. Defaults to .\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will also need to supply from your\nown managed state.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nReturns whether or not any rows are pinned. Optionally specify to only check for\npinned rows in either the or position.\n\nReturns all top pinned rows.\n\nReturns all bottom pinned rows.\n\nReturns all rows that are not pinned to the top or bottom.\n\nPins a row to the or , or unpins the row to the center if is passed.\n\nReturns whether or not the row can be pinned.\n\nReturns the pinned position of the row. (, or )\n\nReturns the numeric pinned index of the row within a pinned row group.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Ready to discover the latest startup AI innovations? Join us April 9-11 at\nGoogle Cloud Next.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6ADTZ3JCA7ILK3LCE7IK23KC67DT2QYF67IT27YCA7IK2JWFTBIT27UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/api/features/row-selection\n\nRow selection state is stored on the table using the following shape:\n\nBy default, the row selection state uses the index of each row as the row\nidentifiers. Row selection state can instead be tracked with a custom unique row\nid by passing in a custom function to the the table.\n\n  * Enables/disables row selection for all rows in the table OR\n  * A function that given a row, returns whether to enable/disable row selection for that row\n\n  * Enables/disables multiple row selection for all rows in the table OR\n  * A function that given a row, returns whether to enable/disable multiple row selection for that row's children/grandchildren\n\nEnables/disables automatic sub-row selection when a parent row is selected, or a\nfunction that enables/disables automatic sub-row selection for each row.\n\n(Use in combination with expanding or grouping features)\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will need to persist the state\nchange either fully or partially outside of the table.\n\nReturns a handler that can be used to toggle all rows in the table.\n\nReturns a handler that can be used to toggle all rows on the current page.\n\nResets the state to the , or can be passed to force a default blank state reset\nto .\n\nReturns whether or not all rows in the table are selected.\n\nReturns whether or not all rows on the current page are selected.\n\nReturns whether or not any rows in the table are selected.\n\nNOTE: Returns if all rows are selected.\n\nReturns whether or not any rows on the current page are selected.\n\nSelects/deselects all rows in the table.\n\nSelects/deselects all rows on the current page.\n\nReturns whether or not the row is selected.\n\nReturns whether or not some of the row's sub rows are selected.\n\nReturns whether or not all of the row's sub rows are selected.\n\nReturns whether or not the row can be selected.\n\nReturns whether or not the row can multi-select.\n\nReturns whether or not the row can select sub rows automatically when the parent\nrow is selected.\n\nReturns a handler that can be used to toggle the row.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/table/latest/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBIT53JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# The page you are looking for does not exist.\nURL: https://tanstack.com/table/latest/api/core/table\n\nThe page you are looking for does not exist.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/enterprise/ag-grid\n\n# AG Grid - An alternative enterprise data-grid solution\n\nWhile we clearly love TanStack Table, we acknowledge that it is not a\n\"batteries\" included product packed with customer support and enterprise polish.\nWe realize that some of our users may need this though! To help out here, we\nwant to introduce you to AG Grid, an enterprise-grade data grid solution that\ncan supercharge your applications with its extensive feature set and robust\nperformance. While TanStack Table is also a powerful option for implementing\ndata grids, we believe in providing our users with a diverse range of choices\nthat best fit their specific requirements. AG Grid is one such choice, and we're\nexcited to highlight its capabilities for you.\n\nHere are some good reasons to consider AG Grid for your next project:\n\nAG Grid offers an extensive set of features, making it a versatile and powerful\ndata grid solution. With AG Grid, you get access to a wide range of\nfunctionalities that cater to the needs of complex enterprise applications. From\nadvanced sorting, filtering, and grouping capabilities to column pinning, multi-\nlevel headers, and tree data structure support, AG Grid provides you with the\ntools to create dynamic and interactive data grids that meet your application's\nunique demands.\n\nWhen it comes to handling large datasets and achieving exceptional performance,\nAG Grid delivers outstanding results. It employs highly optimized rendering\ntechniques, efficient data updates, and virtualization to ensure smooth\nscrolling and fast response times, even when dealing with thousands or millions\nof rows of data. AG Grid's performance optimizations make it an excellent choice\nfor applications that require high-speed data manipulation and visualization.\n\nAG Grid is designed to be highly customizable and extensible, allowing you to\ntailor the grid to your specific needs. It provides a rich set of APIs and\nevents that enable you to integrate custom functionality seamlessly. You can\ndefine custom cell renderers, editors, filters, and aggregators to enhance the\ngrid's behavior and appearance. AG Grid also supports a variety of themes,\nallowing you to match the grid's visual style to your application's design.\n\nAs an enterprise-focused solution, AG Grid caters to the requirements of complex\nbusiness applications. It offers enterprise-specific features such as row\ngrouping, column pinning, server-side row model, master/detail grids, and rich\nediting capabilities. AG Grid also integrates well with other enterprise\nframeworks and libraries, making it a reliable choice for large-scale projects.\n\n### [Active Development and Community\nSupport](https://tanstack.com/table/latest/docs/enterprise/<#active-development-\nand-community-support>)\n\nAG Grid benefits from active development and a thriving community of developers.\nThe team behind AG Grid consistently introduces new features and enhancements,\nensuring that the product evolves to meet the changing needs of the industry.\nThe community support is robust, with forums, documentation, and examples\nreadily available to assist you in utilizing the full potential of AG Grid.\n\nWhile TanStack Table remains a powerful and flexible option for implementing\ndata grids, we understand that different projects have different requirements.\nAG Grid offers a compelling enterprise-grade solution that may be particularly\nsuited to your needs. Its comprehensive feature set, high performance,\ncustomization options, and focus on enterprise requirements make AG Grid an\nexcellent choice for projects that demand a robust and scalable data grid\nsolution.\n\nWe encourage you to explore AG Grid further by visiting their website and trying\nout their demo. Remember that both TanStack Table and AG Grid have their unique\nstrengths and considerations. We believe in providing options to our users,\nempowering you to make informed decisions and choose the best fit for your\nspecific use case.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/latest/docs/enterprise/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBITKJMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/column-groups\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Most Powerful JS Charting Library to Visualize 10M+ Data Points in Real-Time.\nGet Free Trial Now.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6SI5Z3JCA7ILK3LCE7I62QKC67DT2QYF67IT27YCA7IK2JWFTBITKJ7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/filters\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Your fast track into the future of software development. Join the Arm\nDeveloper Program today.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDPK3KC67DT2QYF67IT27YCA7IK2JWFTBITK7JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/filters-faceted\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBITK7MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/filters-fuzzy\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBITK7YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/column-ordering\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBIT23JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/column-dnd\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBIT23WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/column-pinning\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Streamline software patching and vulnerability response on macOS. Deploy\nWorkbrew ‚Äì it‚Äôs free.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCKSDK2JKC67DT2QYF67IT27YCA7IK2JWFTBIT23UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/column-pinning-sticky\n\n# React Example: Column Pinning Sticky\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBIT2QJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/column-sizing\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBIT2QWHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/column-resizing-performant\n\n# React Example: Column Resizing Performant\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBDL5QIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/column-visibility\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBDL5QNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/editable-data\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBDL5Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/expanding\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBITK3LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/sub-components\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBITK3MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/fully-controlled\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBITK3YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/grouping\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Bryntum Gantt: Flexible and powerful JS Gantt charts for smarter project\nplanning.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEBDEZ3JCA7ILK3LCKYD6K7KC67DT2QYF67IT27YCA7IK2JWFTBITKQJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/pagination\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/pagination-controlled\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBITKQYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/row-dnd\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Access. Query. Build. All with one API. MongoDB Atlas.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKBDCZ3JCA7ILK3ICYBI5K7KC67DT2QYF67IT27YCA7IK2JWFTBITKJJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/row-pinning\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBIL53WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/row-selection\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIL53UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/sorting\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/virtualized-columns\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBIL5QIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/virtualized-columns-experimental\n\n# React Example: Virtualized Columns Experimental\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/virtualized-rows\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBIL5Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/virtualized-rows-experimental\n\n# React Example: Virtualized Rows Experimental\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTSDTK3LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/virtualized-infinite-scrolling\n\n# React Example: Virtualized Infinite Scrolling\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ See what your team could do with The DevSecOps Platform. Take GitLab for a\nspin.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKK7KC67DT2QYF67IT27YCA7IK2JWFTSDTK3MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/kitchen-sink\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKKQKC67DT2QYF67IT27YCA7IK2JWFTSDTK3YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/bootstrap\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Get free resources, expert support & access to community events. Join the Arm\nDeveloper Program.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDV5QKC67DT2QYF67IT27YCA7IK2JWFTSDTKQJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/material-ui-pagination\n\n# React Example: Material Ui Pagination\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTSDTKQMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/full-width-table\n\n# React Example: Full Width Table\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIL2QWHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/full-width-resizable-table\n\n# React Example: Full Width Resizable Table\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Visualize Millions of Data Points in Real-time with LightningChart Python. Get\nFree Trial Today.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6SI5Z3JCA7ILK3LCE7I627KC67DT2QYF67IT27YCA7IK2JWFTBIL2QUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/custom-features\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBIL2JEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/framework/react/examples/query-router-search-params\n\n# React Example: Query Router Search Params\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIL2JIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/latest/docs/introduction\n\nTanStack Table is a library for building powerful tables & datagrids for TS/JS,\nReact, Vue, Solid, Qwik, and Svelte.\n\nis a term for libraries and utilities that provide the logic, state, processing\nand API for UI elements and interactions, but **do not provide markup, styles,\nor pre-built implementations**. Scratching your head yet? üòâ Headless UI has a\nfew main goals:\n\nThe hardest parts of building complex UIs usually revolve around state, events,\nside-effects, data computation/management. By removing these concerns from the\nmarkup, styles and implementation details, our logic and components can be more\nmodular and reusable.\n\nBuilding UI is a very branded and custom experience, even if that means choosing\na design system or adhering to a design spec. To support this custom experience,\ncomponent-based UI libraries need to support a massive (and seemingly endless)\nAPI surface around markup and style customization. Headless UI libraries\ndecouple your logic from your UI\n\nWhen you use a headless UI library, the complex task of **data-processing,\nstate-management, and business logic** are handled for you, leaving you to worry\nabout higher-cardinality decisions that differ across implementations and use\ncases.\n\n> Want to dive deeper? [Read more about Headless\n> UI](https://tanstack.com/table/latest/docs/<https:/www.merrickchristensen.com/articles/headless-\n> user-interface-components/>).\n## [Component-based libraries vs Headless\nlibraries](https://tanstack.com/table/latest/docs/<#component-based-libraries-\nvs-headless-libraries>)\n\nIn the ecosystem of table/datagrid libraries, there are two main categories:\n\n### [Which kind of table library should I\nuse?](https://tanstack.com/table/latest/docs/<#which-kind-of-table-library-\nshould-i-use>)\n\nEach approach has subtle tradeoffs. Understanding these subtleties will help you\nmake the right decision for your application and team.\n\nComponent-based table libraries will typically supply you with a feature-rich\ndrop-in solution and ready-to-use components/markup complete with\nstyles/theming. is a great example of this type of table library.\n\n  * Custom styles are typically theme-based\n  * Highly coupled to framework adapters and platforms\n\n**If you want a ready-to-use table and design/bundle-size are not hard\nrequirements** , then you should consider using a component-based table library.\n\nThere are a lot of component-based table libraries out there, but we believe is\nthe gold standard and is by far our favorite grid-sibling (don't tell the others\nü§´).\n\nHeadless table libraries will typically supply you with functions, state,\nutilities and event listeners to build your own table markup or attach to\nexisting table markups.\n\n  * Full control over markup and styles\n  * Supports all styling patterns (CSS, CSS-in-JS, UI libraries, etc)\n  * Portable. Run anywhere JS runs!\n\n  * No markup, styles or themes provided\n\n**If you want a lighter-weight table or full control over the design** , then\nyou should consider using a headless table library.\n\nThere are very few headless table libraries out there and obviously, is our\nfavorite!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Frontend Masters - Your Path to Becoming a Career-Ready Web Developer!\n](https://tanstack.com/table/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JWCWSI4Z3JCA7IE2JWF6SI6KQKC67DT2QYF67IT27YCA7IK2JWCAYI6KJIHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# form state management for TS/JS, React, Vue, Angular, Solid, and Lit\nURL: https://tanstack.com/form\n\n##  form state management for TS/JS, React, Vue, Angular, Solid, and Lit\n\nStop crying over your forms with a return to simplicity, composability and type-\nsafety with TanStack Form. Sporting a **tiny footprint, zero dependencies,\nframework agnostic core and granular type-safe APIs** , TanStack Form is the\nperfect combination of simplicity and power you need to build forms fast with\npeace of mind.\n\nTanStack Form touts first-class TypeScript support with outstanding\nautocompletion, excellent generic throughput and inferred types everywhere\npossible. This results in fewer runtime errors, increased code maintainability,\nand a smoother development experience to help you confidently build robust and\ntype-safe form solutions that scale.\n\nForm's headless and framework agnostic approach ensures maximum flexibility and\nbroad compatibility with many front-end frameworks, or no framework at all. By\nboth supplying and encouraging a headless approach to your forms, building\ncustom reusable form components tailored to your application's needs requires\nlittle abstraction and keeps your code modular, simple and composable.\n\nWhen it comes to performance, TanStack Form delivers amazing speed and control,\nbut without the cruft, boilerplate, or abstractions. With granularly reactive\nAPIs at its core, only relevant components are updated when the form state\nchanges. The end result? A faster UI, happy users, and zero worries about\nperformance.\n\n### No dependencies. All the Features.\n\nWith zero dependencies, TanStack Form is extremely lean given the dense feature\nset it provides. From weekend hobbies all the way to enterprise TanStack Form\nhas the tools to help you succeed at the speed of your creativity.\n\nWe're looking for a TanStack Form OSS Partner to go above and beyond the call of\nsponsorship. Are you as invested in TanStack Form as we are? Let's push the\nboundaries of Form together!\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52QNCEAD6Z3JCA7IE2JWFTSIL23KC67DT2QYF67IT27YCA7IK2JWCAYI6KJUHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\n### Less code, fewer edge cases.\n\nInstead of encouraging hasty abstractions and hook-focused APIs, TanStack Form\nembraces composition where it counts by giving you headless APIs via components\n(and hooks if you want them of course). TanStack Form is designed to be used\ndirectly in your components and UI. This means less code, fewer edge cases, and\ndeeper control over your UI. Try it out with one of the examples below!\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/examples/simple\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/form/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I4K7KC67DT2QYF67IT27YCA7IK2JWCYAIE23MHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# form state management for TS/JS, React, Vue, Angular, Solid, and Lit\nURL: https://tanstack.com/form/latest\n\n##  form state management for TS/JS, React, Vue, Angular, Solid, and Lit\n\nStop crying over your forms with a return to simplicity, composability and type-\nsafety with TanStack Form. Sporting a **tiny footprint, zero dependencies,\nframework agnostic core and granular type-safe APIs** , TanStack Form is the\nperfect combination of simplicity and power you need to build forms fast with\npeace of mind.\n\nTanStack Form touts first-class TypeScript support with outstanding\nautocompletion, excellent generic throughput and inferred types everywhere\npossible. This results in fewer runtime errors, increased code maintainability,\nand a smoother development experience to help you confidently build robust and\ntype-safe form solutions that scale.\n\nForm's headless and framework agnostic approach ensures maximum flexibility and\nbroad compatibility with many front-end frameworks, or no framework at all. By\nboth supplying and encouraging a headless approach to your forms, building\ncustom reusable form components tailored to your application's needs requires\nlittle abstraction and keeps your code modular, simple and composable.\n\nWhen it comes to performance, TanStack Form delivers amazing speed and control,\nbut without the cruft, boilerplate, or abstractions. With granularly reactive\nAPIs at its core, only relevant components are updated when the form state\nchanges. The end result? A faster UI, happy users, and zero worries about\nperformance.\n\n### No dependencies. All the Features.\n\nWith zero dependencies, TanStack Form is extremely lean given the dense feature\nset it provides. From weekend hobbies all the way to enterprise TanStack Form\nhas the tools to help you succeed at the speed of your creativity.\n\nWe're looking for a TanStack Form OSS Partner to go above and beyond the call of\nsponsorship. Are you as invested in TanStack Form as we are? Let's push the\nboundaries of Form together!\n\n[ Access. Query. Build. All with one API. MongoDB Atlas.\n](https://tanstack.com/form/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKBDCZ3JCA7ILK3ICYBI5K7KC67DT2QYF67IT27YCA7IK2JWFTBIL27LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\n### Less code, fewer edge cases.\n\nInstead of encouraging hasty abstractions and hook-focused APIs, TanStack Form\nembraces composition where it counts by giving you headless APIs via components\n(and hooks if you want them of course). TanStack Form is designed to be used\ndirectly in your components and UI. This means less code, fewer edge cases, and\ndeeper control over your UI. Try it out with one of the examples below!\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/form/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/overview\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nTanStack Form is the ultimate solution for handling forms in web applications,\nproviding a powerful and flexible approach to form management. Designed with\nfirst-class TypeScript support, headless UI components, and a framework-agnostic\ndesign, it streamlines form handling and ensures a seamless experience across\nvarious front-end frameworks.\n\n> **TanStack Form is in release candidate mode, meaning that there should be\n> extremely few or no breaking changes prior to a 1.x release.**\n> To learn more and see [our roadmap to v1, please check our\n> GitHub](https://tanstack.com/form/latest/docs/<https:/github.com/TanStack/form/issues/813>).\nMost web frameworks do not offer a comprehensive solution for form handling,\nleaving developers to create their own custom implementations or rely on less-\ncapable libraries. This often results in a lack of consistency, poor\nperformance, and increased development time. TanStack Form aims to address these\nchallenges by providing an all-in-one solution for managing forms that is both\npowerful and easy to use.\n\nWith TanStack Form, developers can tackle common form-related challenges such\nas:\n\n  * Reactive data binding and state management\n  * Complex validation and error handling\n  * Cross-platform compatibility and custom styling\n\nBy providing a complete solution for these challenges, TanStack Form empowers\ndevelopers to build robust and user-friendly forms with ease.\n\n## [Enough talk, show me some code\nalready!](https://tanstack.com/form/latest/docs/<#enough-talk-show-me-some-code-\nalready>)\n\nIn the example below, you can see TanStack Form in action with the React\nframework adapter:\n\n```\n\n   // Do something with form data\n\n/* A type-safe field component*/\n\n 'A first name is required'\n\n 'First name must be at least 3 characters'\n\n          'No \"error\" allowed in first name'\n\n        // Avoid hasty abstractions. Render props are great!\n\n```\n\n```\n\n   // Do something with form data\n\n/* A type-safe field component*/\n\nA first name is required\n\nFirst name must be at least 3 characters\n\nNo \"error\" allowed in first name\n\n        // Avoid hasty abstractions. Render props are great!\n\n```\n\n## [You talked me into it, so what\nnow?](https://tanstack.com/form/latest/docs/<#you-talked-me-into-it-so-what-\nnow>)\n\n  * Learn TanStack Form at your own pace with our thorough and \n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/form/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBIL27YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/installation\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nTanStack Form is compatible with various front-end frameworks, including React,\nVue, and Solid. To use TanStack Form with your desired framework, install the\ncorresponding adapter via your preferred package manager:\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n> Depending on your environment, you might need to add polyfills. If you want to\n> support older browsers, you need to transpile the library from yourselves.\nIn addition, we support Zod, Yup, and Valibot as validators through official\nvalidator packages:\n\n```\n\n```\n\n```\n\n```\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/form/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBIL53IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/comparison\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n> ‚ö†Ô∏è This comparison table is under construction and is still not completely\n> accurate. If you use any of these libraries and feel the information could be\n> improved, feel free to suggest changes (with notes or evidence of claims)\n> using the \"Edit this page on Github\" link at the bottom of this page.\n  * ‚úÖ 1st-class, built-in, and ready to use with no added configuration or code\n  * üü° Supported, but as an unofficial 3rd party or community library/contribution\n  * üî∂ Supported and documented, but requires extra user-code to implement\n  * üõë Not officially supported or documented.\n\n  \nReact, Vue, Angular, Solid, Lit| React, Vue, Angular, Solid, Vanilla JS  \nFully Inferred TypeScript (Including Deep Fields)  \n*(1) For nested arrays, react-hook-form requires you [to cast the field array by its name](https://tanstack.com/form/latest/docs/<https:/react-hook-form.com/docs/usefieldarray>) if you're using TypeScript\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Loved by developers. Trusted by enterprises. Start your free 60 day trial.\n](https://tanstack.com/form/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DK23KC67DT2QYF67IT27YCA7IK2JWFTBILKJIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/typescript\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nTanStack Form is written 100% in with the highest quality generics, constraints\nand interfaces to make sure the library and your projects are as type-safe as\npossible!\n\nThings to keep in mind:\n\n  * is required in your to get the most out of TanStack Form's types\n  * Types currently require using TypeScript v5.1 or greater\n  * Changes to types in this repository are considered and are usually released as semver changes (otherwise every type enhancement would be a major version!).\n  * It is **highly recommended that you lock your react-form package version to a specific patch release and upgrade with the expectation that types may be fixed or upgraded between any release**\n  * The non-type-related public API of TanStack Form still follows semver very strictly.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/form/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBILKJUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/quick-start\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nThe bare minimum to get started with TanStack Form is to create a form and add a\nfield. Keep in mind that this example does not include any validation or error\nhandling... yet.\n\n```\n\n   // Do something with form data\n\n```\n\n```\n\n   // Do something with form data\n\n```\n\nFrom here, you'll be ready to explore all of the other features of TanStack\nForm!\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/form/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBILK7EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/guides/basic-concepts\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nThis page introduces the basic concepts and terminology used in the library.\nFamiliarizing yourself with these concepts will help you better understand and\nwork with the library.\n\nYou can create options for your form so that it can be shared between multiple\nforms by using the function.\n\nA Form Instance is an object that represents an individual form and provides\nmethods and properties for working with the form. You create a form instance\nusing the hook provided by the form options. The hook accepts an object with an\nfunction, which is called when the form is submitted.\n\n```\n\n  // Do something with form data\n\n```\n\n```\n\n  // Do something with form data\n\n```\n\nYou may also create a form instance without using by using the standalone API:\n\n```\n\n  // Do something with form data\n\n```\n\n```\n\n  // Do something with form data\n\n```\n\nA Field represents a single form input element, such as a text input or a\ncheckbox. Fields are created using the form.Field component provided by the form\ninstance. The component accepts a name prop, which should match a key in the\nform's default values. It also accepts a children prop, which is a render prop\nfunction that takes a field object as its argument.\n\nEach field has its own state, which includes its current value, validation\nstatus, error messages, and other metadata. You can access a field's state using\nthe property.\n\nThere are three field states can be very useful to see how the user interacts\nwith a field. A field is when the user clicks/tabs into it, until the user\nchanges value in it, and after the value has been changed. You can check these\nstates via the , and flags, as seen below.\n\n> **Important note for users coming from** : the flag in is different from the\n> flag with the same name in RHF. In RHF, , when the form's values are different\n> from the original values. If the user changes the values in a form, and then\n> changes them again to end up with values that match the form's default values,\n> will be in RHF, but in . The default values are exposed both on the form's and\n> the field's level in (, ), so you can write your own helper if you need to\n> emulate RHF's behavior.`\nThe Field API is an object passed to the render prop function when creating a\nfield. It provides methods for working with the field's state.\n\nprovides both synchronous and asynchronous validation out of the box. Validation\nfunctions can be passed to the component using the prop.\n\n```\n\n 'A first name is required'\n\n 'First name must be at least 3 characters'\n\n 'No \"error\" allowed in first name'\n\n```\n\n```\n\nA first name is required\n\nFirst name must be at least 3 characters\n\nNo \"error\" allowed in first name\n\n```\n\n## [Validation with Standard Schema\nLibraries](https://tanstack.com/form/latest/docs/framework/react/guides/<#validation-\nwith-standard-schema-libraries>)\n\nIn addition to hand-rolled validation options, we also support the\nspecification.\n\nYou can define a schema using any of the libraries implementing the\nspecification and pass it to a form or field validator.\n\n```\n\n'You must be 13 to make an account'\n\n```\n\n```\n\nYou must be 13 to make an account\n\n```\n\noffers various ways to subscribe to form and field state changes, most notably\nthe hook and the component. These methods allow you to optimize your form's\nrendering performance by only updating components when necessary.\n\nIt is important to remember that while the hook's prop is optional, it is\nstrongly recommended to provide one, as omitting it will result in unnecessary\nre-renders.\n\n```\n\n```\n\n```\n\n```\n\nNote: The usage of the hook to achieve reactivity is discouraged since it is\ndesigned to be used thoughtfully within the component. You might want to use\ninstead.\n\nallows you to react to specific triggers and \"listen\" to them to dispatch side\neffects.\n\n```\n\n```\n\n```\n\n```\n\nMore information can be found at\n\nArray fields allow you to manage a list of values within a form, such as a list\nof hobbies. You can create an array field using the component with the prop.\n\nWhen working with array fields, you can use the fields , , and methods to add,\nremove, and swap values in the array.\n\n```\n\n```\n\nThese are the basic concepts and terminology used in the library. Understanding\nthese concepts will help you work more effectively with the library and create\ncomplex forms with ease.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Secure Homebrew and gain visibility into your software supply chain. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCKSDK23KC67DT2QYF67IT27YCA7IK2JWFTBILK7IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/guides/validation\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nAt the core of TanStack Form's functionalities is the concept of validation.\nTanStack Form makes validation highly customizable:\n\n  * You can control when to perform the validation (on change, on input, on blur, on submit...)\n  * Validation rules can be defined at the field level or at the form level\n  * Validation can be synchronous or asynchronous (for example, as a result of an API call)\n\nIt's up to you! The component accepts some callbacks as props such as or . Those\ncallbacks are passed the current value of the field, as well as the fieldAPI\nobject, so that you can perform the validation. If you find a validation error,\nsimply return the error message as string and it will be available in .\n\n```\n\n 'You must be 13 to make an account'\n\n```\n\n```\n\nYou must be 13 to make an account\n\n```\n\nIn the example above, the validation is done at each keystroke (). If, instead,\nwe wanted the validation to be done when the field is blurred, we would change\nthe code above like so:\n\n```\n\n 'You must be 13 to make an account'\n\n    // Listen to the onBlur event on the field\n\n    // We always need to implement onChange, so that TanStack Form receives the changes\n\n```\n\n```\n\nYou must be 13 to make an account\n\n    // Listen to the onBlur event on the field\n\n    // We always need to implement onChange, so that TanStack Form receives the changes\n\n```\n\nSo you can control when the validation is done by implementing the desired\ncallback. You can even perform different pieces of validation at different\ntimes:\n\n```\n\n 'You must be 13 to make an account'\n\n    // Listen to the onBlur event on the field\n\n    // We always need to implement onChange, so that TanStack Form receives the changes\n\n```\n\n```\n\nYou must be 13 to make an account\n\n    // Listen to the onBlur event on the field\n\n    // We always need to implement onChange, so that TanStack Form receives the changes\n\n```\n\nIn the example above, we are validating different things on the same field at\ndifferent times (at each keystroke and when blurring the field). Since is an\narray, all the relevant errors at a given time are displayed. You can also use\nto get errors based on the validation was done (onChange, onBlur etc...). More\ninfo about displaying errors below.\n\nOnce you have your validation in place, you can map the errors from an array to\nbe displayed in your UI:\n\n```\n\n 'You must be 13 to make an account'\n\n```\n\n```\n\nYou must be 13 to make an account\n\n```\n\nOr use the property to access the specific error you're looking for:\n\n```\n\n 'You must be 13 to make an account'\n\n```\n\n```\n\nYou must be 13 to make an account\n\n```\n\n## [Validation at field level vs at form\nlevel](https://tanstack.com/form/latest/docs/framework/react/guides/<#validation-\nat-field-level-vs-at-form-level>)\n\nAs shown above, each accepts its own validation rules via the , etc...\ncallbacks. It is also possible to define validation rules at the form level (as\nopposed to field by field) by passing similar callbacks to the hook.\n\n```\n\n   // Add validators to the form the same way you would add them to a field\n\n 'Must be 13 or older to sign'\n\n // Subscribe to the form's error map so that updates to it will render\n\n // alternately, you can use `form.Subscribe`\n\n>There was an error on the form: {formErrorMap.onChange}</\n\n```\n\n```\n\n   // Add validators to the form the same way you would add them to a field\n\nMust be 13 or older to sign\n\n // Subscribe to the form's error map so that updates to it will render\n\n // alternately, you can use `form.Subscribe`\n\nThere was an error on the form:\n\n```\n\n### [Setting field-level errors from the form's\nvalidators](https://tanstack.com/form/latest/docs/framework/react/guides/<#setting-\nfield-level-errors-from-the-forms-validators>)\n\nYou can set errors on the fields from the form's validators. One common use case\nfor this is validating all the fields on submit by calling a single API endpoint\nin the form's validator.\n\n```\n\n    // Verify the age on the server\n\n// The `form` key is optional\n\n'Must be 13 or older to sign'\n\n>There was an error on the form: {errorMap.onSubmit}</\n\n```\n\n```\n\n    // Verify the age on the server\n\n // The `form` key is optional\n\nMust be 13 or older to sign\n\nThere was an error on the form:\n\n```\n\n> Something worth mentioning is that if you have a form validation function that\n> returns an error, that error may be overwritten by the field-specific\n> validation.\n> ```\n\n```\n\n```\n\n```\n\n> Will only show even if the 'Too young!' error is returned by the form-level\n> validation.\nWhile we suspect most validations will be synchronous, there are many instances\nwhere a network call or some other async operation would be useful to validate\nagainst.\n\nTo do this, we have dedicated , , and other methods that can be used to validate\nagainst:\n\n```\n\n 'You must be 13 to make an account'\n\n```\n\n```\n\nYou must be 13 to make an account\n\n```\n\nSynchronous and Asynchronous validations can coexist. For example, it is\npossible to define both and on the same field:\n\n```\n\n 'You must be at least 13'\n\n 'You can only increase the age'\n\n```\n\n```\n\nYou must be at least 13\n\nYou can only increase the age\n\n```\n\nThe synchronous validation method () is run first and the asynchronous method ()\nis only run if the synchronous one () succeeds. To change this behaviour, set\nthe option to , and the async method will be run regardless of the result of the\nsync method.\n\nWhile async calls are the way to go when validating against the database,\nrunning a network request on every keystroke is a good way to DDOS your\ndatabase.\n\nInstead, we enable an easy method for debouncing your calls by adding a single\nproperty:\n\nThis will debounce every async call with a 500ms delay. You can even override\nthis property on a per-validation property:\n\n```\n\n```\n\n```\n\n```\n\n> This will run every 1500ms while will run every 500ms.\nWhile functions provide more flexibility and customization over your validation,\nthey can be a bit verbose. To help solve this, there are libraries that provide\nschema-based validation to make shorthand and type-strict validation\nsubstantially easier. You can also define a single schema for your entire form\nand pass it to the form level, errors will be automatically propagated to the\nfields.\n\nTanStack Form natively supports all libraries following the , most notably:\n\nmake sure to use the latest version of the schema libraries as older versions\nmight not support Standard Schema yet.\n\nTo use schemas from these libraries you can pass them to the props as you would\ndo with a custom function:\n\n```\n\n'You must be 13 to make an account'\n\n```\n\n```\n\nYou must be 13 to make an account\n\n```\n\nAsync validations on form and field level are supported as well:\n\n```\n\n'You must be 13 to make an account'\n\n'You can only increase the age'\n\n```\n\n```\n\nYou must be 13 to make an account\n\nYou can only increase the age\n\n```\n\nWe also support through an official adapter:\n\nOnce done, we can add the adapter to the property on the form or field:\n\n```\n\n // Either add the validator here or on `Field`\n\n'You must be 13 to make an account'\n\n```\n\n```\n\n // Either add the validator here or on `Field`\n\nYou must be 13 to make an account\n\n```\n\n## [Preventing invalid forms from being\nsubmitted](https://tanstack.com/form/latest/docs/framework/react/guides/<#preventing-\ninvalid-forms-from-being-submitted>)\n\nThe , etc... callbacks are also run when the form is submitted and the\nsubmission is blocked if the form is invalid.\n\nThe form state object has a flag that is false when any field is invalid and the\nform has been touched ( is true until the form has been touched, even if some\nfields are \"technically\" invalid based on their / props).\n\nYou can subscribe to it via and use the value in order to, for example, disable\nthe submit button when the form is invalid (in practice, disabled buttons are\nnot accessible, use instead).\n\n```\n\n```\n\n```\n\n```\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBIL23EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/guides/async-initial-values\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nLet's say that you want to fetch some data from an API and use it as the initial\nvalue of a form.\n\nWhile this problem sounds simple on the surface, there are hidden complexities\nyou might not have thought of thus far.\n\nFor example, you might want to show a loading spinner while the data is being\nfetched, or you might want to handle errors gracefully. Likewise, you could also\nfind yourself looking for a way to cache the data so that you don't have to\nfetch it every time the form is rendered.\n\nWhile we could implement many of these features from scratch, it would end up\nlooking a lot like another project we maintain: .\n\nAs such, this guide shows you how you can mix-n-match TanStack Form with\nTanStack Query to achieve the desired behavior.\n\n```\n\n   // Do something with form data\n\n```\n\n```\n\n   // Do something with form data\n\n```\n\nThis will show a loading spinner until the data is fetched, and then it will\nrender the form with the fetched data as the initial values.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBIL23YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/guides/arrays\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nTanStack Form supports arrays as values in a form, including sub-object values\ninside of an array.\n\nTo use an array, you can use on an array value:\n\n```\n\n```\n\nThis will generate the mapped JSX every time you run on :\n\nFinally, you can use a subfield like so:\n\n```\n\n```\n\n```\n\n```\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Access. Query. Build. All with one API. MongoDB Atlas.\n](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKBDCZ3JCA7ILK3ICYBI5K7KC67DT2QYF67IT27YCA7IK2JWFTBIE53YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/guides/linked-fields\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n# Link Two Form Fields Together\n\nYou may find yourself needing to link two fields together; when one is validated\nas another field's value has changed. One such usage is when you have both a and\nfield, where you want to to error out when 's value does not match; regardless\nof which field triggered the value change.\n\n  * User updates confirm password field.\n  * User updates the non-confirm password field.\n\nIn this example, the form will still have errors present, as the \"confirm\npassword\" field validation has not been re-ran to mark as accepted.\n\nTo solve this, we need to make sure that the \"confirm password\" validation is\nre-run when the password field is updated. To do this, you can add a property to\nthe field.\n\n```\n\n```\n\n```\n\n```\n\nThis similarly works with property, which will re-run the validation when the\nfield is blurred.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIE5QLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/guides/listeners\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n# Side effects for event triggers\n\nFor situations where you want to \"affect\" or \"react\" to triggers, there's the\nlistener API. For example, if you, as the developer, want to reset a form field\nas a result of another field changing, you would use the listener API.\n\nImagine the following user flow:\n\n  * User selects a country from a drop-down.\n  * User then selects a province from another drop-down.\n  * User changes the selected country to a different one.\n\nIn this example, when the user changes the country, the selected province needs\nto be reset as it's no longer valid. With the listener API, we can subscribe to\nthe onChange event and dispatch a reset to the field \"province\" when the\nlistener is fired.\n\nEvents that can be \"listened\" to are:\n\n```\n\n```\n\n```\n\n```\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBIE5QMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/guides/ui-libraries\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n# [Usage of TanStack Form with UI\nLibraries](https://tanstack.com/form/latest/docs/framework/react/guides/<#usage-\nof-tanstack-form-with-ui-libraries>)\n\nTanStack Form is a headless library, offering you complete flexibility to style\nit as you see fit. It's compatible with a wide range of UI libraries, including\n, , , or even plain CSS.\n\nThis guide focuses on and , but the concepts are applicable to any UI library of\nyour choice.\n\nBefore integrating TanStack Form with a UI library, ensure the necessary\ndependencies are installed in your project:\n\n  * For , follow the installation instructions on their .\n\nNote: While you can mix and match libraries, it's generally advisable to stick\nwith one to maintain consistency and minimize bloat.\n\nHere's an example demonstrating the integration of TanStack Form with Mantine\ncomponents:\n\n```\n\n```\n\n```\n\n```\n\n  * Initially, we utilize the hook from TanStack and destructure the necessary properties. This step is optional; alternatively, you could use if preferred. TypeScript's type inference ensures a smooth experience regardless of the approach.\n  * The component, derived from , accepts several properties, such as . For this demonstration, we focus on two primary properties: and .\n    * The property identifies each , for instance, in our example.\n    * The property leverages the concept of render props, allowing us to integrate components without unnecessary abstractions.\n  * TanStack's design relies heavily on render props, providing access to within the component. This approach is entirely type-safe. When integrating with Mantine components, such as , we selectively destructure properties like , , and . This selective approach is due to the slight differences in types between and the we get in the children.\n  * By following these steps, you can seamlessly integrate Mantine components with TanStack Form.\n  * This methodology is equally applicable to other components, such as , ensuring consistent integration across different UI elements.\n\nThe process for integrating Material UI components is similar. Here's an example\nusing TextField and Checkbox from Material UI:\n\n  * The integration approach is the same as with Mantine.\n  * The primary difference lies in the specific Material UI component properties and styling options.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Loved by developers. Trusted by enterprises. Start your free 60 day trial.\n](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKKJKC67DT2QYF67IT27YCA7IK2JWFTBIE5Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/guides/react-native\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nTanStack Form is headless and it should support React Native out-of-the-box\nwithout needing any additional configuration.\n\n```\n\n \"You must be 13 to make an account\"\n\n```\n\n```\n\nYou must be 13 to make an account\n\n```\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBILK3WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/guides/ssr\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nTanStack Form is compatible with React out of the box, supporting and being\nframework-agnostic. However, specific configurations are necessary, according to\nyour chosen framework.\n\nToday we support the following meta-frameworks:\n\n## [Using TanStack Form in TanStack\nStart](https://tanstack.com/form/latest/docs/framework/react/guides/<#using-\ntanstack-form-in-tanstack-start>)\n\nThis section focuses on integrating TanStack Form with TanStack Start.\n\n  * Start a new project, following the steps in the \n  * Install any of your choice. [Optional]\n\nLet's start by creating a that we'll use to share the form's shape across the\nclient and server.\n\n```\n\n// app/routes/index.tsx, but can be extracted to any other path\n\n// Notice the import path is different from the typical import location\n\n// You can pass other form options here, like `validatorAdapter`\n\n```\n\n```\n\n// app/routes/index.tsx, but can be extracted to any other path\n\n// Notice the import path is different from the typical import location\n\n// You can pass other form options here, like `validatorAdapter`\n\n```\n\nNext, we can create that will handle the form submission on the server.\n\n```\n\n// app/routes/index.tsx, but can be extracted to any other path\n\n 'Server validation: You must be at least 12 to sign up'\n\n   // Some other error occurred when parsing the form\n\n'There was an internal error'\n\n```\n\n```\n\n// app/routes/index.tsx, but can be extracted to any other path\n\nServer validation: You must be at least 12 to sign up\n\n   // Some other error occurred when parsing the form\n\nThere was an internal error\n\n```\n\nThen we need to establish a way to grab the form data from 's using another\nserver action:\n\n```\n\n// app/routes/index.tsx, but can be extracted to any other path\n\n```\n\n```\n\n// app/routes/index.tsx, but can be extracted to any other path\n\n```\n\nFinally, we'll use in our loader to get the state from our server into our\nclient and in our client-side form component.\n\n```\n\n { mergeForm, useForm, useTransform }\n\n 'Client validation: You must be at least 8'\n\n```\n\n```\n\nClient validation: You must be at least 8\n\n```\n\n## [Using TanStack Form in a Next.js App\nRouter](https://tanstack.com/form/latest/docs/framework/react/guides/<#using-\ntanstack-form-in-a-nextjs-app-router>)\n\n> Before reading this section, it's suggested you understand how React Server\n> Components and React Server Actions work. [Check out this blog series for more\n> information](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/unicorn-\n> utterances.com/collections/react-beyond-the-render>)\nThis section focuses on integrating TanStack Form with , particularly using the\nand .\n\n  * Start a new project, following the steps in the . Ensure you select for Would you like to use App Router? during the setup to access all new features provided by Next.js.\n  * Install any of your choice. [Optional]\n\nLet's start by creating a that we'll use to share the form's shape across the\nclient and server.\n\n```\n\n// Notice the import path is different from the client\n\n// You can pass other form options here, like `validatorAdapter`\n\n```\n\n```\n\n// Notice the import path is different from the client\n\n// You can pass other form options here, like `validatorAdapter`\n\n```\n\nNext, we can create that will handle the form submission on the server.\n\n```\n\n// Notice the import path is different from the client\n\n// Create the server action that will infer the types of the form from\n`formOpts`\n\n 'Server validation: You must be at least 12 to sign up'\n\n  // Some other error occurred while validating your form\n\n // Your form has successfully validated!\n\n```\n\n```\n\n// Notice the import path is different from the client\n\n// Create the server action that will infer the types of the form from\n`formOpts`\n\nServer validation: You must be at least 12 to sign up\n\n  // Some other error occurred while validating your form\n\n // Your form has successfully validated!\n\n```\n\nFinally, we'll use in our client-side form component.\n\n```\n\n// Notice the import is from `react-form`, not `react-form/nextjs`\n\n { mergeForm, useForm, useTransform }\n\n 'Client validation: You must be at least 8'\n\n```\n\n```\n\n// Notice the import is from `react-form`, not `react-form/nextjs`\n\nClient validation: You must be at least 8\n\n```\n\nHere, we're using and TanStack Form's hook to merge state returned from the\nserver action with the form state.\n\n> If you get the following error in your Next.js application:\n> ```\n're importing a component that needs `useState`. This React hook only works in a\nclient component. To fix, mark the file (or its parent) with the `\"use client\"`\ndirective\n\n```\n\n```\n\nre importing a component that needs `useState`. This React hook only works in a\nclient component. To fix, mark the file (or its parent) with the `\"use client\"`\ndirective\n\n```\n\n> This is because you're not importing server-side code from . Ensure you're\n> importing the correct module based on the environment.\n> [This is a limitation of\n> Next.js](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/github.com/phryneas/rehackt>).\n> Other meta-frameworks will likely not have this same problem.\n## [Using TanStack Form in\nRemix](https://tanstack.com/form/latest/docs/framework/react/guides/<#using-\ntanstack-form-in-remix>)\n\n> Before reading this section, it's suggested you understand how Remix actions\n> work. [Check out Remix's docs for more\n> information](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/remix.run/docs/en/main/discussion/data-\n> flow#route-action>)\n  * Start a new project, following the steps in the .\n  * Install any of your choice. [Optional]\n\nLet's start by creating a that we'll use to share the form's shape across the\nclient and server.\n\n```\n\n// You can pass other form options here, like `validatorAdapter`\n\n```\n\n```\n\n// You can pass other form options here, like `validatorAdapter`\n\n```\n\nNext, we can create that will handle the form submission on the server.\n\n```\n\n// export const formOpts = formOptions({\n\n// Create the server action that will infer the types of the form from\n`formOpts`\n\n 'Server validation: You must be at least 12 to sign up'\n\n  // Some other error occurred while validating your form\n\n // Your form has successfully validated!\n\n```\n\n```\n\n// export const formOpts = formOptions({\n\n// Create the server action that will infer the types of the form from\n`formOpts`\n\nServer validation: You must be at least 12 to sign up\n\n  // Some other error occurred while validating your form\n\n // Your form has successfully validated!\n\n```\n\nFinally, the will be called when the form submits.\n\n```\n\n { mergeForm, useForm, useTransform }\n\n// export const formOpts = formOptions({\n\n// const serverValidate = createServerValidate({\n\n// export async function action({request}: ActionFunctionArgs) {\n\n 'Client validation: You must be at least 8'\n\n```\n\n```\n\n// export const formOpts = formOptions({\n\n// const serverValidate = createServerValidate({\n\n// export async function action({request}: ActionFunctionArgs) {\n\nClient validation: You must be at least 8\n\n```\n\nHere, we're using and TanStack Form's hook to merge state returned from the\nserver action with the form state.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Start building for free with MongoDB Atlas‚Äîthe fast and secure multi-cloud\ndatabase.\n](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKBDCZ3JCA7ILK3ICYBI523KC67DT2QYF67IT27YCA7IK2JWFTBILK3UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/tanstack-start\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nTanStack Start is a full-stack framework for building server-rendered React\napplications built on top of .\n\nTo set up a TanStack Start project, you'll need to:\n\nFollow this guide to build a basic TanStack Start web application. Together, we\nwill use TanStack Start to:\n\n  * With a button to increment the counter persistently.\n\n[Here is what that will look\nlike](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/stackblitz.com/github/tanstack/router/tree/main/examples/react/start-\nbasic-counter>)\n\nCreate a new project if you're starting fresh.\n\nCreate a file with at least the following settings:\n\nTanStack Start is powered by the following packages and need to be installed as\ndependencies:\n\nVinxi is a temporary dependency that will be replaced by a simple vite plugin or\na dedicated Start CLI.\n\nYou'll also need React and the Vite React plugin, so install their dependencies\nas well:\n\nPlease, for you, your fellow developers, and your users' sake, use TypeScript:\n\nWe'll then update our to use Vinxi's CLI and set :\n\n```\n\n```\n\n```\n\n```\n\nThere are four required files for TanStack Start usage:\n\n  1. The root of your application\n\nOnce configuration is done, we'll have a file tree that looks like the\nfollowing:\n\n```\n\n‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ `__root.tsx`\n\n```\n\n```\n\n‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ `__root.tsx`\n\n```\n\nThis is the file that will dictate the behavior of TanStack Router used within\nStart. Here, you can configure everything from the default to .\n\n```\n\n```\n\n> is not a file you're expected to have at this point. It will be generated when\n> you run TanStack Start (via or ) for the first time.\nAs TanStack Start is an framework, we need to pipe this router information to\nour server entry point:\n\n```\n\n```\n\nThis allows us to know what routes and loaders we need to execute when the user\nhits a given route.\n\nNow we need a way to hydrate our client-side JavaScript once the route resolves\nto the client. We do this by piping the same router information to our client\nentry point:\n\n```\n\n```\n\nThis enables us to kick off client-side routing once the user's initial server\nrequest has fulfilled.\n\n## [The Root of Your\nApplication](https://tanstack.com/router/latest/docs/framework/react/guide/<#the-\nroot-of-your-application>)\n\nFinally, we need to create the root of our application. This is the entry point\nfor all other routes. The code in this file will wrap all other routes in the\napplication.\n\n```\n\n```\n\n```\n\n```\n\nNow that we have the basic templating setup, we can write our first route. This\nis done by creating a new file in the directory.\n\n```\n\n```\n\nThat's it! ü§Ø You've now set up a TanStack Start project and written your first\nroute. üéâ\n\nYou can now run to start your server and navigate to to see your route in\naction.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBILKQMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/router/latest/docs/framework/react/guide/server-functions\n\n* [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\n  * [Basic + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query-file-based>)\n  * [Basic + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-react-query>)\n  * [Basic + SSR Streaming (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/basic-ssr-streaming-file-based>)\n  * [Kitchen Sink + React Query (file-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query-file-based>)\n  * [Kitchen Sink + React Query (code-based)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/kitchen-sink-react-query>)\n  * [With tRPC + React Query](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/with-trpc-react-query>)\n  * [Monorepo basic (with lazy loading)](https://tanstack.com/router/latest/docs/framework/react/guide/</router/latest/docs/framework/react/examples/router-monorepo-simple-lazy>)\n\nThe page you are looking for does not exist.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/router/latest/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCE7I52JKC67DT2QYF67IT27YCA7IK2JWFTBIE2QUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/guides/debugging\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/guides/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nHere's a list of common errors you might see in the console and how to fix them.\n\n# [Changing an uncontrolled input to be\ncontrolled](https://tanstack.com/form/latest/docs/framework/react/guides/<#changing-\nan-uncontrolled-input-to-be-controlled>)\n\nIf you see this error in the console:\n\n```\n\nWarning: A component is changing an uncontrolled input to be controlled. This is\nlikely caused by the value changing from undefined to a defined value, which\nshould not happen. Decide between using a controlled or uncontrolled input\nelement for the lifetime of the component. More info:\nhttps://reactjs.org/link/controlled-components\n\n```\n\n```\n\nWarning: A component is changing an uncontrolled input to be controlled. This is\nlikely caused by the value changing from undefined to a defined value, which\nshould not happen. Decide between using a controlled or uncontrolled input\nelement for the lifetime of the component. More info:\nhttps://reactjs.org/link/controlled-components\n\n```\n\nIt's likely you forgot the in your Hook or component usage. This is occurring\nbecause the input is being rendered before the form value is initialized and is\ntherefore changing from to when a text input is made.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/form/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBIE2JEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/index\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/form/latest/docs/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIE2JWHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/interfaces/fieldlisteners\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n# [Interface: FieldListeners<TParentData, TName, TFieldValidator,\nTFormValidator,\nTData>](https://tanstack.com/form/latest/docs/reference/interfaces/<#interface-\nfieldlistenerstparentdata-tname-tfieldvalidator-tformvalidator-tdata>)\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Instantly monitor any environment with our proprietary eBPF sensor\n](https://tanstack.com/form/latest/docs/reference/interfaces/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEK3KC67DT2QYF67IT27YCA7IK2JWFTBIE2JUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/baseformstate\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nAn object representing the current state of the form.\n\nThe error map for the form itself.\n\nA record of field metadata for each field in the form, not including the derived\nproperties, like and such\n\nA boolean indicating if the form has been submitted.\n\nA boolean indicating if the form is currently in the process of being submitted\nafter is called.\n\nGoes back to when submission completes for one of the following reasons:\n\n  * the validation step returned errors.\n\nNote: if you're running async operations in your function make sure to await\nthem to ensure is set to only when the async operation completes.\n\nThis is useful for displaying loading indicators or disabling form inputs during\nsubmission.\n\nA boolean indicating if the form or any of its fields are currently validating.\n\nA counter for tracking the number of submission attempts.\n\nAn internal mechanism used for keeping track of validation logic in a form.\n\nThe current values of the form fields.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBIE27JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/derivedformstate\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nA boolean indicating if the form can be submitted based on its current state.\n\nThe error array for the form itself.\n\nA record of field metadata for each field in the form.\n\nA boolean indicating if any of the form fields have been blurred.\n\nA boolean indicating if any of the form's fields' values have been modified by\nthe user. if the user have modified at least one of the fields. Opposite of .\n\nA boolean indicating if all the form fields are valid.\n\nA boolean indicating if any of the form fields are currently validating.\n\nA boolean indicating if the form is valid.\n\nA boolean indicating if the form is currently validating.\n\nA boolean indicating if none of the form's fields' values have been modified by\nthe user. if the user have not modified any of the fields. Opposite of .\n\nA boolean indicating if any of the form fields have been touched.\n\nA boolean indicating if the form and all its fields are valid.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIE27MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/fieldmetabase\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nA map of errors related to the field value.\n\nA flag indicating whether the field has been blurred.\n\nA flag that is if the field's value has been modified by the user. Opposite of .\n\nA flag indicating whether the field has been touched.\n\nA flag indicating whether the field is currently being validated.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBIE277HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/fieldmetaderived\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nAn array of errors related to the field value.\n\nA flag that is if the field's value has not been modified by the user. Opposite\nof .\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBIE53IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/fieldserrormapfromvalidator\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Your fast track into the future of software development. Join the Arm\nDeveloper Program today. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDPK3KC67DT2QYF67IT27YCA7IK2JWFTBIE53NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/formvalidatefn\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBIEKJMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/formvalidator\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n# [Type Alias: FormValidator<TFormData, TType,\nTFn>](https://tanstack.com/form/latest/docs/reference/type-aliases/<#type-alias-\nformvalidatortformdata-ttype-tfn>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCE7I52JKC67DT2QYF67IT27YCA7IK2JWFTBIEKJ7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/index/type-aliases/standardschemav1.md\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/index/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/index/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nThe page you are looking for does not exist.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/form/latest/docs/reference/index/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBIEK7LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/validationsource\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBIEK7NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/functions/isstandardschemavalidator\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/form/latest/docs/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBIEK77HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/functions/shallow\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Loved by developers. Trusted by enterprises. Start your free 60 day trial.\n](https://tanstack.com/form/latest/docs/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKKJKC67DT2QYF67IT27YCA7IK2JWFTBIE23LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/functions/standardschemavalidator\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/form/latest/docs/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBIE23MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/classes/fieldapi\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/classes/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/classes/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n# [Class: FieldApi<TParentData, TName, TFieldValidator, TFormValidator,\nTData>](https://tanstack.com/form/latest/docs/reference/classes/<#class-\nfieldapitparentdata-tname-tfieldvalidator-tformvalidator-tdata>)\n\nA class representing the API for managing a form field.\n\nNormally, you will not need to create a new instance directly. Instead, you will\nuse a framework hook/function like or to create a new instance for you that uses\nyour framework's reactivity model. However, if you need to create a new instance\nmanually, you can do so by calling the constructor.\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nA reference to the form API instance.\n\n```\n\n```\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nGets the field information object.\n\nGets the current field value.\n\nInserts a value at the specified index, shifting the subsequent values to the\nright.\n\nMounts the field instance to the form.\n\nMoves the value at the first specified index to the second specified index.\n\nPushes a new value to the field.\n\nRemoves a value at the specified index.\n\nReplaces a value at the specified index.\n\nSets the field value and run the validator.\n\nSwaps the values at the specified indices.\n\nUpdates the field instance with new options.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/form/latest/docs/reference/classes/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBIE23YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/classes/formapi\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/classes/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/classes/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nA class representing the Form API. It handles the logic and interactions with\nthe form state.\n\nNormally, you will not need to create a new instance directly. Instead, you will\nuse a framework hook/function like or to create a new instance for you that uses\nyour framework's reactivity model. However, if you need to create a new instance\nmanually, you can do so by calling the constructor.\n\nConstructs a new instance with the given form options.\n\n```\n\n```\n\nA record of field information for each field in the form.\n\n```\n\n```\n\nThe options for the form.\n\nGets the field info of the specified field.\n\nGets the metadata of the specified field.\n\nGets the value of the specified field.\n\nHandles the form submission, performs validation, and calls the appropriate\nonSubmit or onInvalidSubmit callbacks.\n\nInserts a value into an array field at the specified index, shifting the\nsubsequent values to the right.\n\nMoves the value at the first specified index to the second specified index\nwithin an array field.\n\nPushes a value into an array field.\n\nRemoves a value from an array field at the specified index.\n\nReplaces a value into an array field at the specified index.\n\nResets the form state to the default values. If values are provided, the form\nwill be reset to those values instead and the default values will be updated.\n\nOptional values to reset the form to.\n\nOptional options to control the reset behavior.\n\nUpdates the metadata of the specified field.\n\nSets the value of the specified field and optionally updates the touched state.\n\nSwaps the values at the specified indices within an array field.\n\nUpdates the form options and form state.\n\nValidates all fields using the correct handlers for a given validation cause.\n\nValidates the children of a specified array in the form starting from a given\nindex until the end using the correct handlers for a given validation type.\n\nValidates a specified field in the form using the correct handlers for a given\nvalidation type.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/form/latest/docs/reference/classes/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBI55QIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/functions/formoptions\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/form/latest/docs/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBIEK3LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/functions/mergeform\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ High-Performance GPU-accelerated rendering to Visualize Trillion Points in\nReal-Time. Free Trial.\n](https://tanstack.com/form/latest/docs/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6SI5Z3JCA7ILK3LCE7I62JKC67DT2QYF67IT27YCA7IK2JWFTBIEK3NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/interfaces/fieldapioptions\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n# [Interface: FieldApiOptions<TParentData, TName, TFieldValidator,\nTFormValidator,\nTData>](https://tanstack.com/form/latest/docs/reference/interfaces/<#interface-\nfieldapioptionstparentdata-tname-tfieldvalidator-tformvalidator-tdata>)\n\nAn object type representing the required options for the FieldApi class.\n\nIf , always run async validation, even if there are errors emitted during\nsynchronous validation.\n\nThe default time to debounce async validation if there is not a more specific\ndebounce time passed.\n\nAn optional object with default metadata for the field.\n\nAn optional default value for the field.\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nA list of listeners which attach to the corresponding events\n\nThe field name. The type will be to ensure your name is a deep key of the parent\ndataset.\n\nA validator provided by an extension, like from\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nA list of validators to pass to the field\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/form/latest/docs/reference/interfaces/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBIEK37HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/interfaces/FieldOptions\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nThe page you are looking for does not exist.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/form/latest/docs/reference/interfaces/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBIEKQIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/interfaces/fieldoptions\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n# [Interface: FieldOptions<TParentData, TName, TFieldValidator, TFormValidator,\nTData>](https://tanstack.com/form/latest/docs/reference/interfaces/<#interface-\nfieldoptionstparentdata-tname-tfieldvalidator-tformvalidator-tdata>)\n\nAn object type representing the options for a field in a form.\n\nIf , always run async validation, even if there are errors emitted during\nsynchronous validation.\n\nThe default time to debounce async validation if there is not a more specific\ndebounce time passed.\n\nAn optional object with default metadata for the field.\n\nAn optional default value for the field.\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nA list of listeners which attach to the corresponding events\n\nThe field name. The type will be to ensure your name is a deep key of the parent\ndataset.\n\nA validator provided by an extension, like from\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nA list of validators to pass to the field\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/form/latest/docs/reference/interfaces/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBIEKQNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/interfaces/fieldvalidators\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n# [Interface: FieldValidators<TParentData, TName, TFieldValidator,\nTFormValidator,\nTData>](https://tanstack.com/form/latest/docs/reference/interfaces/<#interface-\nfieldvalidatorstparentdata-tname-tfieldvalidator-tformvalidator-tdata>)\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nAn optional function, that runs on the blur event of input. If is passed, this\nmay also accept a property from the respective adapter\n\n```\n\n// if `zodAdapter` is passed\n\n```\n\n```\n\n // if `zodAdapter` is passed\n\n```\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nAn optional property similar to but async validation. If is passed, this may\nalso accept a property from the respective adapter\n\n```\n\n// if `zodAdapter` is passed\n\n```\n\n```\n\n // if `zodAdapter` is passed\n\n```\n\nAn optional number to represent how long the should wait before running\n\nIf set to a number larger than 0, will debounce the async validation event by\nthis length of time in milliseconds\n\n```\n\n```\n\nAn optional list of field names that should trigger this field's and events when\nits value changes\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nAn optional property that takes a which is a generic of and . If is passed, this\nmay also accept a property from the respective adapter\n\n```\n\n// if `zodAdapter` is passed\n\n```\n\n```\n\n // if `zodAdapter` is passed\n\n```\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nAn optional property similar to but async validation. If is passed, this may\nalso accept a property from the respective adapter\n\n```\n\n// if `zodAdapter` is passed\n\n```\n\n```\n\n // if `zodAdapter` is passed\n\n```\n\nAn optional number to represent how long the should wait before running\n\nIf set to a number larger than 0, will debounce the async validation event by\nthis length of time in milliseconds\n\n```\n\n```\n\nAn optional list of field names that should trigger this field's and events when\nits value changes\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nAn optional function that takes a param of which is a generic type of and\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nAn optional function, that runs on the submit event of form. If is passed, this\nmay also accept a property from the respective adapter\n\n```\n\n// if `zodAdapter` is passed\n\n```\n\n```\n\n // if `zodAdapter` is passed\n\n```\n\n```\n\nTParentData, TName, TFieldValidator, TFormValidator, TData\n\n```\n\nAn optional property similar to but async validation. If is passed, this may\nalso accept a property from the respective adapter\n\n```\n\n// if `zodAdapter` is passed\n\n```\n\n```\n\n // if `zodAdapter` is passed\n\n```\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Legacy vendor lock-in, out. A truly cloud-native APM, in.\n](https://tanstack.com/form/latest/docs/reference/interfaces/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEKJKC67DT2QYF67IT27YCA7IK2JWFTBIEKJJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/interfaces/formoptions\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nAn object representing the options for a form.\n\nIf true, always run async validation, even when sync validation has produced an\nerror. Defaults to undefined.\n\nOptional time in milliseconds if you want to introduce a delay before firing off\nan async action.\n\nThe default state for the form.\n\nSet initial values for your form.\n\nA function to be called when the form is submitted, what should happen once the\nuser submits a valid form returns or a promise\n\nSpecify an action for scenarios where the user tries to submit an invalid form.\n\nA validator adapter to support usage of extra validation types (IE: Zod, Yup, or\nValibot usage)\n\nA list of validators to pass to the form\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/form/latest/docs/reference/interfaces/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBI52JJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/interfaces/formvalidators\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nOptional function that validates the form data when a field loses focus, returns\na\n\nOptional onBlur asynchronous validation method for when a field loses focus\nreturns a or a promise of\n\nThe default time in milliseconds that if set to a number larger than 0, will\ndebounce the async validation event by this length of time in milliseconds.\n\nOptional function that checks the validity of your data whenever a value changes\n\nOptional onChange asynchronous counterpart to onChange. Useful for more complex\nvalidation logic that might involve server requests.\n\nThe default time in milliseconds that if set to a number larger than 0, will\ndebounce the async validation event by this length of time in milliseconds.\n\nOptional function that fires as soon as the component mounts.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/form/latest/docs/reference/interfaces/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBI52JNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/deepkeys\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nThe keys of an object or array, deeply nested.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBI527EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/deepvalue\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n# [Type Alias: DeepValue<TValue, TAccessor,\nTNullable>](https://tanstack.com/form/latest/docs/reference/type-aliases/<#type-\nalias-deepvaluetvalue-taccessor-tnullable>)\n\nInfer the type of a deeply nested property within an object or an array.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBI527IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/fieldinfo\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nAn object representing the field information for a specific field within the\nform.\n\n```\n\n```\n\nAn instance of the FieldAPI.\n\nA record of field validation internal handling.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBI527NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/fieldmeta\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nAn object type representing the metadata of a field in a form.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Streamline software patching and vulnerability response on macOS. Deploy\nWorkbrew ‚Äì it‚Äôs free. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCKSDK2JKC67DT2QYF67IT27YCA7IK2JWFTBI553EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/fieldstate\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nAn object type representing the state of a field.\n\nThe current metadata of the field.\n\nThe current value of the field.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBI553IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/formstate\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBI553NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/updater\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Get free resources, expert support & access to community events. Join the Arm\nDeveloper Program. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEAICZ3JCA7ILK3LCKYDV5QKC67DT2QYF67IT27YCA7IK2JWFTBI5537HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/updaterfn\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBI5KJYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/validationerror\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBI5K7JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/reference/type-aliases/validationmeta\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nAn object representing the validation metadata for a field. Not intended for\npublic usage.\n\nAn abort controller stored in memory to cancel previous async validation\nattempts.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions. ](https://tanstack.com/form/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBI5K7MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/reference/index\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/form/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBI5K7YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/reference/interfaces/reactformapi\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/interfaces/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nFields that are added onto the from and returned from\n\nA React component to render form fields. With this, you can render and manage\nindividual form fields.\n\nA function that allows you to listen and react to changes in the form's state.\nIt's especially useful when you need to execute side effects or render specific\ncomponents in response to state updates.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/form/latest/docs/framework/react/reference/interfaces/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBI523JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/reference/type-aliases/reactformextendedapi\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nAn extended version of the class that includes React-specific functionalities\nfrom\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/form/latest/docs/framework/react/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBI523MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/reference/functions/usestore\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/form/latest/docs/framework/react/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBI523YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/reference/functions/createservervalidate\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nThe page you are looking for does not exist.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/form/latest/docs/framework/react/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBI52QLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/reference/functions/field\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nA function component that takes field options and a render function as children\nand returns a React component.\n\nThe component uses the hook internally to manage the field instance.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/form/latest/docs/framework/react/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBI52QMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/reference/functions/usefield\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nA hook for managing a field in a form.\n\nAn object with field options.\n\nThe instance for the specified field.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Build chat, video, moderation & feeds, faster. Start coding FREE. No CC\nrequired\n](https://tanstack.com/form/latest/docs/framework/react/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKSIPZ3JCA7ILK3LCKAD4K7KC67DT2QYF67IT27YCA7IK2JWFTBI52Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/reference/functions/useform\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nA custom React Hook that returns an extended instance of the class.\n\nThis API encapsulates all the necessary functionalities related to the form. It\nallows you to manage form state, handle submissions, and interact with form\nfields\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/form/latest/docs/framework/react/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIK5Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/reference/functions/usetransform\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/functions/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/form/latest/docs/framework/react/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBI5K3LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/reference/type-aliases/fieldcomponent\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nA type alias representing a field component for a specific form data type.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Build faster, smarter apps with Bryntum‚Äîrobust JS widgets for scheduling,\nGantt, and data grids.\n](https://tanstack.com/form/latest/docs/framework/react/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEBDEZ3JCA7ILK3LCKYD6KQKC67DT2QYF67IT27YCA7IK2JWFTBI5K3MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/reference/type-aliases/usefield\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/reference/type-aliases/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nA type representing a hook for using a field in a form with the given form data\ntype.\n\nA function that takes an optional object with a property and field options, and\nreturns a instance for the specified field.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/form/latest/docs/framework/react/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBI5K37HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/community/balastrong-tutorial\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/community/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/community/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nTanStack Form maintainer has created a series of video tutorials showcasing the\nmost relevant features of the library. You'll find step by step guides that give\nyou some extra insights into what you can build with TanStack Form, plus some\nnice tips and tricks.\n\nThe first steps into TanStack Form learning all the basics, from setting up the\nlibrary to creating a simple form with text fields and validation (sync,\ndebounced and async).\n\nAn example of data being validated through a backend API while ensuring a smooth\nuser experience by controlling loading state, error messages and linked fields.\n\nHow to handle array fields with primitives (strings, numbers) and objects\n(nested fields), with validation and reordering.\n\nLearn why form values may not update in real time, why this behavior is\nintentional, and how to trigger UI updates efficiently.\n\n## [5. [Form validation with schema\nlibraries](https://tanstack.com/form/latest/docs/framework/react/community/<https:/youtu.be/HSboMHfPuZA>)](https://tanstack.com/form/latest/docs/framework/react/community/<#5-form-\nvalidation-with-schema-libraries>)\n\nUse schema libraries like zod, yup or valibot to define your schema with\nvalidation rules. Pass it to TanStack Form through an adapter to validate all\nfields at once.\n\nSimilarly to field validators, you can attach events to field listeners and\nreact to them, for example to reset a field when another one it depends on has\nchanged.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/form/latest/docs/framework/react/community/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBI5KQIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/examples/array\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/form/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIE5QKC67DT2QYF67IT27YCA7IK2JWFTBI5KQUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/examples/query-integration\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/form/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBI5KJEHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/examples/standard-schema\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Loved by developers. Trusted by enterprises. Start your free 60 day trial.\n](https://tanstack.com/form/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKKJKC67DT2QYF67IT27YCA7IK2JWFTBI5KJIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/examples/yup\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Secure Homebrew and gain visibility into your software supply chain. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/form/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCVYDVZ3JCA7ILK3LCKSDK23KC67DT2QYF67IT27YCA7IK2JWFTBI5KJNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/examples/zod\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/form/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DP5QKC67DT2QYF67IT27YCA7IK2JWFTBIK2JMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/examples/valibot\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/form/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIK2JYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/examples/tanstack-start\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/form/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIK27JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/examples/next-server-actions\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n# React Example: Next Server Actions\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/form/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBIK27WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/examples/remix\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/form/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBIK27UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/examples/ui-libraries\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n[Field Errors From Form Validators\n](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-\nerrors-from-form-validators>)\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/form/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBIK53EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs/framework/react/examples/field-errors-from-form-validators\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/docs/framework/react/examples/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n# React Example: Field Errors From Form Validators\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/form/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBIK53IHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/form/latest/docs\n\n* [Field Errors From Form Validators](https://tanstack.com/form/latest/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\n  * [Field Errors From Form Validators](https://tanstack.com/form/latest/</form/latest/docs/framework/react/examples/field-errors-from-form-validators>)\n\nTanStack Form is the ultimate solution for handling forms in web applications,\nproviding a powerful and flexible approach to form management. Designed with\nfirst-class TypeScript support, headless UI components, and a framework-agnostic\ndesign, it streamlines form handling and ensures a seamless experience across\nvarious front-end frameworks.\n\n> **TanStack Form is in release candidate mode, meaning that there should be\n> extremely few or no breaking changes prior to a 1.x release.**\n> To learn more and see [our roadmap to v1, please check our\n> GitHub](https://tanstack.com/form/latest/<https:/github.com/TanStack/form/issues/813>).\nMost web frameworks do not offer a comprehensive solution for form handling,\nleaving developers to create their own custom implementations or rely on less-\ncapable libraries. This often results in a lack of consistency, poor\nperformance, and increased development time. TanStack Form aims to address these\nchallenges by providing an all-in-one solution for managing forms that is both\npowerful and easy to use.\n\nWith TanStack Form, developers can tackle common form-related challenges such\nas:\n\n  * Reactive data binding and state management\n  * Complex validation and error handling\n  * Cross-platform compatibility and custom styling\n\nBy providing a complete solution for these challenges, TanStack Form empowers\ndevelopers to build robust and user-friendly forms with ease.\n\n## [Enough talk, show me some code\nalready!](https://tanstack.com/form/latest/<#enough-talk-show-me-some-code-\nalready>)\n\nIn the example below, you can see TanStack Form in action with the React\nframework adapter:\n\n```\n\n   // Do something with form data\n\n/* A type-safe field component*/\n\n 'A first name is required'\n\n 'First name must be at least 3 characters'\n\n          'No \"error\" allowed in first name'\n\n        // Avoid hasty abstractions. Render props are great!\n\n```\n\n```\n\n   // Do something with form data\n\n/* A type-safe field component*/\n\nA first name is required\n\nFirst name must be at least 3 characters\n\nNo \"error\" allowed in first name\n\n        // Avoid hasty abstractions. Render props are great!\n\n```\n\n## [You talked me into it, so what now?](https://tanstack.com/form/latest/<#you-\ntalked-me-into-it-so-what-now>)\n\n  * Learn TanStack Form at your own pace with our thorough and \n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/form/latest/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD527LFTSDKZ3JCA7IE2JYCEBDT53KC67DT2QYF67IT27YCA7IK2JWCAYIVKJLHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# UI for Virtualizing Large Element Lists\nURL: https://tanstack.com/virtual\n\n##  UI for Virtualizing Large Element Lists\n\nVirtualize only the visible DOM nodes within massive scrollable elements at\n60FPS in TS/JS, React, Vue, Solid, Svelte, Lit & Angular while retaining 100%\ncontrol over markup and styles.\n\nHeadless Virtualization means you're always in control of your . Go design and\nimplement the most beautiful UI you can dream up and let us take care of the\nhard parts.\n\nDon't be fooled by the small bundle size. TanStack Virtual uses every byte to\ndeliver powerful performance. After all, these days and we refuse to sacrifice\nanything for that üßà-y smooth UX.\n\nWith a single function/hook, you'll get limitless virtualization for layouts.\nThe API is tiny (literally 1 function), but its composability is not.\n\n### Framework Agnostic & Feature Rich\n\nTanStack Virtual's API and engine are highly modular and framework-independent\nwhile still prioritizing ergonomics. Behold, the obligatory feature-list:\n\nWe're looking for a TanStack Virtual OSS Partner to go above and beyond the call\nof sponsorship. Are you as invested in TanStack Virtual as we are? Let's push\nthe boundaries of Virtual together!\n\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JMCV7DEZ3JCA7IE2JMC67DP2JKC67DT2QYF67IT27YCA7IK2JWCAYIC2JLHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\n### Take it for a spin!\n\nWith just a few divs and some inline styles, you're already well on your way to\ncreating an extremely powerful virtualization experience.\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# Wow, it looks like you could be our first partner for this library!\nURL: https://tanstack.com/virtual/latest/docs/framework/react/examples/dynamic\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/virtual/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I4KJKC67DT2QYF67IT27YCA7IK2JWCYAIE237HEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Before we dig in to the API, let's get you set up!\nURL: https://tanstack.com/virtual/latest/docs/installation\n\nBefore we dig in to the API, let's get you set up!\n\nInstall your TanStack Virtual adapter as a dependency using your favorite npm\npackage manager\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/virtual/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIK537HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# The adapter is a wrapper around the core virtual logic.\nURL: https://tanstack.com/virtual/latest/docs/framework/react/react-virtual\n\nThe adapter is a wrapper around the core virtual logic.\n\nThis function returns a standard instance configured to work with an HTML\nelement as the scrollElement.\n\nThis function returns a window-based instance configured to work with the window\nas the scrollElement.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/virtual/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIK5QLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# The class is the core of TanStack Virtual. Virtualizer instances are usually\nURL: https://tanstack.com/virtual/latest/docs/api/virtualizer\n\nThe class is the core of TanStack Virtual. Virtualizer instances are usually\ncreated for you by your framework adapter, but you do receive the virtualizer\ndirectly.\n\nThe total number of items to virtualize.\n\nA function that returns the scrollable element for the virtualizer. It may\nreturn null if the element is not available yet.\n\n> üß† If you are dynamically measuring your elements, it's recommended to estimate\n> the largest possible size (width/height, within comfort) of your items. This\n> will ensure features like smooth-scrolling will have a better chance at\n> working correctly.\nThis function is passed the index of each item and should return the actual size\n(or estimated size if you will be dynamically measuring items with ) for each\nitem. This measurement should return either the width or height depending on the\norientation of your virtualizer.\n\nSet to to disable scrollElement observers and reset the virtualizer's state\n\nSet to to enable debug logs\n\nThe initial of the scrollElement. This is mostly useful if you need to run the\nvirtualizer in an SSR environment, otherwise the initialRect will be calculated\non mount by the implementation.\n\nA callback function that fires when the virtualizer's internal state changes.\nIt's passed the virtualizer instance.\n\nThe number of items to render above and below the visible area. Increasing this\nnumber will increase the amount of time it takes to render the virtualizer, but\nmight decrease the likelihood of seeing slow-rendering blank items at the top\nand bottom of the virtualizer when scrolling.\n\nSet this to if your virtualizer is oriented horizontally.\n\nThe padding to apply to the start of the virtualizer in pixels.\n\nThe padding to apply to the end of the virtualizer in pixels.\n\nThe padding to apply to the start of the virtualizer in pixels when scrolling to\nan element.\n\nThe padding to apply to the end of the virtualizer in pixels when scrolling to\nan element.\n\nThe initial offset to apply to the virtualizer. This is usually only useful if\nyou are rendering the virtualizer in a SSR environment.\n\nThis function is passed the index of each item and should return a unique key\nfor that item. The default functionality of this function is to return the index\nof the item, but you should override this when possible to return a unique\nidentifier for each item across the entire set. This function should be memoized\nto prevent unnecessary re-renders.\n\nThis function receives visible range indexes and should return array of indexes\nto render. This is useful if you need to add or remove items from the\nvirtualizer manually regardless of the visible range, eg. rendering sticky\nitems, headers, footers, etc. The default range extractor implementation will\nreturn the visible range indexes and is exported as .\n\n```\n\n options: { adjustments?: number; behavior\n\n```\n\nAn optional function that (if provided) should implement the scrolling behavior\nfor your scrollElement. It will be called with the following arguments:\n\n  * An (in pixels) to scroll towards.\n  * An object indicating whether there was a difference between the estimated size and actual size () and/or whether scrolling was called with a smooth animation ().\n\nNote that built-in scroll implementations are exported as and , which are\nautomatically configured by the framework adapter functions like or .\n\n> ‚ö†Ô∏è Attempting to use smoothScroll with dynamically measured elements will not\n> work.\n```\n\n```\n\nAn optional function that if provided is called when the scrollElement changes\nand should implement the initial measurement and continuous monitoring of the\nscrollElement's (an object with and ). It's called with the instance (which also\ngives you access to the scrollElement via . Built-in implementations are\nexported as and which are automatically configured for you by your framework\nadapter's exported functions like or .\n\n```\n\n```\n\nAn optional function that if provided is called when the scrollElement changes\nand should implement the initial measurement and continuous monitoring of the\nscrollElement's scroll offset (a number). It's called with the instance (which\nalso gives you access to the scrollElement via . Built-in implementations are\nexported as and which are automatically configured for you by your framework\nadapter's exported functions like or .\n\n```\n\n```\n\nThis optional function is called when the virtualizer needs to dynamically\nmeasure the size (width or height) of an item.\n\n> üß† You can use to determine if the width or height of the item should be\n> measured.\nWith this option, you can specify where the scroll offset should originate.\nTypically, this value represents the space between the beginning of the\nscrolling element and the start of the list. This is especially useful in common\nscenarios such as when you have a header preceding a window virtualizer or when\nmultiple virtualizers are utilized within a single scrolling element. If you are\nusing absolute positioning of elements, you should take into account the in your\nCSS transform:\n\nTo dynamically measure value for you can use or ResizeObserver. This is helpful\nin scenarios when items above your virtual list might change their height.\n\nThis option allows you to set the spacing between items in the virtualized list.\nIt's particularly useful for maintaining a consistent visual separation between\nitems without having to manually adjust each item's margin or padding. The value\nis specified in pixels.\n\nThe number of lanes the list is divided into (aka columns for vertical lists and\nrows for horizontal lists).\n\nThis option allows you to specify the duration to wait after the last scroll\nevent before resetting the isScrolling instance property. The default value is\n150 milliseconds.\n\nThe implementation of this option is driven by the need for a reliable mechanism\nto handle scrolling behavior across different browsers. Until all browsers\nuniformly support the scrollEnd event.\n\nThis option allows you to switch to use debounced fallback to reset the\nisScrolling instance property after milliseconds. The default value is .\n\nThe implementation of this option is driven by the need for a reliable mechanism\nto handle scrolling behavior across different browsers. Until all browsers\nuniformly support the scrollEnd event.\n\nWhether to invert horizontal scrolling to support right-to-left language\nlocales.\n\nThis option enables wrapping ResizeObserver measurements in\nrequestAnimationFrame for smoother updates and reduced layout thrashing. The\ndefault value is .\n\nIt helps prevent the \"ResizeObserver loop completed with undelivered\nnotifications\" error by ensuring that measurements align with the rendering\ncycle. This can improve performance and reduce UI jitter, especially when\nresizing elements dynamically. However, since ResizeObserver already runs\nasynchronously, adding requestAnimationFrame may introduce a slight delay in\nmeasurements, which could be noticeable in some cases. If resizing operations\nare lightweight and do not cause reflows, enabling this option may not provide\nsignificant benefits.\n\nThe following properties and methods are available on the virtualizer instance:\n\nThe current options for the virtualizer. This property is updated via your\nframework adapter and is read-only.\n\nThe current scrollElement for the virtualizer. This property is updated via your\nframework adapter and is read-only.\n\nReturns the virtual items for the current state of the virtualizer.\n\nReturns the virtual row indexes for the current state of the virtualizer.\n\nScrolls the virtualizer to the pixel offset provided. You can optionally pass an\nalignment mode to anchor the scroll to a specific part of the scrollElement.\n\nScrolls the virtualizer to the items of the index provided. You can optionally\npass an alignment mode to anchor the scroll to a specific part of the\nscrollElement.\n\nReturns the total size in pixels for the virtualized items. This measurement\nwill incrementally change if you choose to dynamically measure your elements as\nthey are rendered.\n\nResets any prev item measurements.\n\nMeasures the element using your configured virtualizer option. You are\nresponsible for calling this in your virtualizer markup when the component is\nrendered (eg. using something like React's ref callback prop) also adding\n\nBy default the virtualizer option is configured to measure elements with .\n\nChange the virtualized item's size manually. Use this function to manually set\nthe size calculated for this index. Useful in occations when using some custom\nmorphing transition and you know the morphed item's size beforehand.\n\nYou can also use this method with a throttled ResizeObserver instead of to\nreduce re-rendering.\n\n> ‚ö†Ô∏è Please be aware that manually changing the size of an item when using to\n> monitor that item, will result in unpredictable behaviour as the is also\n> changing the size. However you can use one of resizeItem or measureElement in\n> the same virtualizer instance but on different item indexes.\nThe shouldAdjustScrollPositionOnItemSizeChange method enables fine-grained\ncontrol over the adjustment of scroll position when the size of dynamically\nrendered items differs from the estimated size. When jumping in the middle of\nthe list and scrolling backward new elements may have a different size than the\ninitially estimated size. This discrepancy can cause subsequent items to shift,\npotentially disrupting the user's scrolling experience, particularly when\nnavigating backward through the list.\n\nBoolean flag indicating if list is currently being scrolled.\n\nThis option indicates the direction of scrolling, with possible values being\n'forward' for scrolling downwards and 'backward' for scrolling upwards. The\nvalue is set to null when there is no active scrolling.\n\nThis option represents the current scroll position along the scrolling axis. It\nis measured in pixels from the starting point of the scrollable area.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/virtual/latest/docs/api/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBIK5QMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# The object represents a single item returned by the virtualizer. It contains\nURL: https://tanstack.com/virtual/latest/docs/api/virtual-item\n\nThe object represents a single item returned by the virtualizer. It contains\ninformation you need to render the item in the coordinate space within your\nvirtualizer's scrollElement and other helpful properties/functions.\n\nThe following properties and methods are available on each VirtualItem object:\n\nThe unique key for the item. By default this is the item index, but should be\nconfigured via the Virtualizer option.\n\nThe index of the item.\n\nThe starting pixel offset for the item. This is usually mapped to a css property\nor transform like or .\n\nThe ending pixel offset for the item. This value is not necessary for most\nlayouts, but can be helpful so we've provided it anyway.\n\nThe size of the item. This is usually mapped to a css property like . Before an\nitem is measured with the method, this will be the estimated size returned from\nyour virtualizer option. After an item is measured (if you choose to measure it\nat all), this value will be the number returned by your virtualizer option\n(which by default is configured to measure elements with ).\n\nThe lane index of the item. In regular lists it will always be set to but\nbecomes useful for masonry layouts (see variable examples for more details).\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Wow, it looks like you could be our first partner for this library!\nURL: https://tanstack.com/virtual/latest/docs/framework/react/examples/fixed\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/virtual/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBIK23LHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Wow, it looks like you could be our first partner for this library!\nURL: https://tanstack.com/virtual/latest/docs/framework/react/examples/variable\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/virtual/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILK7KC67DT2QYF67IT27YCA7IK2JWFTBIK23MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Wow, it looks like you could be our first partner for this library!\nURL: https://tanstack.com/virtual/latest/docs/framework/react/examples/padding\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/virtual/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIK23YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Wow, it looks like you could be our first partner for this library!\nURL: https://tanstack.com/virtual/latest/docs/framework/react/examples/sticky\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/virtual/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBIK2QJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Wow, it looks like you could be our first partner for this library!\nURL: https://tanstack.com/virtual/latest/docs/framework/react/examples/infinite-scroll\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Start building for free with MongoDB Atlas‚Äîthe fast and secure multi-cloud\ndatabase.\n](https://tanstack.com/virtual/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKBDCZ3JCA7ILK3ICYBI523KC67DT2QYF67IT27YCA7IK2JWFTBIK2QIHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Wow, it looks like you could be our first partner for this library!\nURL: https://tanstack.com/virtual/latest/docs/framework/react/examples/smooth-scroll\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Build faster, smarter apps with Bryntum‚Äîrobust JS widgets for scheduling,\nGantt, and data grids.\n](https://tanstack.com/virtual/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEBDEZ3JCA7ILK3LCKYD6KQKC67DT2QYF67IT27YCA7IK2JWFTBIK2QNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Wow, it looks like you could be our first partner for this library!\nURL: https://tanstack.com/virtual/latest/docs/framework/react/examples/table\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Loved by developers. Trusted by enterprises. Start your free 60 day trial.\n](https://tanstack.com/virtual/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKKJKC67DT2QYF67IT27YCA7IK2JWFTBIK2Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Wow, it looks like you could be our first partner for this library!\nURL: https://tanstack.com/virtual/latest/docs/framework/react/examples/window\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GPU-Powered Charts for React, Vue, Angular: Cross-Platform Charts That Never\nSlow Down. Free Trial.\n](https://tanstack.com/virtual/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6SI5Z3JCA7ILK3LCE7I623KC67DT2QYF67IT27YCA7IK2JWFTBIK2JLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# TanStack Virtual is a headless UI utility for virtualizing long lists of\nURL: https://tanstack.com/virtual/latest/docs/introduction\n\nTanStack Virtual is a headless UI utility for virtualizing long lists of\nelements in JS/TS, React, Vue, Svelte, Solid, Lit, and Angular. It is not a\ncomponent therefore does not ship with or render any markup or styles for you.\nWhile this requires a bit of markup and styles from you, you will retain 100%\ncontrol over your styles, design and implementation.\n\nAt the heart of TanStack Virtual is the . Virtualizers can be oriented on either\nthe vertical (default) or horizontal axes which makes it possible to achieve\nvertical, horizontal and even grid-like virtualization by combining the two axis\nconfigurations together.\n\nHere is just a quick example of what it looks like to virtualize a long list\nwithin a div using TanStack Virtual in React:\n\n```\n\n // The scrollable element for your list\n\n/* The scrollable element for your list */\n\n/* The large inner element to hold all of the items */\n\n/* Only the visible items in the virtualizer, manually positioned to be in view\n*/\n\n```\n\n```\n\n // The scrollable element for your list\n\n/* The scrollable element for your list */\n\n/* The large inner element to hold all of the items */\n\n/* Only the visible items in the virtualizer, manually positioned to be in view\n*/\n\n```\n\nLet's dig into some more examples!\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/virtual/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JMCTBI4Z3JCA7IE2JMCT7ICKJKC67DT2QYF67IT27YCA7IK2JWCAYICK3LHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Modern and headless Range Selector UI Library\nURL: https://tanstack.com/ranger\n\n##  Modern and headless Range Selector UI Library\n\nA fully typesafe hooks for building range and multi-range sliders in React.\n\n### Typesafe & powerful, yet familiarly simple\n\nHooks for building range and multi-range sliders in React 100% typesafe without\ncompromising on DX.\n\nHeadless and extensible. Ranger doesn't render or supply any actual UI elements.\nIt's a utility for building your own custom-designed UI components.\n\nDesigned with maximum inversion of control in mind, Ranger is built to be to fit\nyour needs.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JMCTBI4Z3JCA7IE2JMCT7ICK3KC67DT2QYF67IT27YCA7IK2JWCAYICK3NHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\n### Take it for a spin!\n\nLet's see it in action!\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/examples/basic\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Develop and launch modern apps with MongoDB Atlas, a resilient data platform.\n](https://tanstack.com/ranger/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICWBILZ3JCA7IE2JLCASIC53KC67DT2QYF67IT27YCA7IK2JWCYAIE2QWHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Modern and headless Range Selector UI Library\nURL: https://tanstack.com/ranger/latest\n\n##  Modern and headless Range Selector UI Library\n\nA fully typesafe hooks for building range and multi-range sliders in React.\n\n### Typesafe & powerful, yet familiarly simple\n\nHooks for building range and multi-range sliders in React 100% typesafe without\ncompromising on DX.\n\nHeadless and extensible. Ranger doesn't render or supply any actual UI elements.\nIt's a utility for building your own custom-designed UI components.\n\nDesigned with maximum inversion of control in mind, Ranger is built to be to fit\nyour needs.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/ranger/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBIKK3WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\n### Take it for a spin!\n\nLet's see it in action!\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank\nTracker](https://tanstack.com/ranger/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/installation\n\nYou can install TanStack Ranger with any package manager.\n\nDepending on your framework of choice, install one of the following packages:\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/ranger/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDKK7KC67DT2QYF67IT27YCA7IK2JWFTBIKK37HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/installation/adapters/react-ranger\n\nThe page you are looking for does not exist.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Build faster, smarter apps with Bryntum‚Äîrobust JS widgets for scheduling,\nGantt, and data grids.\n](https://tanstack.com/ranger/latest/docs/installation/adapters/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEBDEZ3JCA7ILK3LCKYD6KQKC67DT2QYF67IT27YCA7IK2JWFTBIKKQLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/quick-start\n\nIf you're feeling impatient and prefer to skip all of our wonderful\ndocumentation, here is the bare minimum to get going with TanStack Ranger. We'll\nuse React for this example, but the same principles apply to other frameworks.\n\n```\n\n'inset 0 1px 2px rgba(0,0,0,.6)'\n\n'linear-gradient(to bottom, #eee 45%, #ddd 55%)'\n\n```\n\n```\n\ninset 0 1px 2px rgba(0,0,0,.6)\n\nlinear-gradient(to bottom, #eee 45%, #ddd 55%)\n\n```\n\nIf you skipped this example or didn't understand something, we don't blame you,\nbecause there's so much more to learn to really take advantage of TanStack\nRanger! Let's move on.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/ranger/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBIKKQMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/react-ranger\n\nYou can install TanStack Ranger with any package manager.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/ranger/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKJKC67DT2QYF67IT27YCA7IK2JWFTBIKKQ7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/api/basic\n\nWant to skip to the implementation? Check out these examples:\n\nThe API below described how to use the features.\n\nThe current value (or values) for the range.\n\nThe minimum limit for the range.\n\nThe maximum limit for the range.\n\nThe distance between selectable steps.\n\nA function that is called when the handle is released.\n\nHandles to be rendered. Each has the following props:\n\n  * - The current value for the handle.\n  * - Denotes if the handle is currently being dragged.\n\nThe zero-based index of the handle that is currently being dragged, or if no\nhandle is being dragged.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/ranger/latest/docs/framework/react/api/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIKKJLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/examples/react/basic\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/ranger/latest/docs/framework/react/examples/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBIKKJNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/api/custom-steps\n\nWant to skip to the implementation? Check out these examples:\n\nThe API below described how to use the features.\n\nAn array of custom steps to use. This will override\n\nAn array of custom ticks to use. This will override\n\n```\n\n```\n\nTicks to be rendered. Each has the following props:\n\n  * - The tick number to be displayed\n  * - The key of a tick\n  * - Percentage value of where tick should be placed on ranger\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Simplify infrastructure with MongoDB Atlas, the leading developer data\nplatform.\n](https://tanstack.com/ranger/latest/docs/framework/react/api/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCKBDCZ3JCA7ILK3ICWAI42QKC67DT2QYF67IT27YCA7IK2JWFTBIKKJ7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/api/examples/custom-steps\n\nThe page you are looking for does not exist.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Legacy vendor lock-in, out. A truly cloud-native APM, in.\n](https://tanstack.com/ranger/latest/docs/framework/react/api/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEKJKC67DT2QYF67IT27YCA7IK2JWFTBIP2JYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/api/custom-styles\n\nWant to skip to the implementation? Check out these examples:\n\nThe API below described how to use the features.\n\nSegments to be rendered. Each has the following props:\n\n  * - Percentage value of where segment should start on ranger\n  * - Percentage value of segment width\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/ranger/latest/docs/framework/react/api/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIP27JHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/api/examples/custom-styles\n\nThe page you are looking for does not exist.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/ranger/latest/docs/framework/react/api/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBIP27WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/api/logarithmic-interpolator\n\nWant to skip to the implementation? Check out these examples:\n\nThe API below described how to use the features.\n\nBy default, uses linear interpolation between data points, but allows you to\neasily customize it to use your own interpolation functions by passing an object\nthat implements the following interface.\n\nThe Interpolator to use. Defaults to the bundled linear-scale interpolator\n\n  * - Takes the value & range and returns a percentage [0, 100] where the value sits from left to right.\n  * - Takes the clientX (offset from the left edge of the ranger) along with the dimensions and range settings and transforms a pixel coordinate back into a value.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/ranger/latest/docs/framework/react/api/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBIP27UHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/api/examples/logarithmic-interpolator\n\nThe page you are looking for does not exist.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Bryntum Gantt: Flexible and powerful JS Gantt charts for smarter project\nplanning.\n](https://tanstack.com/ranger/latest/docs/framework/react/api/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCEBDEZ3JCA7ILK3LCKYD6K7KC67DT2QYF67IT27YCA7IK2JWFTBIP53EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/api/update-on-drag\n\nWant to skip to the implementation? Check out these examples:\n\nThe API below described how to use the features.\n\nA function that is called when a handled is dragged\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/ranger/latest/docs/framework/react/api/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIP53WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/examples/react/update-on-drag\n\n# React Example: React/update On Drag\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/ranger/latest/docs/framework/react/examples/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL23KC67DT2QYF67IT27YCA7IK2JWFTBIP53NHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/examples/custom-steps\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/ranger/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIP537HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/examples/custom-styles\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Instantly monitor any environment with our proprietary eBPF sensor\n](https://tanstack.com/ranger/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCE7I4Z3JCA7ILK3LCVADEK3KC67DT2QYF67IT27YCA7IK2JWFTBIP5QLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/examples/logarithmic-interpolator\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/ranger/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIP5QMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/framework/react/examples/update-on-drag\n\n# React Example: Update On Drag\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/ranger/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBIP5QYHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/ranger/latest/docs/overview\n\nFeature Rich and Lightweight Headless utility, which means out of the box, it\ndoesn't render or supply any actual UI elements. Some of its features include:\n\nEnough overview, there's so much more to do with TanStack Ranger. Hit that next\nbutton and let's get started!\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Be productive with React.js, today's most popular framework with the Frontend\nMasters React Path.\n](https://tanstack.com/ranger/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JWCWSI4Z3JCA7IE2JWF6SI6K7KC67DT2QYF67IT27YCA7IK2JWCAYIPK3LHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# type-safe store w/ reactive framework adapters\nURL: https://tanstack.com/store\n\n##  type-safe store w/ reactive framework adapters\n\nLevel up your state management with TanStack Store ‚Äì the framework-agnostic,\ntype-safe store. Enjoy **minimal setup, granular APIs, and seamless adaptability\nacross frameworks**. Simplify your development and boost efficiency with\nTanStack Store.\n\nTanStack Store offers a seamless and intuitive configuration management system\nthat simplifies the process of building and publishing high-quality JavaScript\npackages. TanStack Store streamlines the configuration process, allowing\ndevelopers to focus on writing code without the hassle of intricate setup\nprocedures.\n\nTanStack Store's build configuration harnesses the Vite ecosystem. Customize and\nextend your build workflows with ease, tailoring them to meet the unique\nrequirements of your project. Whether you need advanced optimizations, pre-\nprocessors, or other specialized tools, TanStack Store provides a robust\nfoundation for crafting a build pipeline that suits your specific needs.\n\nSay goodbye to the complexities of code publishing. This package provides tools\ndesigned to automate the publication of your projects. Developers can\neffortlessly publish updates, manage versioning, and release on npm and GitHub.\nTanStack Store takes care of the tedious aspects of package publishing,\nempowering developers to share their work with the community efficiently.\n\nWe're looking for a TanStack Store OSS Partner to go above and beyond the call\nof sponsorship. Are you as invested in TanStack Store as we are? Let's push the\nboundaries of Store together!\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52QNCEAD6Z3JCA7IE2JWFTSILK7KC67DT2QYF67IT27YCA7IK2JWCAYIPK3MHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/framework/react/examples/simple\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/store/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I4K7KC67DT2QYF67IT27YCA7IK2JWCYAIEKJNHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# type-safe store w/ reactive framework adapters\nURL: https://tanstack.com/store/latest\n\n##  type-safe store w/ reactive framework adapters\n\nLevel up your state management with TanStack Store ‚Äì the framework-agnostic,\ntype-safe store. Enjoy **minimal setup, granular APIs, and seamless adaptability\nacross frameworks**. Simplify your development and boost efficiency with\nTanStack Store.\n\nTanStack Store offers a seamless and intuitive configuration management system\nthat simplifies the process of building and publishing high-quality JavaScript\npackages. TanStack Store streamlines the configuration process, allowing\ndevelopers to focus on writing code without the hassle of intricate setup\nprocedures.\n\nTanStack Store's build configuration harnesses the Vite ecosystem. Customize and\nextend your build workflows with ease, tailoring them to meet the unique\nrequirements of your project. Whether you need advanced optimizations, pre-\nprocessors, or other specialized tools, TanStack Store provides a robust\nfoundation for crafting a build pipeline that suits your specific needs.\n\nSay goodbye to the complexities of code publishing. This package provides tools\ndesigned to automate the publication of your projects. Developers can\neffortlessly publish updates, manage versioning, and release on npm and GitHub.\nTanStack Store takes care of the tedious aspects of package publishing,\nempowering developers to share their work with the community efficiently.\n\nWe're looking for a TanStack Store OSS Partner to go above and beyond the call\nof sponsorship. Are you as invested in TanStack Store as we are? Let's push the\nboundaries of Store together!\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/store/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIP23EHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank\nTracker](https://tanstack.com/store/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/overview\n\nTanStack Store is a framework agnostic data store that ships with framework\nspecific adapters for major frameworks like React, Solid, Vue, Angular, and\nSvelte.\n\nTanStack Store is primarily used for state management internally for most\nframework agnostic TanStack libraries. It can also be used as a standalone\nlibrary for any framework or application.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/store/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBIP23WHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/installation\n\nYou can install TanStack Store with any package manager.\n\nTanStack Store is compatible with React v16.8+ and is currently only compatible\nwith ReactDOM only. If you would like to contribute to the React Native adapter,\nplease reach out to us on .\n\nTanStack Store is compatible with Vue 2 and 3.\n\nTanStack Store is compatible with Angular 19+\n\nTanStack Store is compatible with Solid and SolidStart.\n\nTanStack Store is compatible with Svelte 5.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/store/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBIP23YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/quick-start\n\nTanStack Store is, first and foremost, a framework-agnostic signals\nimplementation.\n\nIt can be used with any of our framework adapters, but can also be used in\nvanilla JavaScript or TypeScript. It's currently used to power many of our\nlibrary's internals.\n\nYou'll start by creating a new store instance, which is a wrapper around your\ndata:\n\n```\n\n```\n\nThis can then be used to track updates to your data:\n\n```\n\n```\n\n```\n\n```\n\nYou can even transform the data before it's updated:\n\n```\n\n```\n\nAnd implement a primitive form of derived state:\n\nYou can batch updates to a store by using the function:\n\n```\n\n// countStore.subscribers will only trigger once at the end with the final state\n\n```\n\n```\n\n// countStore.subscribers will only trigger once at the end with the final state\n\n```\n\nYou can also use the class to create derived values that lazily update when\ntheir dependencies change:\n\n```\n\n // Must explicitly list dependencies\n\n// Must mount the derived value to start listening for updates\n\n```\n\n```\n\n // Must explicitly list dependencies\n\n// Must mount the derived value to start listening for updates\n\n```\n\nYou can access the previous value of a derived computation by using the argument\npassed to the function:\n\n```\n\n```\n\nYou can access the values of the dependencies of a derived computation by using\nthe and arguments passed to the function:\n\n```\n\n```\n\nYou can also use the class to manage side effects across multiple stores and\nderived values:\n\n```\n\n // Array of `Store`s or `Derived`s\n\n // Should effect run immediately, default is false\n\n// Must mount the effect to start listening for updates\n\n```\n\n```\n\n // Array of `Store`s or `Derived`s\n\n // Should effect run immediately, default is false\n\n// Must mount the effect to start listening for updates\n\n```\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/store/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIP2QJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/framework/react/quick-start\n\nThe basic react app example to get started with the TanStack react-store.\n\n```\n\n// You can use @tanstack/store outside of React components too!\n\n// This will only re-render when `state[animal]` changes. If an unrelated store\nproperty changes, it won't re-render\n\n>How many of your friends like cats or dogs?</\n\n    Press one of the buttons to add a counter of how many of your friends\n\n```\n\n```\n\n// You can use @tanstack/store outside of React components too!\n\n// This will only re-render when `state[animal]` changes. If an unrelated store\nproperty changes, it won't re-render\n\nHow many of your friends like cats or dogs?\n\n    Press one of the buttons to add a counter of how many of your friends\n\n```\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ See what your team could do with The DevSecOps Platform. Take GitLab for a\nspin.\n](https://tanstack.com/store/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKK7KC67DT2QYF67IT27YCA7IK2JWFTBIP2QMHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/reference/index\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/store/latest/docs/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV53KC67DT2QYF67IT27YCA7IK2JWFTBIP2Q7HEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/reference/interfaces/derivedfnprops\n\nif it's the first run\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/store/latest/docs/reference/interfaces/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLKQLCWADEZ3JCA7ILK3LCVSDK23KC67DT2QYF67IT27YCA7IK2JWFTBIP2JLHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/reference/type-aliases/unwrapderivedorstore\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/store/latest/docs/reference/type-\naliases/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADV5QKC67DT2QYF67IT27YCA7IK2JWFTBIP2JNHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/reference/variables/depsthathavewrittenthistick\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/store/latest/docs/reference/variables/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADE5Q7CEBIEZ3JCA7ILK3LF6ADPK3KC67DT2QYF67IT27YCA7IK2JWFTBIPK3MHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/reference/variables/derivedtostore\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the only place where enterprises build mission‚Äëcritical software.\n](https://tanstack.com/store/latest/docs/reference/variables/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK37C6YDLZ3JCA7ILK3LCE7DKK3KC67DT2QYF67IT27YCA7IK2JWFTBIPK3YHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/reference/variables/storetoderived\n\nThis is here to solve the pyramid dependency problem where: A / B C \\ / D\n\nWhere we deeply traverse this tree, how do we avoid D being recomputed twice;\nonce when B is updated, once when C is.\n\nTo solve this, we create linkedDeps that allows us to sync avoid writes to the\nstate until all of the deps have been resolved.\n\nThis is a record of stores, because derived stores are not able to write values\nto, but stores are\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/store/latest/docs/reference/variables/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYILKQKC67DT2QYF67IT27YCA7IK2JWFTBIPKQJHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/reference/functions/batch\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/store/latest/docs/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YCW7ILZ3JCA7ILK3LCKYIL2JKC67DT2QYF67IT27YCA7IK2JWFTBIPKQWHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/reference/classes/store\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Visualize Millions of Data Points in Real-time with LightningChart Python. Get\nFree Trial Today.\n](https://tanstack.com/store/latest/docs/reference/classes/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BDC5QYCKSLYKQUCKADLK3YC6SI5Z3JCA7ILK3LCE7I627KC67DT2QYF67IT27YCA7IK2JWFTBIPKQUHEYI5K77CKAI52JECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/reference/classes/derived\n\nreadonly ( | <> | <, () => >)[] = \nreadonly ( | <> | <, () => >)[] = \nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/store/latest/docs/reference/classes/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC27KC67DT2QYF67IT27YCA7IK2JWCYAIKK7WHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/reference/classes/effect\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Secure Homebrew and gain visibility into your software supply chain. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/store/latest/docs/reference/classes/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCYADVZ3JCA7ILK3LC6YDE53KC67DT2QYF67IT27YCA7IK2JWCYAIKK77HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/reference/interfaces/storeoptions\n\nCalled when a listener subscribes to the store.\n\na function to unsubscribe the listener\n\nCalled after the state has been updated, used to derive other state.\n\nReplace the default update function with a custom one.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/store/latest/docs/reference/interfaces/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCYAIK23LHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/reference/interfaces/derivedoptions\n\nValues of the from before and after the current invocation of\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/store/latest/docs/reference/interfaces/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2JKC67DT2QYF67IT27YCA7IK2JWCYAIK23NHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/framework/react/reference/index\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/store/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2QKC67DT2QYF67IT27YCA7IK2JWCA7I5KQWHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/framework/react/reference/functions/usestore\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Your fast track into the future of software development. Join the Arm\nDeveloper Program today.\n](https://tanstack.com/store/latest/docs/framework/react/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6SICZ3JCA7ILK3LC6BICK3KC67DT2QYF67IT27YCA7IK2JWCA7I5KQUHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs/framework/react/reference/functions/shallow\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/store/latest/docs/framework/react/reference/functions/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDV23KC67DT2QYF67IT27YCA7IK2JWCA7I5KJJHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/store/latest/docs\n\nTanStack Store is a framework agnostic data store that ships with framework\nspecific adapters for major frameworks like React, Solid, Vue, Angular, and\nSvelte.\n\nTanStack Store is primarily used for state management internally for most\nframework agnostic TanStack libraries. It can also be used as a standalone\nlibrary for any framework or application.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Get free expert guidance and resources to empower your best work. Join the Arm\nDeveloper Program.\n](https://tanstack.com/store/latest/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JMCTYDPZ3JCA7IE2JMCTBDVK3KC67DT2QYF67IT27YCA7IK2JWCAYIV23IHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# for publishing and maintaining high-quality JavaScript packages\nURL: https://tanstack.com/config\n\n##  for publishing and maintaining high-quality JavaScript packages\n\nTanStack Config offers a seamless and intuitive configuration management system\nthat simplifies the process of building and publishing high-quality JavaScript\npackages. TanStack Config streamlines the configuration process, allowing\ndevelopers to focus on writing code without the hassle of intricate setup\nprocedures.\n\nTanStack Config's build configuration harnesses the Vite ecosystem. Customize\nand extend your build workflows with ease, tailoring them to meet the unique\nrequirements of your project. Whether you need advanced optimizations, pre-\nprocessors, or other specialized tools, TanStack Config provides a robust\nfoundation for crafting a build pipeline that suits your specific needs.\n\nSay goodbye to the complexities of code publishing. This package provides tools\ndesigned to automate the publication of your projects. Developers can\neffortlessly publish updates, manage versioning, and release on npm and GitHub.\nTanStack Config takes care of the tedious aspects of package publishing,\nempowering developers to share their work with the community efficiently.\n\nIncorporate TanStack Config into your development toolkit and experience a new\nlevel of efficiency, speed, and customization in building and releasing high-\nquality JavaScript packages.\n\nWe're looking for a TanStack Config OSS Partner to go above and beyond the call\nof sponsorship. Are you as invested in TanStack Config as we are? Let's push the\nboundaries of Config together!\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52QNCEAD6Z3JCA7IE2JWFTSIL23KC67DT2QYF67IT27YCA7IK2JWCAYIV23UHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps us keep the lights on üòâ\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# TanStack Config allows you to publish, update, and maintain your packages\nURL: https://tanstack.com/config/latest/docs\n\nTanStack Config allows you to publish, update, and maintain your packages\nwithout having to provide complex configuration.\n\nThe following tools are required to use this package:\n\n  * (pre-installed on GitHub Actions)\n\n> pnpm is the only supported package manager for TanStack Config.\nTo install the package, run the following command:\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/config/latest/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2QKC67DT2QYF67IT27YCA7IK2JWCA7I5KJNHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# for publishing and maintaining high-quality JavaScript packages\nURL: https://tanstack.com/config/latest\n\n##  for publishing and maintaining high-quality JavaScript packages\n\nTanStack Config offers a seamless and intuitive configuration management system\nthat simplifies the process of building and publishing high-quality JavaScript\npackages. TanStack Config streamlines the configuration process, allowing\ndevelopers to focus on writing code without the hassle of intricate setup\nprocedures.\n\nTanStack Config's build configuration harnesses the Vite ecosystem. Customize\nand extend your build workflows with ease, tailoring them to meet the unique\nrequirements of your project. Whether you need advanced optimizations, pre-\nprocessors, or other specialized tools, TanStack Config provides a robust\nfoundation for crafting a build pipeline that suits your specific needs.\n\nSay goodbye to the complexities of code publishing. This package provides tools\ndesigned to automate the publication of your projects. Developers can\neffortlessly publish updates, manage versioning, and release on npm and GitHub.\nTanStack Config takes care of the tedious aspects of package publishing,\nempowering developers to share their work with the community efficiently.\n\nIncorporate TanStack Config into your development toolkit and experience a new\nlevel of efficiency, speed, and customization in building and releasing high-\nquality JavaScript packages.\n\nWe're looking for a TanStack Config OSS Partner to go above and beyond the call\nof sponsorship. Are you as invested in TanStack Config as we are? Let's push the\nboundaries of Config together!\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/config/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVK3KC67DT2QYF67IT27YCA7IK2JWCA7I5K3JHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps us keep the lights on üòâ\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank\nTracker](https://tanstack.com/config/<https:/nozzle.io>)\n\n---\n\n# TanStack Config allows you to publish, update, and maintain your packages\nURL: https://tanstack.com/config/latest/docs/overview\n\nTanStack Config allows you to publish, update, and maintain your packages\nwithout having to provide complex configuration.\n\nThe following tools are required to use this package:\n\n  * (pre-installed on GitHub Actions)\n\n> pnpm is the only supported package manager for TanStack Config.\nTo install the package, run the following command:\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/config/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDV23KC67DT2QYF67IT27YCA7IK2JWCA7I5K3MHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# This package unifies the shared ESLint config used across all TanStack projects.\nURL: https://tanstack.com/config/latest/docs/eslint\n\nThis package unifies the shared ESLint config used across all TanStack projects.\nIt is designed to be framework-agnostic, and does not include any framework-\nspecific plugins.\n\n  * Make sure you have ESLint v8.57.0+ installed\n  * We will upgrade to ESLint v9 once v8 and v5 release\n\n```\n\n  // Custom rules go here\n\n```\n\n```\n\n  // Custom rules go here\n\n```\n\n  * - The core ESLint rules\n  * - Lints imports and exports\n\nYou can inspect the enabled rules by running , or by browsing the source . Each\nrule has a comment explaining why it is included in the shared config.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/config/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKQKC67DT2QYF67IT27YCA7IK2JWCA7I5K37HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# You have two options for using TanStack Config to publish:\nURL: https://tanstack.com/config/latest/docs/publish\n\nYou have two options for using TanStack Config to publish:\n\nTo run the publish script for your package, run the following command:\n\nTo use the TanStack Config programmatically, you can import the function:\n\n```\n\n```\n\n> The programmatic usage is only available for ESM packages. To support this,\n> you have to have:\n> in your file and use instead of .\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/config/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC5QKC67DT2QYF67IT27YCA7IK2JWCA7IK53EHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# The Vite build setup is the culmination of several attempts to dual publish ESM\nURL: https://tanstack.com/config/latest/docs/vite\n\nThe Vite build setup is the culmination of several attempts to dual publish ESM\nand CJS for TanStack projects, while preserving compatibility with all\nTypescript module resolution options.\n\nES Modules (ESM) is the standard for writing JavaScript modules. However, due to\nthe historical dependency on CommonJS (CJS), many ecosystem tools and projects\nwere initially incompatible with ESM. It is becoming exceedingly rare for this\nto be the case, and I would urge you to consider whether it is necessary to\ndistribute CJS code at all. Sindre Sorhus has a good summary on this issue .\n\nThe build config is quite opinionated, as it is designed to work with our\ninternal libraries. If you follow the below instructions, it work for your\nlibrary too!\n\n  * Ensure you have installed. Installing is also recommended.\n  * Change your build script to \"build\": \"vite build && publint --strict\"\n  * Ensure you have an field. We use this, but you might have different requirements:\n\n```\n\n```\n\n  * Merge your custom config first, followed by .\n  * Please avoid modifying in your custom config.\n\n```\n\n // Framework plugins, vitest config, etc.\n\n```\n\n```\n\n // Framework plugins, vitest config, etc.\n\n```\n\nWhile this config work with most frameworks with a Vite adapter, it doesn't mean\nyou use it for all frameworks, as many have their own build tools which are\noptimised for their ecosystem. When a framework-specific build tool exists, this\nshould be preferred.\n\n(only if you need dual ESM/CJS)  \n---  \n(preserves JSX, necessary for SSR)  \n(only if you need dual ESM/CJS)  \nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/config/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCW7ICZ3JCA7ILK3LCTSDLKQKC67DT2QYF67IT27YCA7IK2JWCA7IK53WHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# The page you are looking for does not exist.\nURL: https://tanstack.com/config/latest/docs/nx\n\nThe page you are looking for does not exist.\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/config/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2QKC67DT2QYF67IT27YCA7IK2JWCA7IK53YHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# The following structure ensures packages work optimally with our monorepo/Nx\nURL: https://tanstack.com/config/latest/docs/package-structure\n\nThe following structure ensures packages work optimally with our monorepo/Nx\nworkflow.\n\n  * All TanStack projects have to set the default resolution of files to ESM; this does not have any impact on building for CJS\n  * It is also essential to have an field\n  * For legacy reasons, you should also include the , , and fields\n  * All packages have the following scripts which are cached by Nx: , , , , \n\n  * Extends the root-level tsconfig (e.g. )\n  * Add any framework-specific options and included files here\n\n  * Includes config for Vitest, and for Vite if is used\n\n  * This folder should only include code which gets built and shipped to users\n  * Tests should not be placed in this folder, as they bloat the shipped code, and can unintentionally invalidate the Nx cache\n\n  * This folder should include all test files\n  * It should also include any test setup files required by that framework\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/config/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKQKC67DT2QYF67IT27YCA7IK2JWCA7IK5QJHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# * :\nURL: https://tanstack.com/config/latest/docs/ci-cd\n\n* :\n    * Runs tests for all pull requests\n    * Runs , which only executes tasks with invalidated cache\n    * Also uses to publish package previews and create links to our examples\n  * :\n    * Runs tests for code merged into release branches\n    * Runs , which executes all tasks and ensures the outputs are present (necessary for publishing builds)\n    * Uses to handle versioning and npm release\n\nThe TanStack projects use Nx to enable rapid execution of our tests and builds.\nTasks are parallelised and cached both locally and in CI. While Nx has an\nextensive plugin system, we only utilise Nx as an NPM script runner.\n\n  * : Main config file, which defines task dependencies, inputs, and outputs\n  * : Need to manually specify root-level scripts (e.g. )\n  * : Package-level scripts (e.g. ) are automatically detected\n\n  * Nx allows you to distribute your tasks across multiple CI machines, increasing the number of jobs that can be run in parallel\n  * Please note that this does incur quite a significant startup delay\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/config/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7IK5QWHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# We use 3 separate tools to help manage our dependencies and prevent us from\nURL: https://tanstack.com/config/latest/docs/dependencies\n\nWe use 3 separate tools to help manage our dependencies and prevent us from\nunnecessarily bloating the directory.\n\n  * Sherif ensures that all references to a dependency throughout the monorepo are on the same version\n  * This helps avoid pnpm resolution issues, such as type conflicts from having 2+ incompatible versions of the same dependency installed\n\n  * Knip is able to detect unused dependencies within files\n  * This leads to fewer packages getting installed unnecessarily by developers\n\n  * Renovate is a bot which runs on GitHub to scan for outdated or insecure dependencies\n  * This reduces the burden on maintainers by automatically submitting PRs\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Most Powerful JS Charting Library to Visualize 10M+ Data Points in Real-Time.\nGet Free Trial Now.\n](https://tanstack.com/config/latest/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCY7DPZ3JCA7ILK3LCTSIP27KC67DT2QYF67IT27YCA7IK2JWCA7IK2JNHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# for publishing and maintaining high-quality JavaScript packages\nURL: https://tanstack.com/config/docs\n\n##  for publishing and maintaining high-quality JavaScript packages\n\nTanStack Config offers a seamless and intuitive configuration management system\nthat simplifies the process of building and publishing high-quality JavaScript\npackages. TanStack Config streamlines the configuration process, allowing\ndevelopers to focus on writing code without the hassle of intricate setup\nprocedures.\n\nTanStack Config's build configuration harnesses the Vite ecosystem. Customize\nand extend your build workflows with ease, tailoring them to meet the unique\nrequirements of your project. Whether you need advanced optimizations, pre-\nprocessors, or other specialized tools, TanStack Config provides a robust\nfoundation for crafting a build pipeline that suits your specific needs.\n\nSay goodbye to the complexities of code publishing. This package provides tools\ndesigned to automate the publication of your projects. Developers can\neffortlessly publish updates, manage versioning, and release on npm and GitHub.\nTanStack Config takes care of the tedious aspects of package publishing,\nempowering developers to share their work with the community efficiently.\n\nIncorporate TanStack Config into your development toolkit and experience a new\nlevel of efficiency, speed, and customization in building and releasing high-\nquality JavaScript packages.\n\nWe're looking for a TanStack Config OSS Partner to go above and beyond the call\nof sponsorship. Are you as invested in TanStack Config as we are? Let's push the\nboundaries of Config together!\n\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/config/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD527LFTSDKZ3JCA7IE2JYCEBDTKJKC67DT2QYF67IT27YCA7IK2JWCAYIV2QMHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps us keep the lights on üòâ\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank\nTracker](https://tanstack.com/config/<https:/nozzle.io>)\n\n---\n\n# TanStack Config allows you to publish, update, and maintain your packages\nURL: https://tanstack.com/config/docs/docs\n\nTanStack Config allows you to publish, update, and maintain your packages\nwithout having to provide complex configuration.\n\nThe following tools are required to use this package:\n\n  * (pre-installed on GitHub Actions)\n\n> pnpm is the only supported package manager for TanStack Config.\nTo install the package, run the following command:\n\nWow, it looks like you could be our first partner for this library!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/config/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDV23KC67DT2QYF67IT27YCA7IK2JWCA7IK27EHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Whether you're a solo developer or a large enterprise, we have solutions that\nURL: https://tanstack.com/support\n\nWhether you're a solo developer or a large enterprise, we have solutions that\nwill fit your needs like a glove!\n\n---\n\n# Private consultation and enterprise support contracts for projects of any size.\nURL: https://tanstack.com/dedicated-support\n\nPrivate consultation and enterprise support contracts for projects of any size.\n\nNote: This page is specifically for inquiring about dedicated paid support\ncontracts. For general support questions, please ask questions in the or of the\nindividual libraries where we offer free help and support for clearly described\nand scoped questions.\n\n(Use the chat icon in the bottom right corner of the screen to get started)\n\n---\n\n# Whether you're just getting started or looking to level up as an individual or\nURL: https://tanstack.com/learn\n\nWhether you're just getting started or looking to level up as an individual or\nteam, we have resources that will help you succeed.\n\n[Query.gg - The Official React Query Course‚ÄúThis is the best way to learn how to\nuse React Query in real-world applications.‚ÄùSave time by learning with a guided\napproachGet hands-on experience building a real-world applicationNever worry\nabout data fetching again](https://tanstack.com/<https:/query.gg?s=tanstack>)\n\n---\n\n# [Why choose TanStack Start and Router?by Tanner LinsleyBuilding modern web\nURL: https://tanstack.com/blog\n\n[Why choose TanStack Start and Router?by Tanner LinsleyBuilding modern web\napplications is no small feat. The frameworks and tools we choose can make or\nbreak not only our developer experience but also the success of the applications\nwe build. While there... ](https://tanstack.com/</blog/why-tanstack-start-and-\nrouter>)[Why TanStack Start is Ditching Adaptersby Tanner LinsleyTo ‚Äúadapter‚Äù or\nnot? Building a new front-end Javascript framework is a daunting task, as I‚Äôve\nbeen learning with building TanStack Start, my new TanStack-powered full stack\nframework. There‚Äôs so many... ](https://tanstack.com/</blog/why-tanstack-start-\nis-ditching-adapters>)[A milestone for TypeScript Performance in TanStack\nRouterby Christopher HorobinTanStack Router pushes the boundaries on type-safe\nrouting. The router's components such as <Link and its hooks such as useSearch,\nuseParams, useRouteContext and useLoaderData, infer from the route de...\n](https://tanstack.com/</blog/tanstack-router-typescript-performance>)[by\nDominik DorfmeisterAbout one year ago, we announced the , and the whole team has\nbeen working hard on that version ever since. So we're super happy to announce\nthat today is the day: After 91 alpha releases, 35 betas an...\n](https://tanstack.com/</blog/announcing-tanstack-query-v5>)[by Dominik\nDorfmeisterWe're excited to announce the next version of , previously known as\nreact-query üéâ. The rebranding and restructuring to a monorepo now finally allows\nus to bring the joy of react-query to other framew...\n](https://tanstack.com/</blog/announcing-tanstack-query-v4>)[TanStack Table +\nAg-Grid Partnershipby Tanner Linsley and Niall CrosbyWe're excited to announce\nthat is now the official TanStack Table open-source partner! Together we will\nstrive to achieve the following goals: To jointly educate the JavaScript and\nTypeScript ecosyste... ](https://tanstack.com/</blog/ag-grid-partnership>)\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# Why choose TanStack Start and Router?\nURL: https://tanstack.com/blog/why-tanstack-start-and-router\n\n# Why choose TanStack Start and Router?\n\n_by Tanner Linsley on Dec 03, 2024._\n\nBuilding modern web applications is no small feat. The frameworks and tools we\nchoose can make or break not only our developer experience but also the success\nof the applications we build. While there are many great frameworks out there, I\nbelieve and stand apart for their ability to solve the challenges developers\nface today and their readiness for what‚Äôs coming tomorrow.\n\nThese aren‚Äôt just another set of tools‚Äîthey represent a commitment to building\nbetter apps with less friction and more joy. Here‚Äôs why I think you‚Äôll love\nworking with them as much as I do.\n\n### [Type Safety You Can Rely On](https://tanstack.com/blog/<#type-safety-you-\ncan-rely-on>)\n\nType safety isn‚Äôt just a buzzword‚Äîit‚Äôs a foundational tool for creating robust,\nmaintainable applications. TanStack Router goes beyond the basics to offer ,\nwhere types flow seamlessly through every part of your app. Route definitions,\nparameters, navigation, and even state management all work together with fully\ninferred types.\n\nWhat does this mean for you? It means no more guessing if you‚Äôve defined a\nparameter correctly, no more debugging mismatched types, and no need for extra\nplugins or AST transformations to fill in the gaps. TanStack Router works with\nTypeScript‚Äôs natural architecture, making the experience smooth, predictable,\nand delightful.\n\nThis level of type safety doesn‚Äôt just save time‚Äîit builds confidence. And it‚Äôs\nsomething I believe other frameworks will spend years trying to catch up to.\n\n### [Unlock the Power of URL State\nManagement](https://tanstack.com/blog/<#unlock-the-power-of-url-state-\nmanagement>)\n\nOne of the most overlooked but powerful tools in web development is the URL.\nIt‚Äôs the original state management system‚Äîfast, shareable, and intuitive. Yet,\nmany frameworks treat the URL as an afterthought, offering only basic utilities\nfor reading and writing state.\n\nTanStack Router flips that script. Managing state in the URL isn‚Äôt just\nsupported‚Äîit‚Äôs encouraged. With intuitive APIs, you can validate, read, and\nupdate search parameters with type safety and runtime validation baked in. Want\nto create a deeply nested, dynamic filter system or synchronize your app‚Äôs state\nwith the URL? It‚Äôs effortless.\n\nBut this isn‚Äôt just about developer convenience‚Äîit‚Äôs about creating better user\nexperiences. When your app state lives in the URL, users can share it, bookmark\nit, and pick up right where they left off. TanStack Router makes that as easy as\nit should be.\n\nIf you‚Äôve worked with Remix or Next.js, you‚Äôll find plenty of familiar concepts\nin TanStack Start. But familiarity doesn‚Äôt mean compromise. We‚Äôve taken some of\nthe best ideas from those frameworks and pushed them further, stripping away the\nconstraints and introducing more flexibility.\n\nFor example, routing patterns and server function integrations will feel natural\nif you‚Äôre coming from a server-first framework like Remix, but they‚Äôre designed\nto work just as well for traditional client-side SPAs. You don‚Äôt have to pick a\nside‚Äîyou get the best of both worlds, with fewer trade-offs.\n\n### [Built for the Future (and Already Embracing\nIt)](https://tanstack.com/blog/<#built-for-the-future-and-already-embracing-it>)\n\nThe web is changing fast. With React Server Components (RSCs) on the horizon,\nReact 19 introducing new patterns, and streaming becoming the standard for data\ndelivery, frameworks need to do more than just keep up‚Äîthey need to lead.\n\nTanStack Start is ready for what‚Äôs next. RSCs are treated as another server-side\nstate, with powerful primitives for caching, invalidating, and composing them\ninto your application. Streaming isn‚Äôt an afterthought‚Äîit‚Äôs baked into the core\nof how TanStack works, giving you tools to incrementally send data and HTML to\nthe client without extra complexity.\n\nBut we‚Äôre not just about future-proofing. TanStack Start also makes these\nadvanced capabilities approachable and usable today. You don‚Äôt need to wait for\nthe ‚Äúnext big thing‚Äù to start building apps that feel like the future.\n\n### [SPAs Aren‚Äôt Dead (We‚Äôre Just Making Them\nBetter)](https://tanstack.com/blog/<#spas-arent-dead-were-just-making-them-\nbetter>)\n\nThere‚Äôs a lot of talk about server-first architectures these days, and while\nthey‚Äôre exciting, they‚Äôre not the whole story. Single Page Applications (SPAs)\nare still an incredible way to build fast, interactive apps‚Äîespecially when done\nright.\n\nTanStack Start doesn‚Äôt just keep SPAs viable‚Äîit makes them better. With\nsimplified patterns, powerful state management, and deep integrations, you can\nbuild SPAs that are more performant, easier to maintain, and a joy to use.\nWhether you‚Äôre working server-first, client-first, or somewhere in between,\nTanStack gives you the tools to build the app you want.\n\n### [Data Integration Like No Other](https://tanstack.com/blog/<#data-\nintegration-like-no-other>)\n\nIf you‚Äôve used , you already know how much it simplifies data-fetching. But the\nintegration between TanStack Query and TanStack Router is where the magic really\nhappens. Prefetching data, caching results, and streaming updates are all\nseamless, intuitive, and built to scale.\n\nFor example, you can prefetch data in a route loader, stream it down to the\nclient, and hydrate it on demand‚Äîall with a single API. Whether you‚Äôre managing\na simple blog or a complex dashboard, you‚Äôll find yourself spending less time\nwiring up data and more time building features.\n\nThis isn‚Äôt just an integration‚Äîit‚Äôs a partnership between routing and data-\nfetching that makes everything else feel clunky by comparison.\n\nRouting isn‚Äôt just a utility‚Äîit‚Äôs the backbone of every application. And yet,\nmost routers struggle when things get complex. That‚Äôs where TanStack Router\nshines. It‚Äôs built to handle everything from a handful of simple routes to\nthousands of deeply nested ones without breaking a sweat.\n\nFeatures like type-safe navigation, hierarchical route contexts, and advanced\nstate synchronization make it easy to build apps that scale in both size and\ncomplexity. And because TanStack Router works natively with TypeScript, you get\nall the benefits of type safety without sacrificing performance or flexibility.\n\nWhat excites me most about TanStack is that we‚Äôre just getting started. From\nisomorphic server functions to powerful caching primitives and streamlined React\nServer Component support, we‚Äôre constantly pushing the boundaries of what‚Äôs\npossible. Our goal isn‚Äôt just to build great tools‚Äîit‚Äôs to build tools that help\nbuild better apps.\n\nOther frameworks have their strengths, but if you‚Äôre looking for tools that are\ninnovative, flexible, and deeply integrated, TanStack Router and Start are in a\nleague of their own. They‚Äôre not just solving today‚Äôs problems‚Äîthey‚Äôre helping\nyou build apps that are ready for tomorrow.\n\nSo why wait? Explore and today, and see how much better app development can be.\n\nLet‚Äôs build something amazing together!\n\n---\n\n# Why TanStack Start is Ditching Adapters\nURL: https://tanstack.com/blog/why-tanstack-start-is-ditching-adapters\n\n# Why TanStack Start is Ditching Adapters\n\n _by Tanner Linsley on Nov 22, 2024._\n\nBuilding a new front-end Javascript framework is a daunting task, as I‚Äôve been\nlearning with building TanStack Start, my new TanStack-powered full stack\nframework. There‚Äôs so many moving pieces:\n\nThat last one, can be especially tricky, since these days it seems that every\nsingle cloud environment has it‚Äôs own quirky incantations to get things to work\n‚Äújust right‚Äù. When faced with this decision for TanStack Start, I obviously knew\nwhich hosts I wanted to start supporting out of the gate and Vercel was at the\ntop of that list.\n\nMy first gut-reaction was to start building a system that could have ‚Äúadapters‚Äù\nfor each host, then just focus on writing the Vercel adapter first.\n\nThis plan, however, was flawed from the start. It didn‚Äôt take long to realize\nthat I personally was going to be responsible (at least in the beginning) for\nwriting most if not all of the code to make TanStack Start come to life on not\nonly Vercel, but many other targets and platforms. After some quick research,\nthis task alone was daunting enough to make me question my motivations in\nbuilding a server-bound JS framework at all.\n\nTechnically, the work required to deploy to Vercel alone is already very simple\nby just adhering to some output file/directory naming conventions. However the\nparalysis came from just the sheer number of environments/hosts there are to\nsupport. There‚Äôs a lot! Just look at [Remix‚Äôs growing list of server\nadapters](https://tanstack.com/blog/<https:/remix.run/docs/en/main/other-\napi/adapter>)! Remix isn‚Äôt the only framework with this list either. Most\nserver-bound JS frameworks have something similar. I was essentially committing\nto writing at least 10 adapters in the first few months of the framework and I\nhad barely gotten into the exciting features of the framework itself (not to\nmention the work in maintaining and updating these adapters).\n\nThe harsh reality here is that there **isn‚Äôt a way around this.** If your\nframework is providing **any server-targeted code in your framework, you need to\nensure it will run perfectly anywhere you can deploy it.**\n\nSo, as I was about to succumb to the infinite sadness of writing a hundred\nadapters and dealing with upstream breaking changes for the rest of my life, I\nspoke with my friend about how Solid JS is approaching this problem with our\ncousin framework and he confidently said ‚ÄúJust use Vite and Nitro\".\n\n## [TanStack Start = Nitro + Vite + TanStack\nRouter](https://tanstack.com/blog/<#tanstack-start--nitro--vite--tanstack-\nrouter>)\n\nis a ‚ÄúJavaScript toolkit to build server-side frameworks with your own\nopinions‚Äù, powered by . So what makes it so special?\n\nThere are a ton of awesome features in Nitro that make it extremely useful for\nbuilding a framework, but one of the coolest pieces is that it‚Äôs powered by H3\nand Vite. Nitro‚Äôs tagline is literally ‚Äúcreate web servers with everything you\nneed and **deploy them wherever you prefer** ‚Äù (emphasis is mine).\n\nIn simple terms, Nitro effectively makes TanStack Start ‚Äú It uses H3, an HTTP\nframework that maintains its own lower-level adapters on your behalf so you can\nwrite your server code once and use it anywhere (sounds a lot like React!).\n\nBy using Nitro, all of TanStack Start‚Äôs adapter problems were gone. I never even\nhad to think about them!\n\nIn fact, to deploy to Vercel, it was even easier than I had initially planned:\njust pass a target to our ‚Äôs option, which is passed to Nitro:\n\nNitro, H3 and Vite are **impressive to say the least.** We were pleased to see\nthat on our first try, a slew of Vercel features worked perfectly out of the box\nincluding the GitHub integration, server functions, edge functions/middleware,\nimmutable deploys, environment variables, server-side rendering, and even\nstreaming.\n\nThat‚Äôs a massive list that we essentially got for free by using Nitro and Vite.\n\nWith builds and deployments solved and built-in support for integrating my\nGitHub repos right into to my personal favorite hosting providers, I could\nfinally focus on what I think makes TanStack Start special:\n\n  * A best-in-class fully type-safe Router\n  * Flexible primitives for building server-bound RPCs\n  * Opt-in Server Functionality (SSR, APIs, RSCs, etc)\n  * And deep integration with other TanStack primitives like TanStack Query\n  * And even more to come!\n\nIt‚Äôs awesome that we were able to offload so much to Nitro and Vite and gain so\nmany awesome features, but it‚Äôs definitely not a 100% complete solution to using\nfeature of a hosting platform, especially Vercel where we have access to more\nthan just deployments. We‚Äôve also been thinking more about features like and my\npersonal favorite, .*\n\nFor instance, skew protection, which ensures that client and server stay in sync\nfor their respective deployments requires more than just a build step. It\ninvolves the ability to deeply integrate platform primitives into the framework\nat runtime as well, or in the specific case, being able to inject specific\ncookies or headers into outgoing API/server requests directed at Vercel.\n\nI‚Äôm happy to report that TanStack Start is going to ship with amazingly powerful\nmiddleware primitives (for both API routes and Server Function RPCs) that will\nmake this a one-liner, or possibly even automatic (hopefully).\n\nThis level of DX and integration is what makes me excited for the future and I\nbelieve is what open source is truly about: composing powerful tools from the\necosystem together to deliver amazing experiences for both developer and user.\n\nI couldn‚Äôt think of a better mashup than TanStack Start, Nitro, Vite and Vercel\nto give you a best-in-class web app experience.\n\n## [Try it in 60 seconds](https://tanstack.com/blog/<#try-it-in-60-seconds>)\n\nTanStack Start is currently in Beta! Click the button below to both create and\ndeploy a fresh copy of the TanStack Start ‚ÄúBasic‚Äù template to Vercel in ~1\nminute.\n\nWe hope you enjoy what we‚Äôre building and can‚Äôt wait to get your feedback!\n\n---\n\n# A milestone for TypeScript Performance in TanStack Router\nURL: https://tanstack.com/blog/tanstack-router-typescript-performance\n\n# A milestone for TypeScript Performance in TanStack Router\n\n _by Christopher Horobin on Sep 17, 2024._\n\nTanStack Router pushes the boundaries on type-safe routing.\n\nThe router's components such as and its hooks such as , , and , infer from the\nroute definitions to offer great type-safety. It's common for applications using\nTanStack Router to use external dependencies with complex types for , , and in\ntheir route definitions.\n\nWhile the DX is great, when route definitions accumulate into a route tree and\nit becomes large, the editor experience can start to appear slow. We've made\nmany TypeScript performance improvements to TanStack Router so that issues only\nstart to appear when the inference complexity becomes very large. We closely\nwatch diagnostics such as instantiations and try to reduce the time TypeScript\ntakes to type-check each individual route definition.\n\nDespite all these past efforts (which certainly helped), we had to address the\nelephant in the room. The fundamental problem to solve for a great editor\nexperience in TanStack Router was not necessarily related to the overall\ntypescript check time. The problem we've been working to resolve is the\nbottleneck in the TypeScript language service when it comes to type-checking the\naccumulated route tree. For those familiar with tracing TypeScript, a trace for\na large TanStack Router application could look something similar to the\nfollowing:\n\nFor those who don't know, you can generate a trace from TypeScript with the\nfollowing:\n\nThis example has 400 route definitions all with using and TanStack Query\nintegration through the routes and 's - it is an extreme example. The large wall\nat the beginning of the trace is what TypeScript was type-checking when it first\nhit an instance of the component.\n\nThe language server works by type-checking a file (or a region of a file) from\nthe beginning, but only for that file/region. So this meant that the language\nservice had to do this work whenever you interacted with an instance of a\ncomponent. It turns out, that this was the bottleneck that we were hitting when\ninferring all the necessary types from the accumulated route tree. As mentioned,\nroute definitions themselves can contain complex types from external validation\nlibraries which then also need inference.\n\nIt became quite apparent early on that this was quite clearly going to slow down\nthe editor experience.\n\n## [Breaking down work for the language\nservice](https://tanstack.com/blog/<#breaking-down-work-for-the-language-\nservice>)\n\nIdeally, the language service should only need to infer from a route definition,\nbased on where a is navigating , instead of having to crawl the whole route\ntree. This way the language service would not need to busy itself with inferring\nthe types of route definitions that are not the navigation target.\n\nUnfortunately, code-based route trees rely on inference to build the route tree\nwhich triggers the wall shown in the trace above. However, TanStack Router's\nfile-based routing, has the route tree being automatically generated whenever a\nroute is created or modified. This meant that there was some exploration to be\ndone here to see if we could eke out some better performance.\n\nPreviously route trees were created like the following, even for file-based\nrouting:\n\n```\n\n```\n\nGenerating the route tree came as a consequence of reducing the tedious\nconfiguration of a route tree but keeping inference where it matters. This is\nwhere the first important change is introduced leading to better editor\nperformance. Instead of inferring the route tree, we can take advantage of this\ngeneration step to .\n\nNote the use of an to declare the children to compose the route tree. This\nprocess is repeated for all routes and their children when generating the route\ntree. With this change, running a trace gave us a much better idea of what was\nhappening inside the language-service.\n\nThis is still slow and we're not quite there yet but there is something - . The\ntype inference for the entire route tree was still happening, but it was now\nbeing done . After working through our types, it turned out to be happening in a\ntype named .\n\nThis type walks down the route tree to create a union of all routes. The union\nin turn is used to create a type mapping from -> , -> and also -> . An example\nof this mapping exists as a mapped type.\n\nThe important realization here was that when using file-based routing, we were\nable to skip the type entirely by outputting that mapping type ourselves\nwhenever the route tree was generated. Instead, we'd be able to generate the\nfollowing:\n\nIn addition to declaring children, we also declare interfaces which map paths to\na route.\n\nThis change along with other type level changes to conditionally use only if\nthese types are not registered resulted in a trace which was our aim all along ü•≥\n\nThe first file to reference a no longer triggers inference from the whole route\ntree which increases perceived language service speed. significantly\n\nBy doing this, TypeScript will infer the types required for a specific route\nwhen it is referenced by a . This may not translate to overall better TypeScript\ntype-checking time when all routes are being linked to, but it is a significant\nspeed increase for the language service when in a file/region.\n\nThe difference between the two is striking, as seen in these large route trees\nwith complex inference (400 in this example below):\n\nYou may be thinking that this is since we are doing a lot of the heavy lifting\nhere in the route tree generation phase. Our response to that is that this\ngeneration step for file-based routing (and now virtual file-based routing) was\nalready there and was always a necessary step whenever you modified or created a\nnew route.\n\nSo, once a route has been created and the route tree is generated, the inference\nremains the same throughout everything within the route definition. This means\nthat you can make changes to , , , and others, with the inferred types always\nbeing reflected instantly.\n\nThe DX has not changed, but the performance in your editor feels awesome\n(especially when you are working with large route trees).\n\nThis change involved a lot of TanStack Router's exports being improved to make\nit more performant to consume these generated types whilst still being able to\nfall back on the whole route tree inference when using code-based routing. We've\nalso still got areas of the codebase that still rely on the full route tree\ninference. These areas are our version of a loose/non-strict mode.\n\n```\n\n```\n\nAll three above usages of , require the inference of the whole route tree and\ntherefore result in a worse editor experience when interacting with them.\n\nIn the first two instances, TanStack Router does not know what route you want to\nnavigate to, therefore it tries its best to guess at a very loose type inferred\nfrom all the routes in your route tree. The third instance of from above, uses\nthe argument in the updater function, but in this instance, TanStack Router does\nnot know which you are navigating , whereby it needs to once again try to guess\nthe loose type of by scanning the whole route tree.\n\nThe most performant usage of in your editor would be the following:\n\n```\n\n```\n\nTanStack Router can narrow the types to specific routes in these cases. This\nmeans that you get better type safety and better editor performance as your\napplication scales. Therefore, we encourage the use of and/or in these cases. To\nbe clear, in the third example, the usage of is only necessary if the argument\nis used, otherwise, TanStack Router does not need to infer the whole route tree.\n\nThese looser types also occur in modes.\n\n```\n\n```\n\nIn this case, better editor performance and type safety can be achieved by using\nthe recommended property.\n\n```\n\n```\n\nGoing forward, we believe that TanStack Router is very well positioned to have\nthe best balance between type safety and TypeScript performance, without having\nto compromise on the quality of the type inference used throughout the route\ndefinitions in file-based (and virtual file-based) routing. Everything in your\nroute definitions remains inferred, with the changes in the generated route tree\nonly aiding the language service by declaring the necessary types where it\nmatters, something that you would never want to write yourself.\n\nThis approach also looks to be scalable for the language service. We were able\nto create thousands of route definitions with the language service remaining\nstable provided you keep to the parts of TanStack Router.\n\nWe will continue to keep improving TypeScript performance on TanStack Router to\nreduce overall check time and improve the language service performance further,\nbut still felt that this was an important milestone to share and something we\nhope the users of TanStack Router will appreciate.\n\n---\n\n# _by Dominik Dorfmeister on Oct 17, 2023._\nURL: https://tanstack.com/blog/announcing-tanstack-query-v5\n\n_by Dominik Dorfmeister on Oct 17, 2023._\n\nAbout one year ago, we announced the , and the whole team has been working hard\non that version ever since. So we're super happy to announce that today is the\nday: After 91 alpha releases, 35 betas and 16 release candidates, TanStack Query\nis finally here! üéâ\n\nv5 continues the journey of v4, trying to make TanStack Query smaller (v5 is\n~20% smaller than v4), better and more intuitive to use. One of the main focus\npoints for this release was around streamlining and simplifying the APIs we\noffer:\n\nAs a big breaking change, we've removed most overloads from the codebase,\nunifying how you use and other hooks. This is something we wanted to do for v4,\nbut a prevented us from doing that. TypeScript addressed this issue in TS 4.7,\nso we were able to remove all the overloads that we had for calling with a\ndifferent amount of parameters. This is a huge DX win, because methods with\noverloads usually have quite bad TypeScript error messages.\n\nThis is the biggest breaking change in v5, but we think it's worth it. The API\nis now much more consistent - you always just pass object. To alleviate the pain\nof changing all occurrences manually, we have tried to prepare everyone for this\ncoming change for the last months. The documentation was changed to use the new\nAPI, and we released an auto-fixable in our eslint package. Additionally, v5\ncomes with to help with the transition.\n\nApart from that, we've renamed to to better reflect what it is doing, merged\nwith , renamed states to and from . All these changes make v5 the most\nconsistent and best version for new starters.\n\nTo read more about the breaking changes, have a look at our .\n\nOf course, v5 comes loaded with amazing new features as well üöÄ:\n\nEnjoy a brand new, simplified way to perform optimistic updates by leveraging\nthe returned from , without having to write code that updates the cache\nmanually. For more details, have a look at the\n\nA frequently requested feature, as seen in this , finally comes to life in v5:\nYou can now get access to the state of all mutations, shared across components\nthanks to the new hook.\n\nThat's right - for data fetching is no longer experimental, but fully supported.\nReact Query ships with new , and hooks. Have a look at the to learn about the\ndifferences to the non-suspense versions.\n\n#### [Streaming with React Server\nComponents](https://tanstack.com/blog/<#streaming-with-react-server-components>)\n\nv5 also comes with an experimental integration for suspense on the server in\nnextJs, unifying the best of both worlds: The adapter allows us to write a\nsingle , which will initiate data fetching as early as possible: on the server,\nduring SSR. It will then stream the result to the client, where it will be put\ninto the cache automatically, giving us all the interactivity and data\nsynchronization of React Query.\n\nInfinite Queries can now at once, and you have the option to specify the stored\nin the cache as well.\n\nThe Query devtools have been re-written from scratch in a framework-agnostic way\nto make them available to all adapters. They also got a UI revamp and some new\nfeatures like cache inline editing and light mode.\n\nAnother long-standing highlights the importance of fine-grained persistence with\njust-in-time restore capabilities (especially for mobile development) that the\nplugin doesn't have. With v5, we now have a new plugin that allows you to\npersist queries individually.\n\nNow that we have a unified way to call (with just one object as parameter), we\ncan also build better abstractions on top of that. The new function gives us a\ntype-safe way to share our query definitions between and imperative methods like\n. On top of that, it can make type-safe as well.\n\nWe hope you're going to enjoy using v5 as much as we've enjoyed building it.\nWhat's left for us to say thanks to everyone who made this release possible. No\nmatter if you're core contributor, implemented an issue from the roadmap, if\nyou've fixed a typo in the docs or gave feedback on the alpha releases: Every\ncontribution matters! It's the people that makes this library great, and we're\nblessed to have such an amazing community. ‚ù§Ô∏è\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/v4/docs/eslint/prefer-query-object-syntax\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v4/docs/eslint/</query/v4/docs/framework/react/guides/does-this-replace-client-state>)\n  * [Migrating to React Query 3](https://tanstack.com/query/v4/docs/eslint/</query/v4/docs/framework/react/guides/migrating-to-react-query-3>)\n  * [Migrating to React Query 4](https://tanstack.com/query/v4/docs/eslint/</query/v4/docs/framework/react/guides/migrating-to-react-query-4>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v4/docs/eslint/</query/v4/docs/framework/react/examples/auto-refetching>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v4/docs/eslint/</query/v4/docs/framework/react/guides/does-this-replace-client-state>)\n  * [Migrating to React Query 3](https://tanstack.com/query/v4/docs/eslint/</query/v4/docs/framework/react/guides/migrating-to-react-query-3>)\n  * [Migrating to React Query 4](https://tanstack.com/query/v4/docs/eslint/</query/v4/docs/framework/react/guides/migrating-to-react-query-4>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v4/docs/eslint/</query/v4/docs/framework/react/examples/auto-refetching>)\n\n# Prefer object syntax for useQuery\n\nYou can use in two different ways.\n\nThis rule prefers the second option, as it is more consistent with other React\nQuery hooks, like . It will also be the only available option in a future major\nversion.\n\nExamples of code for this rule:\n\n```\n\n/* eslint \"@tanstack/query/prefer-query-object-syntax\": \"error\" */\n\n```\n\n```\n\n/* eslint \"@tanstack/query/prefer-query-object-syntax\": \"error\" */\n\n```\n\nExamples of code for this rule:\n\n## [When Not To Use It](https://tanstack.com/query/v4/docs/eslint/<#when-not-to-\nuse-it>)\n\nIf you don't care about useQuery consistency, then you will not need this rule.\n\nThis rule was initially developed by in .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v4/docs/eslint/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/v4/docs/eslint/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JMCTBI4Z3JCA7IE2JMCT7I62QKC67DT2QYF67IT27YCA7IK2JWCABILKQJHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v4/docs/eslint/<https:/query.gg?s=tanstack>)\nYou are currently reading docs. Redirect to version?\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/v5/docs/react/guides/migrating-to-v5\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# Migrating to TanStack Query v5\n\nv5 is a major version, so there are some breaking changes to be aware of:\n\n### [Supports a single signature, one\nobject](https://tanstack.com/query/v5/docs/react/guides/<#supports-a-single-\nsignature-one-object>)\n\nuseQuery and friends used to have many overloads in TypeScript - different ways\nhow the function can be invoked. Not only this was tough to maintain, type wise,\nit also required a runtime check to see which type the first and the second\nparameter, to correctly create options.\n\nnow we only support the object format.\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n### [ now accepts queryKey only as an\nArgument](https://tanstack.com/query/v5/docs/react/guides/<#queryclientgetquerydata-\nnow-accepts-querykey-only-as-an-argument>)\n\nargument is changed to accept only a\n\n### [ now accepts queryKey only as an\nArgument](https://tanstack.com/query/v5/docs/react/guides/<#queryclientgetquerystate-\nnow-accepts-querykey-only-as-an-argument>)\n\nargument is changed to accept only a\n\nTo make the remove overloads migration easier, v5 comes with a codemod.\n\n> The codemod is a best efforts attempt to help you migrate the breaking change.\n> Please review the generated code thoroughly! Also, there are edge cases that\n> cannot be found by the code mod, so please keep an eye on the log output.\nIf you want to run it against or files, please use the command below:\n\n```\n\n```\n\n```\n\n```\n\nIf you want to run it against or files, please use the command below:\n\n```\n\n```\n\n```\n\n```\n\nPlease note in the case of you need to use as the parser; otherwise, the codemod\nwon't be applied properly!\n\nApplying the codemod might break your code formatting, so please don't forget to\nrun and/or after you've applied the codemod!\n\nA few notes about how codemod works:\n\n  * Generally, we're looking for the lucky case, when the first parameter is an object expression and contains the \"queryKey\" or \"mutationKey\" property (depending on which hook/method call is being transformed). If this is the case, your code already matches the new signature, so the codemod won't touch it. üéâ\n  * If the condition above is not fulfilled, then the codemod will check whether the first parameter is an array expression or an identifier that references an array expression. If this is the case, the codemod will put it into an object expression, then it will be the first parameter.\n  * If object parameters can be inferred, the codemod will attempt to copy the already existing properties to the newly created one.\n  * If the codemod cannot infer the usage, then it will leave a message on the console. The message contains the file name and the line number of the usage. In this case, you need to do the migration manually.\n  * If the transformation results in an error, you will also see a message on the console. This message will notify you something unexpected happened, please do the migration manually.\n\n### [Callbacks on useQuery (and QueryObserver) have been\nremoved](https://tanstack.com/query/v5/docs/react/guides/<#callbacks-on-\nusequery-and-queryobserver-have-been-removed>)\n\n, and have been removed from Queries. They haven't been touched for Mutations.\nPlease see for motivations behind this change and what to do instead.\n\nThis streamlines how callbacks are invoked (the , and callbacks all only get the\nquery passed as well), and it fixes some typing issues when callbacks get data\ntransformed by .\n\nYou can still access data with , however, it will not be data that has been\ntransformed by . If you need to access the transformed data, you can call the\ntransformation again on .\n\n### [The method has been removed from\nuseQuery](https://tanstack.com/query/v5/docs/react/guides/<#the-remove-method-\nhas-been-removed-from-usequery>)\n\nPreviously, remove method used to remove the query from the queryCache without\ninforming observers about it. It was best used to remove data imperatively that\nis no longer needed, e.g. when logging a user out.\n\nBut It doesn't make much sense to do this while a query is still active, because\nit will just trigger a hard loading state with the next re-render.\n\nif you still need to remove a query, you can use\n\n```\n\n```\n\n### [The minimum required TypeScript version is now\n4.7](https://tanstack.com/query/v5/docs/react/guides/<#the-minimum-required-\ntypescript-version-is-now-47>)\n\nMainly because an important fix was shipped around type inference. Please see\nthis for more information.\n\n### [The option has been removed from\nuseQuery](https://tanstack.com/query/v5/docs/react/guides/<#the-isdataequal-\noption-has-been-removed-from-usequery>)\n\nPreviously, This function was used to indicate whether to use previous () or new\ndata () as a resolved data for the query.\n\nYou can achieve the same functionality by passing a function to instead:\n\n```\n\n```\n\n### [The deprecated custom logger has been\nremoved](https://tanstack.com/query/v5/docs/react/guides/<#the-deprecated-\ncustom-logger-has-been-removed>)\n\nCustom loggers were already deprecated in 4 and have been removed in this\nversion. Logging only had an effect in development mode, where passing a custom\nlogger is not necessary.\n\nWe have updated our browserslist to produce a more modern, performant and\nsmaller bundle. You can read about the requirements .\n\n### [Private class fields and\nmethods](https://tanstack.com/query/v5/docs/react/guides/<#private-class-fields-\nand-methods>)\n\nTanStack Query has always had private fields and methods on classes, but they\nweren't really private - they were just private in . We now use , which means\nthose fields are now truly private and can't be accessed from the outside at\nruntime.\n\nAlmost everyone gets wrong. It sounds like \"the amount of time that data is\ncached for\", but that is not correct.\n\ndoes nothing as long as a query is still in use. It only kicks in as soon as the\nquery becomes unused. After the time has passed, data will be \"garbage\ncollected\" to avoid the cache from growing.\n\nis referring to \"garbage collect\" time. It's a bit more technical, but also a\nquite in computer science.\n\n```\n\n```\n\n### [The option has been renamed to\n](https://tanstack.com/query/v5/docs/react/guides/<#the-useerrorboundary-option-\nhas-been-renamed-to-throwonerror>)\n\nTo make the option more framework-agnostic and avoid confusion with the\nestablished React function prefix \"\" for hooks and the \"ErrorBoundary\" component\nname, it has been renamed to to more accurately reflect its functionality.\n\n### [TypeScript: is now the default type for errors instead of\n](https://tanstack.com/query/v5/docs/react/guides/<#typescript-error-is-now-the-\ndefault-type-for-errors-instead-of-unknown>)\n\nEven though in JavaScript, you can anything (which makes the most correct type),\nalmost always, (or subclasses of ) are thrown. This change makes it easier to\nwork with the field in TypeScript for most cases.\n\nIf you want to throw something that isn't an Error, you'll now have to set the\ngeneric for yourself:\n\nFor a way to set a different kind of Error globally, see .\n\nSince the only supported syntax now is the object syntax, this rule is no longer\nneeded\n\nWe have removed the option and flag as they were doing mostly the same thing as\nand flag.\n\nTo achieve the same functionality as , we have added previous query as an\nargument to which accepts an identity function. Therefore you just need to\nprovide an identity function to or use the included function from Tanstack\nQuery.\n\n> A note here is that would not receive in the function as argument. This is due\n> to a dynamic nature of queries passed in the array, which may lead to a\n> different shape of result from placeholder and queryFn.\n```\n\n```\n\nAn identity function, in the context of Tanstack Query, refers to a function\nthat always returns its provided argument (i.e. data) unchanged.\n\n```\n\n// identity function with the same behaviour as `keepPreviousData`\n\n```\n\n```\n\n // identity function with the same behaviour as `keepPreviousData`\n\n```\n\nThere are some caveats to this change however, which you must be aware of:\n\n  * will always put you into state, while gave you the status of the previous query. That status could be if we have data fetched successfully and then got a background refetch error. However, the error itself was not shared, so we decided to stick with behavior of .\n  * gave you the timestamp of the previous data, while with , will stay at . This might be annoying if you want to show that timestamp continuously on screen. However you might get around it with .\n```\n\n```\n\n### [Window focus refetching no longer listens to the\nevent](https://tanstack.com/query/v5/docs/react/guides/<#window-focus-\nrefetching-no-longer-listens-to-the-focus-event>)\n\nThe event is used exclusively now. This is possible because we only support\nbrowsers that support the event. This fixes a bunch of issues .\n\n### [Network status no longer relies on the\nproperty](https://tanstack.com/query/v5/docs/react/guides/<#network-status-no-\nlonger-relies-on-the-navigatoronline-property>)\n\ndoesn't work well in Chromium based browsers. There are around false negatives,\nwhich lead to Queries being wrongfully marked as .\n\nTo circumvent this, we now always start with and only listen to and events to\nupdate the status.\n\nThis should reduce the likelihood of false negatives, however, it might mean\nfalse positives for offline apps that load via serviceWorkers, which can work\neven without an internet connection.\n\n### [Removed custom prop in favor of custom\ninstance](https://tanstack.com/query/v5/docs/react/guides/<#removed-custom-\ncontext-prop-in-favor-of-custom-queryclient-instance>)\n\nIn v4, we introduced the possibility to pass a custom to all react-query hooks.\nThis allowed for proper isolation when using MicroFrontends.\n\nHowever, is a react-only feature. All that does is give us access to the . We\ncould achieve the same isolation by allowing to pass in a custom directly. This\nin turn will enable other frameworks to have the same functionality in a\nframework-agnostic way.\n\n```\n\n```\n\nIn v4, we introduced the possibility to define the pages to refetch for infinite\nqueries with the function.\n\nHowever, refetching all pages might lead to UI inconsistencies. Also, this\noption is available on e.g. , but it only does something for infinite queries,\nnot \"normal\" queries.\n\nThe v5 includes a new option for infinite queries to limit the number of pages\nto store in the query data and to refetch. This new feature handles the use\ncases initially identified for the page feature without the related issues.\n\nThe options you can pass to have been simplified. Queries and Mutations are\nalways dehydrated (according to the default function implementation). To change\nthis behaviour, instead of using the removed boolean options and you can\nimplement the function equivalents or instead. To get the old behaviour of not\nhydrating queries/mutations at all, pass in .\n\n### [Infinite queries now need a\n](https://tanstack.com/query/v5/docs/react/guides/<#infinite-queries-now-need-a-\ninitialpageparam>)\n\nPreviously, we've passed to the as , and you could assign a default value to the\nparameter in the function signature. This had the drawback of storing in the ,\nwhich is not serializable.\n\nInstead, you now have to pass an explicit to the infinite query options. This\nwill be used as the for the first page:\n\n```\n\n```\n\n### [Manual mode for infinite queries has been\nremoved](https://tanstack.com/query/v5/docs/react/guides/<#manual-mode-for-\ninfinite-queries-has-been-removed>)\n\nPreviously, we've allowed to overwrite the that would be returned from or by\npassing a value directly to or . This feature didn't work at all with refetches\nand wasn't widely known or used. This also means that is now required for\ninfinite queries.\n\n### [Returning from or now indicates that there is no further page\navailable](https://tanstack.com/query/v5/docs/react/guides/<#returning-null-\nfrom-getnextpageparam-or-getpreviouspageparam-now-indicates-that-there-is-no-\nfurther-page-available>)\n\nIn v4, you needed to explicitly return to indicate that there is no further page\navailable. We've widened this check to include .\n\n### [No retries on the\nserver](https://tanstack.com/query/v5/docs/react/guides/<#no-retries-on-the-\nserver>)\n\nOn the server, now defaults to instead of . For prefetching, we have always\ndefaulted to retries, but since queries that have enabled can now execute\ndirectly on the server as well (since React18), we have to make sure that we\ndon't retry on the server at all.\n\n### [ has been changed to and has been changed to and has now been renamed to\n](https://tanstack.com/query/v5/docs/react/guides/<#status-loading-has-been-\nchanged-to-status-pending-and-isloading-has-been-changed-to-ispending-and-\nisinitialloading-has-now-been-renamed-to-isloading>)\n\nThe status has been renamed to , and similarly the derived flag has been renamed\nto .\n\nFor mutations as well the has been changed from to and the flag has been changed\nto .\n\nLastly, a new derived flag has been added to the queries that is implemented as\n. This means that and have the same thing, but is deprecated now and will be\nremoved in the next major version.\n\nTo understand the reasoning behind this change checkout the .\n\nbecause it also hashes mutation keys and can be used inside the functions of and\n, which gets mutations passed.\n\n### [The minimum required React version is now\n18.0](https://tanstack.com/query/v5/docs/react/guides/<#the-minimum-required-\nreact-version-is-now-180>)\n\nReact Query v5 requires React 18.0 or later. This is because we are using the\nnew hook, which is only available in React 18.0 and later. Previously, we have\nbeen using the shim provided by React.\n\n### [The prop has been removed from\nQueryClientProvider](https://tanstack.com/query/v5/docs/react/guides/<#the-\ncontextsharing-prop-has-been-removed-from-queryclientprovider>)\n\nYou could previously use the property to share the first (and at least one)\ninstance of the query client context across the window. This ensured that if\nTanStack Query was used across different bundles or microfrontends then they\nwill all use the same instance of the context, regardless of module scoping.\n\nWith the removal of the custom context prop in v5, refer to the section on\n[Removed custom context prop in favor of custom queryClient\ninstance](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/migrating-\nto-v5/#removed-custom-context-prop-in-favor-of-custom-queryclient-instance>). If\nyou wish to share the same query client across multiple packages of an\napplication, you can directly pass a shared custom instance.\n\n### [No longer using as the batching function in React and React\nNative](https://tanstack.com/query/v5/docs/react/guides/<#no-longer-using-\nunstable_batchedupdates-as-the-batching-function-in-react-and-react-native>)\n\nSince the function is noop in React 18, it will no longer be automatically set\nas the batching function in .\n\nIf your framework supports a custom batching function, you can let TanStack\nQuery know about it by calling .\n\nFor example, this is how the batch function is set in :\n\n```\n\n```\n\nTo better support concurrent features and transitions we've made some changes to\nthe hydration APIs. The component has been renamed to and the hook has been\nremoved.\n\nThe no longer hydrates mutations, only queries. To hydrate mutations, use the\nlow level API or the plugin.\n\nFinally, as a technical detail, the timing for when queries are hydrated have\nchanged slightly. New queries are still hydrated in the render phase so that SSR\nworks as usual, but any queries that already exist in the cache are now hydrated\nin an effect instead (as long as their data is fresher than what is in the\ncache). If you are hydrating just once at the start of your application as is\ncommon, this wont affect you, but if you are using Server Components and pass\ndown fresh data for hydration on a page navigation, you might notice a flash of\nthe old data before the page immediately rerenders.\n\nThis last change is technically a breaking one, and was made so we don't\nprematurely update content on the page before a page transition has been fully\ncommitted. No action is required on your part.\n\n```\n\n```\n\nwill now merge together all matching registrations instead of returning only the\nfirst matching registration.\n\nAs a result, calls to should now be ordered with specificity. That is,\nregistrations should be made from the to the .\n\n```\n\n```\n\nNote that in this specific example, was added to the registration to counteract\nit now inheriting from the more general registration. The specific changes\nneeded to maintain exact behavior will vary depending on your defaults.\n\nv5 also comes with new features:\n\nWe have a new, simplified way to perform optimistic updates by leveraging the\nreturned from :\n\n```\n\n, { text: newTodo }),\n\n```\n\nHere, we are only changing how the UI looks when the mutation is running instead\nof writing data directly to the cache. This works best if we only have one place\nwhere we need to show the optimistic update. For more details, have a look at\nthe .\n\n### [Limited, Infinite Queries with new maxPages\noption](https://tanstack.com/query/v5/docs/react/guides/<#limited-infinite-\nqueries-with-new-maxpages-option>)\n\nInfinite queries are great when infinite scroll or pagination are needed.\nHowever, the more pages you fetch, the more memory you consume, and this also\nslows down the query refetching process as all the pages are sequentially\nrefetched.\n\nVersion 5 has a new option for infinite queries, which allows developers to\nlimit the number of pages that are stored in the query data and subsequently\nrefetched. You can adjust the value according to the UX and refetching\nperformance you want to deliver.\n\nNote that the infinite list must be bi-directional, which requires both and to\nbe defined.\n\n### [Infinite Queries can prefetch multiple\npages](https://tanstack.com/query/v5/docs/react/guides/<#infinite-queries-can-\nprefetch-multiple-pages>)\n\nInfinite Queries can be prefetched like regular Queries. Per default, only the\nfirst page of the Query will be prefetched and will be stored under the given\nQueryKey. If you want to prefetch more than one page, you can use the option.\nRead the for more information.\n\nSee the for more details.\n\nSee the for more details.\n\n### [Typesafe way to create Query\nOptions](https://tanstack.com/query/v5/docs/react/guides/<#typesafe-way-to-\ncreate-query-options>)\n\nSee the for more details.\n\nWith v5, suspense for data fetching finally becomes \"stable\". We've added\ndedicated , and hooks. With these hooks, will never be potentially on type\nlevel:\n\n```\n\n // ^? const post: Post\n\n```\n\n```\n\n // ^? const post: Post\n\n```\n\nThe experimental flag on the query hooks has been removed.\n\nYou can read more about them in the .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/guides/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/v5/docs/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKJKC67DT2QYF67IT27YCA7IK2JWCA7IKK7MHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/v5/docs/react/guides/optimistic-updates\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nReact Query provides two ways to optimistically update your UI before a mutation\nhas completed. You can either use the option to update your cache directly, or\nleverage the returned to update your UI from the result.\n\nThis is the simpler variant, as it doesn't interact with the cache directly.\n\n```\n\n, { text: newTodo }),\n\n // make sure to _return_ the Promise from the query invalidation\n\n // so that the mutation stays in `pending` state until the refetch is finished\n\n```\n\n```\n\n // make sure to _return_ the Promise from the query invalidation\n\n // so that the mutation stays in `pending` state until the refetch is finished\n\n```\n\nyou will then have access to , which contain the added todo. In your UI list,\nwhere the query is rendered, you can append another item to the list while the\nmutation :\n\nWe're rendering a temporary item with a different as long as the mutation is\npending. Once it completes, the item will automatically no longer be rendered.\nGiven that the refetch succeeded, we should see the item as a \"normal item\" in\nour list.\n\nIf the mutation errors, the item will also disappear. But we could continue to\nshow it, if we want, by checking for the state of the mutation. are cleared when\nthe mutation errors, so we can still access them, maybe even show a retry\nbutton:\n\n### [If the mutation and the query don't live in the same\ncomponent](https://tanstack.com/query/v5/docs/react/guides/<#if-the-mutation-\nand-the-query-dont-live-in-the-same-component>)\n\nThis approach works very well if the mutation and the query live in the same\ncomponent, However, you also get access to all mutations in other components via\nthe dedicated hook. It is best combined with a :\n\n```\n\n// somewhere in your app\n\n, { text: newTodo }),\n\n// access variables somewhere else\n\n```\n\n```\n\n// somewhere in your app\n\n// access variables somewhere else\n\n```\n\nwill be an , because there might be multiple mutations running at the same time.\nIf we need a unique key for the items, we can also select . This will even make\ndisplaying concurrent optimistic updates a breeze.\n\nWhen you optimistically update your state before performing a mutation, there is\na chance that the mutation will fail. In most of these failure cases, you can\njust trigger a refetch for your optimistic queries to revert them to their true\nserver state. In some circumstances though, refetching may not work correctly\nand the mutation error could represent some type of server issue that won't make\nit possible to refetch. In this event, you can instead choose to roll back your\nupdate.\n\nTo do this, 's handler option allows you to return a value that will later be\npassed to both and handlers as the last argument. In most cases, it is most\nuseful to pass a rollback function.\n\n### [Updating a list of todos when adding a new\ntodo](https://tanstack.com/query/v5/docs/react/guides/<#updating-a-list-of-\ntodos-when-adding-a-new-todo>)\n\n```\n\n // When mutate is called:\n\n  // Cancel any outgoing refetches\n\n  // (so they don't overwrite our optimistic update)\n\n  // Snapshot the previous value\n\n  // Optimistically update to the new value\n\n  // Return a context object with the snapshotted value\n\n // If the mutation fails,\n\n // use the context returned from onMutate to roll back\n\n // Always refetch after error or success:\n\n```\n\n```\n\n // When mutate is called:\n\n  // Cancel any outgoing refetches\n\n  // (so they don't overwrite our optimistic update)\n\n  // Snapshot the previous value\n\n  // Optimistically update to the new value\n\n  // Return a context object with the snapshotted value\n\n // If the mutation fails,\n\n // use the context returned from onMutate to roll back\n\n // Always refetch after error or success:\n\n```\n\n```\n\n // When mutate is called:\n\n  // Cancel any outgoing refetches\n\n  // (so they don't overwrite our optimistic update)\n\n  // Snapshot the previous value\n\n  // Optimistically update to the new value\n\n  // Return a context with the previous and new todo\n\n // If the mutation fails, use the context we returned above\n\n // Always refetch after error or success:\n\n```\n\n```\n\n // When mutate is called:\n\n  // Cancel any outgoing refetches\n\n  // (so they don't overwrite our optimistic update)\n\n  // Snapshot the previous value\n\n  // Optimistically update to the new value\n\n  // Return a context with the previous and new todo\n\n // If the mutation fails, use the context we returned above\n\n // Always refetch after error or success:\n\n```\n\nYou can also use the function in place of the separate and handlers if you wish:\n\n```\n\n```\n\n```\n\n```\n\nIf you only have one place where the optimistic result should be shown, using\nand updating the UI directly is the approach that requires less code and is\ngenerally easier to reason about. For example, you don't need to handle\nrollbacks at all.\n\nHowever, if you have multiple places on the screen that would require to know\nabout the update, manipulating the cache directly will take care of this for you\nautomatically.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/guides/<https:/query.gg?s=tanstack>)\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/query/v5/docs/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3LFTSIKZ3JCA7ILK3LCVYIK53KC67DT2QYF67IT27YCA7IK2JWCA7IK23NHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/v5/docs/react/reference/useMutationState\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/reference/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/reference/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/reference/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/reference/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/reference/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/reference/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nis a hook that gives you access to all mutations in the . You can pass to it to\nnarrow down your mutations, and to transform the mutation state.\n\n**Example 1: Get all variables of all running mutations**\n\n```\n\n```\n\n**Example 2: Get all data for specific mutations via the**\n\n```\n\n// Some mutation that we want to get the state for\n\n // this mutation key needs to match the mutation key of the given mutation (see\nabove)\n\n```\n\n```\n\n// Some mutation that we want to get the state for\n\n // this mutation key needs to match the mutation key of the given mutation (see\nabove)\n\n```\n\n**Example 3: Access the latest mutation data via the** Each invocation of adds a\nnew entry to the mutation cache for milliseconds.\n\nTo access the latest invocation, you can check for the last item that returns.\n\n```\n\n// Some mutation that we want to get the state for\n\n // this mutation key needs to match the mutation key of the given mutation (see\nabove)\n\n```\n\n```\n\n// Some mutation that we want to get the state for\n\n // this mutation key needs to match the mutation key of the given mutation (see\nabove)\n\n```\n\n  *     * select?: (mutation: Mutation) => TResult\n      * Use this to transform the mutation state.\n  * ,\n    * Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.\n\n  *     * Will be an Array of whatever returns for each matching mutation.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/reference/<https:/query.gg?s=tanstack>)\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/query/v5/docs/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2JKC67DT2QYF67IT27YCA7IK2JWCA7IKKQ7HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/v5/docs/react/guides/suspense\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nReact Query can also be used with React's Suspense for Data Fetching API's. For\nthis, we have dedicated hooks:\n\n  * Additionally, you can use the and (Experimental)\n\nWhen using suspense mode, states and objects are not needed and are then\nreplaced by usage of the component (including the use of the prop and React\nerror boundaries for catching errors). Please read the and look at the for more\ninformation on how to set up suspense mode.\n\nIf you want mutations to propagate errors to the nearest error boundary (similar\nto queries), you can set the option to as well.\n\nEnabling suspense mode for a query:\n\n```\n\n```\n\nThis works nicely in TypeScript, because is guaranteed to be defined (as errors\nand loading states are handled by Suspense- and ErrorBoundaries).\n\nOn the flip side, you therefore can't conditionally enable / disable the Query.\nThis generally shouldn't be necessary for dependent Queries because with\nsuspense, all your Queries inside one component are fetched in serial.\n\nalso doesn't exist for this Query. To prevent the UI from being replaced by a\nfallback during an update, wrap your updates that change the QueryKey into .\n\nNot all errors are thrown to the nearest Error Boundary per default - we're only\nthrowing errors if there is no other data to show. That means if a Query ever\nsuccessfully got data in the cache, the component will render, even if data is .\nThus, the default for is:\n\n```\n\nthrowOnError: (error, query) => typeof query.state.data === 'undefined'\n\n```\n\n```\n\nthrowOnError: (error, query) => typeof query.state.data === 'undefined'\n\n```\n\nSince you can't change (because it would allow for to become potentially ), you\nhave to throw errors manually if you want all errors to be handled by Error\nBoundaries:\n\n```\n\n```\n\nWhether you are using or in your queries, you will need a way to let queries\nknow that you want to try again when re-rendering after some error occurred.\n\nQuery errors can be reset with the component or with the hook.\n\nWhen using the component it will reset any query errors within the boundaries of\nthe component:\n\n```\n\n```\n\n```\n\n```\n\nWhen using the hook it will reset any query errors within the closest . If there\nis no boundary defined it will reset them globally:\n\n```\n\n```\n\n```\n\n```\n\nOut of the box, React Query in mode works really well as a solution with no\nadditional configuration. This means that when your components attempt to mount,\nthey will trigger query fetching and suspend, but only once you have imported\nthem and mounted them. If you want to take it to the next level and implement a\nmodel, we recommend implementing on routing callbacks and/or user interactions\nevents to start loading queries before they are mounted and hopefully even\nbefore you start importing or mounting their parent components.\n\n## [Suspense on the Server with\nstreaming](https://tanstack.com/query/v5/docs/react/guides/<#suspense-on-the-\nserver-with-streaming>)\n\nIf you are using , you can use our integration for Suspense on the Server: .\nThis package will allow you to fetch data on the server (in a client component)\nby just calling in your component. Results will then be streamed from the server\nto the client as SuspenseBoundaries resolve.\n\nTo achieve this, wrap your app in the component:\n\n```\n\n    // With SSR, we usually want to set some default staleTime\n    // above 0 to avoid refetching immediately on the client\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n // NOTE: Avoid useState when initializing the query client if you don't\n\n //    have a suspense boundary between this and the code that may\n\n //    suspend because React will throw away the client on the initial\n\n //    render if it suspends and there is no boundary\n\n```\n\n```\n\n    // With SSR, we usually want to set some default staleTime\n    // above 0 to avoid refetching immediately on the client\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n // NOTE: Avoid useState when initializing the query client if you don't\n\n //    have a suspense boundary between this and the code that may\n\n //    suspend because React will throw away the client on the initial\n\n //    render if it suspends and there is no boundary\n\n```\n\nFor more information, check out the and the guide.\n\n> To enable this feature, you need to set the option to when creating your\n```\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/guides/<https:/query.gg?s=tanstack>)\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/query/v5/docs/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKQKC67DT2QYF67IT27YCA7IK2JWCA7IKKJIHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/v5/docs/react/guides/advanced-ssr\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nWelcome to the Advanced Server Rendering guide, where you will learn all about\nusing React Query with streaming, Server Components and the Next.js app router.\n\nYou might want to read the [Server Rendering & Hydration\nguide](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/ssr>)\nbefore this one as it teaches the basics for using React Query with SSR, and as\nwell as also contains valuable background.\n\nBefore we start, let's note that while the approach outlined in the SSR guide\nalso works with Server Components, we'll focus this guide on the hydration APIs.\n\n## [Server Components & Next.js app\nrouter](https://tanstack.com/query/v5/docs/react/guides/<#server-components--\nnextjs-app-router>)\n\nWe won't cover Server Components in depth here, but the short version is that\nthey are components that are guaranteed to run on the server, both for the\ninitial page view and . This is similar to how Next.js / and Remix works, as\nthese also always run on the server but while those can only return data, Server\nComponents can do a lot more. The data part is central to React Query however,\nso let's focus on that.\n\nHow do we take what we learned in the Server Rendering guide about [passing data\nprefetched in framework loaders to the\napp](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/ssr#using-\nthe-hydration-apis>) and apply that to Server Components and the Next.js app\nrouter? The best way to start thinking about this is to consider Server\nComponents as \"just\" another framework loader.\n\n### [A quick note on\nterminology](https://tanstack.com/query/v5/docs/react/guides/<#a-quick-note-on-\nterminology>)\n\nSo far in these guides, we've been talking about the and the . It's important to\nnote that confusingly enough this does not match 1-1 with and . Server\nComponents are guaranteed to only run on the server, but Client Components can\nactually run in both places. The reason for this is that they can also render\nduring the initial pass.\n\nOne way to think of this is that even though Server Components also , they\nhappen during a \"loader phase\" (always happens on the server), while Client\nComponents run during the \"application phase\". That application can run both on\nthe server during SSR, and in for example a browser. Where exactly that\napplication runs and if it runs during SSR or not might differ between\nframeworks.\n\nThe first step of any React Query setup is always to create a and wrap your\napplication in a . With Server Components, this looks mostly the same across\nframeworks, one difference being the filename conventions:\n\n```\n\n// In Next.js, this file would be called: app/providers.tsx\n\n// Since QueryClientProvider relies on useContext under the hood, we have to put\n'use client' on top\n\n    // With SSR, we usually want to set some default staleTime\n    // above 0 to avoid refetching immediately on the client\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n // NOTE: Avoid useState when initializing the query client if you don't\n\n //    have a suspense boundary between this and the code that may\n\n //    suspend because React will throw away the client on the initial\n\n //    render if it suspends and there is no boundary\n\n```\n\n```\n\n// In Next.js, this file would be called: app/providers.tsx\n\n// Since QueryClientProvider relies on useContext under the hood, we have to put\n'use client' on top\n\n    // With SSR, we usually want to set some default staleTime\n    // above 0 to avoid refetching immediately on the client\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n // NOTE: Avoid useState when initializing the query client if you don't\n\n //    have a suspense boundary between this and the code that may\n\n //    suspend because React will throw away the client on the initial\n\n //    render if it suspends and there is no boundary\n\n```\n\n```\n\n// In Next.js, this file would be called: app/layout.tsx\n\n```\n\n```\n\n// In Next.js, this file would be called: app/layout.tsx\n\n```\n\nThis part is pretty similar to what we did in the SSR guide, we just need to\nsplit things up into two different files.\n\nLet's next look at how to actually prefetch data and dehydrate and hydrate it.\nThis is what it looked like using the :\n\n```\n\n// This could also be getServerSideProps\n\n // This useQuery could just as well happen in some deeper child to\n\n // the <PostsRoute>, data will be available immediately either way\n\n // Note that we are using useQuery here instead of useSuspenseQuery.\n\n // Because this data has already been prefetched, there is no need to\n\n // ever suspend in the component itself. If we forget or remove the\n\n // prefetch, this will instead fetch the data on the client, while\n\n // using useSuspenseQuery would have had worse side effects.\n\n // This query was not prefetched on the server and will not start\n\n // fetching until on the client, both patterns are fine to mix\n\n```\n\n```\n\n// This could also be getServerSideProps\n\n // This useQuery could just as well happen in some deeper child to\n\n // the <PostsRoute>, data will be available immediately either way\n\n // Note that we are using useQuery here instead of useSuspenseQuery.\n\n // Because this data has already been prefetched, there is no need to\n\n // ever suspend in the component itself. If we forget or remove the\n\n // prefetch, this will instead fetch the data on the client, while\n\n // using useSuspenseQuery would have had worse side effects.\n\n // This query was not prefetched on the server and will not start\n\n // fetching until on the client, both patterns are fine to mix\n\n```\n\nConverting this to the app router actually looks pretty similar, we just need to\nmove things around a bit. First, we'll create a Server Component to do the\nprefetching part:\n\n```\n\n  // Neat! Serialization is now as easy as passing props.\n\n  // HydrationBoundary is a Client Component, so hydration will happen there.\n\n```\n\n```\n\n  // Neat! Serialization is now as easy as passing props.\n\n  // HydrationBoundary is a Client Component, so hydration will happen there.\n\n```\n\nNext, we'll look at what the Client Component part looks like:\n\n```\n\n // This useQuery could just as well happen in some deeper\n\n // child to <Posts>, data will be available immediately either way\n\n // This query was not prefetched on the server and will not start\n\n // fetching until on the client, both patterns are fine to mix.\n\n```\n\n```\n\n // This useQuery could just as well happen in some deeper\n\n // child to <Posts>, data will be available immediately either way\n\n // This query was not prefetched on the server and will not start\n\n // fetching until on the client, both patterns are fine to mix.\n\n```\n\nOne neat thing about the examples above is that the only thing that is Next.js-\nspecific here are the file names, everything else would look the same in any\nother framework that supports Server Components.\n\nIn the SSR guide, we noted that you could get rid of the boilerplate of having\nin every route. This is not possible with Server Components.\n\n> NOTE: If you encounter a type error while using async Server Components with\n> TypeScript versions lower than and versions lower than , it is recommended to\n> update to the latest versions of both. Alternatively, you can use the\n> temporary workaround of adding {/* @ts-expect-error Server Component */} when\n> calling this component inside another. For more information, see [Async Server\n> Component TypeScript\n> Error](https://tanstack.com/query/v5/docs/react/guides/<https:/nextjs.org/docs/app/building-\n> your-application/configuring/typescript#async-server-component-typescript-\n> error>) in the Next.js 13 docs.\n> NOTE: If you encounter an error Only plain objects, and a few built-ins, can\n> be passed to Server Actions. Classes or null prototypes are not supported.\n> make sure that you're passing to queryFn a function reference, instead call\n> the function because queryFn args has a bunch of properties and not all of it\n> would be serializable. see [Server Action only works when queryFn isn't a\n> reference](https://tanstack.com/query/v5/docs/react/guides/<https:/github.com/TanStack/query/issues/6264>).\nA nice thing about Server Components is that they can be nested and exist on\nmany levels in the React tree, making it possible to prefetch data closer to\nwhere it's actually used instead of only at the top of the application (just\nlike Remix loaders). This can be as simple as a Server Component rendering\nanother Server Component (we'll leave the Client Components out in this example\nfor brevity):\n\n```\n\n```\n\nAs you can see, it's perfectly fine to use in multiple places, and create and\ndehydrate multiple for prefetching.\n\nNote that because we are awaiting before rendering this would lead to a server\nside waterfall:\n\n```\n\n```\n\n```\n\n```\n\nIf the server latency to the data is low, this might not be a huge issue, but is\nstill worth pointing out.\n\nIn Next.js, besides prefetching data in , you can also do it in , and in .\nBecause these are all part of the routing, Next.js knows how to fetch them all\nin parallel. So if above was instead expressed as a parallel route, the\nwaterfall would be flattened automatically.\n\nAs more frameworks start supporting Server Components, they might have other\nrouting conventions. Read your framework docs for details.\n\n### [Alternative: Use a single for\nprefetching](https://tanstack.com/query/v5/docs/react/guides/<#alternative-use-\na-single-queryclient-for-prefetching>)\n\nIn the example above, we create a new for each Server Component that fetches\ndata. This is the recommended approach, but if you want to, you can\nalternatively create a single one that is reused across all Server Components:\n\n```\n\n// cache() is scoped per request, so we don't leak data between requests\n\n```\n\n```\n\n// cache() is scoped per request, so we don't leak data between requests\n\n```\n\nThe benefit of this is that you can call to get a hold of this client anywhere\nthat gets called from a Server Component, including utility functions. The\ndownside is that every time you call , you serialize , including queries that\nhave already been serialized before and are unrelated to the current Server\nComponent which is unnecessary overhead.\n\nNext.js already dedupes requests that utilize , but if you are using something\nelse in your , or if you use a framework that does dedupe these requests\nautomatically, using a single as described above might make sense, despite the\nduplicated serialization.\n\n> As a future improvement, we might look into creating a function (name pending)\n> that only dehydrate queries that are since the last call to . Feel free to get\n> in touch if this sounds interesting and like something you want to help out\n> with!\nWith Server Components, it's important to think about data ownership and\nrevalidation. To explain why, let's look at a modified example from above:\n\n```\n\n // Note we are now using fetchQuery()\n\n/* This is the new part */\n\n```\n\n```\n\n // Note we are now using fetchQuery()\n\n/* This is the new part */\n\n```\n\nWe are now rendering data from the query both in a Server Component and in a\nClient Component. This will be fine for the initial page render, but what\nhappens when the query revalidates on the client for some reason when has been\npassed?\n\nReact Query has no idea of how to , so if it refetches the data on the client,\ncausing React to rerender the list of posts, the will end up out of sync.\n\nThis is fine if you set , so that React Query never revalidates, but this is\nprobably not what you want if you are using React Query in the first place.\n\nUsing React Query with Server Components makes most sense if:\n\n  * You have an app using React Query and want to migrate to Server Components without rewriting all the data fetching\n  * You want a familiar programming paradigm, but want to still sprinkle in the benefits of Server Components where it makes most sense\n  * You have some use case that React Query covers, but that your framework of choice does not cover\n\nIt's hard to give general advice on when it makes sense to pair React Query with\nServer Components and not. **If you are just starting out with a new Server\nComponents app, we suggest you start out with any tools for data fetching your\nframework provides you with and avoid bringing in React Query until you actually\nneed it.** This might be never, and that's fine, use the right tool for the job!\n\nIf you do use it, a good rule of thumb is to avoid unless you need to catch\nerrors. If you do use it, don't render its result on the server or pass the\nresult to another component, even a Client Component one.\n\nFrom the React Query perspective, treat Server Components as a place to prefetch\ndata, nothing more.\n\nOf course, it's fine to have Server Components own some data, and Client\nComponents own other, just make sure those two realities don't get out of sync.\n\nThe Next.js app router automatically streams any part of the application that is\nready to be displayed to the browser as soon as possible, so finished content\ncan be displayed immediately without waiting for still pending content. It does\nthis along boundary lines. Note that if you create a file , this automatically\ncreates a boundary behind the scenes.\n\nWith the prefetching patterns described above, React Query is perfectly\ncompatible with this form of streaming. As the data for each Suspense boundary\nresolves, Next.js can render and stream the finished content to the browser.\nThis works even if you are using as outlined above because the suspending\nactually happens when you the prefetch.\n\nAs of React Query v5.40.0, you don't have to all prefetches for this to work, as\nQueries can also be dehydrated and sent to the client. This lets you kick off\nprefetches as early as possible without letting them block an entire Suspense\nboundary, and streams the to the client as the query finishes. This can be\nuseful for example if you want to prefetch some content that is only visible\nafter some user interaction, or say if you want to and render the first page of\nan infinite query, but start prefetching page 2 without blocking rendering.\n\nTo make this work, we have to instruct the to also pending Queries. We can do\nthis globally, or by passing that option directly to .\n\nWe will also need to move the function out of our file as we want to use it in\nour server component and our client provider.\n\n```\n\n    // include pending queries in dehydration\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n```\n\n```\n\n    // include pending queries in dehydration\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n```\n\n> Note: This works in NextJs and Server Components because React can serialize\n> Promises over the wire when you pass them down to Client Components.\nThen, all we need to do is provide a , but we don't need to prefetches anymore:\n\n```\n\n// the function doesn't need to be `async` because we don't `await` anything\n\n // look ma, no await\n\n```\n\n```\n\n// the function doesn't need to be `async` because we don't `await` anything\n\n // look ma, no await\n\n```\n\nOn the client, the Promise will be put into the QueryCache for us. That means we\ncan now call inside the component to \"use\" that Promise (which was created on\nthe Server):\n\n```\n\n```\n\n> Note that you could also instead of , and the Promise would still be picked up\n> correctly. However, NextJs won't suspend in that case and the component will\n> render in the status, which also opts out of server rendering the content.\nIf you're using non-JSON data types and serialize the query results on the\nserver, you can specify the and options to serialize and deserialize the data on\neach side of the boundary to ensure the data in the cache is the same format\nboth on the server and the client:\n\n```\n\n```\n\n```\n\n // look ma, no await\n\n// <-- serialize the data on the server\n\n```\n\n```\n\n // look ma, no await\n\n // <-- serialize the data on the server\n\n```\n\n```\n\n```\n\nNow, your function can return e.g. datetime objects and the data will be\nserialized and deserialized on the client, assuming your transformer can\nserialize and deserialize those data types.\n\nFor more information, check out the [Next.js App with Prefetching\nExample](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/nextjs-\napp-prefetching>).\n\n## [Experimental streaming without prefetching in\nNext.js](https://tanstack.com/query/v5/docs/react/guides/<#experimental-\nstreaming-without-prefetching-in-nextjs>)\n\nWhile we recommend the prefetching solution detailed above because it flattens\nrequest waterfalls both on the initial page load any subsequent page navigation,\nthere is an experimental way to skip prefetching altogether and still have\nstreaming SSR work:\n\nThis package will allow you to fetch data on the server (in a Client Component)\nby just calling in your component. Results will then be streamed from the server\nto the client as SuspenseBoundaries resolve. If you call without wrapping it in\na boundary, the HTML response won't start until the fetch resolves. This can be\nwhen you want depending on the situation, but keep in mind that this will hurt\nyour TTFB.\n\nTo achieve this, wrap your app in the component:\n\n```\n\n    // With SSR, we usually want to set some default staleTime\n    // above 0 to avoid refetching immediately on the client\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n // NOTE: Avoid useState when initializing the query client if you don't\n\n //    have a suspense boundary between this and the code that may\n\n //    suspend because React will throw away the client on the initial\n\n //    render if it suspends and there is no boundary\n\n```\n\n```\n\n    // With SSR, we usually want to set some default staleTime\n    // above 0 to avoid refetching immediately on the client\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n // NOTE: Avoid useState when initializing the query client if you don't\n\n //    have a suspense boundary between this and the code that may\n\n //    suspend because React will throw away the client on the initial\n\n //    render if it suspends and there is no boundary\n\n```\n\nFor more information, check out the .\n\nThe big upside is that you no longer need to prefetch queries manually to have\nSSR work, and it even still streams in the result! This gives you phenomenal DX\nand lower code complexity.\n\nThe downside is easiest to explain if we look back at [the complex request\nwaterfall\nexample](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/request-\nwaterfalls#code-splitting>) in the Performance & Request Waterfalls guide.\nServer Components with prefetching effectively eliminates the request waterfalls\nboth for the initial page load any subsequent navigation. This prefetch-less\napproach however will only flatten the waterfalls on the initial page load but\nends up the same deep waterfall as the original example on page navigations:\n\n```\n\n1. |> JS for <Feed>\n\n3.   |> JS for <GraphFeedItem>\n4.    |> getGraphDataById()\n\n```\n\n```\n\n1. |> JS for <Feed>\n\n3.   |> JS for <GraphFeedItem>\n4.    |> getGraphDataById()\n\n```\n\nThis is even worse than with /, since with those we could at least parallelize\ndata- and code-fetching.\n\nIf you value DX/iteration/shipping speed with low code complexity over\nperformance, don't have deeply nested queries, or are on top of your request\nwaterfalls with parallel fetching using tools like , this can be a good\ntradeoff.\n\n> It might be possible to combine the two approaches, but even we haven't tried\n> that out yet. If you do try this, please report back your findings, or even\n> update these docs with some tips!\nServer Components and streaming are still fairly new concepts and we are still\nfiguring out how React Query fits in and what improvements we can make to the\nAPI. We welcome suggestions, feedback and bug reports!\n\nSimilarly, it would be impossible to teach all the intricacies of this new\nparadigm all in one guide, on the first try. If you are missing some piece of\ninformation here or have suggestions on how to improve this content, also get in\ntouch, or even better, click the \"Edit on GitHub\" button below and help us out.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/guides/<https:/query.gg?s=tanstack>)\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/query/v5/docs/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC5QKC67DT2QYF67IT27YCA7IK2JWCA7IKKJ7HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/v5/docs/react/guides/prefetching\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nWhen you know or suspect that a certain piece of data will be needed, you can\nuse prefetching to populate the cache with that data ahead of time, leading to a\nfaster experience.\n\nThere are a few different prefetching patterns:\n\n  1. During Server Rendering (another form of router integration)\n\nIn this guide, we'll take a look at the first three, while the fourth will be\ncovered in depth in the [Server Rendering & Hydration\nguide](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/ssr>)\nand the .\n\nOne specific use of prefetching is to avoid Request Waterfalls, for an in-depth\nbackground and explanation of those, see the [Performance & Request Waterfalls\nguide](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/request-\nwaterfalls>).\n\nBefore jumping into the different specific prefetch patterns, let's look at the\nand functions. First a few basics:\n\n  * Out of the box, these functions use the default configured for the to determine whether existing data in the cache is fresh or needs to be fetched again\n  * You can also pass a specific like this: prefetchQuery({ queryKey: ['todos'], queryFn: fn, staleTime: 5000 })\n    * This is only used for the prefetch, you still need to set it for any call as well\n    * If you want to ignore and instead always return data if it's available in the cache, you can use the function.\n    * Tip: If you are prefetching on the server, set a default higher than for that to avoid having to pass in a specific to each prefetch call\n  * If no instances of appear for a prefetched query, it will be deleted and garbage collected after the time specified in \n  * These functions returns and thus never return query data. If that's something you need, use / instead.\n  * The prefetch functions never throws errors because they usually try to fetch again in a which is a nice graceful fallback. If you need to catch errors, use / instead.\n\nThis is how you use :\n\n```\n\n // The results of this query will be cached like a normal query\n\n```\n\n```\n\n // The results of this query will be cached like a normal query\n\n```\n\nInfinite Queries can be prefetched like regular Queries. Per default, only the\nfirst page of the Query will be prefetched and will be stored under the given\nQueryKey. If you want to prefetch more than one page, you can use the option, in\nwhich case you also have to provide a function:\n\n```\n\n // The results of this query will be cached like a normal query\n\n// prefetch the first 3 pages\n\n```\n\n```\n\n // The results of this query will be cached like a normal query\n\n // prefetch the first 3 pages\n\n```\n\nNext, let's look at how you can use these and other ways to prefetch in\ndifferent situations.\n\nA straightforward form of prefetching is doing it when the user interacts with\nsomething. In this example we'll use to start a prefetch on or .\n\n```\n\n   // Prefetch only fires when data is older than the staleTime,\n\n   // so in a case like this you definitely want to set one\n\n```\n\n```\n\n   // Prefetch only fires when data is older than the staleTime,\n\n   // so in a case like this you definitely want to set one\n\n```\n\nPrefetching during the component lifecycle is useful when we know some child or\ndescendant will need a particular piece of data, but we can't render that until\nsome other query has finished loading. Let's borrow an example from the Request\nWaterfall guide to explain:\n\n```\n\n```\n\nThis results in a request waterfall looking like this:\n\n```\n\n```\n\n```\n\n```\n\nAs mentioned in that guide, one way to flatten this waterfall and improve\nperformance is to hoist the query to the parent and pass down the result as a\nprop, but what if this is not feasible or desirable, for example when the\ncomponents are unrelated and have multiple levels between them?\n\nIn that case, we can instead prefetch the query in the parent. The simplest way\nto do this is to use a query but ignore the result:\n\n```\n\n  // Optional optimization to avoid rerenders when this query changes:\n\n```\n\n```\n\n  // Optional optimization to avoid rerenders when this query changes:\n\n```\n\nThis starts fetching immediately and flattens the waterfall:\n\n```\n\n```\n\n```\n\n```\n\nIf you want to prefetch together with Suspense, you will have to do things a bit\ndifferently. You can't use to prefetch, since the prefetch would block the\ncomponent from rendering. You also can not use for the prefetch, because that\nwouldn't start the prefetch until after suspenseful query had resolved. For this\nscenario, you can use the or the hooks available in the library.\n\nYou can now use in the component that actually needs the data. You want to wrap\nthis later component in its own boundary so the \"secondary\" query we are\nprefetching does not block rendering of the \"primary\" data.\n\n```\n\n```\n\nAnother way is to prefetch inside of the query function. This makes sense if you\nknow that every time an article is fetched it's very likely comments will also\nbe needed. For this, we'll use :\n\n```\n\n```\n\nPrefetching in an effect also works, but note that if you are using in the same\ncomponent, this effect wont run until the query finishes which might not be what\nyou want.\n\n```\n\n```\n\nTo recap, if you want to prefetch a query during the component lifecycle, there\nare a few different ways to do it, pick the one that suits your situation best:\n\n  * Prefetch before a suspense boundary using or hooks\n  * Prefetch inside the query function\n\nLet's look at a slightly more advanced case next.\n\n### [Dependent Queries & Code\nSplitting](https://tanstack.com/query/v5/docs/react/guides/<#dependent-queries--\ncode-splitting>)\n\nSometimes we want to prefetch conditionally, based on the result of another\nfetch. Consider this example borrowed from the [Performance & Request Waterfalls\nguide](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/request-\nwaterfalls>):\n\n```\n\n// This lazy loads the GraphFeedItem component, meaning\n\n// it wont start loading until something renders it\n\n```\n\n```\n\n// This lazy loads the GraphFeedItem component, meaning\n\n// it wont start loading until something renders it\n\n```\n\nAs noted over in that guide, this example leads to the following double request\nwaterfall:\n\n```\n\n2.  |> JS for <GraphFeedItem>\n3.   |> getGraphDataById()\n\n```\n\n```\n\n2.  |> JS for <GraphFeedItem>\n3.   |> getGraphDataById()\n\n```\n\nIf we can not restructure our API so also returns the data when necessary, there\nis no way to get rid of the waterfall, but by leveraging conditional\nprefetching, we can at least load the code and data in parallel. Just like\ndescribed above, there are multiple ways to do this, but for this example, we'll\ndo it in the query function:\n\n```\n\n```\n\nThis would load the code and data in parallel:\n\n```\n\n2.  |> JS for <GraphFeedItem>\n\n```\n\n```\n\n2.  |> JS for <GraphFeedItem>\n\n```\n\nThere is a tradeoff however, in that the code for is now included in the parent\nbundle instead of in so you'll need to determine what's the best performance\ntradeoff on a case by case basis. If are likely, it's probably worth to include\nthe code in the parent. If they are exceedingly rare, it's probably not.\n\nBecause data fetching in the component tree itself can easily lead to request\nwaterfalls and the different fixes for that can be cumbersome as they accumulate\nthroughout the application, an attractive way to do prefetching is integrating\nit at the router level.\n\nIn this approach, you explicitly declare for each what data is going to be\nneeded for that component tree, ahead of time. Because Server Rendering has\ntraditionally needed all data to be loaded before rendering starts, this has\nbeen the dominating approach for SSR'd apps for a long time. This is still a\ncommon approach and you can read more about it in the [Server Rendering &\nHydration\nguide](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/ssr>).\n\nFor now, let's focus on the client side case and look at an example of how you\ncan make this work with . These examples leave out a lot of setup and\nboilerplate to stay concise, you can check out a over in the .\n\nWhen integrating at the router level, you can choose to either rendering of that\nroute until all data is present, or you can start a prefetch but not await the\nresult. That way, you can start rendering the route as soon as possible. You can\nalso mix these two approaches and await some critical data, but start rendering\nbefore all the secondary data has finished loading. In this example, we'll\nconfigure an route to not render until the article data has finished loading, as\nwell as start prefetching comments as soon as possible, but not block rendering\nthe route if comments haven't finished loading yet.\n\n```\n\n  routeContext: { articleQueryOptions, commentsQueryOptions },\n\n  // Fetch comments asap, but don't block\n\n  // Don't render the route at all until article has been fetched\n\n```\n\n```\n\n  // Fetch comments asap, but don't block\n\n  // Don't render the route at all until article has been fetched\n\n```\n\nIntegration with other routers is also possible, see the for another\ndemonstration.\n\nIf you already have the data for your query synchronously available, you don't\nneed to prefetch it. You can just use the to directly add or update a query's\ncached result by key.\n\nFor a deep-dive on how to get data into your Query Cache before you fetch, have\na look at [#17: Seeding the Query\nCache](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/community/tkdodos-\nblog#17-seeding-the-query-cache>) from the Community Resources.\n\nIntegrating with Server Side routers and frameworks is very similar to what we\njust saw, with the addition that the data has to passed from the server to the\nclient to be hydrated into the cache there. To learn how, continue on to the\n[Server Rendering & Hydration\nguide](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/ssr>).\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/guides/<https:/query.gg?s=tanstack>)\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/query/v5/docs/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3LFTSIKZ3JCA7ILK3LCVYIK27KC67DT2QYF67IT27YCA7IK2JWCA7IKK3YHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/v5/docs/react/guides/infinite-queries\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/guides/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nRendering lists that can additively \"load more\" data onto an existing set of\ndata or \"infinite scroll\" is also a very common UI pattern. TanStack Query\nsupports a useful version of called for querying these types of lists.\n\nWhen using , you'll notice a few things are different:\n\n  * is now an object containing infinite query data:\n  * array containing the fetched pages\n  * array containing the page params used to fetch the pages\n  * The and functions are now available ( is required)\n  * The option is now available (and required) to specify the initial page param\n  * The and options are available for both determining if there is more data to load and the information to fetch it. This information is supplied as an additional parameter in the query function\n  * A boolean is now available and is if returns a value other than or \n  * A boolean is now available and is if returns a value other than or \n  * The and booleans are now available to distinguish between a background refresh state and a loading more state\n\n> Note: Options or need to conform to the same structure of an object with and\n> properties.\nLet's assume we have an API that returns pages of 3 at a time based on a index\nalong with a cursor that can be used to fetch the next group of projects:\n\n```\n\n// { data: [...], nextCursor: 3}\n\n// { data: [...], nextCursor: 6}\n\n// { data: [...], nextCursor: 9}\n\n// { data: [...] }\n\n```\n\n```\n\n// { data: [...], nextCursor: 3}\n\n// { data: [...], nextCursor: 6}\n\n// { data: [...], nextCursor: 9}\n\n// { data: [...] }\n\n```\n\nWith this information, we can create a \"Load More\" UI by:\n\n  * Waiting for to request the first group of data by default\n  * Returning the information for the next query in \n\n```\n\n```\n\n```\n\n```\n\nIt's essential to understand that calling while an ongoing fetch is in progress\nruns the risk of overwriting data refreshes happening in the background. This\nsituation becomes particularly critical when rendering a list and triggering\nsimultaneously.\n\nRemember, there can only be a single ongoing fetch for an InfiniteQuery. A\nsingle cache entry is shared for all pages, attempting to fetch twice\nsimultaneously might lead to data overwrites.\n\nIf you intend to enable simultaneous fetching, you can utilize the option\n(default: true) within .\n\nTo ensure a seamless querying process without conflicts, it's highly recommended\nto verify that the query is not in an state, especially if the user won't\ndirectly control that call.\n\n## [What happens when an infinite query needs to be\nrefetched?](https://tanstack.com/query/v5/docs/react/guides/<#what-happens-when-\nan-infinite-query-needs-to-be-refetched>)\n\nWhen an infinite query becomes and needs to be refetched, each group is fetched\n, starting from the first one. This ensures that even if the underlying data is\nmutated, we're not using stale cursors and potentially getting duplicates or\nskipping records. If an infinite query's results are ever removed from the\nqueryCache, the pagination restarts at the initial state with only the initial\ngroup being requested.\n\n## [What if I want to implement a bi-directional infinite\nlist?](https://tanstack.com/query/v5/docs/react/guides/<#what-if-i-want-to-\nimplement-a-bi-directional-infinite-list>)\n\nBi-directional lists can be implemented by using the , , and properties and\nfunctions.\n\n```\n\n```\n\n## [What if I want to show the pages in reversed\norder?](https://tanstack.com/query/v5/docs/react/guides/<#what-if-i-want-to-\nshow-the-pages-in-reversed-order>)\n\nSometimes you may want to show the pages in reversed order. If this is case, you\ncan use the option:\n\n```\n\n```\n\n## [What if I want to manually update the infinite\nquery?](https://tanstack.com/query/v5/docs/react/guides/<#what-if-i-want-to-\nmanually-update-the-infinite-query>) ### [Manually removing a single value from\nan individual page:](https://tanstack.com/query/v5/docs/react/guides/<#manually-\nremoving-a-single-value-from-an-individual-page>) ### [Keep only the first\npage:](https://tanstack.com/query/v5/docs/react/guides/<#keep-only-the-first-\npage>)\n\nMake sure to always keep the same data structure of pages and pageParams!\n\n## [What if I want to limit the number of\npages?](https://tanstack.com/query/v5/docs/react/guides/<#what-if-i-want-to-\nlimit-the-number-of-pages>)\n\nIn some use cases you may want to limit the number of pages stored in the query\ndata to improve the performance and UX:\n\n  * when the user can load a large number of pages (memory usage)\n  * when you have to refetch an infinite query that contains dozens of pages (network usage: all the pages are sequentially fetched)\n\nThe solution is to use a \"Limited Infinite Query\". This is made possible by\nusing the option in conjunction with and to allow fetching pages when needed in\nboth directions.\n\nIn the following example only 3 pages are kept in the query data pages array. If\na refetch is needed, only 3 pages will be refetched sequentially.\n\n```\n\n```\n\n## [What if my API doesn't return a\ncursor?](https://tanstack.com/query/v5/docs/react/guides/<#what-if-my-api-\ndoesnt-return-a-cursor>)\n\nIf your API doesn't return a cursor, you can use the as a cursor. Because and\nalso get the of the current page, you can use it to calculate the next /\nprevious page param.\n\n```\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/guides/<https:/query.gg?s=tanstack>)\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/query/v5/docs/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2QKC67DT2QYF67IT27YCA7IK2JWCA7IP53WHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/v5/docs/react/plugins/createPersister\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/plugins/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/plugins/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/plugins/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/plugins/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/plugins/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/plugins/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThis utility comes as a separate package and is available under the import.\n\n> Note: This util is also included in the package, so you do not need to install\n> it separately if you are using that package.\n  * Create a new \n    * you can pass any to it that adheres to the or interface - the example below uses the async-storage from React Native.\n  * Pass that as an option to your Query. This can be done either by passing it to the of the or to any hook instance.\n    * If you pass this as , all queries will be persisted to the provided . You can additionally narrow this down by passing . In contrast to the plugin, this will not persist the whole query client as a single item, but each query separately. As a key, the query hash is used.\n    * If you provide this to a single hook, only this Query will be persisted.\n\nThis way, you do not need to store whole , but choose what is worth to be\npersisted in your application. Each query is lazily restored (when the Query is\nfirst used) and persisted (after each run of the ), so it does not need to be\nthrottled. is also respected after restoring the Query, so if data is considered\n, it will be refetched immediately after restoring. If data is , the will not\nrun.\n\nGarbage collecting a Query from memory affect the persisted data. That means\nQueries can be kept in memory for a shorter period of time to be more . If they\nare used the next time, they will just be restored from the persistent storage\nagain.\n\n```\n\n```\n\n```\n\n```\n\nThe plugin technically wraps the , so it doesn't restore if the doesn't run. In\nthat way, it acts as a caching layer between the Query and the network. Thus,\nthe defaults to when a persister is used, so that restoring from the persistent\nstorage can also happen even if there is no network connection.\n\n```\n\n /** The storage client used for setting and retrieving items from cache.\n\n  * For SSR pass in `undefined`.\n\n  * How to serialize the data to storage.\n\n  * How to deserialize the data from storage.\n\n  * A unique string that can be used to forcefully invalidate existing caches,\n  * if they do not share the same buster string\n\n  * The max-allowed age of the cache in milliseconds.\n  * If a persisted cache is found that is older than this\n  * time, it will be discarded\n\n  * Prefix to be used for storage key.\n  * Storage key is a combination of prefix and query hash in a form of `prefix-queryHash`.\n\n  * Filters to narrow down which Queries should be persisted.\n\n```\n\n```\n\n /** The storage client used for setting and retrieving items from cache.\n\n  * For SSR pass in `undefined`.\n\n  * How to serialize the data to storage.\n\n  * How to deserialize the data from storage.\n\n  * A unique string that can be used to forcefully invalidate existing caches,\n  * if they do not share the same buster string\n\n  * The max-allowed age of the cache in milliseconds.\n  * If a persisted cache is found that is older than this\n  * time, it will be discarded\n\n  * Prefix to be used for storage key.\n  * Storage key is a combination of prefix and query hash in a form of `prefix-queryHash`.\n\n  * Filters to narrow down which Queries should be persisted.\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/plugins/<https:/query.gg?s=tanstack>)\n[ Build chat, video, moderation & feeds, faster. Start coding FREE. No CC\nrequired\n](https://tanstack.com/query/v5/docs/react/plugins/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NFT7DCZ3JCA7ILK3LC67DK5QKC67DT2QYF67IT27YCA7IK2JWCA7IP5QEHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/plugins/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/v5/docs/react/typescript\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v5/docs/react/</query/v5/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v5/docs/react/</query/v5/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/v5/docs/react/</query/v5/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nReact Query is now written in to make sure the library and your projects are\ntype-safe!\n\nThings to keep in mind:\n\n  * Types currently require using TypeScript or greater\n  * Changes to types in this repository are considered and are usually released as semver changes (otherwise every type enhancement would be a major version!).\n  * It is **highly recommended that you lock your react-query package version to a specific patch release and upgrade with the expectation that types may be fixed or upgraded between any release**\n  * The non-type-related public API of React Query still follows semver very strictly.\n\nTypes in React Query generally flow through very well so that you don't have to\nprovide type annotations for yourself\n\n```\n\n //  ^? const data: number | undefined\n\n```\n\n```\n\n //  ^? const data: number | undefined\n\n```\n\n```\n\n //   ^? const data: string | undefined\n\n```\n\n```\n\n //   ^? const data: string | undefined\n\n```\n\nThis works best if your has a well-defined returned type. Keep in mind that most\ndata fetching libraries return per default, so make sure to extract it to a\nproperly typed function:\n\n```\n\n//   ^? const data: Group[] | undefined\n\n```\n\n```\n\n//   ^? const data: Group[] | undefined\n\n```\n\nReact Query uses a for the query result, discriminated by the field and the\nderived status boolean flags. This will allow you to check for e.g. status to\nmake defined:\n\n```\n\n // ^? const data: number\n\n```\n\n```\n\n // ^? const data: number\n\n```\n\nThe type for error defaults to , because that is what most users expect.\n\n```\n\n//   ^? const error: Error\n\n```\n\n```\n\n//   ^? const error: Error\n\n```\n\nIf you want to throw a custom error, or something that isn't an at all, you can\nspecify the type of the error field:\n\n```\n\n//   ^? const error: string | null\n\n```\n\n```\n\n//   ^? const error: string | null\n\n```\n\nHowever, this has the drawback that type inference for all other generics of\nwill not work anymore. It is generally not considered a good practice to throw\nsomething that isn't an , so if you have a subclass like you can use to make the\nerror field more specific:\n\n```\n\n//   ^? const error: Error | null\n\n // ^? const error: AxiosError\n\n```\n\n```\n\n//   ^? const error: Error | null\n\n // ^? const error: AxiosError\n\n```\n\nTanStack Query v5 allows for a way to set a global Error type for everything,\nwithout having to specify generics on call-sides, by amending the interface.\nThis will make sure inference still works, but the error field will be of the\nspecified type:\n\n```\n\n//   ^? const error: AxiosError | null\n\n```\n\n```\n\n//   ^? const error: AxiosError | null\n\n```\n\nSimilarly to registering a you can also register a global type. This ensures the\noptional field on and stays consistent and is type-safe. Note that the\nregistered type must extend so that remains an object.\n\n```\n\n // Your meta type definition.\n\n```\n\n```\n\n // Your meta type definition.\n\n```\n\n## [Typing query and mutation\nkeys](https://tanstack.com/query/v5/docs/react/<#typing-query-and-mutation-\nkeys>) ### [Registering the query and mutation key\ntypes](https://tanstack.com/query/v5/docs/react/<#registering-the-query-and-\nmutation-key-types>)\n\nAlso similarly to registering a , you can also register a global and type. This\nallows you to provide more structure to your keys, that matches your\napplication's hierarchy, and have them be typed across all of the library's\nsurface area. Note that the registered type must extend the type, so that your\nkeys remain an array.\n\nIf you inline query options into , you'll get automatic type inference. However,\nyou might want to extract the query options into a separate function to share\nthem between and e.g. . In that case, you'd lose type inference. To get it back,\nyou can use the helper:\n\n```\n\n```\n\nFurther, the returned from knows about the associated with it, and we can\nleverage that type information to make functions like aware of those types as\nwell:\n\n```\n\n//   ^? const data: Group[] | undefined\n\n```\n\n```\n\n//   ^? const data: Group[] | undefined\n\n```\n\nWithout , the type of would be , unless we'd pass a generic to it:\n\nFor tips and tricks around type inference, have a look at from the Community\nResources. To find out how to get the best possible type-safety, you can read .\n\n## [Typesafe disabling of queries using\n](https://tanstack.com/query/v5/docs/react/<#typesafe-disabling-of-queries-\nusing-skiptoken>)\n\nIf you are using TypeScript, you can use the to disable a query. This is useful\nwhen you want to disable a query based on a condition, but you still want to\nkeep the query to be type safe. Read more about it in the guide.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/<https:/query.gg?s=tanstack>)\n[ Loved by developers. Trusted by enterprises. Start your free 60 day trial.\n](https://tanstack.com/query/v5/docs/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCW7ICZ3JCA7ILK3LCTSDL2JKC67DT2QYF67IT27YCA7IK2JWCA7IP5QWHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v5/docs/react/<https:/query.gg?s=tanstack>)\n\n---\n\n# _by Dominik Dorfmeister on Jul 14, 2022._\nURL: https://tanstack.com/blog/announcing-tanstack-query-v4\n\n_by Dominik Dorfmeister on Jul 14, 2022._\n\nWe're excited to announce the next version of , previously known as üéâ. The\nrebranding and restructuring to a monorepo now finally allows us to bring the\njoy of to other frameworks, like , or .\n\nTanStack Query is built upon an agnostic core with framework specific adapters\non top of it. This allows us to share the core logic that make TanStack Query\nawesome like the QueryClient or Query Subscriptions between frameworks, while\nalso having framework specific code like hooks (useQuery and useMutation) inside\nadapters.\n\n```\n\n```\n\n```\n\n```\n\nv4 has evolved TanStack Query from a data-fetching library to a true async state\nmanager. All assumptions that were previously taken about having to have an\nactive network connection are now gone, so TanStack Query works with any\nPromise, no matter how you produce it. To achieve this, we've introduced a brand\nnew that helps TanStack Query to decide when queries should respect being online\nor not.\n\nSince v3, persisters existed as an experimental feature. They allow you to sync\nthe Query Cache to an external location (e.g. localStorage) for later use. We\nhave revamped and improved the APIs after getting lots of feedback, and we are\nnow providing two main peristers out of the box:\n\nThose persisters works pretty well for most use-cases, but nothing stops you\nfrom writing your own persister - as long it adheres to the required interface.\n\nReact 18 was released earlier this year, and v4 now has first class support for\nit and the new concurrent features it brings. To achieve that, internal\nsubscriptions were re-written to leverage the new hook.\n\nTracked Queries are a performance optimization that were added in v3.6.0 as an\nopt-in feature. This optimization is now the default behaviour in v4, which\nshould give you a nice boost in render performance.\n\nOver time, some of our APIs have become quite complex, to the extent that they\nwere contradicting each other. Some examples include:\n\n  * QueryKeys sometimes being converted to an Array when exposed, sometimes not.\n  * Query Filters being unintuitive and mutually exclusive.\n  * Default values for parameters defaulting to opposite values on different methods\n\nWe've cleaned up a lot of these inconsistencies to make the developer experience\neven better. v4 also comes with a codemod to help you with the migration path.\n\nCleaning up the docs, for one. As you might have noticed, they are still pretty\nreact specific and reference from time to time. Please bear with us as we aim to\nrestructure the docs, and PRs are always welcome.\n\nAlso, more adapters. Currently, only the React adapter exists, but we are eager\nto add more frameworks soon.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/v4/docs/guides/network-mode\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v4/docs/guides/</query/v4/docs/framework/react/guides/does-this-replace-client-state>)\n  * [Migrating to React Query 3](https://tanstack.com/query/v4/docs/guides/</query/v4/docs/framework/react/guides/migrating-to-react-query-3>)\n  * [Migrating to React Query 4](https://tanstack.com/query/v4/docs/guides/</query/v4/docs/framework/react/guides/migrating-to-react-query-4>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v4/docs/guides/</query/v4/docs/framework/react/examples/auto-refetching>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/v4/docs/guides/</query/v4/docs/framework/react/guides/does-this-replace-client-state>)\n  * [Migrating to React Query 3](https://tanstack.com/query/v4/docs/guides/</query/v4/docs/framework/react/guides/migrating-to-react-query-3>)\n  * [Migrating to React Query 4](https://tanstack.com/query/v4/docs/guides/</query/v4/docs/framework/react/guides/migrating-to-react-query-4>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/v4/docs/guides/</query/v4/docs/framework/react/examples/auto-refetching>)\n\nThe page you are looking for does not exist.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v4/docs/guides/<https:/query.gg?s=tanstack>)\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/query/v4/docs/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDV23KC67DT2QYF67IT27YCA7IK2JWCA7IP27JHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/v4/docs/guides/<https:/query.gg?s=tanstack>)\nYou are currently reading docs. Redirect to version?\n\n---\n\n# At TanStack, our philosophy is simple: we build for the open web, open\nURL: https://tanstack.com/ethos\n\nAt TanStack, our philosophy is simple: we build for the open web, open\nstandards, and the freedom to compose, deploy, and innovate however you see fit.\n\n## Independently Owned, Unbiased by Design\n\nTanStack LLC is by its founder‚Äîno external investors, no controlling interests,\nand no hidden agendas. Our funding comes from media and marketing partnerships\nwith companies that share our core values: **the open web, open standards, and\nthe freedom to compose and deploy anything you want, anywhere you please.**\n\nTanStack is a lean, focused team: a full-time founder, several prominent and\nwell-sponsored maintainers and a thriving community of users and contributors\nwho share our core values.\n\nUnlike venture-backed projects chasing growth at all costs, **we don't need to\n\"scale\", \"grow\", or \"expand\" into a VC-funded, acquisition-seeking, or freemium-\ngrifting product.** We're not obsessed with hitting the next 10x multiplier to\nsatisfy some parent company's lead-generating IPO ambitions.\n\n  * No pressure to chase profits at the cost of developer experience.\n  * No corporate influence dictating our technical direction.\n  * A singular focus on **building tools that make the web better for users and developers**\n\nWe believe in **framework-agnostic, platform-agnostic, and future-proof\ntooling** that puts developers first:\n\n  * TanStack libraries are built on framework and platform-agnostic primitives. When our libraries build on other tools, like TanStack Start builds on Nitro, we ensure that these tools uphold these same values of openness and flexibility.\n  * either already support or will support all major (and some minor!) frameworks and deployment environments‚Äîno exceptions.\n  * **If there's any technology we're aligned with, it's TypeScript** ‚Äîor more broadly, \"typed JavaScript\", whatever that evolves into as time goes on.\n\nEvery sponsor we work with not only understands but actively upholds our values:\n\n  * No sponsor can dictate or influence TanStack's core technology in a way that biases it toward their platform.\n  * Our libraries are built to serve , not corporate interests.\n  * If a company supports us, it's because they believe in what we're building‚Äînot because they expect preferential treatment.\n\nAt the end of the day, **TanStack isn't just a set of libraries‚Äîit's a\ncommitment to building the web , without compromise.** All we need is enough to\nkeep improving tools that we believe actually make the web a better place.\n\nFounder, TanStack LLC\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# TanStack Table + Ag-Grid Partnership\nURL: https://tanstack.com/blog/ag-grid-partnership\n\n# TanStack Table + Ag-Grid Partnership\n\n _by Tanner Linsley and Niall Crosby on Jun 17, 2022._\n\nWe're excited to announce that is now the official open-source partner! Together\nwe will strive to achieve the following goals:\n\n  * To jointly educate the JavaScript and TypeScript ecosystem about the differences between the two libraries and when to choose which.\n  * To cover as many use-cases as possible across the ecosystem by encouraging the usage of the other when goals and limitations of either are not met.\n  * To improve the quality of both libraries through shared experience, knowledge and even code when appropriate.\n\nTanStack Table and share the same general problem space, but are implemented via\ndrastically different architectures and paradigms, each offering unique trade-\noffs, opinions and optimizations depending on use-case. These differences and\ntrade-offs are complimentary to one another and together form what we believe\nare the best two datagrid/table options available in the JavaScript and\nTypeScript ecosystem.\n\nTo learn about the differences and trade-offs between the two libraries, start\nby reading the and the !\n\nWe are excited about the future of datagrids and tables and we at TanStack are\nhonored that AG Grid is invested in the success of it's open source ecosystem!\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/introduction\n\nTanStack Table is a library for building powerful tables & datagrids for TS/JS,\nReact, Vue, Solid, Qwik, and Svelte.\n\nis a term for libraries and utilities that provide the logic, state, processing\nand API for UI elements and interactions, but **do not provide markup, styles,\nor pre-built implementations**. Scratching your head yet? üòâ Headless UI has a\nfew main goals:\n\nThe hardest parts of building complex UIs usually revolve around state, events,\nside-effects, data computation/management. By removing these concerns from the\nmarkup, styles and implementation details, our logic and components can be more\nmodular and reusable.\n\nBuilding UI is a very branded and custom experience, even if that means choosing\na design system or adhering to a design spec. To support this custom experience,\ncomponent-based UI libraries need to support a massive (and seemingly endless)\nAPI surface around markup and style customization. Headless UI libraries\ndecouple your logic from your UI\n\nWhen you use a headless UI library, the complex task of **data-processing,\nstate-management, and business logic** are handled for you, leaving you to worry\nabout higher-cardinality decisions that differ across implementations and use\ncases.\n\n> Want to dive deeper? [Read more about Headless\n> UI](https://tanstack.com/table/v8/docs/<https:/www.merrickchristensen.com/articles/headless-\n> user-interface-components/>).\n## [Component-based libraries vs Headless\nlibraries](https://tanstack.com/table/v8/docs/<#component-based-libraries-vs-\nheadless-libraries>)\n\nIn the ecosystem of table/datagrid libraries, there are two main categories:\n\n### [Which kind of table library should I\nuse?](https://tanstack.com/table/v8/docs/<#which-kind-of-table-library-should-i-\nuse>)\n\nEach approach has subtle tradeoffs. Understanding these subtleties will help you\nmake the right decision for your application and team.\n\nComponent-based table libraries will typically supply you with a feature-rich\ndrop-in solution and ready-to-use components/markup complete with\nstyles/theming. is a great example of this type of table library.\n\n  * Custom styles are typically theme-based\n  * Highly coupled to framework adapters and platforms\n\n**If you want a ready-to-use table and design/bundle-size are not hard\nrequirements** , then you should consider using a component-based table library.\n\nThere are a lot of component-based table libraries out there, but we believe is\nthe gold standard and is by far our favorite grid-sibling (don't tell the others\nü§´).\n\nHeadless table libraries will typically supply you with functions, state,\nutilities and event listeners to build your own table markup or attach to\nexisting table markups.\n\n  * Full control over markup and styles\n  * Supports all styling patterns (CSS, CSS-in-JS, UI libraries, etc)\n  * Portable. Run anywhere JS runs!\n\n  * No markup, styles or themes provided\n\n**If you want a lighter-weight table or full control over the design** , then\nyou should consider using a headless table library.\n\nThere are very few headless table libraries out there and obviously, is our\nfavorite!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/v8/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC27KC67DT2QYF67IT27YCA7IK2JWCA7IP27NHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# UI for building powerful tables & datagrids\nURL: https://tanstack.com/table/v8\n\n##  UI for building powerful tables & datagrids\n\nSupercharge your tables or build a datagrid from scratch for TS/JS, React, Vue,\nSolid, Svelte & Lit while retaining 100% control over markup and styles.\n\nWhat good is a powerful table if that super hip designer you just hired can't\nwork their UI magic on it? TanStack Table is headless by design, which means\n100% control down to the very smallest HTML tag, component, class and style.\nPixel Perfection? Go for it!\n\nDon't be fooled by the small bundle size. TanStack Table is a workhorse. It's\nbuilt to materialize, filter, sort, group, aggregate, paginate and display\nmassive data sets using a very small API surface. Wire up your new or existing\ntables and watch your users become instantly more productive.\n\nTanStack table ships with excellent defaults to get you off the ground as fast\nas possible, but nothing is stopping you from customizing and overriding\nliterally everything to your liking. Feeling tenacious enough to build your own\nSheets/Excel/AirTable clone? Be our guest üòâ\n\n### Framework Agnostic & Feature Rich\n\nTanStack Table's API and engine are highly modular and framework-independent\nwhile still prioritizing ergonomics. Behold, the obligatory feature-list:\n\n[TanStack Table and AG Grid are respectfully the and together are working hard\nto ensure the highest quality table/datagrid experience for the entire JS/TS\necosystem. Whether it's a lightweight table or a complex datagrid, we've we've\ngot you covered.](https://tanstack.com/table/<https:/ag-grid.com/react-data-\ngrid/?utm_source=reacttable&utm_campaign=githubreacttable>)\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC27KC67DT2QYF67IT27YCA7IK2JWCA7IP53EHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\n### Take it for a spin!\n\nWith some basic styles, some table markup and few columns, you're already well\non your way to creating a drop-dead powerful table.\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank\nTracker](https://tanstack.com/table/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/overview\n\nTanStack Table's core is , which means its API is the same regardless of the\nframework you're using. Adapters are provided to make working with the table\ncore easier depending on your framework. See the Adapters menu for available\nadapters.\n\nWhile TanStack Table is written in , using TypeScript in your application is\noptional (but recommended as it comes with outstanding benefits to both you and\nyour codebase)\n\nIf you use TypeScript, you will get top-notch type safety and editor\nautocomplete for all table APIs and state.\n\nAs it was mentioned extensively in the section, TanStack Table is . This means\nthat it doesn't render any DOM elements, and instead relies on you, the UI/UX\ndeveloper to provide the table's markup and styles. This is a great way to build\na table that can be used in any UI framework, including React, Vue, Solid,\nSvelte, Qwik, Angular, and even JS-to-native platforms like React Native!\n\nSince TanStack Table is headless and runs on a vanilla JavaScript core, it is\nagnostic in a couple of ways:\n\n  1. TanStack Table is , which means you can use it with any JavaScript framework (or library) that you want. TanStack Table provides ready-to-use adapters for React, Vue, Solid, Svelte, and Qwik out of the box, but you can create your own adapter if you need to.\n  2. TanStack Table is **CSS / Component Library Agnostic** , which means that you can use TanStack Table with whatever CSS strategy or component library you want. TanStack Table itself does not render any table markup or styles. You bring your own! Want to use Tailwind or ShadCN? No problem! Want to use Material UI or Bootstrap? No problem! Have your own custom design system? TanStack Table was made for you!\n\nThe table core uses the following abstractions, commonly exposed by adapters:\n\n  * - The core data array you provide the table\n  * : Objects used to configure a column and its data model, display templates, and more\n  * : The core table object containing both state and API\n  * : How the array is transformed into useful rows depending on the features you are using\n  * : Each row mirrors its respective row data and provides row-specific APIs\n  * : Each cell mirrors its respective row-column intersection and provides cell-specific APIs\n  * : Header groups are computed slices of nested header levels, each containing a group of headers\n  * : Each header is either directly associated with or derived from its column def and provides header-specific APIs\n  * : Each column mirrors its respective column def and also provides column-specific APIs\n\nTanStack Table will help you build just about any type of table you can imagine.\nIt has built-in state and APIs for the following features:\n\n  * - List unique lists of column values or min/max values for a column\n  * - Filter rows based on search values for a column\n  * - Group columns together, run aggregations, and more\n  * - Dynamically change the order of columns\n  * - Pin (Freeze) columns to the left or right of the table\n  * - Dynamically change the size of columns (column resizing handles)\n  * - List unique lists of column values or min/max values for the entire table\n  * - Filter rows based on search values for the entire table\n  * - Expand/collapse rows (sub-rows)\n  * - Pin (Freeze) rows to the top or bottom of the table\n  * - Select/deselect rows (checkboxes)\n  * - Sort rows by column values\n\nThese are just some of the capabilities that you can build with TanStack Table.\nThere are many more features that are possible with TanStack Table that you can\nadd along-side the built-in features.\n\nis an example of a feature that is not built-in to TanStack Table, but can be\nachieved by using another library (like ) and adding it along-side your other\ntable rendering logic.\n\nTanStack Table also supports (plugins) that you can use to modify the table\ninstance to add your own custom logic to the table in a more integrated way.\n\nAnd of course, you can just write your own state and hooks to add whatever other\nfeatures you want for your table. The features from the TanStack Table core are\njust a solid foundation to build on, with a large focus on performance and DX.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/table/v8/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVK3KC67DT2QYF67IT27YCA7IK2JWCA7IP2QMHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/installation\n\nBefore we dig in to the API, let's get you set up!\n\nInstall your table adapter as a dependency using your favorite npm package\nmanager.\n\n_Only install ONE of the following packages:_\n\nThe package works with React 16.8, React 17, React 18, and React 19.\n\n> NOTE: Even though the react adapter works with React 19, it may not work with\n> the new React Compiler that's coming out along-side React 19. This may be\n> fixed in future TanStack Table updates.\nThe package works with Vue 3.\n\nThe package works with Solid-JS 1\n\nThe package works with Svelte 3 and Svelte 4.\n\n> NOTE: There is not a built-in Svelte 5 adapter yet, but you can still use\n> TanStack Table with Svelte 5 by installing the package and using a custom\n> adapter from the community. See this for inspiration.\nThe package works with Qwik 1.\n\n> NOTE: There will be a \"breaking change\" release in the near future to support\n> Qwik 2. This will be released as a minor version bump, but will be documented.\n> Qwik 2 itself will have no breaking changes, but its name on the npm registry\n> will change, and require different peer dependencies.\n> NOTE: The current qwik adapter only works with CSR. More improvements may not\n> be available until a future table version.\nThe package works with Angular 17. The Angular adapter uses a new Angular Signal\nimplementation.\n\nThe package works with Lit 3.\n\nDon't see your favorite framework (or favorite version of your framework)\nlisted? You can always just use the package and build your own adapter in your\nown codebase. Usually, only a thin wrapper is needed to manage state and\nrendering for your specific framework. Browse the of all of the other adapters\nto see how they work.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Your fast track into the future of software development. Join the Arm\nDeveloper Program today.\n](https://tanstack.com/table/v8/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6SICZ3JCA7ILK3LC6BICK3KC67DT2QYF67IT27YCA7IK2JWCA7IP2Q7HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/migrating\n\nTanStack Table V8 was a major rewrite of React Table v7 from the ground up in\nTypeScript. The overall structure/organization of your markup and CSS will\nlargely remain the same, but many of the APIs have been renamed or replaced.\n\n  * Full rewrite to TypeScript with types included in the base package\n  * Removal of plugin system to favor more inversion of control\n  * Vastly larger and improved API (and new features like pinning)\n  * Better support for server-side operations\n  * Complete (but optional) data pipeline control\n  * Agnostic core with framework adapters for React, Solid, Svelte, Vue, and potentially more in the future\n\nThe new version of TanStack Table is published under the scope. Install the new\npackage using your favorite package manager:\n\n```\n\n```\n\nTypes are now included in the base package, so you can remove the package.\n\n> If you want, you can keep the old packages installed so that you can gradually\n> migrate your code. You should be able to use both packages side-by-side for\n> separate tables without any issues.\n  * The old hook and plugin systems have been removed, but they have replaced with tree-shakable row model imports for each feature.\n\n```\n\n { useTable, usePagination, useSortBy }\n\n//order of hooks used to matter\n\n```\n\n```\n\n //order of hooks used to matter\n\n```\n\n  * All table options were renamed to table options. (e.g. is now , is now , etc.)\n\n  * accessor was renamed to either or (depending on whether you are using a string or function)\n  * width, minWidth, maxWidth were renamed to size, minSize, maxSize\n  * Optionally, you can use the new function around each column definition for better TypeScript hints. (You can still just use an array of column definitions if you prefer.)\n    * The first parameter is the accessor function or accessor string.\n    * The second parameter is an object of column options.\n\n```\n\n// Best TypeScript experience, especially when using `cell.getValue()` later on\n\n// OR (if you prefer)\n\n```\n\n```\n\n// Best TypeScript experience, especially when using `cell.getValue()` later on\n\n// OR (if you prefer)\n\n```\n\n> Note: If defining columns inside a component, you should still try to give the\n> column definitions a stable identity. This will help with performance and\n> prevent unnecessary re-renders. Store the column definitions in either a or\n> hook.\n  *     * was renamed to (The cell render function has also changed. See below)\n    * All column options were renamed to column options. (e.g. is now , is now , etc.)\n  * Changes to custom cell renderers\n    * was renamed (Throughout the upgrade, instead of providing the value directly, a function is exposed for evaluating the value. This change aims to improve performance by evaluating the value only when is called and then caching it.)\n    * cell: { isGrouped, isPlaceholder, isAggregated } is now cell: { getIsGrouped, getIsPlaceholder, getIsAggregated }\n    * : The base level props are now RT-specific. Values that you added to the object when defining it are now one level deeper in .\n    * : Props passed into the hook now appear under .\n\n  * , , , , etc. have all been .\n    * TanStack Table does not provide any default or accessibility attributes like anymore. These are still important for you to get right, but it had to be removed in order to support being framework-agnostic.\n    * You will need to define handlers manually, but there are new helpers to keep this simple.\n    * You will need to define the props manually\n    * You will need to define the prop manually if using features that require it (grouped headers, aggregation, etc.)\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n// in column definitions in this case\n\n```\n\n```\n\n// in column definitions in this case\n\n```\n\n  * custom (now called ) have a new function signature as it only returns a boolean for whether the row should be included or not.\n\n> This guide is a work in progress. Please consider contributing to it if you\n> have time!\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2QKC67DT2QYF67IT27YCA7IK2JWCA7IP2JIHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/faq\n\n## [How do I stop infinite rendering\nloops?](https://tanstack.com/table/v8/docs/<#how-do-i-stop-infinite-rendering-\nloops>)\n\nIf you are using React, there is a very common pitfall that can cause infinite\nrendering. If you fail to give your , , or a stable reference, React will enter\nan infinite loop of re-rendering upon any change to the table state.\n\nWhy does this happen? Is this a bug in TanStack Table? , it is not. _This is\nfundamentally how React works_ , and properly managing your columns, data, and\nstate will prevent this from happening.\n\nTanStack Table is designed to trigger a re-render whenever either the or that\nare passed into the table change, or whenever any of the table's state changes.\n\n> Failing to give or stable references can cause an infinite loop of re-renders.\n### [Pitfall 1: Creating new columns or data on every\nrender](https://tanstack.com/table/v8/docs/<#pitfall-1-creating-new-columns-or-\ndata-on-every-render>)\n\n```\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `columns` is\nredefined as a new array on every render!\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `data` is\nredefined as a new array on every render!\n\n //‚ùå Columns and data are defined in the same scope as `useReactTable` without a\nstable reference, will cause infinite loop!\n\n```\n\n```\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `columns` is\nredefined as a new array on every render!\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `data` is\nredefined as a new array on every render!\n\n //‚ùå Columns and data are defined in the same scope as `useReactTable` without a\nstable reference, will cause infinite loop!\n\n```\n\n### [Solution 1: Stable references with useMemo or\nuseState](https://tanstack.com/table/v8/docs/<#solution-1-stable-references-\nwith-usememo-or-usestate>)\n\nIn React, you can give a \"stable\" reference to variables by defining them\noutside/above the component, or by using or , or by using a 3rd party state\nmanagement library (like Redux or React Query üòâ)\n\n```\n\n//‚úÖ OK: Define columns outside of the component\n\n//‚úÖ OK: Define data outside of the component\n\n// Usually it's more practical to define columns and data inside the component,\nso use `useMemo` or `useState` to give them stable references\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `columns`\nis a stable reference\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `data` is\na stable reference\n\n // Columns and data are defined in a stable reference, will not cause infinite\nloop!\n\n```\n\n```\n\n//‚úÖ OK: Define columns outside of the component\n\n//‚úÖ OK: Define data outside of the component\n\n// Usually it's more practical to define columns and data inside the component,\nso use `useMemo` or `useState` to give them stable references\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `columns`\nis a stable reference\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `data` is\na stable reference\n\n // Columns and data are defined in a stable reference, will not cause infinite\nloop!\n\n```\n\n### [Pitfall 2: Mutating columns or data in\nplace](https://tanstack.com/table/v8/docs/<#pitfall-2-mutating-columns-or-data-\nin-place>)\n\nEven if you give your initial and stable references, you can still run into\ninfinite loops if you mutate them in place. This is a common pitfall that you\nmay not notice that you are doing at first. Something as simple as an inline can\ncause an infinite loop if you are not careful.\n\n```\n\n //‚úÖ GOOD (React Query provides stable references to data automatically)\n\n  //‚ùå BAD: This will cause an infinite loop of re-renders because `data` is\nmutated in place (destroys stable reference)\n\n```\n\n```\n\n //‚úÖ GOOD (React Query provides stable references to data automatically)\n\n  //‚ùå BAD: This will cause an infinite loop of re-renders because `data` is\nmutated in place (destroys stable reference)\n\n```\n\n### [Solution 2: Memoize your data\ntransformations](https://tanstack.com/table/v8/docs/<#solution-2-memoize-your-\ndata-transformations>)\n\nTo prevent infinite loops, you should always memoize your data transformations.\nThis can be done with or similar.\n\n```\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because\n`filteredData` is memoized\n\n```\n\n```\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because\n`filteredData` is memoized\n\n```\n\nWhen React Forget is released, these problems might be a thing of the past. Or\njust use Solid.js... ü§ì\n\n## [How do I stop my table state from automatically resetting when my data\nchanges?](https://tanstack.com/table/v8/docs/<#how-do-i-stop-my-table-state-\nfrom-automatically-resetting-when-my-data-changes>)\n\nMost plugins use state that normally reset when the data sources changes, but\nsometimes you need to suppress that from happening if you are filtering your\ndata externally, or immutably editing your data while looking at it, or simply\ndoing anything external with your data that you don't want to trigger a piece of\ntable state to reset automatically.\n\nFor those situations, each plugin provides a way to disable the state from\nautomatically resetting internally when data or other dependencies for a piece\nof state change. By setting any of them to , you can stop the automatic resets\nfrom being triggered.\n\nHere is a React-based example of stopping basically every piece of state from\nchanging as they normally do while we edit the source for a table:\n\n```\n\n // When data gets updated with this function, set a flag\n\n // to disable all of the auto resetting\n\n // After the table has updated, always remove the flag\n\n```\n\n```\n\n // When data gets updated with this function, set a flag\n\n // to disable all of the auto resetting\n\n // After the table has updated, always remove the flag\n\n```\n\nNow, when we update our data, the above table states will not automatically\nreset!\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/table/v8/docs/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKQKC67DT2QYF67IT27YCA7IK2JWCA7IPK7UHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/react-table\n\nThe adapter is a wrapper around the core table logic. Most of its job is related\nto managing state the \"react\" way, providing types and the rendering\nimplementation of cell/header/footer templates.\n\nTakes an object and returns a table.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/v8/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2JKC67DT2QYF67IT27YCA7IK2JWCA7IP23LHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/data\n\nTables start with your data. Your column definitions and rows will depend on the\nshape of your data. TanStack Table has some TypeScript features that will help\nyou create the rest of your table code with a great type-safe experience. If you\nset up your data and types correctly, TanStack Table will be able to infer the\nshape of your data and enforce that your column definitions are made correctly.\n\nTypeScript is NOT required to use the TanStack Table packages... TanStack Table\nis written and organized in such a way that makes the awesome TypeScript\nexperience that you get feel like it is one of the main selling points of the\nlibrary. If you are not using TypeScript, you will be missing out on a lot of\ngreat autocompletion and type-checking features that will both speed up your\ndevelopment time and reduce the number of bugs in your code.\n\nHaving a basic understanding of what TypeScript Generics are and how they work\nwill help you understand this guide better, but it should be easy enough to pick\nup as you go. The official may be helpful for those not yet familiar with\nTypeScript.\n\nis an array of objects that will be turned into the rows of your table. Each\nobject in the array represents a row of data (under normal circumstances). If\nyou are using TypeScript, we usually define a type for the shape of our data.\nThis type is used as a generic type for all of the other table, column, row, and\ncell instances. This Generic is usually referred to as throughout the rest of\nthe TanStack Table types and APIs.\n\nFor example, if we have a table that displays a list of users in an array like\nthis:\n\nThen we can define a User (TData) type like this:\n\nWe can then define our array with this type, and then TanStack Table will be\nable to intelligently infer lots of types for us later on in our columns, rows,\ncells, etc. This is because the type is literally defined as the generic type.\nWhatever you pass to the table option will become the type for the rest of the\ntable instance. Just make sure your column definitions use the same type as the\ntype when you define them later.\n\n```\n\n//note: data needs a \"stable\" reference in order to prevent infinite re-renders\n\n```\n\n```\n\n//note: data needs a \"stable\" reference in order to prevent infinite re-renders\n\n```\n\nIf your data is not a nice flat array of objects, that's okay! Once you get\naround to defining your columns, there are strategies for accessing deeply\nnested data in your accessors.\n\nIf your looks something like this:\n\n```\n\n```\n\nYou can define a type like this:\n\nAnd you will be able to access the data in your column definitions with either\ndot notation in an accessorKey or simply by using an accessorFn.\n\nThis is discussed in more detail in the .\n\n> NOTE: The \"keys\" in your json data can usually be anything, but any periods in\n> the keys will be interpreted as a deep key and will cause errors.\nIf you are using expanding features, it can be common to have nested sub-rows in\nyour data. This results in a recursive type that is a bit different.\n\nSo if your data looks like this:\n\nYou can define a type like this:\n\n```\n\n//does not have to be called \"subRows\", can be called anything\n\n```\n\n```\n\n //does not have to be called \"subRows\", can be called anything\n\n```\n\nWhere is an optional array of objects. This is discussed in more detail in the .\n\n### [Give Data a \"Stable\"\nReference](https://tanstack.com/table/v8/docs/guide/<#give-data-a-stable-\nreference>)\n\nThe array that you pass to the table instance have a \"stable\" reference in order\nto prevent bugs that cause infinite re-renders (especially in React).\n\nThis will depend on which framework adapter you are using, but in React, you\nshould often use , , or similar to ensure that both the and table options have\nstable references.\n\n```\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `columns`\nis a stable reference\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `data` is\na stable reference\n\n // Columns and data are defined in a stable reference, will not cause infinite\nloop!\n\n//also good to use a fallback array that is defined outside of the component\n(stable reference)\n\n```\n\n```\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `columns`\nis a stable reference\n\n //‚úÖ GOOD: This will not cause an infinite loop of re-renders because `data` is\na stable reference\n\n // Columns and data are defined in a stable reference, will not cause infinite\nloop!\n\n //also good to use a fallback array that is defined outside of the component\n(stable reference)\n\n```\n\nand are not the only ways to give your data a stable reference. You can also\ndefine your data outside of the component or use a 3rd party state management\nlibrary like Redux, Zustand, or TanStack Query.\n\nThe main thing to avoid is defining the array inside the same scope as the call.\nThat will cause the array to be redefined on every render, which will cause an\ninfinite loop of re-renders.\n\n```\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `columns` is\nredefined as a new array on every render!\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `data` is\nredefined as a new array on every render!\n\n //‚ùå Columns and data are defined in the same scope as `useReactTable` without a\nstable reference, will cause infinite loop!\n\n//‚ùå Also bad because the fallback array is re-created on every render\n\n```\n\n```\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `columns` is\nredefined as a new array on every render!\n\n //üòµ BAD: This will cause an infinite loop of re-renders because `data` is\nredefined as a new array on every render!\n\n //‚ùå Columns and data are defined in the same scope as `useReactTable` without a\nstable reference, will cause infinite loop!\n\n//‚ùå Also bad because the fallback array is re-created on every render\n\n```\n\n### [How TanStack Table Transforms\nData](https://tanstack.com/table/v8/docs/guide/<#how-tanstack-table-transforms-\ndata>)\n\nLater, in other parts of these docs, you will see how TanStack Table processes\nthe that you pass to the table and generates the row and cell objects that are\nused to create the table. The that you pass to the table is never mutated by\nTanStack Table, but the actual values in the rows and cells may be transformed\nby the accessors in your column definitions, or by other features performed by\nlike grouping or aggregation.\n\n### [How Much Data Can TanStack Table\nHandle?](https://tanstack.com/table/v8/docs/guide/<#how-much-data-can-tanstack-\ntable-handle>)\n\nBelieve it or not, TanStack Table was actually built to scale up to handle\npotentially hundreds of thousands of rows of data in the client. This is\nobviously not always possible, depending on the size of each column's data and\nthe number of columns. However, the sorting, filtering, pagination, and grouping\nfeatures are all built with performance in mind for large datasets.\n\nThe default mindset of a developer building a data grid is to implement server-\nside pagination, sorting, and filtering for large datasets. This is still\nusually a good idea, but a lot of developers underestimate how much data can\nactually be handled in the client with modern browsers and the right\noptimizations. If your table will never have more than a few thousand rows, you\ncan probably take advantage of the client-side features in TanStack Table\ninstead of implementing them yourself on the server. Before committing to\nletting TanStack Table's client-side features handle your large dataset, you\nshould test it with your actual data to see if it performs well enough for your\nneeds, of course.\n\nThis is discussed in more detail in the .\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDV23KC67DT2QYF67IT27YCA7IK2JWCA7IP23MHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/column-defs\n\n> Note: This guide is about setting up column definitions for your table and NOT\n> about the actual objects that are generated within the table instance.\nColumn defs are the single most important part of building a table. They are\nresponsible for:\n\n  * Building the underlying data model that will be used for everything including sorting, filtering, grouping, etc.\n  * Formatting the data model into what will be displayed in the table\n  * Creating columns for display-only purposes, eg. action buttons, checkboxes, expanders, sparklines, etc.\n\nThe following \"types\" of column defs aren't actually TypeScript types, but more\nso a way to talk about and describe overall categories of column defs:\n\n  *     * Accessor columns have an underlying data model which means they can be sorted, filtered, grouped, etc.\n  *     * Display columns do have a data model which means they cannot be sorted, filtered, etc, but they can be used to display arbitrary content in the table, eg. a row actions button, checkbox, expander, etc.\n  *     * Group columns do have a data model so they too cannot be sorted, filtered, etc, and are used to group other columns together. It's common to define a header or footer for a column group.\n\nWhile column defs are just plain objects at the end of the day, a function is\nexposed from the table core which, when called with a row type, returns a\nutility for creating different column definition types with the highest type-\nsafety possible.\n\nHere's an example of creating and using a column helper:\n\n```\n\n// Define your row shape\n\n```\n\n```\n\n// Define your row shape\n\n```\n\nData columns are unique in that they must be configured to extract primitive\nvalues for each item in your array.\n\nThere are 3 ways to do this:\n\n  * If your items are , use an object-key that corresponds to the value you want to extract.\n  * If your items are nested , use an array index that corresponds to the value you want to extract.\n  * Use an accessor function that returns the value you want to extract.\n\nIf each of your items is an object with the following shape:\n\nYou could extract the value like so:\n\nIf each of your items is an object with the following shape:\n\nYou could extract the value like so:\n\nIf each of your items is an array with the following shape:\n\nYou could extract the value like so:\n\nIf each of your items is an object with the following shape:\n\nYou could extract a computed full-name value like so:\n\n```\n\n```\n\n> üß† Remember, the accessed value is what is used to sort, filter, etc. so you'll\n> want to make sure your accessor function returns a primitive value that can be\n> manipulated in a meaningful way. If you return a non-primitive value like an\n> object or array, you will need the appropriate filter/sort/grouping functions\n> to manipulate them, or even supply your own! üò¨\nColumns are uniquely identified with 3 strategies:\n\n  * If defining an accessor column with an object key or array index, the same will be used to uniquely identify the column.\n    * Any periods () in an object key will be replaced by underscores ().\n  * If defining an accessor column with an accessor function\n    * The columns property will be used to uniquely identify the column OR\n    * If a primitive header is supplied, that header string will be used to uniquely identify the column\n\n> üß† An easy way to remember: If you define a column with an accessor function,\n> either provide a string header or provide a unique property.\nBy default, columns cells will display their data model value as a string. You\ncan override this behavior by providing custom rendering implementations. Each\nimplementation is provided relevant information about the cell, header or footer\nand returns something your framework adapter can render eg.\nJSX/Components/strings/etc. This will depend on which adapter you are using.\n\nThere are a couple of formatters available to you:\n\n  * : Used for formatting cells.\n  * : Used for formatting cells when aggregated.\n  * : Used for formatting headers.\n  * : Used for formatting footers.\n\nYou can provide a custom cell formatter by passing a function to the property\nand using the function to access your cell's value:\n\nCell formatters are also provided the and objects, allowing you to customize the\ncell formatting beyond just the cell value. The example below provides as the\naccessor, but also displays a prefixed user ID located on the original row\nobject:\n\nFor more info on aggregated cells, see .\n\nHeaders and footers do not have access to row data, but still use the same\nconcepts for displaying custom content.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKQKC67DT2QYF67IT27YCA7IK2JWCA7IP2QJHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/tables\n\nTanStack Table is a headless UI library. When we talk about the or \"table\ninstance\", we're not talking about a literal element. Instead, we're referring\nto the core table object that contains the table state and APIs. The instance is\ncreated by calling your adapter's function (e.g. , , , , , ).\n\nThe instance that is returned from the function (from the framework adapter) is\nthe main object that you will interact with to read and mutate the table state.\nIt is the one place where everything happens in TanStack Table. When you get to\nthe point where you are rendering your UI, you will use APIs from this instance.\n\nTo create a table instance, 3 are required: , , and a implementation. There are\ndozens of other table options to configure features and behavior, but these 3\nare required.\n\nDefine your data as an array of objects with a stable reference. can come from\nanywhere like an API response or defined statically in your code, but it must\nhave a stable reference to prevent infinite re-renders. If using TypeScript, the\ntype that you give your data will be used as a generic. See the for more info.\n\nColumn definitions are covered in detail in the previous section in the . We'll\nnote here, however, that when you define the type of your columns, you should\nuse the same type that you used for your data.\n\n```\n\n//Pass User type as the generic TData type\n\n//Pass User type as the generic TData type\n\n```\n\n```\n\n //Pass User type as the generic TData type\n\n //Pass User type as the generic TData type\n\n```\n\nThe column definitions are where we will tell TanStack Table how each column\nshould access and/or transform row data with either an or . See the for more\ninfo.\n\nThis is explained in much more detail in the , but for now, just import the\nfunction from TanStack Table and pass it in as a table option. Depending on the\nfeatures you plan to use, you may need to pass in additional row models later.\n\n```\n\n```\n\nWith our , , and defined, we can now create our basic table instance, along side\nany other table options that we want to pass in.\n\n```\n\n```\n\nSo what's in the instance? Let's take a look at what interactions we can have\nwith the table instance.\n\nThe table instance contains all of the table state, which can be accessed via\nthe API. Each table feature registers various states in the table state. For\nexample, the row selection feature registers state, the pagination feature\nregisters state, etc.\n\nEach feature will also have corresponding state setter APIs and state resetter\nAPIs on the table instance. For example, the row selection feature will have a\nAPI and a .\n\n```\n\n//read the row selection state\n\n//set the row selection state\n\n//reset the row selection state\n\n```\n\n```\n\n //read the row selection state\n\n //set the row selection state\n\n //reset the row selection state\n\n```\n\nThis is covered in more detail in the\n\nThere are dozens of table APIs created by each feature to help you either read\nor mutate the table state in different ways.\n\nAPI reference docs for the core table instance and all other feature APIs can be\nfound throughout the API docs.\n\nFor example, you can find the core table instance API docs here:\n\nThere is a special set of table instance APIs for reading rows out of the table\ninstance called row models. TanStack Table has advanced features where the rows\nthat are generated may be very different than the array of that you originally\npassed in. To learn more about the different row models that you can pass in as\na table option, see the .\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Secure Homebrew and gain visibility into your software supply chain. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCYADVZ3JCA7ILK3LC6YDE53KC67DT2QYF67IT27YCA7IK2JWCA7IPKJNHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/row-models\n\nIf you take a look at the most basic example of TanStack Table, you'll see a\ncode snippet like this:\n\n```\n\n```\n\nWhat is this function? And why do you have to import it from TanStack Table only\nto just pass it back to itself?\n\nWell, the answer is that TanStack Table is a modular library. Not all code for\nevery single feature is included in the createTable functions/hooks by default.\nYou only need to import and include the code that you will need to correctly\ngenerate rows based on the features you want to use.\n\nRow models run under the hood of TanStack Table to transform your original data\nin useful ways that are needed for data grid features like filtering, sorting,\ngrouping, expanding, and pagination. The rows that get generated and render on\nscreen won't necessarily be a 1:1 mapping of the original data that you passed\nto the table. They may be sorted, filtered, paginated, etc.\n\nYou should only import the row models that you need. Here are all of the row\nmodels that are available:\n\n```\n\n//only import the row models you need\n\n```\n\n```\n\n//only import the row models you need\n\n```\n\nYou don't have to use the exact row models that are provided by TanStack Table.\nIf you need some advanced customization for certain row models, feel free to\ncopy the for the row model you want to customize and modify it to your needs.\n\nOnce your table instance has been created, you can access all of the row models\nthat you may need directly from the table instance. There are even more derived\nrow models available apart from the ones that you may have imported.\n\nFor normal rendering use cases, you will probably only need to use the method,\nas this row model will use all/any of the other row models depending on which\nfeatures you have enabled or disabled. All of the other row models are available\nfor you to \"dig into\" some of the underlying data transformations that are\nhappening in the table.\n\n### [Available Row Models on Table\nInstance](https://tanstack.com/table/v8/docs/guide/<#available-row-models-on-\ntable-instance>)\n\n  * - This is the main row model that you should use for rendering your table rows markup. It will use all of the other row models to generate the final row model that you will use to render your table rows.\n  * - returns a basic row model that is just a 1:1 mapping of the original data passed to the table.\n  * - returns a row model that accounts for column filtering and global filtering.\n  * - returns a row model before column filtering and global filtering are applied.\n  * - returns a row model that applies grouping and aggregation to the data and creates sub-rows.\n  * - returns a row model before grouping and aggregation are applied.\n  * - returns a row model that has had sorting applied to it.\n  * - returns a row model before sorting is applied (rows are in original order).\n  * - returns a row model that accounts for expanded/hidden sub-rows.\n  * - returns a row model that only includes root level rows with no expanded sub-rows included. Still includes sorting.\n  * - returns a row model that only includes the rows that should be displayed on the current page based on the pagination state.\n  * - returns a row model without pagination applied (includes all rows).\n  * - returns a row model of all selected rows (but only based on the data that was passed to the table). Runs after getCoreRowModel.\n  * - returns a row model before row selection is applied (Just returns getCoreRowModel).\n  * - returns a row model of selected rows after grouping. Runs after getSortedRowModel, which runs after getGroupedRowModel, which runs after getFilteredRowModel.\n  * - returns a row model of selected rows after column filtering and global filtering. Runs after getFilteredRowModel.\n\n### [The Order of Row Model\nExecution](https://tanstack.com/table/v8/docs/guide/<#the-order-of-row-model-\nexecution>)\n\nKnowing how TanStack Table processes rows internally can help you gain a better\nunderstanding of what is happening under the hood, and help you debug any issues\nyou may encounter.\n\nInternally, this is the order in which each of the row models are applied to the\ndata, if their respective features are enabled:\n\nIf in any case the respective feature is disabled or turned off with a table\noption, the will be used instead in that step of the process.\n\nAs you can see above, first the data is filtered, then grouped, then sorted,\nthen expanded, and then finally paginated as the final step.\n\nEach row model will provide you the rows in 3 different useful formats:\n\n  1. - An array of rows.\n  2. - An array of rows, but all sub-rows are flattened into the top level.\n  3. - An object of rows, where each row is keyed by its . This is useful for quickly looking up rows by their with better performance.\n\n```\n\n// array of rows, but all sub-rows are flattened into the top level\n\n// object of rows, where each row is keyed by its `id`\n\n```\n\n```\n\n // array of rows, but all sub-rows are flattened into the top level\n\n // object of rows, where each row is keyed by its `id`\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7IPK7EHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/rows\n\nThis quick guide will discuss the different ways you can retrieve and interact\nwith row objects in TanStack Table.\n\n### [Where to Get Rows From](https://tanstack.com/table/v8/docs/guide/<#where-\nto-get-rows-from>)\n\nThere are multiple instance APIs you can use to retrieve rows from the table\ninstance.\n\nIf you need to access a specific row by its , you can use the table instance\nAPI.\n\nThe instance generates objects and stores them in useful arrays called . This is\ndiscussed in much more detail in the , but here are the most common ways you may\naccess the row models.\n\nEvery row object contains row data and many APIs to either interact with the\ntable state or extract cells from the row based on the state of the table.\n\nEvery row object has an property that makes it unique within the table instance.\nBy default the is the same as the that is created in the row model. However, it\ncan be useful to override each row's with a unique identifier from the row's\ndata. You can use the table option to do this.\n\n```\n\n//override the row.id with the uuid from the original row's data\n\n```\n\n```\n\n //override the row.id with the uuid from the original row's data\n\n```\n\n> Note: In some features like grouping and expanding, the will have additional\n> string appended to it.\nThe recommended way to access data values from a row is to use either the or\nAPIs. Using either of these APIs will cache the results of the accessor\nfunctions and keep rendering efficient. The only difference between the two is\nthat will return either the value or the if the value is undefined, whereas will\nreturn the value or if the value is undefined.\n\n```\n\n// Access data from any of the columns\n\n// read the row value from the firstName column\n\n// render the value from the lastName column\n\n```\n\n```\n\n// Access data from any of the columns\n\n // read the row value from the firstName column\n\n // render the value from the lastName column\n\n```\n\n> Note: and are shortcuts for the and APIs, respectively.\nFor every row object, you can access the original corresponding that was passed\nto the table instance via the property. None of the data in the will have been\nmodified by the accessors in your column definitions, so if you were doing any\nsort of data transformations in your accessors, those will not be reflected in\nthe object.\n\n```\n\n// Access any data from the original row\n\n// { firstName: 'John', lastName: 'Doe' }\n\n```\n\n```\n\n// Access any data from the original row\n\n // { firstName: 'John', lastName: 'Doe' }\n\n```\n\nIf you are using either grouping or expanding features, your rows may contain\nsub-rows or parent row references. This is discussed in much more detail in the\n, but here is a quick overview of useful properties and methods for working with\nsub-rows.\n\n  * : An array of sub-rows for the row.\n  * : The depth of the row (if nested or grouped) relative to the root row array. 0 for root level rows, 1 for child rows, 2 for grandchild rows, etc.\n  * : The unique ID of the parent row for the row (The row that contains this row in its subRows array).\n  * : Returns the parent row for the row, if it exists.\n\nDepending on the features that you are using for your table, there are dozens\nmore useful APIs for interacting with rows. See each features' respective API\ndocs or guide for more information.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Simplify infrastructure with MongoDB Atlas, the leading developer data\nplatform.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCAAI4Z3JCA7ILK3WC6BIKK7KC67DT2QYF67IT27YCA7IK2JWCA7IPK7MHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/cells\n\nThis quick guide will discuss the different ways you can retrieve and interact\nwith objects in TanStack Table.\n\n### [Where to Get Cells From](https://tanstack.com/table/v8/docs/guide/<#where-\nto-get-cells-from>)\n\nCells come from . Enough said, right?\n\nThere are multiple instance APIs you can use to retrieve the appropriate cells\nfrom a row depending on which features you are using. Most commonly, you will\nuse the or APIs (if you are using column visibility features), but there are a\nhandful of other similar APIs that you can use.\n\nEvery cell object can be associated with a or similar cell element in your UI.\nThere are a few properties and methods on objects that you can use to interact\nwith the table state and extract cell values from the table based on the state\nof the table.\n\nEvery cell object has an property that makes it unique within the table\ninstance. Each is constructed simply as a union of its parent row and column IDs\nseparated by an underscore.\n\nDuring grouping or aggregation features, the will have additional string\nappended to it.\n\nEvery cell stores a reference to its parent and objects.\n\nThe recommended way to access data values from a cell is to use either the or\nAPIs. Using either of these APIs will cache the results of the accessor\nfunctions and keep rendering efficient. The only difference between the two is\nthat will return either the value or the if the value is undefined, whereas will\nreturn the value or if the value is undefined.\n\n> Note: The and APIs are shortcuts and APIs, respectively.\n```\n\n// Access data from any of the columns\n\n// read the cell value from the firstName column\n\n// render the value from the lastName column\n\n```\n\n```\n\n// Access data from any of the columns\n\n // read the cell value from the firstName column\n\n // render the value from the lastName column\n\n```\n\n#### [Access Other Row Data from Any\nCell](https://tanstack.com/table/v8/docs/guide/<#access-other-row-data-from-any-\ncell>)\n\nSince every cell object is associated with its parent row, you can access any\ndata from the original row that you are using in your table using .\n\n```\n\n// Even if we are in the scope of a different cell, we can still access the\noriginal row data\n\n// { firstName: 'John', lastName: 'Doe' }\n\n```\n\n```\n\n// Even if we are in the scope of a different cell, we can still access the\noriginal row data\n\n // { firstName: 'John', lastName: 'Doe' }\n\n```\n\nDepending on the features that you are using for your table, there are dozens\nmore useful APIs for interacting with cells. See each features' respective API\ndocs or guide for more information.\n\nYou can just use the or APIs to render the cells of your table. However, these\nAPIs will only spit out the raw cell values (from accessor functions). If you\nare using the column definition options, you will want to use the API utility\nfrom your adapter.\n\nUsing the API will allow the cell to be rendered correctly with any extra markup\nor JSX and it will call the callback function with the correct parameters.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC27KC67DT2QYF67IT27YCA7IK2JWCA7IPK3UHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/header-groups\n\nThis quick guide will discuss the different ways you can retrieve and interact\nwith header group objects in TanStack Table.\n\nHeader Groups are simply \"rows\" of headers. Don't let the name confuse you, it's\njust that simple. The large majority of tables will only have one row of headers\n(a single header group), but if you define your column structure with nested\ncolumns as with the , you can have multiple rows of headers (multiple header\ngroups).\n\n### [Where to Get Header Groups\nFrom](https://tanstack.com/table/v8/docs/guide/<#where-to-get-header-groups-\nfrom>)\n\nThere are multiple instance APIs you can use to retrieve header groups from the\ntable instance. is the most common API to use, but depending on the features\nthat you are using, you may need to use other APIs, such as if you are using\ncolumn pinning features.\n\nHeader Group objects are similar to objects, though simpler since there is not\nas much going on in header rows as there are in the body rows.\n\nBy default, header groups only have three properties:\n\n  * : The unique identifier for the header group that is generated from its depth (index). This is useful as a key for React components.\n  * : The depth of the header group, zero-indexed based. Think of this as the row index amongst all header rows.\n  * : An array of cell objects that belong to this header group (row).\n\nTo render the header cells in a header group, you just map over the array from\nthe header group object.\n\n```\n\n// map over the headerGroup headers array\n\n```\n\n```\n\n // map over the headerGroup headers array\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKJKC67DT2QYF67IT27YCA7IK2JWCA7IPKQLHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/headers\n\nThis quick guide will discuss the different ways you can retrieve and interact\nwith objects in TanStack Table.\n\nHeaders are the equivalent of cells, but meant for the section of the table\ninstead of the section.\n\n### [Where to Get Headers\nFrom](https://tanstack.com/table/v8/docs/guide/<#where-to-get-headers-from>)\n\nHeaders come from , which are the equivalent of rows, but meant for the section\nof the table instead of the section.\n\nIf you are in a header group, the headers are stored as an array in the\nproperty. Usually you will just map over this array to render your headers.\n\n```\n\n// map over the headerGroup headers array\n\n```\n\n```\n\n // map over the headerGroup headers array\n\n```\n\nThere are multiple instance APIs that you can use to retrieve a list of headers\ndepending on the features that you are using. The most common API you might use\nis , which will return a flat list of all headers in the table, but there are at\nleast a dozen other headers that are useful in tandem with the column visibility\nand column pinning features. APIs like or could be useful depending on your use\ncase.\n\nHeader objects are similar to objects, but meant for the section of the table\ninstead of the section. Every header object can be associated with a or similar\ncell element in your UI. There are a few properties and methods on objects that\nyou can use to interact with the table state and extract cell values from the\ntable based on the state of the table.\n\nEvery header object has an property that makes it unique within the table\ninstance. Usually you only need this as a unique identifier for React keys or if\nyou are following the .\n\nFor simple headers with no advanced nested or grouped headers logic, the will be\nthe same as it's parent . However, if the header is part group column or a\nplaceholder cell, it will have a more complicated id that is constructed from\nthe header family, depth/header row index, column id, and header group id.\n\nThere are a few properties on objects that are only useful if the header is part\nof a nested or grouped header structure. These properties include:\n\n  * : The number of columns that the header should span. This is useful for rendering the attribute on the element.\n  * : The number of rows that the header should span. This is useful for rendering the attribute on the element. (Currently not implemented in default TanStack Table)\n  * : The header group \"row index\" that the header group belongs to.\n  * : A boolean flag that is true if the header is a placeholder header. Placeholder headers are used to fill in the gaps when a column is hidden or when a column is part of a group column.\n  * : The unique identifier for the placeholder header.\n  * : The array of sub/child headers that belong to this header. Will be empty if the header is a leaf header.\n\n> Note: refers to its index within the header group (row of headers), i.e. its\n> position from left to right. It is not the same as , which refers to the\n> header group \"row index\".\nEvery header stores a reference to its parent object and its parent object.\n\nHeaders have a few more useful APIs attached to them that are useful for\ninteracting with the table state. Most of them relate to the Column sizing and\nresizing features. See the for more information.\n\nSince the column option you defined can be either a string, jsx, or a function\nreturning either of those, the best way to render the headers is to use the\nutility from your adapter, which will handle all of those cases for you.\n\n```\n\n/* Handles all possible header column def scenarios for `header` */\n\n```\n\n```\n\n/* Handles all possible header column def scenarios for `header` */\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Simplify infrastructure with MongoDB Atlas, the leading developer data\nplatform.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCAAI4Z3JCA7ILK3WC6BIKK7KC67DT2QYF67IT27YCA7IK2JWCA7IPKQNHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/columns\n\n> Note: This guide is about the actual objects that are generated within the\n> table instance and NOT about setting up the for your table.\nThis quick guide will discuss the different ways you can retrieve and interact\nwith objects in TanStack Table.\n\n### [Where to Get Columns\nFrom](https://tanstack.com/table/v8/docs/guide/<#where-to-get-columns-from>)\n\nYou can find the objects in many places. They are often attached\n\nBefore you reach for one of the instance APIs, consider if you actually need to\nretrieve either or instead of . If you are rending out the markup for your\ntable, you will most likely want to reach for the APIs that return headers or\ncells instead of columns. The column objects themselves are not really meant to\nrender out the headers or cells, but the and objects will contain references to\nthese objects from which they can derive the necessary information to render\ntheir UI.\n\n```\n\n// get column from cell\n\n// get column from header\n\n```\n\n```\n\n // get column from cell\n\n // get column from header\n\n```\n\nThere are dozens of instance APIs you can use to retrieve columns from the table\ninstance. Which APIs you will use will depend entirely on which features you are\nusing in your table and your use-case.\n\nIf you need to just get a single column by its ID, you can use the API.\n\nThe simplest column API is , which will return a list of all columns in the\ntable. There are dozens of other column APIs that are affected by other features\nand the state of the table that come alongside this API though. , , , are just\nsome examples of other column APIs that you might use in tandem with the column\nvisibility or column pinning features.\n\nColumn objects are not actually meant to be used to render out the table UI\ndirectly, so they are not associated 1-to-1 with any or elements in your table,\nbut they contain a lot of useful properties and methods that you can use to\ninteract with the table state.\n\nEvery column must have a unique defined in their associated . Usually, you\ndefine this yourself, or it is derived from the or properties in the column\ndefinition.\n\nA reference to the original object that was used to created the column is always\navailable on the column object.\n\nThere are a few properties on objects that are only useful if the column is part\nof a nested or grouped column structure. These properties include:\n\n  * : An array of child columns that belong to a group column.\n  * : The header group \"row index\" that the column group belongs to.\n  * : The parent column of the column. If the column is a top-level column, this will be .\n\nThere are dozens of Column APIs that you can use to interact with the table\nstate and extract cell values from the table based on the state of the table.\nSee each features column API documentation for more information.\n\nDon't necessarily use objects to render or directly. Instead, use the and\nobjects, as discussed above.\n\nBut if you are just rendering a list of columns somewhere else in your UI for\nsomething like a column visibility menu or something similar, you can just map\nover a columns array and render out the UI as you normally would.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVK3KC67DT2QYF67IT27YCA7IK2JWCA7IV53YHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/guide/table-state\n\nWant to skip to the implementation? Check out these examples:\n\nTanStack Table has a simple underlying internal state management system to store\nand manage the state of the table. It also lets you selectively pull out any\nstate that you need to manage in your own state management. This guide will walk\nyou through the different ways in which you can interact with and manage the\nstate of the table.\n\nYou do not need to set up anything special in order for the table state to work.\nIf you pass nothing into either , , or any of the table options, the table will\nmanage its own state internally. You can access any part of this internal state\nby using the table instance API.\n\n```\n\n//access the entire internal state\n\n//access just the row selection state\n\n```\n\n```\n\n //access the entire internal state\n\n //access just the row selection state\n\n```\n\nIf all you need to do for certain states is customize their initial default\nvalues, you still do not need to manage any of the state yourself. You can\nsimply set values in the option of the table instance.\n\n```\n\n//customize the initial column order\n\n //hide the id column by default\n\n//expand all rows by default\n\n //sort by age in descending order by default\n\n```\n\n```\n\n //customize the initial column order\n\n //hide the id column by default\n\n //expand all rows by default\n\n //sort by age in descending order by default\n\n```\n\n> : Only specify each particular state in either or , but not both. If you pass\n> in a particular state value to both and , the initialized state in will take\n> overwrite any corresponding value in .\nIf you need easy access to the table state in other areas of your application,\nTanStack Table makes it easy to control and manage any or all of the table state\nin your own state management system. You can do this by passing in your own\nstate and state management functions to the and table options.\n\nYou can control just the state that you need easy access to. You do NOT have to\ncontrol all of the table state if you do not need to. It is recommended to only\ncontrol the state that you need on a case-by-case basis.\n\nIn order to control a particular state, you need to both pass in the\ncorresponding value and the function to the table instance.\n\nLet's take filtering, sorting, and pagination as an example in a \"manual\"\nserver-side data fetching scenario. You can store the filtering, sorting, and\npagination state in your own state management, but leave out any other state\nlike column order, column visibility, etc. if your API does not care about those\nvalues.\n\n```\n\n//sort by age in descending order by default\n\n//Use our controlled state values to fetch data\n\n//pass controlled state back to the table (overrides internal state)\n\n//hoist columnFilters state into our own state management\n\n```\n\n```\n\n //sort by age in descending order by default\n\n//Use our controlled state values to fetch data\n\n //pass controlled state back to the table (overrides internal state)\n\n //hoist columnFilters state into our own state management\n\n```\n\nAlternatively, you can control the entire table state with the table option. It\nwill hoist out the entire table state into your own state management system. Be\ncareful with this approach, as you might find that raising some frequently\nchanging state values up a react tree, like state`, might cause bad performance\nissues.\n\nA couple of more tricks may be needed to make this work. If you use the table\noption, the initial values of the must be populated with all of the relevant\nstate values for all of the features that you want to use. You can either\nmanually type out all of the initial state values, or use the API in a special\nway as shown below.\n\n```\n\n//create a table instance with default state values\n\n //... Note: `state` values are NOT passed in yet\n\n//populate the initial state with all of the default state values from the table\ninstance\n\n //optionally customize the initial pagination state.\n\n//Use the table.setOptions API to merge our fully controlled state onto the\ntable instance\n\n//preserve any other options that we have set up above\n\n//our fully controlled state overrides the internal state\n\n//any state changes will be pushed up to our own state management\n\n```\n\n```\n\n//create a table instance with default state values\n\n //... Note: `state` values are NOT passed in yet\n\n //populate the initial state with all of the default state values from the\ntable instance\n\n //optionally customize the initial pagination state.\n\n//Use the table.setOptions API to merge our fully controlled state onto the\ntable instance\n\n //preserve any other options that we have set up above\n\n //our fully controlled state overrides the internal state\n\n //any state changes will be pushed up to our own state management\n\n```\n\nSo far, we have seen the and table options work to \"hoist\" the table state\nchanges into our own state management. However, there are a few things about\nusing these options that you should be aware of.\n\n#### [1. **State Change Callbacks MUST have their corresponding state value in\nthe\noption**.](https://tanstack.com/table/v8/docs/framework/react/guide/<#1-state-\nchange-callbacks-must-have-their-corresponding-state-value-in-the-state-option>)\n\nSpecifying an callback tells the table instance that this will be a controlled\nstate. If you do not specify the corresponding value, that state will be\n\"frozen\" with its initial value.\n\n```\n\n//required because we are using `onSortingChange`\n\n```\n\n```\n\n //required because we are using `onSortingChange`\n\n```\n\n#### [2. **Updaters can either be raw values or callback\nfunctions**.](https://tanstack.com/table/v8/docs/framework/react/guide/<#2-updaters-\ncan-either-be-raw-values-or-callback-functions>)\n\nThe and callbacks work exactly like the functions in React. The updater values\ncan either be a new state value or a callback function that takes the previous\nstate value and returns the new state value.\n\nWhat implications does this have? It means that if you want to add in some extra\nlogic in any of the callbacks, you can do so, but you need to check whether or\nnot the new incoming updater value is a function or value.\n\n```\n\n   //do something with the new pagination value\n\n  //do something with the new sorting value\n\n```\n\n```\n\n   //do something with the new pagination value\n\n  //do something with the new sorting value\n\n```\n\nAll complex states in TanStack Table have their own TypeScript types that you\ncan import and use. This can be handy for ensuring that you are using the\ncorrect data structures and properties for the state values that you are\ncontrolling.\n\n```\n\n//you should get autocomplete for the `id` and `desc` properties\n\n```\n\n```\n\n //you should get autocomplete for the `id` and `desc` properties\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ See what your team could do with The DevSecOps Platform. Take GitLab for a\nspin.\n](https://tanstack.com/table/v8/docs/framework/react/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCW7ICZ3JCA7ILK3LCTSDL2QKC67DT2QYF67IT27YCA7IK2JWCA7IV5QIHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/column-ordering\n\nWant to skip to the implementation? Check out these examples:\n\nBy default, columns are ordered in the order they are defined in the array.\nHowever, you can manually specify the column order using the state. Other\nfeatures like column pinning and grouping can also affect the column order.\n\nThere are 3 table features that can reorder columns, which happen in the\nfollowing order:\n\n  1. - If pinning, columns are split into left, center (unpinned), and right pinned columns.\n  2. Manual - A manually specified column order is applied.\n  3. - If grouping is enabled, a grouping state is active, and is set to , then the grouped columns are reordered to the start of the column flow.\n\n> state will only affect unpinned columns if used in conjunction with column\n> pinning.\nIf you don't provide a state, TanStack Table will just use the order of the\ncolumns in the array. However, you can provide an array of string column ids to\nthe state to specify the order of the columns.\n\nIf all you need to do is specify the initial column order, you can just specify\nthe state in the table option.\n\n> If you are using the table option to also specify the state, the will have no\n> effect. Only specify particular states in either or , not both.\nIf you need to dynamically change the column order, or set the column order\nafter the table has been initialized, you can manage the state just like any\nother table state.\n\n```\n\n//optionally initialize the column order\n\n```\n\n```\n\n //optionally initialize the column order\n\n```\n\nIf the table has UI that allows the user to reorder columns, you can set up the\nlogic something like this:\n\n```\n\n//depending on your dnd solution of choice, you may or may not need state like\nthis\n\n//util function to splice and reorder the columnOrder array\n\n//use your dnd solution of choice\n\n```\n\n```\n\n//depending on your dnd solution of choice, you may or may not need state like\nthis\n\n//util function to splice and reorder the columnOrder array\n\n//use your dnd solution of choice\n\n```\n\n#### [Drag and Drop Column Reordering Suggestions\n(React)](https://tanstack.com/table/v8/docs/guide/<#drag-and-drop-column-\nreordering-suggestions-react>)\n\nThere are undoubtedly many ways to implement drag and drop features along-side\nTanStack Table. Here are a few suggestions in order for you to not have a bad\ntime:\n\n  1. Do NOT try to use _if you are using React 18 or newer_. React DnD was an important library for its time, but it now does not get updated very often, and it has incompatibilities with React 18, especially in React Strict Mode. It is still possible to get it to work, but there are newer alternatives that have better compatibility and are more actively maintained. React DnD's Provider may also interfere and conflict with any other DnD solutions you may want to try in your app.\n  2. Use . DnD Kit is a modern, modular and lightweight drag and drop library that is highly compatible with the modern React ecosystem, and it works well with semantic markup. Both of the official TanStack DnD examples, and , now use DnD Kit.\n  3. Consider other DnD libraries like , but be aware of their potentially large bundle sizes, maintenance status, and compatibility with markup.\n  4. Consider using native browser events and state management to implement lightweight drag and drop features. However, be aware that this approach may not be best for mobile users if you do not go the extra mile to implement proper touch events. is an example of a library that implements TanStack Table with only browser drag and drop events such as , , and no other dependencies. Browse its source code to see how it is done.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7IV5QYHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/column-pinning\n\nWant to skip to the implementation? Check out these examples:\n\nTanStack Table offers state and APIs helpful for implementing column pinning\nfeatures in your table UI. You can implement column pinning in multiple ways.\nYou can either split pinned columns into their own separate tables, or you can\nkeep all columns in the same table, but use the pinning state to order the\ncolumns correctly and use sticky CSS to pin the columns to the left or right.\n\n### [How Column Pinning Affects Column\nOrder](https://tanstack.com/table/v8/docs/guide/<#how-column-pinning-affects-\ncolumn-order>)\n\nThere are 3 table features that can reorder columns, which happen in the\nfollowing order:\n\n  1. - If pinning, columns are split into left, center (unpinned), and right pinned columns.\n  2. Manual - A manually specified column order is applied.\n  3. - If grouping is enabled, a grouping state is active, and is set to , then the grouped columns are reordered to the start of the column flow.\n\nThe only way to change the order of the pinned columns is in the and state\nitself. state will only affect the order of the unpinned (\"center\") columns.\n\nManaging the state is optional, and usually not necessary unless you are adding\npersistent state features. TanStack Table will already keep track of the column\npinning state for you. Manage the state just like any other table state if you\nneed to.\n\n```\n\n```\n\nA very common use case is to pin some columns by default. You can do this by\neither initializing the state with the pinned columnIds, or by using the table\noption\n\n```\n\n```\n\n> Note: Some of these APIs are new in v8.12.0\nThere are a handful of useful Column API methods to help you implement column\npinning features:\n\n  * : Use to determine if a column can be pinned.\n  * : Use to pin a column to the left or right. Or use to unpin a column.\n  * : Use to determine where a column is pinned.\n  * : Use to provide the correct CSS value for a pinned column.\n  * : Use to provide the correct CSS value for a pinned column.\n  * : Use to determine if a column is the last column in its pinned group. Useful for adding a box-shadow\n  * : Use to determine if a column is the first column in its pinned group. Useful for adding a box-shadow\n\nIf you are just using sticky CSS to pin columns, you can for the most part, just\nrender the table as you normally would with the and methods.\n\nHowever, if you are splitting up pinned columns into their own separate tables,\nyou can make use of the , , , , , and methods to only render the columns that\nare relevant to the current table.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCW7ICZ3JCA7ILK3LCTSDLKQKC67DT2QYF67IT27YCA7IK2JWCA7IPK3LHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/column-sizing\n\nWant to skip to the implementation? Check out these examples:\n\nThe column sizing feature allows you to optionally specify the width of each\ncolumn including min and max widths. It also allows you and your users the\nability to dynamically change the width of all columns at will, eg. by dragging\nthe column headers.\n\nColumns by default are given the following measurement options:\n\nThese defaults can be overridden by both and individual column defs, in that\norder.\n\n```\n\n//set column size for this column\n\n```\n\n```\n\n //set column size for this column\n\n```\n\nThe column \"sizes\" are stored in the table state as numbers, and are usually\ninterpreted as pixel unit values, but you can hook up these column sizing values\nto your css styles however you see fit.\n\nAs a headless utility, table logic for column sizing is really only a collection\nof states that you can apply to your own layouts how you see fit (our example\nabove implements 2 styles of this logic). You can apply these width measurements\nin a variety of ways:\n\n  * semantic elements or any elements being displayed in a table css mode\n  * elements or any elements being displayed in a non-table css mode\n    * Block level elements with strict widths\n    * Absolutely positioned elements with strict widths\n    * Flexbox positioned elements with loose widths\n    * Grid positioned elements with loose widths\n  * Really any layout mechanism that can interpolate cell widths into a table structure.\n\nEach of these approaches has its own tradeoffs and limitations which are usually\nopinions held by a UI/component library or design system, luckily not you üòâ.\n\nTanStack Table provides built-in column resizing state and APIs that allow you\nto easily implement column resizing in your table UI with a variety of options\nfor UX and performance.\n\nBy default, the API will return by default for all columns, but you can either\ndisable column resizing for all columns with the table option, or disable column\nresizing on a per-column basis with the column option.\n\n```\n\n//disable resizing for just this column\n\n```\n\n```\n\n //disable resizing for just this column\n\n```\n\nBy default, the column resize mode is set to . This means that the API will not\nreturn the new column size until the user has finished resizing (dragging) the\ncolumn. Usually a small UI indicator will be displayed while the user is\nresizing the column.\n\nIn React TanStack Table adapter, where achieving 60 fps column resizing renders\ncan be difficult, depending on the complexity of your table or web page, the\ncolumn resize mode can be a good default option to avoid stuttering or lagging\nwhile the user resizes columns. That is not to say that you cannot achieve 60\nfps column resizing renders while using TanStack React Table, but you may have\nto do some extra memoization or other performance optimizations in order to\nachieve this.\n\n> Advanced column resizing performance tips will be discussed .\nIf you want to change the column resize mode to for immediate column resizing\nrenders, you can do so with the table option.\n\n```\n\n//change column resize mode to \"onChange\"\n\n```\n\n```\n\n //change column resize mode to \"onChange\"\n\n```\n\nBy default, TanStack Table assumes that the table markup is laid out in a left-\nto-right direction. For right-to-left layouts, you may need to change the column\nresize direction to .\n\n```\n\n//change column resize direction to \"rtl\" for certain locales\n\n```\n\n```\n\n //change column resize direction to \"rtl\" for certain locales\n\n```\n\n#### [Connect Column Resizing APIs to\nUI](https://tanstack.com/table/v8/docs/guide/<#connect-column-resizing-apis-to-\nui>)\n\nThere are a few really handy APIs that you can use to hook up your column\nresizing drag interactions to your UI.\n\nTo apply the size of a column to the column head cells, data cells, or footer\ncells, you can use the following APIs:\n\nHow you apply these size styles to your markup is up to you, but it is pretty\ncommon to use either CSS variables or inline styles to apply the column sizes.\n\nThough, as discussed in the [advanced column resizing performance\nsection](https://tanstack.com/table/v8/docs/guide/</table/v8/docs/guide/column-\nsizing/#advanced-column-resizing-performance>), you may want to consider using\nCSS variables to apply column sizes to your markup.\n\nTanStack Table provides a pre-built event handler to make your drag interactions\neasy to implement. These event handlers are just convenience functions that call\nother internal APIs to update the column sizing state and re-render the table.\nUse to connect to your column resize drag interactions, for both mouse and touch\nevents.\n\n##### [Column Resize Indicator with\nColumnSizingInfoState](https://tanstack.com/table/v8/docs/guide/<#column-resize-\nindicator-with-columnsizinginfostate>)\n\nTanStack Table keeps track of an state object called that you can use to render\na column resize indicator UI.\n\nIf you are creating large or complex tables (and using React üòâ), you may find\nthat if you do not add proper memoization to your render logic, your users may\nexperience degraded performance while resizing columns.\n\nWe have created a that demonstrates how to achieve 60 fps column resizing\nrenders with a complex table that may otherwise have slow renders. It is\nrecommended that you just look at that example to see how it is done, but these\nare the basic things to keep in mind:\n\n  1. Don't use on every header and every data cell. Instead, calculate all column widths once upfront, !\n  2. Memoize your Table Body while resizing is in progress.\n  3. Use CSS variables to communicate column widths to your table cells.\n\nIf you follow these steps, you should see significant performance improvements\nwhile resizing columns.\n\nIf you are not using React, and are using the Svelte, Vue, or Solid adapters\ninstead, you may not need to worry about this as much, but similar principles\napply.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Legacy vendor lock-in, out. A truly cloud-native APM, in.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6YI4Z3JCA7ILK3LC67IKKJKC67DT2QYF67IT27YCA7IK2JWCA7IV27WHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/column-visibility\n\nWant to skip to the implementation? Check out these examples:\n\nThe column visibility feature allows table columns to be hidden or shown\ndynamically. In previous versions of react-table, this feature was a static\nproperty on a column, but in v8, there is a dedicated state and APIs for\nmanaging column visibility dynamically.\n\nThe state is a map of column IDs to boolean values. A column will be hidden if\nits ID is present in the map and the value is . If the column ID is not present\nin the map, or the value is , the column will be shown.\n\n```\n\n//hide this column by default\n\n```\n\n```\n\n //hide this column by default\n\n```\n\nAlternatively, if you don't need to manage the column visibility state outside\nof the table, you can still set the initial default column visibility state\nusing the option.\n\n> : If is provided to both and , the initialization will take precedence and\n> will be ignored. Do not provide to both and , only one or the other.\n```\n\n//hide this column by default\n\n```\n\n```\n\n //hide this column by default\n\n```\n\nBy default, all columns can be hidden or shown. If you want to prevent certain\ncolumns from being hidden, you set the column option to for those columns.\n\n```\n\n// disable hiding for this column\n\n```\n\n```\n\n // disable hiding for this column\n\n```\n\nThere are several column API methods that are useful for rendering column\nvisibility toggles in the UI.\n\n  * - Useful for disabling the visibility toggle for a column that has set to .\n  * - Useful for setting the initial state of the visibility toggle.\n  * - Useful for toggling the visibility of a column.\n  * - Shortcut for hooking up the method to a UI event handler.\n\n### [Column Visibility Aware Table\nAPIs](https://tanstack.com/table/v8/docs/guide/<#column-visibility-aware-table-\napis>)\n\nWhen you render your header, body, and footer cells, there are a lot of API\noptions available. You may see APIs like and , but if you use these APIs, they\nwill not take column visibility into account. Instead, you need to use the\n\"visible\" variants of these APIs, such as and .\n\n```\n\n// takes column visibility into account\n\n// takes column visibility into account\n\n```\n\n```\n\n // takes column visibility into account\n\n // takes column visibility into account\n\n```\n\nIf you are using the Header Group APIs, they will already take column visibility\ninto account.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7IV53JHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/column-filtering\n\nWant to skip to the implementation? Check out these examples:\n\n  * (Autocomplete and Range filters)\n\nFiltering comes in 2 flavors: Column Filtering and Global Filtering.\n\nThis guide will focus on column filtering, which is a filter that is applied to\na single column's accessor value.\n\nTanStack table supports both client-side and manual server-side filtering. This\nguide will go over how to implement and customize both, and help you decide\nwhich one is best for your use-case.\n\nIf you have a large dataset, you may not want to load all of that data into the\nclient's browser in order to filter it. In this case, you will most likely want\nto implement server-side filtering, sorting, pagination, etc.\n\nHowever, as also discussed in the , a lot of developers underestimate how many\nrows can be loaded client-side without a performance hit. The TanStack table\nexamples are often tested to handle up to 100,000 rows or more with decent\nperformance for client-side filtering, sorting, pagination, and grouping. This\ndoesn't necessarily mean that your app will be able to handle that many rows,\nbut if your table is only going to have a few thousand rows at most, you might\nbe able to take advantage of the client-side filtering, sorting, pagination, and\ngrouping that TanStack table provides.\n\n> TanStack Table can handle thousands of client-side rows with good performance.\n> Don't rule out client-side filtering, pagination, sorting, etc. without some\n> thought first.\nEvery use-case is different and will depend on the complexity of the table, how\nmany columns you have, how large every piece of data is, etc. The main\nbottlenecks to pay attention to are:\n\n  1. Can your server query all of the data in a reasonable amount of time (and cost)?\n  2. What is the total size of the fetch? (This might not scale as badly as you think if you don't have many columns.)\n  3. Is the client's browser using too much memory if all of the data is loaded at once?\n\nIf you're not sure, you can always start with client-side filtering and\npagination and then switch to server-side strategies in the future as your data\ngrows.\n\nIf you have decided that you need to implement server-side filtering instead of\nusing the built-in client-side filtering, here's how you do that.\n\nNo table option is needed for manual server-side filtering. Instead, the that\nyou pass to the table should already be filtered. However, if you have passed a\ntable option, you can tell the table to skip it by setting the option to .\n\n```\n\n // getFilteredRowModel: getFilteredRowModel(), // not needed for manual server-\nside filtering\n\n```\n\n```\n\n // getFilteredRowModel: getFilteredRowModel(), // not needed for manual server-\nside filtering\n\n```\n\n> When using manual filtering, many of the options that are discussed in the\n> rest of this guide will have no effect. When is set to , the table instance\n> will not apply any filtering logic to the rows that are passed to it. Instead,\n> it will assume that the rows are already filtered and will use the that you\n> pass to it as-is.\nIf you are using the built-in client-side filtering features, first you need to\npass in a function to the table options. This function will be called whenever\nthe table needs to filter the data. You can either import the default function\nfrom TanStack Table or create your own.\n\n```\n\n// needed for client-side filtering\n\n```\n\n```\n\n // needed for client-side filtering\n\n```\n\nWhether or not you use client-side or server-side filtering, you can take\nadvantage of the built-in column filter state management that TanStack Table\nprovides. There are many table and column APIs to mutate and interact with the\nfilter state and retrieving the column filter state.\n\nThe column filtering state is defined as an array of objects with the following\nshape:\n\nSince the column filter state is an array of objects, you can have multiple\ncolumn filters applied at once.\n\nYou can access the column filter state from the table instance just like any\nother table state using the API.\n\n```\n\n// access the column filters state from the table instance\n\n```\n\n```\n\n // access the column filters state from the table instance\n\n```\n\nHowever, if you need to access the column filter state before the table is\ninitialized, you can \"control\" the column filter state like down below.\n\nIf you need easy access to the column filter state, you can control/manage the\ncolumn filter state in your own state management with the and table options.\n\n```\n\n// can set initial column filter state here\n\n```\n\n```\n\n // can set initial column filter state here\n\n```\n\nIf you do not need to control the column filter state in your own state\nmanagement or scope, but you still want to set an initial column filter state,\nyou can use the table option instead of .\n\n```\n\n// filter the name column by 'John' by default\n\n```\n\n```\n\n // filter the name column by 'John' by default\n\n```\n\n> : Do not use both and at the same time, as the initialized state in the will\n> override the .\nEach column can have its own unique filtering logic. Choose from any of the\nfilter functions that are provided by TanStack Table, or create your own.\n\nBy default there are 10 built-in filter functions to choose from:\n\n  * - Item inclusion within an array\n  * - All items included in an array\n  * - Some items included in an array\n\nYou can also define your own custom filter functions either as the column\noption, or as a global filter function using the table option.\n\n> These filter functions only run during client-side filtering.\nWhen defining a custom filter function in either the column option or the table\noption, it should have the following signature:\n\n  * The columnId to use to retrieve the row's value\n\nand should return if the row should be included in the filtered rows, and if it\nshould be removed.\n\n```\n\n// use built-in filter function\n\n// use custom global filter function\n\n  // use custom filter function directly\n\n // true or false based on your custom logic\n\n// add a custom global filter function\n\n // true or false based on your custom logic\n\n```\n\n```\n\n // use built-in filter function\n\n // use custom global filter function\n\n  // use custom filter function directly\n\n // true or false based on your custom logic\n\n // add a custom global filter function\n\n // true or false based on your custom logic\n\n```\n\nYou can attach a few other properties to filter functions to customize their\nbehavior:\n\n  * - This optional \"hanging\" method on any given allows the filter function to transform/sanitize/format the filter value before it is passed to the filter function.\n  * - This optional \"hanging\" method on any given is passed a filter value and expected to return if the filter value should be removed from the filter state. eg. Some boolean-style filters may want to remove the filter value from the table state if the filter value is set to .\n\n```\n\n//resolveFilterValue will transform this to a string\n\n// toString, toLowerCase, and trim the filter value in `resolveFilterValue`\n\n// remove the filter value from filter state if it is falsy (empty string in\nthis case)\n\n// transform/sanitize/format the filter value before it is passed to the filter\nfunction\n\n```\n\n```\n\n //resolveFilterValue will transform this to a string\n\n // toString, toLowerCase, and trim the filter value in `resolveFilterValue`\n\n// remove the filter value from filter state if it is falsy (empty string in\nthis case)\n\n// transform/sanitize/format the filter value before it is passed to the filter\nfunction\n\n```\n\nThere are a lot of table and column options that you can use to further\ncustomize the column filtering behavior.\n\nBy default, column filtering is enabled for all columns. You can disable the\ncolumn filtering for all columns or for specific columns by using the table\noption or the column option. You can also turn off both column and global\nfiltering by setting the table option to .\n\nDisabling column filtering for a column will cause the API to return for that\ncolumn.\n\n```\n\n// disable column filtering for this column\n\n// disable column filtering for all columns\n\n```\n\n```\n\n // disable column filtering for this column\n\n // disable column filtering for all columns\n\n```\n\nThere are a few additional table options to customize the behavior of column\nfiltering when using features like expanding, grouping, and aggregation.\n\nBy default, filtering is done from parent rows down, so if a parent row is\nfiltered out, all of its child sub-rows will be filtered out as well. Depending\non your use-case, this may be the desired behavior if you only want the user to\nbe searching through the top-level rows, and not the sub-rows. This is also the\nmost performant option.\n\nHowever, if you want to allow sub-rows to be filtered and searched through,\nregardless of whether the parent row is filtered out, you can set the table\noption to . Setting this option to will cause filtering to be done from leaf\nrows up, which means parent rows will be included so long as one of their child\nor grand-child rows is also included.\n\n```\n\n// filter and search through sub-rows\n\n```\n\n```\n\n // filter and search through sub-rows\n\n```\n\n##### [Max Leaf Row Filter\nDepth](https://tanstack.com/table/v8/docs/guide/<#max-leaf-row-filter-depth>)\n\nBy default, filtering is done for all rows in a tree, no matter if they are root\nlevel parent rows or the child leaf rows of a parent row. Setting the table\noption to will cause filtering to only be applied to the root level parent rows,\nwith all sub-rows remaining unfiltered. Similarly, setting this option to will\ncause filtering to only be applied to child leaf rows 1 level deep, and so on.\n\nUse if you want to preserve a parent row's sub-rows from being filtered out\nwhile the parent row is passing the filter.\n\n```\n\n// only filter root level parent rows out\n\n```\n\n```\n\n // only filter root level parent rows out\n\n```\n\nThere are a lot of Column and Table APIs that you can use to interact with the\ncolumn filter state and hook up to your UI components. Here is a list of the\navailable APIs and their most common use-cases:\n\n  * - Overwrite the entire column filter state with a new state.\n  * - Useful for a \"clear all/reset filters\" button.\n  * - Useful for getting the default initial filter value for an input, or even directly providing the filter value to a filter input.\n  * - Useful for connecting filter inputs to their or handlers.\n  * - Useful for disabling/enabling filter inputs.\n  * - Useful for displaying a visual indicator that a column is currently being filtered.\n  * - Useful for displaying in what order the current filter is being applied.\n  * - Used internally to find the default filter function for a column if none is specified.\n  * - Useful for displaying which filter mode or function is currently being used.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC5QKC67DT2QYF67IT27YCA7IK2JWCA7IV53NHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/global-filtering\n\nWant to skip to the implementation? Check out these examples:\n\nFiltering comes in 2 flavors: Column Filtering and Global Filtering.\n\nThis guide will focus on global filtering, which is a filter that is applied\nacross all columns.\n\nIf you have a large dataset, you may not want to load all of that data into the\nclient's browser in order to filter it. In this case, you will most likely want\nto implement server-side filtering, sorting, pagination, etc.\n\nHowever, as also discussed in the , a lot of developers underestimate how many\nrows can be loaded client-side without a performance hit. The TanStack table\nexamples are often tested to handle up to 100,000 rows or more with decent\nperformance for client-side filtering, sorting, pagination, and grouping. This\ndoesn't necessarily mean that your app will be able to handle that many rows,\nbut if your table is only going to have a few thousand rows at most, you might\nbe able to take advantage of the client-side filtering, sorting, pagination, and\ngrouping that TanStack table provides.\n\n> TanStack Table can handle thousands of client-side rows with good performance.\n> Don't rule out client-side filtering, pagination, sorting, etc. without some\n> thought first.\nEvery use-case is different and will depend on the complexity of the table, how\nmany columns you have, how large every piece of data is, etc. The main\nbottlenecks to pay attention to are:\n\n  1. Can your server query all of the data in a reasonable amount of time (and cost)?\n  2. What is the total size of the fetch? (This might not scale as badly as you think if you don't have many columns.)\n  3. Is the client's browser using too much memory if all of the data is loaded at once?\n\nIf you're not sure, you can always start with client-side filtering and\npagination and then switch to server-side strategies in the future as your data\ngrows.\n\nIf you have decided that you need to implement server-side global filtering\ninstead of using the built-in client-side global filtering, here's how you do\nthat.\n\nNo table option is needed for manual server-side global filtering. Instead, the\nthat you pass to the table should already be filtered. However, if you have\npassed a table option, you can tell the table to skip it by setting the option\nto .\n\n```\n\n // getFilteredRowModel: getFilteredRowModel(), // not needed for manual server-\nside global filtering\n\n```\n\n```\n\n // getFilteredRowModel: getFilteredRowModel(), // not needed for manual server-\nside global filtering\n\n```\n\nNote: When using manual global filtering, many of the options that are discussed\nin the rest of this guide will have no effect. When manualFiltering is set to\ntrue, the table instance will not apply any global filtering logic to the rows\nthat are passed to it. Instead, it will assume that the rows are already\nfiltered and will use the data that you pass to it as-is.\n\nIf you are using the built-in client-side global filtering, first you need to\npass in a getFilteredRowModel function to the table options.\n\n```\n\n// needed for client-side global filtering\n\n```\n\n```\n\n // needed for client-side global filtering\n\n```\n\nThe globalFilterFn option allows you to specify the filter function that will be\nused for global filtering. The filter function can be a string that references a\nbuilt-in filter function, a string that references a custom filter function\nprovided via the tableOptions.filterFns option, or a custom filter function.\n\nBy default there are 10 built-in filter functions to choose from:\n\n  * includesString - Case-insensitive string inclusion\n  * includesStringSensitive - Case-sensitive string inclusion\n  * equalsString - Case-insensitive string equality\n  * equalsStringSensitive - Case-sensitive string equality\n  * arrIncludes - Item inclusion within an array\n  * arrIncludesAll - All items included in an array\n  * arrIncludesSome - Some items included in an array\n  * equals - Object/referential equality Object.is/===\n  * weakEquals - Weak object/referential equality ==\n  * inNumberRange - Number range inclusion\n\nYou can also define your own custom filter functions either as the\nglobalFilterFn table option.\n\nThe global filter state is stored in the table's internal state and can be\naccessed via the table.getState().globalFilter property. If you want to persist\nthe global filter state outside of the table, you can use the\nonGlobalFilterChange option to provide a callback function that will be called\nwhenever the global filter state changes.\n\n```\n\n```\n\nThe global filtering state is defined as an object with the following shape:\n\n### [Adding global filter input to\nUI](https://tanstack.com/table/v8/docs/guide/<#adding-global-filter-input-to-\nui>)\n\nTanStack table will not add a global filter input UI to your table. You should\nmanually add it to your UI to allow users to filter the table. For example, you\ncan add an input UI above the table to allow users to enter a search term.\n\nIf you want to use a custom global filter function, you can define the function\nand pass it to the globalFilterFn option.\n\n> It is often a popular idea to use fuzzy filtering functions for global\n> filtering. This is discussed in the .\n```\n\n```\n\n```\n\n```\n\nIf you want to set an initial global filter state when the table is initialized,\nyou can pass the global filter state as part of the table initialState option.\n\nHowever, you can also just specify the initial global filter state in the\nstate.globalFilter option.\n\n```\n\n//recommended to initialize globalFilter state here\n\n// if not managing globalFilter state, set initial state here\n\n// pass our managed globalFilter state to the table\n\n```\n\n```\n\n //recommended to initialize globalFilter state here\n\n // if not managing globalFilter state, set initial state here\n\n // pass our managed globalFilter state to the table\n\n```\n\n> NOTE: Do not use both initialState.globalFilter and state.globalFilter at the\n> same time, as the initialized state in the state.globalFilter will override\n> the initialState.globalFilter.\nBy default, global filtering is enabled for all columns. You can disable the\nglobal filtering for all columns by using the enableGlobalFilter table option.\nYou can also turn off both column and global filtering by setting the\nenableFilters table option to false.\n\nDisabling global filtering will cause the column.getCanGlobalFilter API to\nreturn false for that column.\n\n```\n\n// disable global filtering for this column\n\n// disable global filtering for all columns\n\n```\n\n```\n\n // disable global filtering for this column\n\n // disable global filtering for all columns\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7IV2JJHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/fuzzy-filtering\n\nWant to skip to the implementation? Check out these examples:\n\nFuzzy filtering is a technique that allows you to filter data based on\napproximate matches. This can be useful when you want to search for data that is\nsimilar to a given value, rather than an exact match.\n\nYou can implement a client side fuzzy filtering by defining a custom filter\nfunction. This function should take in the row, columnId, and filter value, and\nreturn a boolean indicating whether the row should be included in the filtered\ndata.\n\nFuzzy filtering is mostly used with global filtering, but you can also apply it\nto individual columns. We will discuss how to implement fuzzy filtering for both\ncases.\n\n> You will need to install the library to use fuzzy filtering. TanStack Match\n> Sorter Utils is a fork of by Kent C. Dodds. It was forked in order to work\n> better with TanStack Table's row by row filtering approach.\nUsing the match-sorter libraries is optional, but the TanStack Match Sorter\nUtils library provides a great way to both fuzzy filter and sort by the rank\ninformation it returns, so that rows can be sorted by their closest matches to\nthe search query.\n\n### [Defining a Custom Fuzzy Filter\nFunction](https://tanstack.com/table/v8/docs/guide/<#defining-a-custom-fuzzy-\nfilter-function>)\n\nHere's an example of a custom fuzzy filter function:\n\n```\n\n // Store the itemRank info\n\n // Return if the item should be filtered in/out\n\n```\n\n```\n\n // Store the itemRank info\n\n // Return if the item should be filtered in/out\n\n```\n\nIn this function, we're using the rankItem function from the @tanstack/match-\nsorter-utils library to rank the item. We then store the ranking information in\nthe meta data of the row, and return whether the item passed the ranking\ncriteria.\n\n### [Using Fuzzy Filtering with Global\nFiltering](https://tanstack.com/table/v8/docs/guide/<#using-fuzzy-filtering-\nwith-global-filtering>)\n\nTo use fuzzy filtering with global filtering, you can specify the fuzzy filter\nfunction in the globalFilterFn option of the table instance:\n\n```\n\n// or your framework's equivalent function\n\n//define as a filter function that can be used in column definitions\n\n//apply fuzzy filter to the global filter (most common use case for fuzzy\nfilter)\n\n//client side sorting needed if you want to use sorting too.\n\n```\n\n```\n\n // or your framework's equivalent function\n\n //define as a filter function that can be used in column definitions\n\n //apply fuzzy filter to the global filter (most common use case for fuzzy\nfilter)\n\n //client side sorting needed if you want to use sorting too.\n\n```\n\n### [Using Fuzzy Filtering with Column\nFiltering](https://tanstack.com/table/v8/docs/guide/<#using-fuzzy-filtering-\nwith-column-filtering>)\n\nTo use fuzzy filtering with column filtering, you should first define the fuzzy\nfilter function in the filterFns option of the table instance. You can then\nspecify the fuzzy filter function in the filterFn option of the column\ndefinition:\n\n```\n\n//using our custom fuzzy filter function\n\n```\n\n```\n\n //using our custom fuzzy filter function\n\n```\n\nIn this example, we're applying the fuzzy filter to a column that combines the\nfirstName and lastName fields of the data.\n\nWhen using fuzzy filtering with column filtering, you might also want to sort\nthe data based on the ranking information. You can do this by defining a custom\nsorting function:\n\n```\n\n // Only sort by rank if the column has ranking information\n\n // Provide an alphanumeric fallback for when the item ranks are equal\n\n```\n\n```\n\n // Only sort by rank if the column has ranking information\n\n // Provide an alphanumeric fallback for when the item ranks are equal\n\n```\n\nIn this function, we're comparing the ranking information of the two rows. If\nthe ranks are equal, we fall back to alphanumeric sorting.\n\nYou can then specify this sorting function in the sortFn option of the column\ndefinition:\n\n```\n\n//using our custom fuzzy filter function\n\n//using our custom fuzzy sort function\n\n```\n\n```\n\n //using our custom fuzzy filter function\n\n //using our custom fuzzy sort function\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2QKC67DT2QYF67IT27YCA7IK2JWCA7IV2JUHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/column-faceting\n\nWant to skip to the implementation? Check out these examples:\n\nColumn Faceting is a feature that allows you to generate lists of values for a\ngiven column from that column's data. For example, a list of unique values in a\ncolumn can be generated from all rows in that column to be used as search\nsuggestions in an autocomplete filter component. Or, a tuple of minimum and\nmaximum values can be generated from a column of numbers to be used as a range\nfor a range slider filter component.\n\nIn order to use any of the column faceting features, you must include the\nappropriate row models in your table options.\n\n```\n\n//only import the row models you need\n\n//if you need a list of values for a column (other faceted row models depend on\nthis one)\n\n//if you need min/max values\n\n//if you need a list of unique values\n\n```\n\n```\n\n//only import the row models you need\n\n //if you need a list of values for a column (other faceted row models depend on\nthis one)\n\n //if you need min/max values\n\n //if you need a list of unique values\n\n```\n\nFirst, you must include the row model. This row model will generate a list of\nvalues for a given column. If you need a list of unique values, include the row\nmodel. If you need a tuple of minimum and maximum values, include the row model.\n\nOnce you have included the appropriate row models in your table options, you\nwill be able to use the faceting column instance APIs to access the lists of\nvalues generated by the faceted row models.\n\n```\n\n// list of unique values for autocomplete filter\n\n```\n\n```\n\n// list of unique values for autocomplete filter\n\n```\n\n```\n\n// tuple of min and max values for range filter\n\n```\n\n```\n\n// tuple of min and max values for range filter\n\n```\n\nIf instead of using the built-in client-side faceting features, you can\nimplement your own faceting logic on the server-side and pass the faceted values\nto the client-side. You can use the and table options to resolve the faceted\nvalues from the server-side.\n\nAlternatively, you don't have to put any of your faceting logic through the\nTanStack Table APIs at all. Just fetch your lists and pass them to your filter\ncomponents directly.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2JKC67DT2QYF67IT27YCA7IK2JWCA7IV27JHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/global-faceting\n\nWant to skip to the implementation? Check out these examples:\n\nGlobal Faceting allows you to generate lists of values for all columns from the\ntable's data. For example, a list of unique values in a table can be generated\nfrom all rows in all columns to be used as search suggestions in an autocomplete\nfilter component. Or, a tuple of minimum and maximum values can be generated\nfrom a table of numbers to be used as a range for a range slider filter\ncomponent.\n\nIn order to use any of the global faceting features, you must include the\nappropriate row models in your table options.\n\n```\n\n//only import the row models you need\n\n//Faceting model for client-side faceting (other faceting methods depend on this\nmodel)\n\n//if you need min/max values\n\n//if you need a list of unique values\n\n```\n\n```\n\n//only import the row models you need\n\n //Faceting model for client-side faceting (other faceting methods depend on\nthis model)\n\n //if you need min/max values\n\n //if you need a list of unique values\n\n```\n\n### [Use Global Faceted Row\nModels](https://tanstack.com/table/v8/docs/guide/<#use-global-faceted-row-\nmodels>)\n\nOnce you have included the appropriate row models in your table options, you\nwill be able to use the faceting table instance APIs to access the lists of\nvalues generated by the faceted row models.\n\n```\n\n// list of unique values for autocomplete filter\n\n```\n\n```\n\n// list of unique values for autocomplete filter\n\n```\n\n```\n\n// tuple of min and max values for range filter\n\n```\n\n```\n\n// tuple of min and max values for range filter\n\n```\n\nIf instead of using the built-in client-side faceting features, you can\nimplement your own faceting logic on the server-side and pass the faceted values\nto the client-side. You can use the getGlobalFacetedUniqueValues and\ngetGlobalFacetedMinMaxValues table options to resolve the faceted values from\nthe server-side.\n\nIn this example, we use the hook from to fetch faceting data from the server.\nOnce the data is fetched, we set the and table options to return the faceted\nvalues from the server response. This will allow the table to use the server-\nside faceting data for generating autocomplete suggestions and range filters.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7IV23WHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/grouping\n\nWant to skip to the implementation? Check out these examples:\n\nThere are 3 table features that can reorder columns, which happen in the\nfollowing order:\n\n  1. - If pinning, columns are split into left, center (unpinned), and right pinned columns.\n  2. Manual - A manually specified column order is applied.\n  3. - If grouping is enabled, a grouping state is active, and is set to , then the grouped columns are reordered to the start of the column flow.\n\nGrouping in TanStack table is a feature that applies to columns and allows you\nto categorize and organize the table rows based on specific columns. This can be\nuseful in cases where you have a large amount of data and you want to group them\ntogether based on certain criteria.\n\nTo use the grouping feature, you will need to use the grouped row model. This\nmodel is responsible for grouping the rows based on the grouping state.\n\n```\n\n```\n\nWhen grouping state is active, the table will add matching rows as subRows to\nthe grouped row. The grouped row will be added to the table rows at the same\nindex as the first matching row. The matching rows will be removed from the\ntable rows. To allow the user to expand and collapse the grouped rows, you can\nuse the expanding feature.\n\n```\n\n```\n\nThe grouping state is an array of strings, where each string is the ID of a\ncolumn to group by. The order of the strings in the array determines the order\nof the grouping. For example, if the grouping state is ['column1', 'column2'],\nthen the table will first group by column1, and then within each group, it will\ngroup by column2. You can control the grouping state using the setGrouping\nfunction:\n\nYou can also reset the grouping state to its initial state using the\nresetGrouping function:\n\nBy default, when a column is grouped, it is moved to the start of the table. You\ncan control this behavior using the groupedColumnMode option. If you set it to\n'reorder', then the grouped columns will be moved to the start of the table. If\nyou set it to 'remove', then the grouped columns will be removed from the table.\nIf you set it to false, then the grouped columns will not be moved or removed.\n\nWhen rows are grouped, you can aggregate the data in the grouped rows by columns\nusing the aggregationFn option. This is a string that is the ID of the\naggregation function. You can define the aggregation functions using the\naggregationFns option.\n\nIn the above example, the sum aggregation function will be used to aggregate the\ndata in the grouped rows. By default, numeric columns will use the sum\naggregation function, and non-numeric columns will use the count aggregation\nfunction. You can override this behavior by specifying the aggregationFn option\nin the column definition.\n\nThere are several built-in aggregation functions that you can use:\n\n  * sum - Sums the values in the grouped rows.\n  * count - Counts the number of rows in the grouped rows.\n  * min - Finds the minimum value in the grouped rows.\n  * max - Finds the maximum value in the grouped rows.\n  * extent - Finds the extent (min and max) of the values in the grouped rows.\n  * mean - Finds the mean of the values in the grouped rows.\n  * median - Finds the median of the values in the grouped rows.\n  * unique - Returns an array of unique values in the grouped rows.\n  * uniqueCount - Counts the number of unique values in the grouped rows.\n\nWhen rows are grouped, you can aggregate the data in the grouped rows using the\naggregationFns option. This is a record where the keys are the IDs of the\naggregation functions, and the values are the aggregation functions themselves.\nYou can then reference these aggregation functions in a column's aggregationFn\noption.\n\n```\n\n   // return the aggregated value\n\n```\n\n```\n\n   // return the aggregated value\n\n```\n\nIn the above example, myCustomAggregation is a custom aggregation function that\ntakes the column ID, the leaf rows, and the child rows, and returns the\naggregated value. You can then use this aggregation function in a column's\naggregationFn option:\n\nIf you are doing server-side grouping and aggregation, you can enable manual\ngrouping using the manualGrouping option. When this option is set to true, the\ntable will not automatically group rows using getGroupedRowModel() and instead\nwill expect you to manually group the rows before passing them to the table.\n\n> There are not currently many known easy ways to do server-side grouping with\n> TanStack Table. You will need to do lots of custom cell rendering to make this\n> work.\nIf you want to manage the grouping state yourself, you can use the\nonGroupingChange option. This option is a function that is called when the\ngrouping state changes. You can pass the managed state back to the table via the\ntableOptions.state.grouping option.\n\n```\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2JKC67DT2QYF67IT27YCA7IK2JWCA7IV23UHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/expanding\n\nWant to skip to the implementation? Check out these examples:\n\nExpanding is a feature that allows you to show and hide additional rows of data\nrelated to a specific row. This can be useful in cases where you have\nhierarchical data and you want to allow users to drill down into the data from a\nhigher level. Or it can be useful for showing additional information related to\na row.\n\n### [Different use cases for Expanding\nFeatures](https://tanstack.com/table/v8/docs/guide/<#different-use-cases-for-\nexpanding-features>)\n\nThere are multiple use cases for expanding features in TanStack Table that will\nbe discussed below.\n\n  1. Expanding sub-rows (child rows, aggregate rows, etc.)\n  2. Expanding custom UI (detail panels, sub-tables, etc.)\n\nTo use the client-side expanding features, you need to define the\ngetExpandedRowModel function in your table options. This function is responsible\nfor returning the expanded row model.\n\nExpanded data can either contain table rows or any other data you want to\ndisplay. We will discuss how to handle both cases in this guide.\n\n### [Table rows as expanded\ndata](https://tanstack.com/table/v8/docs/guide/<#table-rows-as-expanded-data>)\n\nExpanded rows are essentially child rows that inherit the same column structure\nas their parent rows. If your data object already includes these expanded rows\ndata, you can utilize the function to specify these child rows. However, if your\ndata object does not contain the expanded rows data, they can be treated as\ncustom expanded data, which is discussed in next section.\n\nFor example, if you have a data object like this:\n\n```\n\n```\n\nThen you can use the getSubRows function to return the children array in each\nrow as expanded rows. The table instance will now understand where to look for\nthe sub rows on each row.\n\n```\n\n// return the children array as sub-rows\n\n```\n\n```\n\n // return the children array as sub-rows\n\n```\n\n> You can have a complicated function, but keep in mind that it will run for\n> every row and every sub-row. This can be expensive if the function is not\n> optimized. Async functions are not supported.\nIn some cases, you may wish to show extra details or information, which may or\nmay not be part of your table data object, such as expanded data for rows. This\nkind of expanding row UI has gone by many names over the years including\n\"expandable rows\", \"detail panels\", \"sub-components\", etc.\n\nBy default, the row instance API will return false unless it finds on a row.\nThis can be overridden by implementing your own function in the table instance\noptions.\n\n```\n\n// Add your logic to determine if a row can be expanded. True means all rows\ninclude expanded data\n\n/* Normal row UI */\n\n/* If the row is expanded, render the expanded UI as a separate row with a\nsingle cell that spans the width of the table */\n\n // The number of columns you wish to span for the expanded data if it is not a\nrow that shares the same columns as the parent row\n\n      // Your custom UI goes here\n\n```\n\n```\n\n // Add your logic to determine if a row can be expanded. True means all rows\ninclude expanded data\n\n/* Normal row UI */\n\n/* If the row is expanded, render the expanded UI as a separate row with a\nsingle cell that spans the width of the table */\n\n // The number of columns you wish to span for the expanded data if it is not a\nrow that shares the same columns as the parent row\n\n      // Your custom UI goes here\n\n```\n\nIf you need to control the expanded state of the rows in your table, you can do\nso by using the expanded state and the option. This allows you to manage the\nexpanded state according to your requirements.\n\n```\n\n// must pass expanded state back to the table\n\n```\n\n```\n\n // must pass expanded state back to the table\n\n```\n\nThe ExpandedState type is defined as follows:\n\nIf the ExpandedState is true, it means all rows are expanded. If it's a record,\nonly the rows with IDs present as keys in the record and have their value set to\ntrue are expanded. For example, if the expanded state is { row1: true, row2:\nfalse }, it means the row with ID row1 is expanded and the row with ID row2 is\nnot expanded. This state is used by the table to determine which rows are\nexpanded and should display their subRows, if any.\n\n### [UI toggling handler for expanded\nrows](https://tanstack.com/table/v8/docs/guide/<#ui-toggling-handler-for-\nexpanded-rows>)\n\nTanStack table will not add a toggling handler UI for expanded data to your\ntable. You should manually add it within each row's UI to allow users to expand\nand collapse the row. For example, you can add a button UI within the columns\ndefinition.\n\nBy default, the filtering process starts from the parent rows and moves\ndownwards. This means if a parent row is excluded by the filter, all its child\nrows will also be excluded. However, you can change this behavior by using the\noption. When this option is enabled, the filtering process starts from the leaf\n(child) rows and moves upwards. This ensures that a parent row will be included\nin the filtered results as long as at least one of its child or grandchild rows\nmeets the filter criteria. Additionally, you can control how deep into the child\nhierarchy the filter process goes by using the option. This option allows you to\nspecify the maximum depth of child rows that the filter should consider.\n\n```\n\n// search through the expanded rows\n\n// limit the depth of the expanded rows that are searched\n\n```\n\n```\n\n // search through the expanded rows\n\n // limit the depth of the expanded rows that are searched\n\n```\n\nBy default, expanded rows are paginated along with the rest of the table (which\nmeans expanded rows may span multiple pages). If you want to disable this\nbehavior (which means expanded rows will always render on their parents page.\nThis also means more rows will be rendered than the set page size) you can use\nthe option.\n\nPinning expanded rows works the same way as pinning regular rows. You can pin\nexpanded rows to the top or bottom of the table. Please refer to the for more\ninformation on row pinning.\n\nBy default, expanded rows are sorted along with the rest of the table.\n\nIf you are doing server-side expansion, you can enable manual row expansion by\nsetting the manualExpanding option to true. This means that the will not be used\nto expand rows and you would be expected to perform the expansion in your own\ndata model.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7IV2QLHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/pagination\n\nWant to skip to the implementation? Check out these examples:\n\nTanStack Table has great support for both client-side and server-side\npagination. This guide will walk you through the different ways to implement\npagination in your table.\n\nUsing client-side pagination means that the that you fetch will contain of the\nrows for the table, and the table instance will handle pagination logic in the\nfront-end.\n\n#### [Should You Use Client-Side\nPagination?](https://tanstack.com/table/v8/docs/guide/<#should-you-use-client-\nside-pagination>)\n\nClient-side pagination is usually the simplest way to implement pagination when\nusing TanStack Table, but it might not be practical for very large datasets.\n\nHowever, a lot of people underestimate just how much data can be handled client-\nside. If your table will only ever have a few thousand rows or less, client-side\npagination can still be a viable option. TanStack Table is designed to scale up\nto 10s of thousands of rows with decent performance for pagination, filtering,\nsorting, and grouping. The loads 100,000 rows and still performs well, albeit\nwith only handful of columns.\n\nEvery use-case is different and will depend on the complexity of the table, how\nmany columns you have, how large every piece of data is, etc. The main\nbottlenecks to pay attention to are:\n\n  1. Can your server query all of the data in a reasonable amount of time (and cost)?\n  2. What is the total size of the fetch? (This might not scale as badly as you think if you don't have many columns.)\n  3. Is the client's browser using too much memory if all of the data is loaded at once?\n\nIf you're not sure, you can always start with client-side pagination and then\nswitch to server-side pagination in the future as your data grows.\n\n#### [Should You Use Virtualization\nInstead?](https://tanstack.com/table/v8/docs/guide/<#should-you-use-\nvirtualization-instead>)\n\nAlternatively, instead of paginating the data, you can render all rows of a\nlarge dataset on the same page, but only use the browser's resources to render\nthe rows that are visible in the viewport. This strategy is often called\n\"virtualization\" or \"windowing\". TanStack offers a virtualization library called\nthat can work well with TanStack Table. The UI/UX of both virtualization and\npagination have their own trade-offs, so see which one works best for your use-\ncase.\n\nIf you want to take advantage of the built-in client-side pagination in TanStack\nTable, you first need to pass in the pagination row model.\n\n```\n\n { useReactTable, getCoreRowModel, getPaginationRowModel }\n\n```\n\nIf you decide that you need to use server-side pagination, here is how you can\nimplement it.\n\nNo pagination row model is needed for server-side pagination, but if you have\nprovided it for other tables that do need it in a shared component, you can\nstill turn off the client-side pagination by setting the option to . Setting the\noption to will tell the table instance to use the row model under the hood, and\nit will make the table instance assume that the that you pass in is already\npaginated.\n\n#### [Page Count and Row Count](https://tanstack.com/table/v8/docs/guide/<#page-\ncount-and-row-count>)\n\nThe table instance will have no way of knowing how many rows/pages there are in\ntotal in your back-end unless you tell it. Provide either the or table option to\nlet the table instance know how many pages there are in total. If you provide a\n, the table instance will calculate the internally from and . Otherwise, you can\ndirectly provide the if you already have it. If you don't know the page count,\nyou can just pass in for the , but the and row model functions will always\nreturn in this case.\n\n```\n\n { useReactTable, getCoreRowModel, getPaginationRowModel }\n\n // getPaginationRowModel: getPaginationRowModel(), //not needed for server-side\npagination\n\n//pass in the total row count so the table knows how many pages there are\n(pageCount calculated internally if not provided)\n\n // pageCount: dataQuery.data?.pageCount, //alternatively directly pass in\npageCount instead of rowCount\n\n```\n\n```\n\n // getPaginationRowModel: getPaginationRowModel(), //not needed for server-side\npagination\n\n //pass in the total row count so the table knows how many pages there are\n(pageCount calculated internally if not provided)\n\n // pageCount: dataQuery.data?.pageCount, //alternatively directly pass in\npageCount instead of rowCount\n\n```\n\n> : Setting the option to will make the table instance assume that the that you\n> pass in is already paginated.\nWhether or not you are using client-side or manual server-side pagination, you\ncan use the built-in state and APIs.\n\nThe state is an object that contains the following properties:\n\n  * : The current page index (zero-based).\n  * : The current page size.\n\nYou can manage the state just like any other state in the table instance.\n\n```\n\n { useReactTable, getCoreRowModel, getPaginationRowModel }\n\n//update the pagination state when internal APIs mutate the pagination state\n\n```\n\n```\n\n //update the pagination state when internal APIs mutate the pagination state\n\n```\n\nAlternatively, if you have no need for managing the state in your own scope, but\nyou need to set different initial values for the and , you can use the option.\n\n```\n\n```\n\n```\n\n```\n\n> : Do NOT pass the state to both the and options. will overwrite . Only use one\n> or the other.\nBesides the , , and options which are useful for manual server-side pagination\n(and discussed ), there is one other table option that is useful to understand.\n\nBy default, is reset to when page-altering state changes occur, such as when the\nis updated, filters change, grouping changes, etc. This behavior is\nautomatically disabled when is true but it can be overridden by explicitly\nassigning a boolean value to the table option.\n\n```\n\n//turn off auto reset of pageIndex\n\n```\n\n```\n\n //turn off auto reset of pageIndex\n\n```\n\nBe aware, however, that if you turn off , you may need to add some logic to\nhandle resetting the yourself to avoid showing empty pages.\n\nThere are several pagination table instance APIs that are useful for hooking up\nyour pagination UI components.\n\n  * : Useful for disabling the \"previous page\" button when on the first page.\n  * : Useful for disabling the \"next page\" button when there are no more pages.\n  * : Useful for going to the previous page. (Button click handler)\n  * : Useful for going to the next page. (Button click handler)\n  * : Useful for going to the first page. (Button click handler)\n  * : Useful for going to the last page. (Button click handler)\n  * : Useful for a \"go to page\" input.\n  * : Useful for resetting the table state to the original page index.\n  * : Useful for a \"page size\" input/select.\n  * : Useful for resetting the table state to the original page size.\n  * : Useful for setting all of the pagination state at once.\n  * : Useful for resetting the table state to the original pagination state.\n\n> : Some of these APIs are new in .\n  * : Useful for showing the total number of pages.\n  * : Useful for showing the total number of rows.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Ready to discover the latest startup AI innovations? Join us April 9-11 at\nGoogle Cloud Next.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCY7DEZ3JCA7ILK3LCTSIL2JKC67DT2QYF67IT27YCA7IK2JWCA7IVKJNHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/row-pinning\n\nWant to skip to the implementation? Check out these examples:\n\nThere are 2 table features that can reorder rows, which happen in the following\norder:\n\n  1. - If pinning, rows are split into top, center (unpinned), and bottom pinned rows.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDV23KC67DT2QYF67IT27YCA7IK2JWCA7IVK7LHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/row-selection\n\nWant to skip to the implementation? Check out these examples:\n\nThe row selection feature keeps track of which rows are selected and allows you\nto toggle the selection of rows in a myriad of ways. Let's take a look at some\ncommon use cases.\n\nThe table instance already manages the row selection state for you (though as\nseen down below, it may be more convenient to manage the row selection state in\nyour own scope). You can access the internal row selection state or the selected\nrows from a few APIs.\n\n  * - returns the internal row selection state\n  * - returns selected rows after filtering\n  * - returns selected rows after grouping and sorting\n\n```\n\n//get the row selection state - { 1: true, 2: false, etc... }\n\n//get full client-side selected rows\n\n//get filtered client-side selected rows\n\n//get grouped client-side selected rows\n\n```\n\n```\n\n //get the row selection state - { 1: true, 2: false, etc... }\n\n //get full client-side selected rows\n\n //get filtered client-side selected rows\n\n //get grouped client-side selected rows\n\n```\n\n> Note: If you are using , be aware that the API will only return selected rows\n> on the current page because table row models can only generate rows based on\n> the that is passed in. Row selection state, however, can contain row ids that\n> are not present in the array just fine.\nEven though the table instance will already manage the row selection state for\nyou, it is usually more convenient to manage the state yourself in order to have\neasy access to the selected row ids that you can use to make API calls or other\nactions.\n\nUse the table option to hoist up the row selection state to your own scope. Then\npass the row selection state back to the table instance using in the table\noption.\n\n```\n\n//manage your own row selection state\n\n//hoist up the row selection state to your own scope\n\n//pass the row selection state back to the table instance\n\n```\n\n```\n\n //manage your own row selection state\n\n //hoist up the row selection state to your own scope\n\n //pass the row selection state back to the table instance\n\n```\n\nBy default, the row id for each row is simply the . If you are using row\nselection features, you most likely want to use a more useful row identifier,\nsince the row selection state is keyed by row id. You can use the table option\nto specify a function that returns a unique row id for each row.\n\n```\n\n//use the row's uuid from your database as the row id\n\n```\n\n```\n\n //use the row's uuid from your database as the row id\n\n```\n\nNow as rows are selected, the row selection state will look something like this:\n\nRow selection is enabled by default for all rows. To either enable row selection\nconditionally for certain rows or disable row selection for all rows, you can\nuse the table option which accepts either a boolean or a function for more\ngranular control.\n\n```\n\n//only enable row selection for adults\n\n```\n\n```\n\n //only enable row selection for adults\n\n```\n\nTo enforce whether a row is selectable or not in your UI, you can use the API\nfor your checkboxes or other selection UI.\n\nBy default, the table allows multiple rows to be selected at once. If, however,\nyou only want to allow a single row to be selected at once, you can set the\ntable option to to disable multi-row selection, or pass in a function to disable\nmulti-row selection conditionally for a row's sub-rows.\n\nThis is useful for making tables that have radio buttons instead of checkboxes.\n\n```\n\n//only allow a single row to be selected at once\n\n // enableMultiRowSelection: row => row.original.age > 18, //only allow a single\nrow to be selected at once for adults\n\n```\n\n```\n\n //only allow a single row to be selected at once\n\n // enableMultiRowSelection: row => row.original.age > 18, //only allow a single\nrow to be selected at once for adults\n\n```\n\nBy default, selecting a parent row will select all of its sub-rows. If you want\nto disable auto sub-row selection, you can set the table option to to disable\nsub-row selection, or pass in a function to disable sub-row selection\nconditionally for a row's sub-rows.\n\n```\n\n // enableSubRowSelection: row => row.original.age > 18, //disable sub-row\nselection for adults\n\n```\n\n```\n\n // enableSubRowSelection: row => row.original.age > 18, //disable sub-row\nselection for adults\n\n```\n\nTanStack table does not dictate how you should render your row selection UI. You\ncan use checkboxes, radio buttons, or simply hook up click events to the row\nitself. The table instance provides a few APIs to help you render your row\nselection UI.\n\n#### [Connect Row Selection APIs to Checkbox\nInputs](https://tanstack.com/table/v8/docs/guide/<#connect-row-selection-apis-\nto-checkbox-inputs>)\n\nTanStack Table provides some handler functions that you can connect directly to\nyour checkbox inputs to make it easy to toggle row selection. These function\nautomatically call other internal APIs to update the row selection state and re-\nrender the table.\n\nUse the API to connect to your checkbox inputs to toggle the selection of a row.\n\nUse the or APIs to connect to your \"select all\" checkbox input to toggle the\nselection of all rows.\n\nIf you need more granular control over these function handlers, you can always\njust use the or APIs directly. Or you can even just call the API to directly set\nthe row selection state just as you would with any other state updater. These\nhandler functions are just a convenience.\n\n```\n\n```\n\n```\n\n```\n\n#### [Connect Row Selection APIs to\nUI](https://tanstack.com/table/v8/docs/guide/<#connect-row-selection-apis-to-\nui>)\n\nIf you want a simpler row selection UI, you can just hook up click events to the\nrow itself. The API is also useful for this use case.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7IVK7MHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/sorting\n\nWant to skip to the implementation? Check out these examples:\n\nTanStack Table provides solutions for just about any sorting use-case you might\nhave. This guide will walk you through the various options that you can use to\ncustomize the built-in client-side sorting functionality, as well as how to opt\nout of client-side sorting in favor of manual server-side sorting.\n\nThe sorting state is defined as an array of objects with the following shape:\n\nSince the sorting state is an array, it is possible to sort by multiple columns\nat once. Read more about the multi-sorting customizations down .\n\nYou can access the sorting state directly from the table instance just like any\nother state using the API.\n\n```\n\n// access the sorting state from the table instance\n\n```\n\n```\n\n // access the sorting state from the table instance\n\n```\n\nHowever, if you need to access the sorting state before the table is\ninitialized, you can \"control\" the sorting state like down below.\n\nIf you need easy access to the sorting state, you can control/manage the sorting\nstate in your own state management with the and table options.\n\n```\n\n// can set initial sorting state here\n\n// use sorting state to fetch data from your server or something...\n\n```\n\n```\n\n // can set initial sorting state here\n\n// use sorting state to fetch data from your server or something...\n\n```\n\nIf you do not need to control the sorting state in your own state management or\nscope, but you still want to set an initial sorting state, you can use the table\noption instead of .\n\n```\n\n// sort by name in descending order by default\n\n```\n\n```\n\n // sort by name in descending order by default\n\n```\n\n> : Do not use both and at the same time, as the initialized state in the will\n> override the .\nWhether or not you should use client-side or server-side sorting depends\nentirely on whether you are also using client-side or server-side pagination or\nfiltering. Be consistent, because using client-side sorting with server-side\npagination or filtering will only sort the data that is currently loaded, and\nnot the entire dataset.\n\nIf you plan to just use your own server-side sorting in your back-end logic, you\ndo not need to provide a sorted row model. But if you have provided a sorting\nrow model, but you want to disable it, you can use the table option.\n\n```\n\n //getSortedRowModel: getSortedRowModel(), //not needed for manual sorting\n\n//use pre-sorted row model instead of sorted row model\n\n```\n\n```\n\n //getSortedRowModel: getSortedRowModel(), //not needed for manual sorting\n\n //use pre-sorted row model instead of sorted row model\n\n```\n\n> : When is set to , the table will assume that the data that you provide is\n> already sorted, and will not apply any sorting to it.\nTo implement client-side sorting, first you have to provide a sorting row model\nto the table. You can import the function from TanStack Table, and it will be\nused to transform your rows into sorted rows.\n\n```\n\n//provide a sorting row model\n\n```\n\n```\n\n //provide a sorting row model\n\n```\n\nThe default sorting function for all columns is inferred from the data type of\nthe column. However, it can be useful to define the exact sorting function that\nyou want to use for a specific column, especially if any of your data is\nnullable or not a standard data type.\n\nYou can determine a custom sorting function on a per-column basis using the\ncolumn option.\n\nBy default, there are 6 built-in sorting functions to choose from:\n\n  * - Sorts by mixed alphanumeric values without case-sensitivity. Slower, but more accurate if your strings contain numbers that need to be naturally sorted.\n  * - Sorts by mixed alphanumeric values with case-sensitivity. Slower, but more accurate if your strings contain numbers that need to be naturally sorted.\n  * - Sorts by text/string values without case-sensitivity. Faster, but less accurate if your strings contain numbers that need to be naturally sorted.\n  * - Sorts by text/string values with case-sensitivity. Faster, but less accurate if your strings contain numbers that need to be naturally sorted.\n  * - Sorts by time, use this if your values are objects.\n  * - Sorts using a basic/standard a > b ? 1 : a < b ? -1 : 0 comparison. This is the fastest sorting function, but may not be the most accurate.\n\nYou can also define your own custom sorting functions either as the column\noption, or as a global sorting function using the table option.\n\nWhen defining a custom sorting function in either the table option or as a\ncolumn option, it should have the following signature:\n\n```\n\n//optionally use the SortingFn to infer the parameter types\n\n //-1, 0, or 1 - access any row data using rowA.original and rowB.original\n\n```\n\n```\n\n//optionally use the SortingFn to infer the parameter types\n\n //-1, 0, or 1 - access any row data using rowA.original and rowB.original\n\n```\n\n> Note: The comparison function does not need to take whether or not the column\n> is in descending or ascending order into account. The row models will take of\n> that logic. functions only need to provide a consistent comparison.\nEvery sorting function receives 2 rows and a column ID and are expected to\ncompare the two rows using the column ID to return , , or in ascending order.\nHere's a cheat sheet:\n\n```\n\n// use built-in sorting function by name\n\n// use custom global sorting function\n\n// recommended for date columns\n\n  // use custom sorting function directly\n\n//add a custom sorting function\n\n```\n\n```\n\n // use built-in sorting function by name\n\n // use custom global sorting function\n\n // recommended for date columns\n\n  // use custom sorting function directly\n\n //add a custom sorting function\n\n```\n\nThere are a lot of table and column options that you can use to further\ncustomize the sorting UX and behavior.\n\nYou can disable sorting for either a specific column or the entire table using\nthe column option or table option.\n\n```\n\n// disable sorting for this column\n\n// disable sorting for the entire table\n\n```\n\n```\n\n // disable sorting for this column\n\n // disable sorting for the entire table\n\n```\n\nBy default, the first sorting direction when cycling through the sorting for a\ncolumn using the APIs is ascending for string columns and descending for number\ncolumns. You can change this behavior with the column option or table option.\n\n```\n\n//sort by name in descending order first (default is ascending for string\ncolumns)\n\n//sort by age in ascending order first (default is descending for number\ncolumns)\n\n//sort by all columns in descending order first (default is ascending for string\ncolumns and descending for number columns)\n\n```\n\n```\n\n //sort by name in descending order first (default is ascending for string\ncolumns)\n\n //sort by age in ascending order first (default is descending for number\ncolumns)\n\n //sort by all columns in descending order first (default is ascending for\nstring columns and descending for number columns)\n\n```\n\n> : You may want to explicitly set the column option on any columns that have\n> nullable values. The table may not be able to properly determine if a column\n> is a number or a string if it contains nullable values.\nInverting sorting is not the same as changing the default sorting direction. If\ncolumn option is for a column, then the \"desc/asc\" sorting states will still\ncycle like normal, but the actual sorting of the rows will be inverted. This is\nuseful for values that have an inverted best/worst scale where lower numbers are\nbetter, eg. a ranking (1st, 2nd, 3rd) or golf-like scoring.\n\n```\n\n// invert the sorting for this column. 1st -> 2nd -> 3rd -> ... even if \"desc\"\nsorting is applied\n\n```\n\n```\n\n // invert the sorting for this column. 1st -> 2nd -> 3rd -> ... even if \"desc\"\nsorting is applied\n\n```\n\nAny undefined values will be sorted to the beginning or end of the list based on\nthe column option or table option. You can customize this behavior for your\nspecific use-case.\n\nIn not specified, the default value for is , and undefined values will be sorted\nwith lower priority (descending), if ascending, undefined will appear on the end\nof the list.\n\n  * - Undefined values will be pushed to the beginning of the list\n  * - Undefined values will be pushed to the end of the list\n  * - Undefined values will be considered tied and need to be sorted by the next column filter or original index (whichever applies)\n  * - Undefined values will be sorted with higher priority (ascending) (if ascending, undefined will appear on the beginning of the list)\n  * - Undefined values will be sorted with lower priority (descending) (if ascending, undefined will appear on the end of the list)\n\n> NOTE: and options are new in v8.16.0\n```\n\n// 'first' | 'last' | 1 | -1 | false\n\n```\n\n```\n\n // 'first' | 'last' | 1 | -1 | false\n\n```\n\nBy default, the ability to remove sorting while cycling through the sorting\nstates for a column is enabled. You can disable this behavior using the table\noption. This behavior is useful if you want to ensure that at least one column\nis always sorted.\n\nThe default behavior when using either the or APIs is to cycle through the\nsorting states like this:\n\n'none' -> 'desc' -> 'asc' -> 'none' -> 'desc' -> 'asc' -> ...\n\nIf you disable sorting removal, the behavior will be like this:\n\n'none' -> 'desc' -> 'asc' -> 'desc' -> 'asc' -> ...\n\nOnce a column is sorted and is , toggling the sorting on that column will never\nremove the sorting. However, if the user sorts by another column and it is not a\nmulti-sort event, then the sorting will be removed from the previous column and\njust applied to the new column.\n\n> Set to if you want to ensure that at least one column is always sorted.\n```\n\n// disable the ability to remove sorting on columns (always none -> asc -> desc\n-> asc)\n\n```\n\n```\n\n // disable the ability to remove sorting on columns (always none -> asc -> desc\n-> asc)\n\n```\n\nSorting by multiple columns at once is enabled by default if using the API. If\nthe user holds the key while clicking on a column header, the table will sort by\nthat column in addition to the columns that are already sorted. If you use the\nAPI, you have to manually pass in whether or not to use multi-sorting. ().\n\nYou can disable multi-sorting for either a specific column or the entire table\nusing the column option or table option. Disabling multi-sorting for a specific\ncolumn will replace all existing sorting with the new column's sorting.\n\n```\n\n// always sort by just this column if sorting by this column\n\n// disable multi-sorting for the entire table\n\n```\n\n```\n\n // always sort by just this column if sorting by this column\n\n // disable multi-sorting for the entire table\n\n```\n\nBy default, the key is used to trigger multi-sorting. You can change this\nbehavior with the table option. You can even specify that all sorting events\nshould trigger multi-sorting by returning from the custom function.\n\n```\n\n// normal click triggers multi-sorting\n\n// also use the `Ctrl` key to trigger multi-sorting\n\n```\n\n```\n\n // normal click triggers multi-sorting\n\n // also use the `Ctrl` key to trigger multi-sorting\n\n```\n\nBy default, there is no limit to the number of columns that can be sorted at\nonce. You can set a limit using the table option.\n\n```\n\n// only allow 3 columns to be sorted at once\n\n```\n\n```\n\n // only allow 3 columns to be sorted at once\n\n```\n\nBy default, the ability to remove multi-sorts is enabled. You can disable this\nbehavior using the table option.\n\n```\n\n// disable the ability to remove multi-sorts\n\n```\n\n```\n\n // disable the ability to remove multi-sorts\n\n```\n\nThere are a lot of sorting related APIs that you can use to hook up to your UI\nor other logic. Here is a list of all of the sorting APIs and some of their use-\ncases.\n\n  * - Set the sorting state directly.\n  * - Reset the sorting state to the initial state or clear it.\n  * - Useful for enabling/disabling the sorting UI for a column.\n  * - Useful for showing a visual sorting indicator for a column.\n  * - Useful for hooking up the sorting UI for a column. Add to a sort arrow (icon button), menu item, or simply the entire column header cell. This handler will call with the correct parameters.\n  * - Useful for hooking up the sorting UI for a column. If using instead of , you have to manually pass in whether or not to use multi-sorting. ()\n  * - Useful for a \"clear sorting\" button or menu item for a specific column.\n  * - Useful for showing which direction the column will sort by next. (asc/desc/clear in a tooltip/menu item/aria-label or something)\n  * - Useful for showing which direction the column will sort by first. (asc/desc in a tooltip/menu item/aria-label or something)\n  * - Determines whether the first sorting direction will be ascending or descending for a column.\n  * - Used internally to find the default sorting function for a column if none is specified.\n  * - Returns the exact sorting function being used for a column.\n  * - Useful for enabling/disabling the multi-sorting UI for a column.\n  * - Useful for showing a badge or indicator of the column's sort order in a multi-sort scenario. i.e. whether or not it is the first, second, third, etc. column to be sorted.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC27KC67DT2QYF67IT27YCA7IK2JWCA7IVK3YHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/virtualization\n\nWant to skip to the implementation? Check out these examples:\n\nThe TanStack Table packages do not come with any virtualization APIs or features\nbuilt-in, but TanStack Table can easily work with other virtualization libraries\nlike or TanStack's own . This guide will show some strategies for using TanStack\nTable with TanStack Virtual.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCYADVZ3JCA7ILK3LC6YDE5QKC67DT2QYF67IT27YCA7IK2JWCA7IVKQNHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/guide/custom-features\n\nWant to skip to the implementation? Check out these examples:\n\nIn this guide, we'll cover how to extend TanStack Table with custom features,\nand along the way, we'll learn more about how the TanStack Table v8 codebase is\nstructured and how it works.\n\n### [TanStack Table Strives to be\nLean](https://tanstack.com/table/v8/docs/guide/<#tanstack-table-strives-to-be-\nlean>)\n\nTanStack Table has a core set of features that are built into the library such\nas sorting, filtering, pagination, etc. We've received a lot of requests and\nsometimes even some well thought out PRs to add even more features to the\nlibrary. While we are always open to improving the library, we also want to make\nsure that TanStack Table remains a lean library that does not include too much\nbloat and code that is unlikely to be used in most use cases. Not every PR can,\nor should, be accepted into the core library, even if it does solve a real\nproblem. This can be frustrating to developers where TanStack Table solves 90%\nof their use case, but they need a little bit more control.\n\nTanStack Table has always been built in a way that allows it to be highly\nextensible (at least since v7). The instance that is returned from whichever\nframework adapter that you are using (, , etc) is a plain JavaScript object that\ncan have extra properties or APIs added to it. It has always been possible to\nuse composition to add custom logic, state, and APIs to the table instance.\nLibraries like have simply created custom wrapper hooks around the hook to\nextend the table instance with custom functionality.\n\nHowever, starting in version 8.14.0, TanStack Table has exposed a new table\noption that allows you to more tightly and cleanly integrate custom code into\nthe table instance in exactly the same way that the built-in table features are\nalready integrated.\n\n> TanStack Table v8.14.0 introduced a new option that allows you to add custom\n> features to the table instance.\nWith this new tighter integration, you can easily add more complex custom\nfeatures to your tables, and possibly even package them up and share them with\nthe community. We'll see how this evolves over time. In a future v9 release, we\nmay even lower the bundle size of TanStack Table by making all features opt-in,\nbut that is still being explored.\n\n### [How TanStack Table Features\nWork](https://tanstack.com/table/v8/docs/guide/<#how-tanstack-table-features-\nwork>)\n\nTanStack Table's source code is arguably somewhat simple (at least we think so).\nAll code for each feature is split up into its own object/file with\ninstantiation methods to create initial state, default table and column options,\nand API methods that can be added to the , , , , and instances.\n\nAll of the functionality of a feature object can be described with the type that\nis exported from TanStack Table. This type is a TypeScript interface that\ndescribes the shape of a feature object needed to create a feature.\n\nThis might be a bit confusing, so let's break down what each of these methods\ndo:\n\n#### [Default Options and Initial\nState](https://tanstack.com/table/v8/docs/guide/<#default-options-and-initial-\nstate>)\n\nThe method in a table feature is responsible for setting the default table\noptions for that feature. For example, in the feature, the method sets the\ndefault option with a default value of .\n\nThe method in a table feature is responsible for setting the default column\noptions for that feature. For example, in the feature, the method sets the\ndefault column option with a default value of .\n\nThe method in a table feature is responsible for setting the default state for\nthat feature. For example, in the feature, the method sets the default state\nwith a value of and the default state with a value of .\n\nThe method in a table feature is responsible for adding methods to the instance.\nFor example, in the feature, the method adds many table instance API methods\nsuch as , , , etc. So then, when you call , you are calling a method that was\nadded to the table instance by the feature.\n\nThe method in a table feature is responsible for adding methods to the instance.\nFor example, in the feature, the method adds many header instance API methods\nsuch as , and many others. So then, when you call , you are calling a method\nthat was added to the header instance by the feature.\n\nThe method in a table feature is responsible for adding methods to the instance.\nFor example, in the feature, the method adds many column instance API methods\nsuch as , , etc. So then, when you call , you are calling a method that was\nadded to the column instance by the feature.\n\nThe method in a table feature is responsible for adding methods to the instance.\nFor example, in the feature, the method adds many row instance API methods such\nas , , etc. So then, when you call , you are calling a method that was added to\nthe row instance by the feature.\n\nThe method in a table feature is responsible for adding methods to the instance.\nFor example, in the feature, the method adds many cell instance API methods such\nas , , etc. So then, when you call , you are calling a method that was added to\nthe cell instance by the feature.\n\nLet's walk through making a custom table feature for a hypothetical use case.\nLet's say we want to add a feature to the table instance that allows the user to\nchange the \"density\" (padding of cells) of the table.\n\nCheck out the full example to see the full implementation, but here's an in-\ndepth look at the steps to create a custom feature.\n\n#### [Step 1: Set up TypeScript\nTypes](https://tanstack.com/table/v8/docs/guide/<#step-1-set-up-typescript-\ntypes>)\n\nAssuming you want the same full type-safety that the built-in features in\nTanStack Table have, let's set up all of the TypeScript types for our new\nfeature. We'll create types for new table options, state, and table instance API\nmethods.\n\nThese types are following the naming convention used internally within TanStack\nTable, but you can name them whatever you want. We are not adding these types to\nTanStack Table yet, but we'll do that in the next step.\n\n```\n\n// define types for our new feature's custom state\n\n// define types for our new feature's table options\n\n// Define types for our new feature's table APIs\n\n```\n\n```\n\n// define types for our new feature's custom state\n\n// define types for our new feature's table options\n\n// Define types for our new feature's table APIs\n\n```\n\n#### [Step 2: Use Declaration Merging to Add New Types to TanStack\nTable](https://tanstack.com/table/v8/docs/guide/<#step-2-use-declaration-\nmerging-to-add-new-types-to-tanstack-table>)\n\nWe can tell TypeScript to modify the exported types from TanStack Table to\ninclude our new feature's types. This is called \"declaration merging\" and it's a\npowerful feature of TypeScript. This way, we should not have to use any\nTypeScript hacks such as or in our new feature's code or in our application\ncode.\n\n```\n\n// Use declaration merging to add our new feature APIs and state types to\nTanStack Table's existing types.\n\n// or whatever framework adapter you are using\n\n //merge our new feature's state with the existing table state\n\n //merge our new feature's options with the existing table options\n\n //merge our new feature's instance APIs with the existing table instance APIs\n\n // if you need to add cell instance APIs...\n\n // interface Cell<TData extends RowData, TValue> extends DensityCell\n\n // if you need to add row instance APIs...\n\n // interface Row<TData extends RowData> extends DensityRow\n\n // if you need to add column instance APIs...\n\n // interface Column<TData extends RowData, TValue> extends DensityColumn\n\n // if you need to add header instance APIs...\n\n // interface Header<TData extends RowData, TValue> extends DensityHeader\n\n // Note: declaration merging on `ColumnDef` is not possible because it is a\ncomplex type, not an interface.\n\n // But you can still use declaration merging on `ColumnDef.meta`\n\n```\n\n```\n\n// Use declaration merging to add our new feature APIs and state types to\nTanStack Table's existing types.\n\n// or whatever framework adapter you are using\n\n //merge our new feature's state with the existing table state\n\n //merge our new feature's options with the existing table options\n\n //merge our new feature's instance APIs with the existing table instance APIs\n\n // if you need to add cell instance APIs...\n\n // interface Cell<TData extends RowData, TValue> extends DensityCell\n\n // if you need to add row instance APIs...\n\n // interface Row<TData extends RowData> extends DensityRow\n\n // if you need to add column instance APIs...\n\n // interface Column<TData extends RowData, TValue> extends DensityColumn\n\n // if you need to add header instance APIs...\n\n // interface Header<TData extends RowData, TValue> extends DensityHeader\n\n // Note: declaration merging on `ColumnDef` is not possible because it is a\ncomplex type, not an interface.\n\n // But you can still use declaration merging on `ColumnDef.meta`\n\n```\n\nOnce we do this correctly, we should have no TypeScript errors when we try to\nboth create our new feature's code and use it in our application.\n\n##### [Caveats of Using Declaration\nMerging](https://tanstack.com/table/v8/docs/guide/<#caveats-of-using-\ndeclaration-merging>)\n\nOne caveat of using declaration merging is that it will affect the TanStack\nTable types for every table across your codebase. This is not a problem if you\nplan on loading the same feature set for every table in your application, but it\ncould be a problem if some of your tables load extra features and some do not.\nAlternatively, you can just make a bunch of custom types that extend off of the\nTanStack Table types with your new features added. This is what does in order to\navoid affecting the types of vanilla TanStack Table tables, but it's a bit more\ntedious, and requires a lot of type casting at certain points.\n\n#### [Step 3: Create the Feature\nObject](https://tanstack.com/table/v8/docs/guide/<#step-3-create-the-feature-\nobject>)\n\nWith all of that TypeScript setup out of the way, we can now create the feature\nobject for our new feature. This is where we define all of the methods that will\nbe added to the table instance.\n\nUse the type to ensure that you are creating the feature object correctly. If\nthe TypeScript types are set up correctly, you should have no TypeScript errors\nwhen you create the feature object with the new state, options, and instance\nAPIs.\n\n```\n\n // define the new feature's initial state\n\n // define the new feature's default options\n\n // if you need to add a default column definition...\n\n // getDefaultColumnDef: <TData extends RowData>(): Partial<ColumnDef<TData>> =>\n{\n\n //  return { meta: {} } //use meta instead of directly adding to the columnDef\nto avoid typescript stuff that's hard to workaround\n\n // define the new feature's table instance methods\n\n //cycle through the 3 options\n\n // if you need to add row instance APIs...\n\n // createRow: <TData extends RowData>(row, table): void => {},\n\n // if you need to add cell instance APIs...\n\n // createCell: <TData extends RowData>(cell, column, row, table): void => {},\n\n // if you need to add column instance APIs...\n\n // createColumn: <TData extends RowData>(column, table): void => {},\n\n // if you need to add header instance APIs...\n\n // createHeader: <TData extends RowData>(header, table): void => {},\n\n```\n\n```\n\n // define the new feature's initial state\n\n // define the new feature's default options\n\n // if you need to add a default column definition...\n\n // getDefaultColumnDef: <TData extends RowData>(): Partial<ColumnDef<TData>> =>\n{\n\n //  return { meta: {} } //use meta instead of directly adding to the columnDef\nto avoid typescript stuff that's hard to workaround\n\n // define the new feature's table instance methods\n\n //cycle through the 3 options\n\n // if you need to add row instance APIs...\n\n // createRow: <TData extends RowData>(row, table): void => {},\n\n // if you need to add cell instance APIs...\n\n // createCell: <TData extends RowData>(cell, column, row, table): void => {},\n\n // if you need to add column instance APIs...\n\n // createColumn: <TData extends RowData>(column, table): void => {},\n\n // if you need to add header instance APIs...\n\n // createHeader: <TData extends RowData>(header, table): void => {},\n\n```\n\n#### [Step 4: Add the Feature to the\nTable](https://tanstack.com/table/v8/docs/guide/<#step-4-add-the-feature-to-the-\ntable>)\n\nNow that we have our feature object, we can add it to the table instance by\npassing it to the option when we create the table instance.\n\n```\n\n//pass the new feature to merge with all of the built-in features under the hood\n\n```\n\n```\n\n //pass the new feature to merge with all of the built-in features under the\nhood\n\n```\n\n#### [Step 5: Use the Feature in Your\nApplication](https://tanstack.com/table/v8/docs/guide/<#step-5-use-the-feature-\nin-your-application>)\n\nNow that the feature is added to the table instance, you can use the new\ninstance APIs options, and state in your application.\n\n```\n\n//pass our custom feature to the table to be instantiated upon creation\n\n//passing the density state to the table, TS is still happy :)\n\n//using the new onDensityChange option, TS is still happy :)\n\n   //using our new feature in the code\n\n```\n\n```\n\n //pass our custom feature to the table to be instantiated upon creation\n\n //passing the density state to the table, TS is still happy :)\n\n //using the new onDensityChange option, TS is still happy :)\n\n   //using our new feature in the code\n\n```\n\n#### [Do We Have to Do It This\nWay?](https://tanstack.com/table/v8/docs/guide/<#do-we-have-to-do-it-this-way>)\n\nThis is just a new way to integrate custom code along-side the built-in features\nin TanStack Table. In our example up above, we could have just as easily stored\nthe state in a , defined our own handler wherever, and just used it in our code\nseparately from the table instance. Building table features along-side TanStack\nTable instead of deeply integrating them into the table instance is still a\nperfectly valid way to build custom features. Depending on your use case, this\nmay or may not be the cleanest way to extend TanStack Table with custom\nfeatures.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Develop and launch modern apps with MongoDB Atlas, a resilient data platform.\n](https://tanstack.com/table/v8/docs/guide/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCAAI4Z3JCA7ILK3WC6BIKKJKC67DT2QYF67IT27YCA7IK2JWCA7IVKQ7HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/core/column-def\n\nColumn definitions are plain objects with the following options:\n\nThe unique identifier for the column.\n\n> üß† A column ID is optional when:\n>   * An accessor column is created with an object key accessor\n>   * The column header is defined as a string\n>\n\nThe key of the row object to use when extracting the value for the column.\n\nThe accessor function to use when extracting the value for the column from each\nrow.\n\nThe child column defs to include in a group column.\n\nThe header to display for the column. If a string is passed, it can be used as a\ndefault for the column ID. If a function is passed, it will be passed a props\nobject for the header and should return the rendered header value (the exact\ntype depends on the adapter being used).\n\nThe footer to display for the column. If a function is passed, it will be passed\na props object for the footer and should return the rendered footer value (the\nexact type depends on the adapter being used).\n\nThe cell to display each row for the column. If a function is passed, it will be\npassed a props object for the cell and should return the rendered cell value\n(the exact type depends on the adapter being used).\n\n```\n\n// This interface is extensible via declaration merging. See below!\n\n```\n\n```\n\n // This interface is extensible via declaration merging. See below!\n\n```\n\nThe meta data to be associated with the column. We can access it anywhere when\nthe column is available via . This type is global to all tables and can be\nextended like so:\n\n```\n\n //or vue, svelte, solid, qwik, etc.\n\n```\n\n```\n\n //or vue, svelte, solid, qwik, etc.\n\n```\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Frontend Masters - Your Path to Becoming a Career-Ready Web Developer!\n](https://tanstack.com/table/v8/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3UCVSIPZ3JCA7ILK3LCV7I4K7KC67DT2QYF67IT27YCA7IK2JWCA7IC5QWHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/core/table\n\nThese functions are used to create a table. Which one you use depends on which\nframework adapter you are using.\n\nThese are options and API properties for the table. More options and API\nproperties are available for other .\n\nThe data for the table to display. This array should match the type you provided\nto , but in theory could be an array of anything. It's common for each item in\nthe array to be an object of key/values but this is not required. Columns can\naccess this data via string/index or a functional accessor to return anything\nthey want.\n\nWhen the option changes reference (compared via ), the table will reprocess the\ndata. Any other data processing that relies on the core data model (such as\ngrouping, sorting, filtering, etc) will also be reprocessed.\n\n> üß† Make sure your option is only changing when you want the table to reprocess.\n> Providing an inline or constructing the data array as a new object every time\n> you want to render the table will result in a of unnecessary re-processing.\n> This can easily go unnoticed in smaller tables, but you will likely notice it\n> in larger tables.\nThe array of column defs to use for the table. See the for more information on\ncreating column definitions.\n\nDefault column options to use for all column defs supplied to the table. This is\nuseful for providing default cell/header/footer renderers,\nsorting/filtering/grouping options, etc. All column definitions passed to are\nmerged with this default column definition to produce the final column\ndefinitions.\n\nUse this option to optionally pass initial state to the table. This state will\nbe used when resetting various table states either automatically by the table\n(eg. ) or via functions like . Most reset function allow you optionally pass a\nflag to reset to a blank/default state instead of the initial state.\n\n> üß† Table state will not be reset when this object changes, which also means\n> that the initial state object does not need to be stable.\nSet this option to override any of the feature options.\n\n```\n\n// This interface is extensible via declaration merging. See below!\n\n```\n\n```\n\n // This interface is extensible via declaration merging. See below!\n\n```\n\nYou can pass any object to and access it anywhere the is available via This type\nis global to all tables and can be extended like so:\n\n> üß† Think of this option as an arbitrary \"context\" for your table. This is a\n> great way to pass arbitrary data or functions to your table without having to\n> pass it to every thing the table touches. A good example is passing a locale\n> object to your table to use for formatting dates, numbers, etc or even a\n> function that can be used to update editable data like in the .\nThe option can be used to optionally part or all of the table state. The state\nyou pass here will merge with and overwrite the internal automatically-managed\nstate to produce the final state for the table. You can also listen to state\nchanges via the option.\n\nThe option can be used to optionally listen to state changes within the table.\nIf you provide this options, you will be responsible for controlling and\nupdating the table state yourself. You can provide the state back to the table\nwith the option.\n\n> ‚ö†Ô∏è Debugging is only available in development mode.\nSet this option to true to output all debugging information to the console.\n\n> ‚ö†Ô∏è Debugging is only available in development mode.\nSet this option to true to output table debugging information to the console.\n\n> ‚ö†Ô∏è Debugging is only available in development mode.\nSet this option to true to output header debugging information to the console.\n\n> ‚ö†Ô∏è Debugging is only available in development mode.\nSet this option to true to output column debugging information to the console.\n\n> ‚ö†Ô∏è Debugging is only available in development mode.\nSet this option to true to output row debugging information to the console.\n\nAn array of extra features that you can add to the table instance.\n\n> ‚ö†Ô∏è This option is only necessary if you are implementing a table adapter.\nThe option provides a renderer implementation for the table. This implementation\nis used to turn a table's various column header and cell templates into a result\nthat is supported by the user's framework.\n\n> ‚ö†Ô∏è This option is only necessary if you are implementing a table adapter.\nThis option is used to optionally implement the merging of table options. Some\nframework like solid-js use proxies to track reactivity and usage, so merging\nreactive objects needs to be handled carefully. This option inverts control of\nthis process to the adapter.\n\nThis required option is a factory for a function that computes and returns the\ncore row model for the table. It is called per table and should return a which\nwill calculate and return the row model for the table.\n\nA default implementation is provided via any table adapter's export.\n\nThis optional function is used to access the sub rows for any given row. If you\nare using nested rows, you will need to use this function to return the sub rows\nobject (or undefined) from the row.\n\nThis optional function is used to derive a unique ID for any given row. If not\nprovided the rows index is used (nested rows join together with using their\ngrandparents' index eg. ). If you need to identify individual rows that are\noriginating from any server-side operations, it's suggested you use this\nfunction to return an ID that makes sense regardless of network IO/ambiguity eg.\na userId, taskId, database ID field, etc.\n\nThese properties and methods are available on the table object:\n\nThis is the resolved initial state of the table.\n\nCall this function to reset the table state to the initial state.\n\nCall this function to get the table's current state. It's recommended to use\nthis function and its state, especially when managing the table state manually.\nIt is the exact same state used internally by the table for every feature and\nfunction it provides.\n\n> üß† The state returned by this function is the shallow-merged result of the\n> automatically-managed internal table-state and any manually-managed state\n> passed via .\nCall this function to update the table state. It's recommended you pass an\nupdater function in the form of to update the state, but a direct object can\nalso be passed.\n\n> üß† If is provided, it will be triggered by this function with the new state.\nA read-only reference to the table's current options.\n\n> ‚ö†Ô∏è This property is generally used internally or by adapters. It can be\n> updated by passing new options to your table. This is different per adapter.\n> For adapters themselves, table options must be updated via the function.\n> ‚ö†Ô∏è This function is generally used by adapters to update the table options. It\n> can be used to update the table options directly, but it is generally not\n> recommended to bypass your adapters strategy for updating table options.\n```\n\n```\n\nReturns the core row model before any processing has been applied.\n\n```\n\n```\n\nReturns the final model after all processing from other used features has been\napplied.\n\nReturns all columns in the table in their normalized and nested hierarchy,\nmirrored from the column defs passed to the table.\n\nReturns all columns in the table flattened to a single level. This includes\nparent column objects throughout the hierarchy.\n\nReturns all leaf-node columns in the table flattened to a single level. This\ndoes not include parent columns.\n\nReturns a single column by its ID.\n\nReturns the header groups for the table.\n\nReturns the footer groups for the table.\n\nReturns a flattened array of Header objects for the table, including parent\nheaders.\n\nReturns a flattened array of leaf-node Header objects for the table.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/table/v8/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3LFTSIKZ3JCA7ILK3LCVYIK27KC67DT2QYF67IT27YCA7IK2JWCA7IC5QYHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/core/column\n\nThese are options and API properties for all columns. More options and API\nproperties are available for other .\n\nAll column objects have the following properties:\n\nThe resolved unique identifier for the column resolved in this priority:\n\n  * A manual property from the column def\n  * The accessor key from the column def\n  * The header string from the column def\n\nThe depth of the column (if grouped) relative to the root column def array.\n\nThe resolved accessor function to use when extracting the value for the column\nfrom each row. Will only be defined if the column def has a valid accessor key\nor function defined.\n\nThe original column def used to create the column.\n\nThe child column (if the column is a group column). Will be an empty array if\nthe column is not a group column.\n\nThe parent column for this column. Will be undefined if this is a root column.\n\nReturns the flattened array of this column and all child/grand-child columns for\nthis column.\n\nReturns an array of all leaf-node columns for this column. If a column has no\nchildren, it is considered the only leaf-node column.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Streamline software patching and vulnerability response on macOS. Deploy\nWorkbrew ‚Äì it‚Äôs free.\n](https://tanstack.com/table/v8/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCYADVZ3JCA7ILK3LC6YDLK3KC67DT2QYF67IT27YCA7IK2JWCA7IVK3MHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/core/header-group\n\nThese are options and API properties for all header groups. More options and API\nproperties may be available for other .\n\nAll header group objects have the following properties:\n\nThe unique identifier for the header group.\n\nThe depth of the header group, zero-indexed based.\n\nAn array of objects that belong to this header group\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Get free expert guidance and resources to empower your best work. Join the Arm\nDeveloper Program.\n](https://tanstack.com/table/v8/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6SICZ3JCA7ILK3LC6BI653KC67DT2QYF67IT27YCA7IK2JWCA7IC27NHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/core/header\n\nThese are options and API properties for all headers. More options and API\nproperties may be available for other .\n\nAll header objects have the following properties:\n\nThe unique identifier for the header.\n\nThe index for the header within the header group.\n\nThe depth of the header, zero-indexed based.\n\nThe header's hierarchical sub/child headers. Will be empty if the header's\nassociated column is a leaf-column.\n\nThe col-span for the header.\n\nThe row-span for the header.\n\nReturns the leaf headers hierarchically nested under this header.\n\nA boolean denoting if the header is a placeholder header\n\nIf the header is a placeholder header, this will be a unique header ID that does\nnot conflict with any other headers across the table\n\n```\n\n```\n\nReturns the rendering context (or props) for column-based components like\nheaders, footers and filters. Use these props with your framework's utility to\nrender these using the template of your choice:\n\nReturns all header groups for the table.\n\nIf pinning, returns the header groups for the left pinned columns.\n\nIf pinning, returns the header groups for columns that are not pinned.\n\nIf pinning, returns the header groups for the right pinned columns.\n\nReturns all footer groups for the table.\n\nIf pinning, returns the footer groups for the left pinned columns.\n\nIf pinning, returns the footer groups for columns that are not pinned.\n\nIf pinning, returns the footer groups for the right pinned columns.\n\nReturns headers for all columns in the table, including parent headers.\n\nIf pinning, returns headers for all left pinned columns in the table, including\nparent headers.\n\nIf pinning, returns headers for all columns that are not pinned, including\nparent headers.\n\nIf pinning, returns headers for all right pinned columns in the table, including\nparent headers.\n\nReturns headers for all leaf columns in the table, (not including parent\nheaders).\n\nIf pinning, returns headers for all left pinned leaf columns in the table, (not\nincluding parent headers).\n\nIf pinning, returns headers for all columns that are not pinned, (not including\nparent headers).\n\nIf pinning, returns headers for all right pinned leaf columns in the table, (not\nincluding parent headers).\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/table/v8/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKQKC67DT2QYF67IT27YCA7IK2JWCA7IC277HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/core/row\n\nThese are options and API properties for all rows. More options and API\nproperties are available for other .\n\nAll row objects have the following properties:\n\nThe resolved unique identifier for the row resolved via the option. Defaults to\nthe row's index (or relative index if it is a subRow)\n\nThe depth of the row (if nested or grouped) relative to the root row array.\n\nThe index of the row within its parent array (or the root data array)\n\nThe original row object provided to the table.\n\n> üß† If the row is a grouped row, the original row object will be the first\n> original in the group.\nIf nested, this row's parent row id.\n\nReturns the value from the row for a given columnId\n\nRenders the value from the row for a given columnId, but will return the if no\nvalue is found.\n\nReturns a unique array of values from the row for a given columnId.\n\nAn array of subRows for the row as returned and created by the option.\n\nReturns the parent row for the row, if it exists.\n\nReturns the parent rows for the row, all the way up to a root row.\n\nReturns the leaf rows for the row, not including any parent rows.\n\nAn array of the original subRows as returned by the option.\n\nReturns all of the for the row.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/v8/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2JKC67DT2QYF67IT27YCA7IK2JWCA7IC53MHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/core/cell\n\nThese are options and API properties for all cells. More options and API\nproperties are available for other .\n\nAll cell objects have the following properties:\n\nThe unique ID for the cell across the entire table.\n\nReturns the value for the cell, accessed via the associated column's accessor\nkey or accessor function.\n\nRenders the value for a cell the same as , but will return the if no value is\nfound.\n\nThe associated Row object for the cell.\n\nThe associated Column object for the cell.\n\n```\n\n```\n\nReturns the rendering context (or props) for cell-based components like cells\nand aggregated cells. Use these props with your framework's utility to render\nthese using the template of your choice:\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/v8/docs/api/core/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC5QKC67DT2QYF67IT27YCA7IK2JWCA7IC537HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/column-filtering\n\nThe ability for a column to be filtered is determined by the following:\n\n  * The column was defined with a valid /.\n\nFilter state is stored on the table using the following shape:\n\nThe following filter functions are built-in to the table core:\n\n  *     * Item inclusion within an array\n  *     * All items included in an array\n  *     * Some items included in an array\n\n  * The columnId to use to retrieve the row's value\n\nand should return if the row should be included in the filtered rows, and if it\nshould be removed.\n\nThis is the type signature for every filter function:\n\nThis optional \"hanging\" method on any given allows the filter function to\ntransform/sanitize/format the filter value before it is passed to the filter\nfunction.\n\nThis optional \"hanging\" method on any given is passed a filter value and\nexpected to return if the filter value should be removed from the filter state.\neg. Some boolean-style filters may want to remove the filter value from the\ntable state if the filter value is set to .\n\nFilter functions can be used/referenced/defined by passing the following to :\n\n  * A that references a built-in filter function\n  * A function directly provided to the option\n\nThe final list of filter functions available for the option use the following\ntype:\n\nFiltering data can often expose additional information about the data that can\nbe used to aid other future operations on the same data. A good example of this\nconcept is a ranking-system like that of that simultaneously ranks, filters and\nsorts data. While utilities like make a lot of sense for single-dimensional\nfilter+sort tasks, the decoupled filtering/sorting architecture of building a\ntable makes them very difficult and slow to use.\n\nTo make a ranking/filtering/sorting system work with tables, s can optionally\nmark results with a value that can be used later to sort/group/etc the data to\nyour liking. This is done by calling the function supplied to your custom .\n\nBelow is an example using our own package (a utility fork of ) to rank, filter,\nand sort the data\n\n```\n\n // Store the ranking info\n\n // Return if the item should be filtered in/out\n\n // Only sort by rank if the column has ranking information\n\n // Provide an alphanumeric fallback for when the item ranks are equal\n\n```\n\n```\n\n // Store the ranking info\n\n // Return if the item should be filtered in/out\n\n // Only sort by rank if the column has ranking information\n\n // Provide an alphanumeric fallback for when the item ranks are equal\n\n```\n\nThe filter function to use with this column.\n\nEnables/disables the filter for this column.\n\nReturns whether or not the column can be filtered.\n\nReturns the index (including ) of the column filter in the table's array.\n\nReturns whether or not the column is currently filtered.\n\nReturns the current filter value of the column.\n\nA function that sets the current filter value for the column. You can pass it a\nvalue or an updater function for immutability-safe operations on existing\nvalues.\n\nReturns an automatically calculated filter function for the column based off of\nthe columns first known value.\n\nReturns the filter function (either user-defined or automatic, depending on\nconfiguration) for the columnId specified.\n\nThe column filters map for the row. This object tracks whether a row is\npassing/failing specific filters by their column ID.\n\nThe column filters meta map for the row. This object tracks any filter meta for\na row as optionally provided during the filtering process.\n\nThis option allows you to define custom filter functions that can be referenced\nin a column's option by their key. Example:\n\n```\n\n   // return the filtered rows\n\n```\n\n```\n\n   // return the filtered rows\n\n```\n\nBy default, filtering is done from parent rows down (so if a parent row is\nfiltered out, all of its children will be filtered out as well). Setting this\noption to will cause filtering to be done from leaf rows up (which means parent\nrows will be included so long as one of their child or grand-child rows is also\nincluded).\n\nBy default, filtering is done for all rows (max depth of 100), no matter if they\nare root level parent rows or the child leaf rows of a parent row. Setting this\noption to will cause filtering to only be applied to the root level parent rows,\nwith all sub-rows remaining unfiltered. Similarly, setting this option to will\ncause filtering to only be applied to child leaf rows 1 level deep, and so on.\n\nThis is useful for situations where you want a row's entire child hierarchy to\nbe visible regardless of the applied filter.\n\nEnables/disables all filters for the table.\n\nDisables the from being used to filter data. This may be useful if your table\nneeds to dynamically support both client-side and server-side filtering.\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will need to persist the state\nchange either fully or partially outside of the table.\n\nEnables/disables column filters for the table.\n\nIf provided, this function is called per table and should return a which will\ncalculate and return the row model for the table when it's filtered.\n\n  * For server-side filtering, this function is unnecessary and can be ignored since the server should already return the filtered row model.\n  * For client-side filtering, this function is required. A default implementation is provided via any table adapter's export.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nReturns the row model for the table before any filtering has been applied.\n\nReturns the row model for the table after filtering has been applied.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVK3KC67DT2QYF67IT27YCA7IK2JWCA7IC2JJHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/column-faceting\n\n> ‚ö†Ô∏è Requires that you pass a valid function to . A default implementation is\n> provided via the exported function.\nReturns the row model with all other column filters applied, excluding its own\nfilter. Useful for displaying faceted result counts.\n\n> ‚ö†Ô∏è Requires that you pass a valid function to . A default implementation is\n> provided via the exported function.\nA function that a of unique values and their occurrences derived from . Useful\nfor displaying faceted result values.\n\n> ‚ö†Ô∏è Requires that you pass a valid function to . A default implementation is\n> provided via the exported function.\nA function that a min/max tuple derived from . Useful for displaying faceted\nresult values.\n\nReturns the faceted row model for a given columnId.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7IC2JUHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/column-ordering\n\nColumn ordering state is stored on the table using the following shape:\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will need to persist the state\nchange either fully or partially outside of the table.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nReturns the index of the column in the order of the visible columns. Optionally\npass a parameter to get the index of the column in a sub-section of the table.\n\nReturns if the column is the first column in the order of the visible columns.\nOptionally pass a parameter to check if the column is the first in a sub-section\nof the table.\n\nReturns if the column is the last column in the order of the visible columns.\nOptionally pass a parameter to check if the column is the last in a sub-section\nof the table.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3LFTSIKZ3JCA7ILK3LCVYIK53KC67DT2QYF67IT27YCA7IK2JWCA7IC27JHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/column-pinning\n\nThe ability for a column to be is determined by the following:\n\nPinning state is stored on the table using the following shape:\n\nEnables/disables column pinning for all columns in the table.\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will also need to supply from your\nown managed state.\n\nEnables/disables pinning for the column.\n\nResets the state to , or can be passed to force a default blank state reset to {\nleft: [], right: [], }.\n\nReturns whether or not any columns are pinned. Optionally specify to only check\nfor pinned columns in either the or position.\n\n_Note: Does not account for column visibility_\n\nReturns the left pinned header groups for the table.\n\nReturns the unpinned/center header groups for the table.\n\nReturns the right pinned header groups for the table.\n\nReturns the left pinned footer groups for the table.\n\nReturns the unpinned/center footer groups for the table.\n\nReturns the right pinned footer groups for the table.\n\nReturns a flat array of left pinned headers for the table, including parent\nheaders.\n\nReturns a flat array of unpinned/center headers for the table, including parent\nheaders.\n\nReturns a flat array of right pinned headers for the table, including parent\nheaders.\n\nReturns a flat array of leaf-node left pinned headers for the table.\n\nReturns a flat array of leaf-node unpinned/center headers for the table.\n\nReturns a flat array of leaf-node right pinned headers for the table.\n\nReturns all left pinned leaf columns.\n\nReturns all right pinned leaf columns.\n\nReturns all center pinned (unpinned) leaf columns.\n\nReturns whether or not the column can be pinned.\n\nReturns the numeric pinned index of the column within a pinned column group.\n\nReturns the pinned position of the column. (, or )\n\nPins a column to the or , or unpins the column to the center if is passed.\n\nReturns all left pinned leaf cells in the row.\n\nReturns all right pinned leaf cells in the row.\n\nReturns all center pinned (unpinned) leaf cells in the row.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Google Cloud Next is April 9-11 to learn how the hottest startups are putting\nAI into action.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCY7DEZ3JCA7ILK3LCTSIL27KC67DT2QYF67IT27YCA7IK2JWCA7IC27MHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/column-sizing\n\nColumn sizing state is stored on the table using the following shape:\n\nEnables or disables column resizing for the column.\n\nThe desired size for the column\n\nThe minimum allowed size for the column\n\nThe maximum allowed size for the column\n\nReturns the current size of the column\n\nReturns the offset measurement along the row-axis (usually the x-axis for\nstandard tables) for the column, measuring the size of all preceding columns.\n\nUseful for sticky or absolute positioning of columns. (e.g. or )\n\nReturns the offset measurement along the row-axis (usually the x-axis for\nstandard tables) for the column, measuring the size of all succeeding columns.\n\nUseful for sticky or absolute positioning of columns. (e.g. or )\n\nReturns if the column can be resized.\n\nReturns if the column is currently being resized.\n\nResets the column size to its initial size.\n\nReturns the size for the header, calculated by summing the size of all leaf-\ncolumns that belong to it.\n\nReturns the offset measurement along the row-axis (usually the x-axis for\nstandard tables) for the header. This is effectively a sum of the offset\nmeasurements of all preceding headers.\n\nReturns an event handler function that can be used to resize the header. It can\nbe used as an:\n\nThe dragging and release events are automatically handled for you.\n\nEnables/disables column resizing for *all columns**.\n\nDetermines when the columnSizing state is updated. updates the state when the\nuser is dragging the resize handle. updates the state when the user releases the\nresize handle.\n\nEnables or disables right-to-left support for resizing the column. defaults to\n'ltr'.\n\nThis optional function will be called when the columnSizing state changes. If\nyou provide this function, you will be responsible for maintaining its state\nyourself. You can pass this state back to the table via the table option.\n\nThis optional function will be called when the columnSizingInfo state changes.\nIf you provide this function, you will be responsible for maintaining its state\nyourself. You can pass this state back to the table via the table option.\n\nSets the column sizing state using an updater function or a value. This will\ntrigger the underlying function if one is passed to the table options, otherwise\nthe state will be managed automatically by the table.\n\nSets the column sizing info state using an updater function or a value. This\nwill trigger the underlying function if one is passed to the table options,\notherwise the state will be managed automatically by the table.\n\nResets column sizing to its initial state. If is , the default state for the\ntable will be used instead of the initialValue provided to the table.\n\nResets column sizing info to its initial state. If is , the default state for\nthe table will be used instead of the initialValue provided to the table.\n\nReturns the total size of the table by calculating the sum of the sizes of all\nleaf-columns.\n\nIf pinning, returns the total size of the left portion of the table by\ncalculating the sum of the sizes of all left leaf-columns.\n\nIf pinning, returns the total size of the center portion of the table by\ncalculating the sum of the sizes of all unpinned/center leaf-columns.\n\nIf pinning, returns the total size of the right portion of the table by\ncalculating the sum of the sizes of all right leaf-columns.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Your fast track into the future of software development. Join the Arm\nDeveloper Program today.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6SICZ3JCA7ILK3LC6BICK3KC67DT2QYF67IT27YCA7IK2JWCA7IC237HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/column-visibility\n\nColumn visibility state is stored on the table using the following shape:\n\nReturns whether the column can be hidden\n\nReturns whether the column is visible\n\nReturns a function that can be used to toggle the column visibility. This\nfunction can be used to bind to an event handler to a checkbox.\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will need to persist the state\nchange either fully or partially outside of the table.\n\nReturns a flat array of columns that are visible, including parent columns.\n\nReturns a flat array of leaf-node columns that are visible.\n\nIf column pinning, returns a flat array of leaf-node columns that are visible in\nthe left portion of the table.\n\nIf column pinning, returns a flat array of leaf-node columns that are visible in\nthe right portion of the table.\n\nIf column pinning, returns a flat array of leaf-node columns that are visible in\nthe unpinned/center portion of the table.\n\nUpdates the column visibility state via an updater function or value\n\nResets the column visibility state to the initial state. If is provided, the\nstate will be reset to\n\nToggles the visibility of all columns\n\nReturns whether all columns are visible\n\nReturns whether some columns are visible\n\nReturns a handler for toggling the visibility of all columns, meant to be bound\nto a element.\n\nReturns an array of cells that account for column visibility for the row.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCW7ICZ3JCA7ILK3LCTSDLKQKC67DT2QYF67IT27YCA7IK2JWCA7IC2QWHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/global-faceting\n\nReturns the faceted row model for the global filter.\n\nReturns the faceted unique values for the global filter.\n\nReturns the faceted min and max values for the global filter.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2JKC67DT2QYF67IT27YCA7IK2JWCA7IC2Q7HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/global-filtering\n\nThe ability for a column to be filtered is determined by the following:\n\n  * The column was defined a valid /.\n  * If provided, returns for the given column. If it is not provided, the column is assumed to be globally filterable if the value in the first row is a or type.\n\nFilter state is stored on the table using the following shape:\n\nYou can use the same filter functions that are available for column filtering\nfor global filtering. See the to learn more about filter functions.\n\nFilter functions can be used/referenced/defined by passing the following to :\n\n  * A that references a built-in filter function\n  * A function directly provided to the option\n\nThe final list of filter functions available for the options use the following\ntype:\n\nFiltering data can often expose additional information about the data that can\nbe used to aid other future operations on the same data. A good example of this\nconcept is a ranking-system like that of that simultaneously ranks, filters and\nsorts data. While utilities like make a lot of sense for single-dimensional\nfilter+sort tasks, the decoupled filtering/sorting architecture of building a\ntable makes them very difficult and slow to use.\n\nTo make a ranking/filtering/sorting system work with tables, s can optionally\nmark results with a value that can be used later to sort/group/etc the data to\nyour liking. This is done by calling the function supplied to your custom .\n\nBelow is an example using our own package (a utility fork of ) to rank, filter,\nand sort the data\n\n```\n\n // Store the ranking info\n\n // Return if the item should be filtered in/out\n\n // Only sort by rank if the column has ranking information\n\n // Provide an alphanumeric fallback for when the item ranks are equal\n\n```\n\n```\n\n // Store the ranking info\n\n // Return if the item should be filtered in/out\n\n // Only sort by rank if the column has ranking information\n\n // Provide an alphanumeric fallback for when the item ranks are equal\n\n```\n\nEnables/disables the filter for this column.\n\nReturns whether or not the column can be filtered. Set to to disable a column\nfrom being scanned during global filtering.\n\nThe column filters meta map for the row. This object tracks any filter meta for\na row as optionally provided during the filtering process.\n\nThis option allows you to define custom filter functions that can be referenced\nin a column's option by their key. Example:\n\n```\n\n   // return the filtered rows\n\n```\n\n```\n\n   // return the filtered rows\n\n```\n\nBy default, filtering is done from parent rows down (so if a parent row is\nfiltered out, all of its children will be filtered out as well). Setting this\noption to will cause filtering to be done from leaf rows up (which means parent\nrows will be included so long as one of their child or grand-child rows is also\nincluded).\n\nBy default, filtering is done for all rows (max depth of 100), no matter if they\nare root level parent rows or the child leaf rows of a parent row. Setting this\noption to will cause filtering to only be applied to the root level parent rows,\nwith all sub-rows remaining unfiltered. Similarly, setting this option to will\ncause filtering to only be applied to child leaf rows 1 level deep, and so on.\n\nThis is useful for situations where you want a row's entire child hierarchy to\nbe visible regardless of the applied filter.\n\nEnables/disables all filters for the table.\n\nDisables the from being used to filter data. This may be useful if your table\nneeds to dynamically support both client-side and server-side filtering.\n\nIf provided, this function is called per table and should return a which will\ncalculate and return the row model for the table when it's filtered.\n\n  * For server-side filtering, this function is unnecessary and can be ignored since the server should already return the filtered row model.\n  * For client-side filtering, this function is required. A default implementation is provided via any table adapter's export.\n\nThe filter function to use for global filtering.\n\n  * A that references a custom filter functions provided via the option\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will need to persist the state\nchange either fully or partially outside of the table.\n\nEnables/disables the global filter for the table.\n\nIf provided, this function will be called with the column and should return or\nto indicate whether this column should be used for global filtering. This is\nuseful if the column can contain data that is not or (i.e. ).\n\nReturns the row model for the table before any filtering has been applied.\n\nReturns the row model for the table after filtering has been applied.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nCurrently, this function returns the built-in filter function. In future\nreleases, it may return more dynamic filter functions based on the nature of the\ndata provided.\n\nReturns the global filter function (either user-defined or automatic, depending\non configuration) for the table.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Start building for free with MongoDB Atlas‚Äîthe fast and secure multi-cloud\ndatabase.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCAAI4Z3JCA7ILK3WC6YIK2JKC67DT2QYF67IT27YCA7IK2JWCA7ICK7EHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/sorting\n\nSorting state is stored on the table using the following shape:\n\nThe following sorting functions are built-in to the table core:\n\n  *     * Sorts by mixed alphanumeric values without case-sensitivity. Slower, but more accurate if your strings contain numbers that need to be naturally sorted.\n  *     * Sorts by mixed alphanumeric values with case-sensitivity. Slower, but more accurate if your strings contain numbers that need to be naturally sorted.\n  *     * Sorts by text/string values without case-sensitivity. Faster, but less accurate if your strings contain numbers that need to be naturally sorted.\n  *     * Sorts by text/string values with case-sensitivity. Faster, but less accurate if your strings contain numbers that need to be naturally sorted.\n  *     * Sorts by time, use this if your values are objects.\n  *     * Sorts using a basic/standard a > b ? 1 : a < b ? -1 : 0 comparison. This is the fastest sorting function, but may not be the most accurate.\n\nEvery sorting function receives 2 rows and a column ID and are expected to\ncompare the two rows using the column ID to return , , or in ascending order.\nHere's a cheat sheet:\n\nThis is the type signature for every sorting function:\n\nSorting functions can be used/referenced/defined by passing the following to :\n\n  * A that references a built-in sorting function\n  * A that references a custom sorting functions provided via the option\n  * A function directly provided to the option\n\nThe final list of sorting functions available for the use the following type:\n\nThe sorting function to use with this column.\n\nSet to for sorting toggles on this column to start in the descending direction.\n\nEnables/Disables sorting for this column.\n\nEnables/Disables multi-sorting for this column.\n\nInverts the order of the sorting for this column. This is useful for values that\nhave an inverted best/worst scale where lower numbers are better, eg. a ranking\n(1st, 2nd, 3rd) or golf-like scoring\n\n  *     * Undefined values will be pushed to the beginning of the list\n  *     * Undefined values will be pushed to the end of the list\n  *     * Undefined values will be considered tied and need to be sorted by the next column filter or original index (whichever applies)\n  *     * Undefined values will be sorted with higher priority (ascending) (if ascending, undefined will appear on the beginning of the list)\n  *     * Undefined values will be sorted with lower priority (descending) (if ascending, undefined will appear on the end of the list)\n\n> NOTE: and options are new in v8.16.0\nReturns a sorting function automatically inferred based on the columns values.\n\nReturns a sort direction automatically inferred based on the columns values.\n\nReturns the resolved sorting function to be used for this column\n\nReturns the next sorting order.\n\nReturns whether this column can be sorted.\n\nReturns whether this column can be multi-sorted.\n\nReturns the index position of this column's sorting within the sorting state\n\nReturns whether this column is sorted.\n\nReturns the first direction that should be used when sorting this column.\n\nRemoves this column from the table's sorting state\n\nToggles this columns sorting state. If is provided, it will force the sort\ndirection to that value. If is provided, it will additivity multi-sort the\ncolumn (or toggle it if it is already sorted).\n\nReturns a function that can be used to toggle this column's sorting state. This\nis useful for attaching a click handler to the column header.\n\nThis option allows you to define custom sorting functions that can be referenced\nin a column's option by their key. Example:\n\n```\n\n```\n\nEnables manual sorting for the table. If this is , you will be expected to sort\nyour data before it is passed to the table. This is useful if you are doing\nserver-side sorting.\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will need to persist the state\nchange either fully or partially outside of the table.\n\nEnables/Disables sorting for the table.\n\nEnables/Disables the ability to remove sorting for the table.\n\n  * If then changing sort order will circle like: 'none' -> 'desc' -> 'asc' -> 'none' -> ...\n  * If then changing sort order will circle like: 'none' -> 'desc' -> 'asc' -> 'desc' -> 'asc' -> ...\n\nEnables/disables the ability to remove multi-sorts\n\nEnables/Disables multi-sorting for the table.\n\nIf , all sorts will default to descending as their first toggle state.\n\nThis function is used to retrieve the sorted row model. If using server-side\nsorting, this function is not required. To use client-side sorting, pass the\nexported from your adapter to your table or implement your own.\n\nSet a maximum number of columns that can be multi-sorted.\n\nPass a custom function that will be used to determine if a multi-sort event\nshould be triggered. It is passed the event from the sort toggle handler and\nshould return if the event should trigger a multi-sort.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nReturns the row model for the table before any sorting has been applied.\n\nReturns the row model for the table after sorting has been applied.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Secure Homebrew and gain visibility into your software supply chain. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCYADVZ3JCA7ILK3LC6YDE53KC67DT2QYF67IT27YCA7IK2JWCA7ICK7NHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/grouping\n\nGrouping state is stored on the table using the following shape:\n\nThe following aggregation functions are built-in to the table core:\n\n  *     * Sums the values of a group of rows\n  *     * Finds the minimum value of a group of rows\n  *     * Finds the maximum value of a group of rows\n  *     * Finds the minimum and maximum values of a group of rows\n  *     * Finds the mean/average value of a group of rows\n  *     * Finds the median value of a group of rows\n  *     * Finds the unique values of a group of rows\n  *     * Finds the number of unique values of a group of rows\n  *     * Calculates the number of rows in a group\n\n  * A function to retrieve the leaf values of the groups rows\n  * A function to retrieve the immediate-child values of the groups rows\n\nand should return a value (usually primitive) to build the aggregated row model.\n\nThis is the type signature for every aggregation function:\n\nAggregation functions can be used/referenced/defined by passing the following to\n:\n\n  * A that references a built-in aggregation function\n  * A that references a custom aggregation functions provided via the option\n  * A function directly provided to the option\n\nThe final list of aggregation functions available for the use the following\ntype:\n\nThe aggregation function to use with this column.\n\n```\n\n```\n\nThe cell to display each row for the column if the cell is an aggregate. If a\nfunction is passed, it will be passed a props object with the context of the\ncell and should return the property type for your adapter (the exact type\ndepends on the adapter being used).\n\nEnables/disables grouping for this column.\n\nSpecify a value to be used for grouping rows on this column. If this option is\nnot specified, the value derived from / will be used instead.\n\nThe resolved aggregation function for the column.\n\nReturns whether or not the column can be grouped.\n\nReturns whether or not the column is currently grouped.\n\nReturns the index of the column in the grouping state.\n\nToggles the grouping state of the column.\n\nReturns a function that toggles the grouping state of the column. This is useful\nfor passing to the prop of a button.\n\nReturns the automatically inferred aggregation function for the column.\n\nReturns the aggregation function for the column.\n\nIf this row is grouped, this is the id of the column that this row is grouped\nby.\n\nIf this row is grouped, this is the unique/shared value for the for all of the\nrows in this group.\n\nReturns whether or not the row is currently grouped.\n\nReturns the grouping value for any row and column (including leaf rows).\n\nThis option allows you to define custom aggregation functions that can be\nreferenced in a column's option by their key. Example:\n\n```\n\n   // return the aggregated value\n\n```\n\n```\n\n   // return the aggregated value\n\n```\n\nEnables manual grouping. If this option is set to , the table will not\nautomatically group rows using and instead will expect you to manually group the\nrows before passing them to the table. This is useful if you are doing server-\nside grouping and aggregation.\n\nIf this function is provided, it will be called when the grouping state changes\nand you will be expected to manage the state yourself. You can pass the managed\nstate back to the table via the option.\n\nEnables/disables grouping for all columns.\n\nReturns the row model after grouping has taken place, but no further.\n\nGrouping columns are automatically reordered by default to the start of the\ncolumns list. If you would rather remove them or leave them as-is, set the\nappropriate mode here.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nReturns the row model for the table before any grouping has been applied.\n\nReturns the row model for the table after grouping has been applied.\n\nReturns whether or not the cell is currently aggregated.\n\nReturns whether or not the cell is currently grouped.\n\nReturns whether or not the cell is currently a placeholder.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Monitor K8s Applications Effortlessly. Get 100% Kubernetes production\nvisibility\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6YI4Z3JCA7ILK3LC67IKKQKC67DT2QYF67IT27YCA7IK2JWCA7IC23IHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/expanding\n\nExpanding state is stored on the table using the following shape:\n\nToggles the expanded state (or sets it if is provided) for the row.\n\nReturns whether the row is expanded.\n\nReturns whether all parent rows of the row are expanded.\n\nReturns whether the row can be expanded.\n\nReturns a function that can be used to toggle the expanded state of the row.\nThis function can be used to bind to an event handler to a button.\n\nEnables manual row expansion. If this is set to , will not be used to expand\nrows and you would be expected to perform the expansion in your own data model.\nThis is useful if you are doing server-side expansion.\n\nThis function is called when the table state changes. If a function is provided,\nyou will be responsible for managing this state on your own. To pass the managed\nstate back to the table, use the option.\n\nEnable this setting to automatically reset the expanded state of the table when\nexpanding state changes.\n\nEnable/disable expanding for all rows.\n\nThis function is responsible for returning the expanded row model. If this\nfunction is not provided, the table will not expand rows. You can use the\ndefault exported function to get the expanded row model or implement your own.\n\nIf provided, allows you to override the default behavior of determining whether\na row is currently expanded.\n\nIf provided, allows you to override the default behavior of determining whether\na row can be expanded.\n\nIf expanded rows will be paginated along with the rest of the table (which means\nexpanded rows may span multiple pages).\n\nIf expanded rows will not be considered for pagination (which means expanded\nrows will always render on their parents page. This also means more rows will be\nrendered than the set page size)\n\nUpdates the expanded state of the table via an update function or value\n\nToggles the expanded state for all rows. Optionally, provide a value to set the\nexpanded state to.\n\nReset the expanded state of the table to the initial state. If is provided, the\nexpanded state will be reset to\n\nReturns whether there are any rows that can be expanded.\n\nReturns a handler that can be used to toggle the expanded state of all rows.\nThis handler is meant to be used with an element.\n\nReturns whether there are any rows that are currently expanded.\n\nReturns whether all rows are currently expanded.\n\nReturns the maximum depth of the expanded rows.\n\nReturns the row model after expansion has been applied.\n\nReturns the row model before expansion has been applied.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2QKC67DT2QYF67IT27YCA7IK2JWCA7ICKQUHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/pagination\n\nPagination state is stored on the table using the following shape:\n\nEnables manual pagination. If this option is set to , the table will not\nautomatically paginate rows using and instead will expect you to manually\npaginate the rows before passing them to the table. This is useful if you are\ndoing server-side pagination and aggregation.\n\nWhen manually controlling pagination, you can supply a total value to the table\nif you know it. If you do not know how many pages there are, you can set this to\n. Alternatively, you can provide a value and the table will calculate the\ninternally.\n\nWhen manually controlling pagination, you can supply a total value to the table\nif you know it. will be calculated internally from and .\n\nIf set to , pagination will be reset to the first page when page-altering state\nchanges eg. is updated, filters change, grouping changes, etc.\n\n> üß† Note: This option defaults to if is set to\nIf this function is provided, it will be called when the pagination state\nchanges and you will be expected to manage the state yourself. You can pass the\nmanaged state back to the table via the option.\n\nReturns the row model after pagination has taken place, but no further.\n\nPagination columns are automatically reordered by default to the start of the\ncolumns list. If you would rather remove them or leave them as-is, set the\nappropriate mode here.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nUpdates the page index using the provided function or value.\n\nResets the page index to its initial state. If is , the page index will be reset\nto regardless of initial state.\n\nUpdates the page size using the provided function or value.\n\nResets the page size to its initial state. If is , the page size will be reset\nto regardless of initial state.\n\nReturns an array of page options (zero-index-based) for the current page size.\n\nReturns whether the table can go to the previous page.\n\nReturns whether the table can go to the next page.\n\nDecrements the page index by one, if possible.\n\nIncrements the page index by one, if possible.\n\nSets the page index to .\n\nSets the page index to the last available page.\n\nReturns the page count. If manually paginating or controlling the pagination\nstate, this will come directly from the table option, otherwise it will be\ncalculated from the table data using the total row count and current page size.\n\nReturns the row model for the table before any pagination has been applied.\n\nReturns the row model for the table after pagination has been applied.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Bryntum Gantt: Flexible and powerful JS Gantt charts for smarter project\nplanning.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF67DEZ3JCA7ILK3LC6BITK7KC67DT2QYF67IT27YCA7IK2JWCA7ICKJIHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/row-pinning\n\nThe ability for a row to be is determined by the following:\n\nPinning state is stored on the table using the following shape:\n\nEnables/disables row pinning for all rows in the table.\n\nWhen , pinned rows will not be visible if they are filtered or paginated out of\nthe table. When , pinned rows will always be visible regardless of filtering or\npagination. Defaults to .\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will also need to supply from your\nown managed state.\n\nResets the state to , or can be passed to force a default blank state reset to .\n\nReturns whether or not any rows are pinned. Optionally specify to only check for\npinned rows in either the or position.\n\nReturns all top pinned rows.\n\nReturns all bottom pinned rows.\n\nReturns all rows that are not pinned to the top or bottom.\n\nPins a row to the or , or unpins the row to the center if is passed.\n\nReturns whether or not the row can be pinned.\n\nReturns the pinned position of the row. (, or )\n\nReturns the numeric pinned index of the row within a pinned row group.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3LFTSIKZ3JCA7ILK3LCVYIK27KC67DT2QYF67IT27YCA7IK2JWCA7I65QNHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/api/features/row-selection\n\nRow selection state is stored on the table using the following shape:\n\nBy default, the row selection state uses the index of each row as the row\nidentifiers. Row selection state can instead be tracked with a custom unique row\nid by passing in a custom function to the the table.\n\n  * Enables/disables row selection for all rows in the table OR\n  * A function that given a row, returns whether to enable/disable row selection for that row\n\n  * Enables/disables multiple row selection for all rows in the table OR\n  * A function that given a row, returns whether to enable/disable multiple row selection for that row's children/grandchildren\n\nEnables/disables automatic sub-row selection when a parent row is selected, or a\nfunction that enables/disables automatic sub-row selection for each row.\n\n(Use in combination with expanding or grouping features)\n\nIf provided, this function will be called with an when changes. This overrides\nthe default internal state management, so you will need to persist the state\nchange either fully or partially outside of the table.\n\nReturns a handler that can be used to toggle all rows in the table.\n\nReturns a handler that can be used to toggle all rows on the current page.\n\nResets the state to the , or can be passed to force a default blank state reset\nto .\n\nReturns whether or not all rows in the table are selected.\n\nReturns whether or not all rows on the current page are selected.\n\nReturns whether or not any rows in the table are selected.\n\nNOTE: Returns if all rows are selected.\n\nReturns whether or not any rows on the current page are selected.\n\nSelects/deselects all rows in the table.\n\nSelects/deselects all rows on the current page.\n\nReturns whether or not the row is selected.\n\nReturns whether or not some of the row's sub rows are selected.\n\nReturns whether or not all of the row's sub rows are selected.\n\nReturns whether or not the row can be selected.\n\nReturns whether or not the row can multi-select.\n\nReturns whether or not the row can select sub rows automatically when the parent\nrow is selected.\n\nReturns a handler that can be used to toggle the row.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Simplify infrastructure with MongoDB Atlas, the leading developer data\nplatform.\n](https://tanstack.com/table/v8/docs/api/features/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCAAI4Z3JCA7ILK3WC6BIKK7KC67DT2QYF67IT27YCA7IK2JWCA7ICK3EHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/enterprise/ag-grid\n\n# AG Grid - An alternative enterprise data-grid solution\n\nWhile we clearly love TanStack Table, we acknowledge that it is not a\n\"batteries\" included product packed with customer support and enterprise polish.\nWe realize that some of our users may need this though! To help out here, we\nwant to introduce you to AG Grid, an enterprise-grade data grid solution that\ncan supercharge your applications with its extensive feature set and robust\nperformance. While TanStack Table is also a powerful option for implementing\ndata grids, we believe in providing our users with a diverse range of choices\nthat best fit their specific requirements. AG Grid is one such choice, and we're\nexcited to highlight its capabilities for you.\n\nHere are some good reasons to consider AG Grid for your next project:\n\nAG Grid offers an extensive set of features, making it a versatile and powerful\ndata grid solution. With AG Grid, you get access to a wide range of\nfunctionalities that cater to the needs of complex enterprise applications. From\nadvanced sorting, filtering, and grouping capabilities to column pinning, multi-\nlevel headers, and tree data structure support, AG Grid provides you with the\ntools to create dynamic and interactive data grids that meet your application's\nunique demands.\n\nWhen it comes to handling large datasets and achieving exceptional performance,\nAG Grid delivers outstanding results. It employs highly optimized rendering\ntechniques, efficient data updates, and virtualization to ensure smooth\nscrolling and fast response times, even when dealing with thousands or millions\nof rows of data. AG Grid's performance optimizations make it an excellent choice\nfor applications that require high-speed data manipulation and visualization.\n\nAG Grid is designed to be highly customizable and extensible, allowing you to\ntailor the grid to your specific needs. It provides a rich set of APIs and\nevents that enable you to integrate custom functionality seamlessly. You can\ndefine custom cell renderers, editors, filters, and aggregators to enhance the\ngrid's behavior and appearance. AG Grid also supports a variety of themes,\nallowing you to match the grid's visual style to your application's design.\n\nAs an enterprise-focused solution, AG Grid caters to the requirements of complex\nbusiness applications. It offers enterprise-specific features such as row\ngrouping, column pinning, server-side row model, master/detail grids, and rich\nediting capabilities. AG Grid also integrates well with other enterprise\nframeworks and libraries, making it a reliable choice for large-scale projects.\n\n### [Active Development and Community\nSupport](https://tanstack.com/table/v8/docs/enterprise/<#active-development-and-\ncommunity-support>)\n\nAG Grid benefits from active development and a thriving community of developers.\nThe team behind AG Grid consistently introduces new features and enhancements,\nensuring that the product evolves to meet the changing needs of the industry.\nThe community support is robust, with forums, documentation, and examples\nreadily available to assist you in utilizing the full potential of AG Grid.\n\nWhile TanStack Table remains a powerful and flexible option for implementing\ndata grids, we understand that different projects have different requirements.\nAG Grid offers a compelling enterprise-grade solution that may be particularly\nsuited to your needs. Its comprehensive feature set, high performance,\ncustomization options, and focus on enterprise requirements make AG Grid an\nexcellent choice for projects that demand a robust and scalable data grid\nsolution.\n\nWe encourage you to explore AG Grid further by visiting their website and trying\nout their demo. Remember that both TanStack Table and AG Grid have their unique\nstrengths and considerations. We believe in providing options to our users,\nempowering you to make informed decisions and choose the best fit for your\nspecific use case.\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/v8/docs/enterprise/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC5QKC67DT2QYF67IT27YCA7IK2JWCA7ICK3NHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/basic\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Secure Homebrew and gain visibility into your software supply chain. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCYADVZ3JCA7ILK3LC6YDE53KC67DT2QYF67IT27YCA7IK2JWCA7ICK37HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/column-groups\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCW7ICZ3JCA7ILK3LCTSDLK7KC67DT2QYF67IT27YCA7IK2JWCA7ICKQJHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/filters\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC27KC67DT2QYF67IT27YCA7IK2JWCA7I653LHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/filters-faceted\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3LFTSIKZ3JCA7ILK3LCVYIK53KC67DT2QYF67IT27YCA7IK2JWCA7I653MHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/filters-fuzzy\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2JKC67DT2QYF67IT27YCA7IK2JWCA7I653YHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/column-ordering\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKQKC67DT2QYF67IT27YCA7IK2JWCA7I65QJHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/column-dnd\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Start building for free with MongoDB Atlas‚Äîthe fast and secure multi-cloud\ndatabase.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCAAI4Z3JCA7ILK3WC6YIK2JKC67DT2QYF67IT27YCA7IK2JWCA7I65QWHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/column-pinning\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCW7ICZ3JCA7ILK3LCTSDLK7KC67DT2QYF67IT27YCA7IK2JWCA7I62JWHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/column-pinning-sticky\n\n# React Example: Column Pinning Sticky\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCW7ICZ3JCA7ILK3LCTSDLK7KC67DT2QYF67IT27YCA7IK2JWCA7I62JUHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/column-sizing\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/column-resizing-performant\n\n# React Example: Column Resizing Performant\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVK3KC67DT2QYF67IT27YCA7IK2JWCA7I627IHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/column-visibility\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2QKC67DT2QYF67IT27YCA7IK2JWCA7I627NHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/editable-data\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDV23KC67DT2QYF67IT27YCA7IK2JWCA7I6277HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/expanding\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7I62QEHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/sub-components\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/fully-controlled\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2QKC67DT2QYF67IT27YCA7IK2JWCA7I62QMHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/grouping\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC5QKC67DT2QYF67IT27YCA7IK2JWCA7I62QYHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/pagination\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7I62JJHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/pagination-controlled\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Build Better Apps, Faster. Start coding FREE. No CC required\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NFT7DCZ3JCA7ILK3LC67DK53KC67DT2QYF67IT27YCA7IK2JWCA7I6K7LHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/row-dnd\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3LFTSIKZ3JCA7ILK3LCVYIK27KC67DT2QYF67IT27YCA7IK2JWCA7I6K7MHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/row-pinning\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2JKC67DT2QYF67IT27YCA7IK2JWCA7I6K7YHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/row-selection\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2JKC67DT2QYF67IT27YCA7IK2JWCA7I623JHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/sorting\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Most Powerful JS Charting Library to Visualize 10M+ Data Points in Real-Time.\nGet Free Trial Now.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCY7DPZ3JCA7ILK3LCTSIP27KC67DT2QYF67IT27YCA7IK2JWCA7I623WHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/virtualized-columns\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3LFTSIKZ3JCA7ILK3LCVYIK53KC67DT2QYF67IT27YCA7IK2JWCA7I623NHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/virtualized-columns-experimental\n\n# React Example: Virtualized Columns Experimental\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC5QKC67DT2QYF67IT27YCA7IK2JWCA7I6KQUHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/virtualized-rows\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC27KC67DT2QYF67IT27YCA7IK2JWCA7I6KJEHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/virtualized-rows-experimental\n\n# React Example: Virtualized Rows Experimental\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC27KC67DT2QYF67IT27YCA7IK2JWCA7I6KJIHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/virtualized-infinite-scrolling\n\n# React Example: Virtualized Infinite Scrolling\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Access. Query. Build. All with one API. MongoDB Atlas.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCAAI4Z3JCA7ILK3WC6YIK2QKC67DT2QYF67IT27YCA7IK2JWCA7I6KJNHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/kitchen-sink\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2QKC67DT2QYF67IT27YCA7IK2JWCA7I6KJ7HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/bootstrap\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC27KC67DT2QYF67IT27YCA7IK2JWCA7I6K3EHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/material-ui-pagination\n\n# React Example: Material Ui Pagination\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKQKC67DT2QYF67IT27YCA7IK2JWCA7I6K3IHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/full-width-table\n\n# React Example: Full Width Table\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2JKC67DT2QYF67IT27YCA7IK2JWCA7I6K3NHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/full-width-resizable-table\n\n# React Example: Full Width Resizable Table\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE2QKC67DT2QYF67IT27YCA7IK2JWCA7I6K3YHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/custom-features\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7I6KQJHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/table/v8/docs/framework/react/examples/query-router-search-params\n\n# React Example: Query Router Search Params\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/table/v8/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC27KC67DT2QYF67IT27YCA7IK2JWCA7I6KQWHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\nYour weekly dose of JavaScript news. Delivered every Monday to over 100,000\ndevs, for free.\n\n---\n\n# At (the \"Site\"), your privacy is important to us. This Privacy Policy explains\nURL: https://tanstack.com/privacy\n\nAt (the \"Site\"), your privacy is important to us. This Privacy Policy explains\nhow we collect, use, and protect your information when you access or use our\nwebsite, products, and services. By using the Site, you agree to the practices\ndescribed in this Privacy Policy. If you do not agree, please do not use the\nSite.\n\nWe collect information to provide and improve our services. The types of\ninformation we may collect include:\n\n  * Includes your name, email address, phone number, or other information you provide when you register for an account or interact with the Site.\n  * Information about how you access and use the Site, including your IP address, browser type, pages visited, and other diagnostic data.\n  * See the \"Cookies and Tracking\" section below for more details.\n\n## 2. How We Use Your Information\n\nWe use the information we collect for the following purposes:\n\n  * To provide, operate, and maintain the Site and our services.\n  * To improve the user experience and optimize performance.\n  * To communicate with you, including responding to inquiries and sending updates.\n  * To comply with legal obligations or enforce our Terms of Service.\n  * To prevent fraudulent, harmful, or unauthorized activities.\n\nThe Site uses cookies and similar tracking technologies to analyze trends, track\nuser behavior, and gather demographic information. Cookies are small files\nstored on your device.\n\n  * Most browsers allow you to block or delete cookies through settings.\n  * Disabling cookies may affect the functionality of the Site.\n\n## 4. How We Share Your Information\n\nWe do not sell or rent your personal information. However, we may share\ninformation in the following circumstances:\n\n  * With third parties who help us operate the Site, such as hosting or analytics providers.\n  * If required by law or to respond to legal requests.\n  * In connection with a merger, acquisition, or sale of assets.\n\nWe take reasonable measures to protect your information from unauthorized\naccess, use, or disclosure. However, no security measures are completely\nfoolproof, and we cannot guarantee the absolute security of your data.\n\nDepending on your location, you may have the following rights regarding your\npersonal information:\n\n  * Request access to the personal information we hold about you.\n  * Request correction of inaccurate or incomplete data.\n  * Request deletion of your personal information.\n  * Receive a copy of your data in a structured, machine-readable format.\n\nTo exercise these rights, contact us at .\n\nThe Site may contain links to third-party services or websites. We are not\nresponsible for the privacy practices of those third parties. Please review\ntheir privacy policies for more information.\n\nThe Site is not intended for children under the age of 13, and we do not\nknowingly collect personal information from children. If we learn that we have\ncollected information from a child, we will delete it promptly.\n\n## 9. Changes to This Privacy Policy\n\nWe may update this Privacy Policy from time to time. Any changes will be posted\non this page with an updated \"Effective Date.\" Your continued use of the Site\nafter changes are posted constitutes acceptance of the revised Privacy Policy.\n\nIf you have questions about this Privacy Policy or how we handle your\ninformation, please contact us:\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# Welcome to (the \"Site\"). These Terms of Service (\"Terms\") govern your use of our\nURL: https://tanstack.com/terms\n\nWelcome to (the \"Site\"). These Terms of Service (\"Terms\") govern your use of our\nwebsite, products, services, and any content made available on or through the\nSite. By accessing or using TanStack.com, you agree to these Terms. If you do\nnot agree, you must not use the Site.\n\nBy accessing, browsing, or using TanStack.com, you acknowledge that you have\nread, understood, and agree to be bound by these Terms and our Privacy Policy.\n\nWe may modify these Terms at any time without prior notice. Changes will be\neffective upon posting to the Site. Your continued use of TanStack.com after\nchanges are posted constitutes acceptance of the revised Terms.\n\nAnyone can use the Site. By using the Site, you agree to comply with these\nTerms.\n\n## 4. Use of the Site\n\nYou agree to use the Site only for lawful purposes and in accordance with these\nTerms. Specifically, you agree not to:\n\n  * Violate any applicable laws or regulations.\n  * Engage in unauthorized access or use of TanStack's systems or servers.\n  * Upload or transmit viruses, malware, or harmful code.\n  * Reverse engineer, decompile, or attempt to derive source code from the Site.\n\n  * Some features of the Site may require you to register for an account. You must provide accurate, complete, and current information.\n  * You are responsible for maintaining the confidentiality of your account credentials and for all activities under your account.\n  * Notify us immediately of any unauthorized use of your account or security breach.\n\nAll content, features, and functionality on the Site‚Äîincluding software, code,\ntext, images, videos, and trademarks‚Äîare owned by TanStack or its licensors and\nare protected by applicable intellectual property laws.\n\n  * Reproduce, modify, distribute, or publicly display content from the Site without prior written permission.\n  * Use any of our trademarks without prior written consent.\n\nIf you submit or post any content (e.g., feedback, comments, or code\ncontributions), you grant TanStack a non-exclusive, worldwide, royalty-free\nlicense to use, reproduce, and display such content.\n\n**You represent and warrant that:**\n\n  * You own or have the necessary rights to post the content.\n  * Your content does not violate any third-party rights or applicable laws.\n\nThe site and its content are provided \"as is\" and \"as available\" without any\nwarranties of any kind, whether express or implied. TanStack disclaims all\nwarranties, including implied warranties of merchantability, fitness for a\nparticular purpose, and non-infringement.\n\nTo the maximum extent permitted by law, TanStack shall not be liable for any\nindirect, incidental, special, consequential, or punitive damages arising from\nyour use of the Site or Services.\n\nThe Site may contain links to third-party websites. We are not responsible for\nthe content or practices of any linked third-party sites. Such links do not\nimply endorsement.\n\nWe reserve the right to terminate or suspend your access to the Site, without\nprior notice or liability, for any reason, including breach of these Terms.\n\nThese Terms shall be governed by and construed in accordance with the laws of\nUtah, without regard to its conflict of law provisions.\n\nAny dispute arising from these Terms shall be resolved through binding\narbitration in accordance with the Standard Arbitration Rules for Utah. The\narbitration shall take place in Utah.\n\nIf any provision of these Terms is found to be unenforceable or invalid, that\nprovision shall be limited or eliminated to the minimum extent necessary while\npreserving the remaining provisions.\n\nThese Terms constitute the entire agreement between you and TanStack regarding\nthe use of the Site, superseding any prior agreements.\n\nIf you have questions about these Terms, please contact us at:\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# Powerful for TS/JS, React, Solid, Vue, Svelte and Angular\nURL: https://tanstack.com/query\n\n## Powerful for TS/JS, React, Solid, Vue, Svelte and Angular\n\nToss out that granular state management, manual refetching and endless bowls of\nasync-spaghetti code. TanStack Query gives you declarative, always-up-to-date\nauto-managed queries and mutations that **directly improve both your developer\nand user experiences**.\n\n(or check out our official course üëá)\n\nWriting your data fetching logic by hand is over. Tell TanStack Query where to\nget your data and how fresh you need it to be and the rest is automatic. It\nhandles caching, background updates and stale data out of the box with zero-\nconfiguration.\n\nIf you know how to work with promises or async/await, then you already know how\nto use TanStack Query. There's no global state to manage, reducers,\nnormalization systems or heavy configurations to understand. Simply pass a\nfunction that resolves your data (or throws an error) and the rest is history.\n\nTanStack Query is configurable down to each observer instance of a query with\nknobs and options to fit every use-case. It comes wired up with dedicated\ndevtools, infinite-loading APIs, and first class mutation tools that make\nupdating your data a breeze. Don't worry though, everything is pre-configured\nfor success!\n\n### No dependencies. All the Features.\n\nWith zero dependencies, TanStack Query is extremely lean given the dense feature\nset it provides. From weekend hobbies all the way to enterprise e-commerce\nsystems (Yes, I'm lookin' at you Walmart! üòâ), TanStack Query is the battle-\nhardened tool to help you succeed at the speed of your creativity.\n\n[Speakeasy and TanStack are working together to make . With Speakeasy's and\nTanStack's robust front-end tooling, developers can move faster than ever.\nWhether you're integrating APIs or streamlining your developer experience, this\npartnership ensures you're covered from server to client with **powerful, type-\nsafe, and optimized\nsolutions**.](https://tanstack.com/<https:/speakeasy.com/?utm_source=tanstack&utm_campaign=tanstack>)\n\n[ Legacy vendor lock-in, out. A truly cloud-native APM, in.\n](https://tanstack.com/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JWF6BDCZ3JCA7IE2JMCTBICK3KC67DT2QYF67IT27YCA7IK2JWCAYI62J7HEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\n### Less code, fewer edge cases.\n\nInstead of writing reducers, caching logic, timers, retry logic, complex\nasync/await scripting (I could keep going...), you literally write a tiny\nfraction of the code you normally would. You will be surprised at how little\ncode you're writing or how much code you're deleting when you use TanStack\nQuery. Try it out with one of the examples below!\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank Tracker](https://tanstack.com/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nTanStack Query (FKA React Query) is often described as the missing data-fetching\nlibrary for web applications, but in more technical terms, it makes **fetching,\ncaching, synchronizing and updating server state** in your web applications a\nbreeze.\n\nMost core web frameworks come with an opinionated way of fetching or updating\ndata in a holistic way. Because of this developers end up building either meta-\nframeworks which encapsulate strict opinions about data-fetching, or they invent\ntheir own ways of fetching data. This usually means cobbling together component-\nbased state and side-effects, or using more general purpose state management\nlibraries to store and provide asynchronous data throughout their apps.\n\nWhile most traditional state management libraries are great for working with\nclient state, they are **not so great at working with async or server state**.\nThis is because **server state is totally different**. For starters, server\nstate:\n\n  * Is persisted remotely in a location you may not control or own\n  * Requires asynchronous APIs for fetching and updating\n  * Implies shared ownership and can be changed by other people without your knowledge\n  * Can potentially become \"out of date\" in your applications if you're not careful\n\nOnce you grasp the nature of server state in your application, **even more\nchallenges will arise** as you go, for example:\n\n  * Caching... (possibly the hardest thing to do in programming)\n  * Deduping multiple requests for the same data into a single request\n  * Updating \"out of date\" data in the background\n  * Knowing when data is \"out of date\"\n  * Reflecting updates to data as quickly as possible\n  * Performance optimizations like pagination and lazy loading data\n  * Managing memory and garbage collection of server state\n  * Memoizing query results with structural sharing\n\nIf you're not overwhelmed by that list, then that must mean that you've probably\nsolved all of your server state problems already and deserve an award. However,\nif you are like a vast majority of people, you either have yet to tackle all or\nmost of these challenges and we're only scratching the surface!\n\nReact Query is hands down one of the libraries for managing server state. It\nworks amazingly well **out-of-the-box, with zero-config, and can be customized**\nto your liking as your application grows.\n\nReact Query allows you to defeat and overcome the tricky challenges and hurdles\nof and control your app data before it starts to control you.\n\nOn a more technical note, React Query will likely:\n\n  * Help you remove lines of complicated and misunderstood code from your application and replace with just a handful of lines of React Query logic.\n  * Make your application more maintainable and easier to build new features without worrying about wiring up new server state data sources\n  * Have a direct impact on your end-users by making your application feel faster and more responsive than ever before.\n  * Potentially help you save on bandwidth and increase memory performance\n\n## [Enough talk, show me some code\nalready!](https://tanstack.com/query/latest/<#enough-talk-show-me-some-code-\nalready>)\n\nIn the example below, you can see React Query in its most basic and simple form\nbeing used to fetch the GitHub stats for the React Query GitHub project itself:\n\n```\n\n 'An error has occurred: '\n\n```\n\n## [You talked me into it, so what\nnow?](https://tanstack.com/query/latest/<#you-talked-me-into-it-so-what-now>)\n\n  * Consider taking the official (or buying it for your whole team!)\n  * Learn React Query at your own pace with our amazingly thorough and \n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/<https:/query.gg?s=tanstack>)\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/query/latest/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCYADVZ3JCA7ILK3LC6YDE5QKC67DT2QYF67IT27YCA7IK2JWCA7I453YHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/<https:/query.gg?s=tanstack>)\n\n---\n\n# Powerful for TS/JS, React, Solid, Vue, Svelte and Angular\nURL: https://tanstack.com/query/latest\n\n## Powerful for TS/JS, React, Solid, Vue, Svelte and Angular\n\nToss out that granular state management, manual refetching and endless bowls of\nasync-spaghetti code. TanStack Query gives you declarative, always-up-to-date\nauto-managed queries and mutations that **directly improve both your developer\nand user experiences**.\n\n(or check out our official course üëá)\n\nWriting your data fetching logic by hand is over. Tell TanStack Query where to\nget your data and how fresh you need it to be and the rest is automatic. It\nhandles caching, background updates and stale data out of the box with zero-\nconfiguration.\n\nIf you know how to work with promises or async/await, then you already know how\nto use TanStack Query. There's no global state to manage, reducers,\nnormalization systems or heavy configurations to understand. Simply pass a\nfunction that resolves your data (or throws an error) and the rest is history.\n\nTanStack Query is configurable down to each observer instance of a query with\nknobs and options to fit every use-case. It comes wired up with dedicated\ndevtools, infinite-loading APIs, and first class mutation tools that make\nupdating your data a breeze. Don't worry though, everything is pre-configured\nfor success!\n\n### No dependencies. All the Features.\n\nWith zero dependencies, TanStack Query is extremely lean given the dense feature\nset it provides. From weekend hobbies all the way to enterprise e-commerce\nsystems (Yes, I'm lookin' at you Walmart! üòâ), TanStack Query is the battle-\nhardened tool to help you succeed at the speed of your creativity.\n\n[Speakeasy and TanStack are working together to make . With Speakeasy's and\nTanStack's robust front-end tooling, developers can move faster than ever.\nWhether you're integrating APIs or streamlining your developer experience, this\npartnership ensures you're covered from server to client with **powerful, type-\nsafe, and optimized\nsolutions**.](https://tanstack.com/query/<https:/speakeasy.com/?utm_source=tanstack&utm_campaign=tanstack>)\n\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/query/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI52QKC67DT2QYF67IT27YCA7IK2JWCYAIL2QWHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps us be happy about our invested time and not burn out and rage-quit\nOSS. Yay money! üòâ\n\n### Less code, fewer edge cases.\n\nInstead of writing reducers, caching logic, timers, retry logic, complex\nasync/await scripting (I could keep going...), you literally write a tiny\nfraction of the code you normally would. You will be surprised at how little\ncode you're writing or how much code you're deleting when you use TanStack\nQuery. Try it out with one of the examples below!\n\nWow, you've come a long way!\n\nOnly one thing left to do...\n\n[Nozzle.io - Keyword Rank\nTracker](https://tanstack.com/query/<https:/nozzle.io>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/overview\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nTanStack Query (FKA React Query) is often described as the missing data-fetching\nlibrary for web applications, but in more technical terms, it makes **fetching,\ncaching, synchronizing and updating server state** in your web applications a\nbreeze.\n\nMost core web frameworks come with an opinionated way of fetching or updating\ndata in a holistic way. Because of this developers end up building either meta-\nframeworks which encapsulate strict opinions about data-fetching, or they invent\ntheir own ways of fetching data. This usually means cobbling together component-\nbased state and side-effects, or using more general purpose state management\nlibraries to store and provide asynchronous data throughout their apps.\n\nWhile most traditional state management libraries are great for working with\nclient state, they are **not so great at working with async or server state**.\nThis is because **server state is totally different**. For starters, server\nstate:\n\n  * Is persisted remotely in a location you may not control or own\n  * Requires asynchronous APIs for fetching and updating\n  * Implies shared ownership and can be changed by other people without your knowledge\n  * Can potentially become \"out of date\" in your applications if you're not careful\n\nOnce you grasp the nature of server state in your application, **even more\nchallenges will arise** as you go, for example:\n\n  * Caching... (possibly the hardest thing to do in programming)\n  * Deduping multiple requests for the same data into a single request\n  * Updating \"out of date\" data in the background\n  * Knowing when data is \"out of date\"\n  * Reflecting updates to data as quickly as possible\n  * Performance optimizations like pagination and lazy loading data\n  * Managing memory and garbage collection of server state\n  * Memoizing query results with structural sharing\n\nIf you're not overwhelmed by that list, then that must mean that you've probably\nsolved all of your server state problems already and deserve an award. However,\nif you are like a vast majority of people, you either have yet to tackle all or\nmost of these challenges and we're only scratching the surface!\n\nReact Query is hands down one of the libraries for managing server state. It\nworks amazingly well **out-of-the-box, with zero-config, and can be customized**\nto your liking as your application grows.\n\nReact Query allows you to defeat and overcome the tricky challenges and hurdles\nof and control your app data before it starts to control you.\n\nOn a more technical note, React Query will likely:\n\n  * Help you remove lines of complicated and misunderstood code from your application and replace with just a handful of lines of React Query logic.\n  * Make your application more maintainable and easier to build new features without worrying about wiring up new server state data sources\n  * Have a direct impact on your end-users by making your application feel faster and more responsive than ever before.\n  * Potentially help you save on bandwidth and increase memory performance\n\n## [Enough talk, show me some code\nalready!](https://tanstack.com/query/latest/docs/framework/react/<#enough-talk-\nshow-me-some-code-already>)\n\nIn the example below, you can see React Query in its most basic and simple form\nbeing used to fetch the GitHub stats for the React Query GitHub project itself:\n\n```\n\n 'An error has occurred: '\n\n```\n\n## [You talked me into it, so what\nnow?](https://tanstack.com/query/latest/docs/framework/react/<#you-talked-me-\ninto-it-so-what-now>)\n\n  * Consider taking the official (or buying it for your whole team!)\n  * Learn React Query at your own pace with our amazingly thorough and \n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n[ Expand your abilities and master the server with the Frontend Masters\nFullstack Path. Start now!\n](https://tanstack.com/query/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JWCWSI4Z3JCA7IE2JWF6SI623KC67DT2QYF67IT27YCA7IK2JWCAYI653EHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/installation\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nYou can install React Query via , or a good ol' via .\n\nReact Query is compatible with React v18+ and works with ReactDOM and React\nNative.\n\n> Wanna give it a spin before you download? Try out the or examples!\nIf you're not using a module bundler or package manager, you can also use this\nlibrary via an ESM-compatible CDN such as . Simply add a tag to the bottom of\nyour HTML file:\n\n> You can find instructions on how to use React without JSX .\nReact Query is optimized for modern browsers. It is compatible with the\nfollowing browsers config\n\n```\n\n```\n\n```\n\n```\n\n> Depending on your environment, you might need to add polyfills. If you want to\n> support older browsers, you need to transpile the library from yourselves.\nIt is recommended to also use our to help you catch bugs and inconsistencies\nwhile you code. You can install it via:\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/query/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD527LCKSITZ3JCA7IE2JYCTADT2JKC67DT2QYF67IT27YCA7IK2JWCYAIL2JEHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/quick-start\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThis code snippet very briefly illustrates the 3 core concepts of React Query:\n\nIf you're looking for a fully functioning example, please have a look at our\n\n```\n\n  // Provide the client to your App\n\n```\n\n```\n\n  // Provide the client to your App\n\n```\n\nThese three concepts make up most of the core functionality of React Query. The\nnext sections of the documentation will go over each of these core concepts in\ngreat detail.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/query/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD527LCKSITZ3JCA7IE2JYCTADT27KC67DT2QYF67IT27YCA7IK2JWCYAIL2JIHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/devtools\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nWave your hands in the air and shout hooray because React Query comes with\ndedicated devtools! ü•≥\n\nWhen you begin your React Query journey, you'll want these devtools by your\nside. They help visualize all the inner workings of React Query and will likely\nsave you hours of debugging if you find yourself in a pinch!\n\n> Please note that for now, the devtools **do not support React Native**. If you\n> would like to help us make the devtools platform-agnostic, please let us know!\n> Exciting News: We now have a separate package for React Native React Query\n> DevTools! This new addition brings native support, allowing you to integrate\n> DevTools directly into your React Native projects. Check it out and contribute\n> here:\n> An external tool is also available that enables the use of React Query\n> DevTools via an external dashboard. Find out more and contribute on\n> Note that since version 5, the dev tools support observing mutations as well.\n## [Install and Import the\nDevtools](https://tanstack.com/query/latest/docs/framework/react/<#install-and-\nimport-the-devtools>)\n\nThe devtools are a separate package that you need to install:\n\nFor Next 13+ App Dir you must install it as a dev dependency for it to work.\n\nYou can import the devtools like this:\n\nBy default, React Query Devtools are only included in bundles when , so you\ndon't need to worry about excluding them during a production build.\n\nFloating Mode will mount the devtools as a fixed, floating element in your app\nand provide a toggle in the corner of the screen to show and hide the devtools.\nThis toggle state will be stored and remembered in localStorage across reloads.\n\nPlace the following code as high in your React app as you can. The closer it is\nto the root of the page, the better it will work!\n\n```\n\n/* The rest of your application */\n\n```\n\n```\n\n/* The rest of your application */\n\n```\n\n  *     * Set this if you want the dev tools to default to being open\n  * buttonPosition?: \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\" | \"relative\"\n    * The position of the React Query logo to open and close the devtools panel\n    * If , the button is placed in the location that you render the devtools.\n  * position?: \"top\" | \"bottom\" | \"left\" | \"right\"\n    * The position of the React Query devtools panel\n  * ,\n    * Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.\n  * errorTypes?: { name: string; initializer: (query: Query) => TError}[]\n    * Use this to predefine some errors that can be triggered on your queries. Initializer will be called (with the specific query) when that error is toggled on from the UI. It must return an Error.\n  *     * Use this to pass a nonce to the style tag that is added to the document head. This is useful if you are using a Content Security Policy (CSP) nonce to allow inline styles.\n  *     * Default behavior will apply the devtool's styles to the head tag within the DOM.\n    * Use this to pass a shadow DOM target to the devtools so that the styles will be applied within the shadow DOM instead of within the head tag in the light DOM.\n\nEmbedded mode will show the development tools as a fixed element in your\napplication, so you can use our panel in your own development tools.\n\nPlace the following code as high in your React app as you can. The closer it is\nto the root of the page, the better it will work!\n\n```\n\n/* The rest of your application */\n\n```\n\n```\n\n/* The rest of your application */\n\n```\n\n  *     * Custom styles for the devtools panel\n    * Example: { height: '100%', width: '100%' }\n  *     * Callback function that is called when the devtools panel is closed\n  * ,\n    * Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.\n  * errorTypes?: { name: string; initializer: (query: Query) => TError}[]\n    * Use this to predefine some errors that can be triggered on your queries. Initializer will be called (with the specific query) when that error is toggled on from the UI. It must return an Error.\n  *     * Use this to pass a nonce to the style tag that is added to the document head. This is useful if you are using a Content Security Policy (CSP) nonce to allow inline styles.\n  *     * Default behavior will apply the devtool's styles to the head tag within the DOM.\n    * Use this to pass a shadow DOM target to the devtools so that the styles will be applied within the shadow DOM instead of within the head tag in the light DOM.\n\nDevtools are excluded in production builds. However, it might be desirable to\nlazy load the devtools in production:\n\n```\n\n```\n\nWith this, calling will download the devtools bundle and show them.\n\nIf your bundler supports package exports, you can use the following import path:\n\nFor TypeScript, you would need to set in your tsconfig, which requires at least\nTypeScript v4.7.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/query/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD527LCKSITZ3JCA7IE2JYCTADT27KC67DT2QYF67IT27YCA7IK2JWCYAIL2JNHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/videos\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n[Click here to view the Repository used for the above\npresentation](https://tanstack.com/query/latest/docs/framework/react/<https:/github.com/tannerlinsley/react-\nquery-blog-refactor-example>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/query/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I4K7KC67DT2QYF67IT27YCA7IK2JWCYAIL23EHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/comparison\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# Comparison | React Query vs SWR vs Apollo vs RTK Query vs React Router\n> This comparison table strives to be as accurate and as unbiased as possible.\n> If you use any of these libraries and feel the information could be improved,\n> feel free to suggest changes (with notes or evidence of claims) using the\n> \"Edit this page on Github\" link at the bottom of this page.\n  * ‚úÖ 1st-class, built-in, and ready to use with no added configuration or code\n  * üü° Supported, but as an unofficial 3rd party or community library/contribution\n  * üî∂ Supported and documented, but requires extra user-code to implement\n  * üõë Not officially supported or documented.\n\n  \nDeep Compare Keys (Stable Serialization)| Deep Compare Keys (Stable\nSerialization)| Deep Compare Keys (Unstable Serialization)  \nDeep Comparison + Structural Sharing  \n> - React Query provides a way to continue to see an existing query's data while\n> the next query loads (similar to the same UX that suspense will soon provide\n> natively). This is extremely important when writing pagination UIs or infinite\n> loading UIs where you do not want to show a hard loading state whenever a new\n> query is requested. Other libraries do not have this capability and render a\n> hard loading state for the new query (unless it has been prefetched), while\n> the new query loads.\n> - React Query has excellent rendering performance. By default, it will\n> automatically track which fields are accessed and only re-render if one of\n> them changes. If you would like to opt-out of this optimization, setting to\n> will re-render your components whenever the query is updated. For example\n> because it has new data, or to indicate it is fetching. React Query also\n> batches updates together to make sure your application only re-renders once\n> when multiple components are using the same query. If you are only interested\n> in the or properties, you can reduce the number of renders even more by\n> setting to .\n> - Because React Query uses deterministic query key serialization, this allows\n> you to manipulate variable groups of queries without having to know each\n> individual query-key that you want to match, eg. you can refetch every query\n> that starts with in its key, regardless of variables, or you can target\n> specific queries with (or without) variables or nested properties, and even\n> use a filter function to only match queries that pass your specific\n> conditions.\n> - This is simply a fancy name for being able to configure how queries and\n> mutations will behave before they are used. For instance, a query can be fully\n> configured with defaults beforehand and when the time comes to use it, only is\n> necessary, instead of being required to pass the fetcher and/or options with\n> every usage. SWR does have a partial form of this feature by allowing you to\n> pre-configure a default fetcher, but only as a global fetcher, not on a per-\n> query basis and definitely not for mutations.\n> - For truly automatic refetching to happen after a mutation occurs, a schema\n> is necessary (like the one graphQL provides) along with heuristics that help\n> the library know how to identify individual entities and entities types in\n> that schema.\n> - React Query, SWR and RTK-Query do not currently support automatic-normalized\n> caching which describes storing entities in a flat architecture to avoid some\n> high-level data duplication.\n> - SWR ships with an \"immutable\" mode that does allow you to only fetch a query\n> once for the life of the cache, but it still does not have the concept of\n> stale-time or conditional auto-revalidation\n> - React Router does not cache data beyond the currently matched routes. If a\n> route is left, its data is lost.\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/query/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD527LCKSITZ3JCA7IE2JYCTADT2JKC67DT2QYF67IT27YCA7IK2JWCYAIL23IHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/typescript\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nReact Query is now written in to make sure the library and your projects are\ntype-safe!\n\nThings to keep in mind:\n\n  * Types currently require using TypeScript or greater\n  * Changes to types in this repository are considered and are usually released as semver changes (otherwise every type enhancement would be a major version!).\n  * It is **highly recommended that you lock your react-query package version to a specific patch release and upgrade with the expectation that types may be fixed or upgraded between any release**\n  * The non-type-related public API of React Query still follows semver very strictly.\n\nTypes in React Query generally flow through very well so that you don't have to\nprovide type annotations for yourself\n\n```\n\n //  ^? const data: number | undefined\n\n```\n\n```\n\n //  ^? const data: number | undefined\n\n```\n\n```\n\n //   ^? const data: string | undefined\n\n```\n\n```\n\n //   ^? const data: string | undefined\n\n```\n\nThis works best if your has a well-defined returned type. Keep in mind that most\ndata fetching libraries return per default, so make sure to extract it to a\nproperly typed function:\n\n```\n\n//   ^? const data: Group[] | undefined\n\n```\n\n```\n\n//   ^? const data: Group[] | undefined\n\n```\n\nReact Query uses a for the query result, discriminated by the field and the\nderived status boolean flags. This will allow you to check for e.g. status to\nmake defined:\n\n```\n\n // ^? const data: number\n\n```\n\n```\n\n // ^? const data: number\n\n```\n\nThe type for error defaults to , because that is what most users expect.\n\n```\n\n//   ^? const error: Error\n\n```\n\n```\n\n//   ^? const error: Error\n\n```\n\nIf you want to throw a custom error, or something that isn't an at all, you can\nspecify the type of the error field:\n\n```\n\n//   ^? const error: string | null\n\n```\n\n```\n\n//   ^? const error: string | null\n\n```\n\nHowever, this has the drawback that type inference for all other generics of\nwill not work anymore. It is generally not considered a good practice to throw\nsomething that isn't an , so if you have a subclass like you can use to make the\nerror field more specific:\n\n```\n\n//   ^? const error: Error | null\n\n // ^? const error: AxiosError\n\n```\n\n```\n\n//   ^? const error: Error | null\n\n // ^? const error: AxiosError\n\n```\n\nTanStack Query v5 allows for a way to set a global Error type for everything,\nwithout having to specify generics on call-sides, by amending the interface.\nThis will make sure inference still works, but the error field will be of the\nspecified type:\n\n```\n\n//   ^? const error: AxiosError | null\n\n```\n\n```\n\n//   ^? const error: AxiosError | null\n\n```\n\nSimilarly to registering a you can also register a global type. This ensures the\noptional field on and stays consistent and is type-safe. Note that the\nregistered type must extend so that remains an object.\n\n```\n\n // Your meta type definition.\n\n```\n\n```\n\n // Your meta type definition.\n\n```\n\n## [Typing query and mutation\nkeys](https://tanstack.com/query/latest/docs/framework/react/<#typing-query-and-\nmutation-keys>) ### [Registering the query and mutation key\ntypes](https://tanstack.com/query/latest/docs/framework/react/<#registering-the-\nquery-and-mutation-key-types>)\n\nAlso similarly to registering a , you can also register a global and type. This\nallows you to provide more structure to your keys, that matches your\napplication's hierarchy, and have them be typed across all of the library's\nsurface area. Note that the registered type must extend the type, so that your\nkeys remain an array.\n\nIf you inline query options into , you'll get automatic type inference. However,\nyou might want to extract the query options into a separate function to share\nthem between and e.g. . In that case, you'd lose type inference. To get it back,\nyou can use the helper:\n\n```\n\n```\n\nFurther, the returned from knows about the associated with it, and we can\nleverage that type information to make functions like aware of those types as\nwell:\n\n```\n\n//   ^? const data: Group[] | undefined\n\n```\n\n```\n\n//   ^? const data: Group[] | undefined\n\n```\n\nWithout , the type of would be , unless we'd pass a generic to it:\n\nFor tips and tricks around type inference, have a look at from the Community\nResources. To find out how to get the best possible type-safety, you can read .\n\n## [Typesafe disabling of queries using\n](https://tanstack.com/query/latest/docs/framework/react/<#typesafe-disabling-\nof-queries-using-skiptoken>)\n\nIf you are using TypeScript, you can use the to disable a query. This is useful\nwhen you want to disable a query based on a condition, but you still want to\nkeep the query to be type safe. Read more about it in the guide.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/query/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSIEK3KC67DT2QYF67IT27YCA7IK2JWCYAIL23YHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/graphql\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nBecause React Query's fetching mechanisms are agnostically built on Promises,\nyou can use React Query with literally any asynchronous data fetching client,\nincluding GraphQL!\n\n> Keep in mind that React Query does not support normalized caching. While a\n> vast majority of users do not actually need a normalized cache or even benefit\n> from it as much as they believe they do, there may be very rare circumstances\n> that may warrant it so be sure to check with us first to make sure it's truly\n> something you need!\nReact Query, used in combination with and provides full-typed GraphQL\noperations:\n\n```\n\n // `data` is fully typed!\n\n    // variables are type-checked too!\n\n```\n\n```\n\n // `data` is fully typed!\n\n    // variables are type-checked too!\n\n```\n\n_You can find a[complete example in the\nrepo](https://tanstack.com/query/latest/docs/framework/react/<https:/github.com/dotansimha/graphql-\ncode-generator/tree/7c25c4eeb77f88677fd79da557b7b5326e3f3950/examples/front-\nend/react/tanstack-react-query>)_\n\nGet started with the [dedicated guide on GraphQL Code Generator\ndocumentation](https://tanstack.com/query/latest/docs/framework/react/<https:/www.the-\nguild.dev/graphql/codegen/docs/guides/react-vue>).\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/query/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JUCWADTZ3JCA7IE2JWF67IT23KC67DT2QYF67IT27YCA7IK2JWCYAILKJJHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/react-native\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nReact Query is designed to work out of the box with React Native, with the\nexception of the devtools, which are only supported with React DOM at this time.\n\nThere is a 3rd party plugin which you can try:\n\nThere is a 3rd party plugin which you can try:\n\nThere is a 3rd party plugin which you can try:\n\nIf you would like to help us make the built-in devtools platform agnostic,\nplease let us know!\n\nReact Query already supports auto refetch on reconnect in web browser. To add\nthis behavior in React Native you have to use React Query as in the example\nbelow:\n\nInstead of event listeners on , React Native provides focus information through\nthe . You can use the \"change\" event to trigger an update when the app state\nchanges to \"active\":\n\n```\n\n```\n\nIn some situations, you may want to refetch the query when a React Native Screen\nis focused again. This custom hook will call the provided function when the\nscreen is focused again.\n\n```\n\n```\n\nIn the above code, is skipped the first time because calls our callback on mount\nin addition to screen focus.\n\n## [Disable queries on out of focus\nscreens](https://tanstack.com/query/latest/docs/framework/react/<#disable-\nqueries-on-out-of-focus-screens>)\n\nIf you don‚Äôt want certain queries to remain ‚Äúlive‚Äù while a screen is out of\nfocus, you can use the subscribed prop on useQuery. This prop lets you control\nwhether a query stays subscribed to updates. Combined with React Navigation‚Äôs\nuseIsFocused, it allows you to seamlessly unsubscribe from queries when a screen\nisn‚Äôt in focus:\n\n```\n\n```\n\nWhen subscribed is false, the query unsubscribes from updates and won‚Äôt trigger\nre-renders or fetch new data for that screen. Once it becomes true again (e.g.,\nwhen the screen regains focus), the query re-subscribes and stays up to date.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n[ GitLab is the only place where enterprises build mission‚Äëcritical software.\n](https://tanstack.com/query/latest/docs/framework/react/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JLCAADLZ3JCA7IE2JWCABI5KJKC67DT2QYF67IT27YCA7IK2JWCYAILKJMHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/important-defaults\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nOut of the box, TanStack Query is configured with defaults. **Sometimes these\ndefaults can catch new users off guard or make learning/debugging difficult if\nthey are unknown by the user.** Keep them in mind as you continue to learn and\nuse TanStack Query:\n\n  * Query instances via or by default **consider cached data as stale**.\n\n> To change this behavior, you can configure your queries both globally and per-\n> query using the option. Specifying a longer means queries will not refetch\n> their data as often\n  * Stale queries are refetched automatically in the background when:\n    * New instances of the query mount\n    * The query is optionally configured with a refetch interval\n\n> To change this functionality, you can use options like , , and .\n  * Query results that have no more active instances of , or query observers are labeled as \"inactive\" and remain in the cache in case they are used again at a later time.\n  * By default, \"inactive\" queries are garbage collected after .\n> To change this, you can alter the default for queries to something other than\n> 1000 * 60 * 5 milliseconds.\n  * Queries that fail are **silently retried 3 times, with exponential backoff delay** before capturing and displaying an error to the UI.\n> To change this, you can alter the default and options for queries to something\n> other than and the default exponential backoff function.\n  * Query results by default are **structurally shared to detect if data has actually changed** and if not, **the data reference remains unchanged** to better help with value stabilization with regards to useMemo and useCallback. If this concept sounds foreign, then don't worry about it! 99.9% of the time you will not need to disable this and it makes your app more performant at zero cost to you.\n> Structural sharing only works with JSON-compatible values, any other value\n> types will always be considered as changed. If you are seeing performance\n> issues because of large responses for example, you can disable this feature\n> with the flag. If you are dealing with non-JSON compatible values in your\n> query responses and still want to detect if data has changed or not, you can\n> provide your own custom function as to compute a value from the old and new\n> responses, retaining references as required.\n\nHave a look at the following articles from our Community Resources for further\nexplanations of the defaults:\n\n  * [React Query as a State Manager](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/community/tkdodos-blog#10-react-query-as-a-state-manager>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI52JKC67DT2QYF67IT27YCA7IK2JWCYAILKJ7HEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/queries\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nA query is a declarative dependency on an asynchronous source of data that is\ntied to a . A query can be used with any Promise based method (including GET and\nPOST methods) to fetch data from a server. If your method modifies data on the\nserver, we recommend using instead.\n\nTo subscribe to a query in your components or custom hooks, call the hook with\nat least:\n\n  * A **unique key for the query**\n  * A function that returns a promise that:\n\n```\n\n```\n\nThe you provide is used internally for refetching, caching, and sharing your\nqueries throughout your application.\n\nThe query result returned by contains all of the information about the query\nthat you'll need for templating and any other usage of the data:\n\n```\n\n```\n\nThe object contains a few very important states you'll need to be aware of to be\nproductive. A query can only be in one of the following states at any given\nmoment:\n\n  * or - The query has no data yet\n  * or - The query encountered an error\n  * or - The query was successful and data is available\n\nBeyond those primary states, more information is available depending on the\nstate of the query:\n\n  * - If the query is in an state, the error is available via the property.\n  * - If the query is in an state, the data is available via the property.\n  * - In any state, if the query is fetching at any time (including background refetching) will be .\n\nFor queries, it's usually sufficient to check for the state, then the state,\nthen finally, assume that the data is available and render the successful state:\n\n```\n\n // We can assume by this point that `isSuccess === true`\n\n```\n\n```\n\n // We can assume by this point that `isSuccess === true`\n\n```\n\nIf booleans aren't your thing, you can always use the state as well:\n\n```\n\n // also status === 'success', but \"else\" logic works, too\n\n```\n\n```\n\n // also status === 'success', but \"else\" logic works, too\n\n```\n\nTypeScript will also narrow the type of correctly if you've checked for and\nbefore accessing it.\n\nIn addition to the field, you will also get an additional property with the\nfollowing options:\n\n  * - The query is currently fetching.\n  * - The query wanted to fetch, but it is paused. Read more about this in the guide.\n  * - The query is not doing anything at the moment.\n\nBackground refetches and stale-while-revalidate logic make all combinations for\nand possible. For example:\n\n  * a query in status will usually be in fetchStatus, but it could also be in if a background refetch is happening.\n  * a query that mounts and has no data will usually be in status and fetchStatus, but it could also be if there is no network connection.\n\nSo keep in mind that a query can be in state without actually fetching data. As\na rule of thumb:\n\n  * The gives information about the : Do we have any or not?\n  * The gives information about the : Is it running or not?\n\nFor an alternative way of performing status checks, have a look at the .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I4K7KC67DT2QYF67IT27YCA7IK2JWCYAILK7IHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/query-keys\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nAt its core, TanStack Query manages query caching for you based on query keys.\nQuery keys have to be an Array at the top level, and can be as simple as an\nArray with a single string, or as complex as an array of many strings and nested\nobjects. As long as the query key is serializable, and **unique to the query's\ndata** , you can use it!\n\nThe simplest form of a key is an array with constants values. This format is\nuseful for:\n\n```\n\n// A list of todos\n\n```\n\n```\n\n// A list of todos\n\n```\n\nWhen a query needs more information to uniquely describe its data, you can use\nan array with a string and any number of serializable objects to describe it.\nThis is useful for:\n\n  * Hierarchical or nested resources\n    * It's common to pass an ID, index, or other primitive to uniquely identify the item\n  * Queries with additional parameters\n    * It's common to pass an object of additional options\n\n```\n\n// An individual todo in a \"preview\" format\n\n// A list of todos that are \"done\"\n\n```\n\n```\n\n// An individual todo in a \"preview\" format\n\n// A list of todos that are \"done\"\n\n```\n\n## [Query Keys are hashed\ndeterministically!](https://tanstack.com/query/latest/docs/framework/react/guides/<#query-\nkeys-are-hashed-deterministically>)\n\nThis means that no matter the order of keys in objects, all of the following\nqueries are considered equal:\n\n```\n\n, { status, page }],\n\n, { page, status }],\n\n, { page, status, other:\n\n```\n\nThe following query keys, however, are not equal. Array item order matters!\n\n```\n\n```\n\n## [If your query function depends on a variable, include it in your query\nkey](https://tanstack.com/query/latest/docs/framework/react/guides/<#if-your-\nquery-function-depends-on-a-variable-include-it-in-your-query-key>)\n\nSince query keys uniquely describe the data they are fetching, they should\ninclude any variables you use in your query function that . For example:\n\n```\n\n```\n\nNote that query keys act as dependencies for your query functions. Adding\ndependent variables to your query key will ensure that queries are cached\nindependently, and that any time a variable changes, _queries will be refetched\nautomatically_ (depending on your settings). See the section for more\ninformation and examples.\n\nFor tips on organizing Query Keys in larger applications, have a look at and\ncheck the from the Community Resources.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI5K7KC67DT2QYF67IT27YCA7IK2JWCYAILK3MHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/query-functions\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nA query function can be literally any function that . The promise that is\nreturned should either or .\n\nAll of the following are valid query function configurations:\n\n```\n\n```\n\nFor TanStack Query to determine a query has errored, the query function or\nreturn a . Any error that is thrown in the query function will be persisted on\nthe state of the query.\n\n```\n\n```\n\n```\n\n```\n\n## [Usage with and other clients that do not throw by\ndefault](https://tanstack.com/query/latest/docs/framework/react/guides/<#usage-\nwith-fetch-and-other-clients-that-do-not-throw-by-default>)\n\nWhile most utilities like or automatically throw errors for unsuccessful HTTP\ncalls, some utilities like do not throw errors by default. If that's the case,\nyou'll need to throw them on your own. Here is a simple way to do that with the\npopular API:\n\n```\n\n'Network response was not ok'\n\n```\n\n```\n\nNetwork response was not ok\n\n```\n\nQuery keys are not just for uniquely identifying the data you are fetching, but\nare also conveniently passed into your query function as part of the\nQueryFunctionContext. While not always necessary, this makes it possible to\nextract your query functions if needed:\n\n```\n\n, { status, page }],\n\n// Access the key, status and page variables in your query function!\n\n```\n\n```\n\n// Access the key, status and page variables in your query function!\n\n```\n\nThe is the object passed to each query function. It consists of:\n\n  *     * instance provided by TanStack Query\n    * Can be used for \n  * meta: Record<string, unknown> | undefined\n    * an optional field you can fill with additional information about your query\n\nAdditionally, get the following options passed:\n\n  *     * the page parameter used to fetch the current page\n  *     * the direction of the current page fetch\n    * To get access to the direction of the current page fetch, please add a direction to from and .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI52JKC67DT2QYF67IT27YCA7IK2JWCYAILK3YHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/query-options\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nOne of the best ways to share and between multiple places, yet keep them co-\nlocated to one another, is to use the helper. At runtime, this helper just\nreturns whatever you pass into it, but it has a lot of advantages when using it\n. You can define all possible options for a query in one place, and you'll also\nget type inference and type safety for all of them.\n\n```\n\n```\n\nFor Infinite Queries, a separate helper is available.\n\nYou can still override some options at the component level. A very common and\nuseful pattern is to create per-component functions:\n\n```\n\n// Type inference still works, so query.data will be the return type of select\ninstead of queryFn\n\n```\n\n```\n\n// Type inference still works, so query.data will be the return type of select\ninstead of queryFn\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Build Better Apps, Faster. Start coding FREE. No CC required\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICWAI4Z3JCA7IE2JWFTYIV53KC67DT2QYF67IT27YCA7IK2JWCYAILKQIHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/network-mode\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nTanStack Query provides three different network modes to distinguish how and\nshould behave if you have no network connection. This mode can be set for each\nQuery / Mutation individually, or globally via the query / mutation defaults.\n\nSince TanStack Query is most often used for data fetching in combination with\ndata fetching libraries, the default network mode is .\n\nIn this mode, Queries and Mutations will not fire unless you have network\nconnection. This is the default mode. If a fetch is initiated for a query, it\nwill always stay in the (, , ) it is in if the fetch cannot be made because\nthere is no network connection. However, a is exposed additionally. This can be\neither:\n\n  * : The is really executing - a request is in-flight.\n  * : The query is not executing - it is until you have connection again\n  * : The query is not fetching and not paused\n\nThe flags and are derived from this state and exposed for convenience.\n\n> Keep in mind that it might not be enough to check for state to show a loading\n> spinner. Queries can be in , but if they are mounting for the first time, and\n> you have no network connection.\nIf a query runs because you are online, but you go offline while the fetch is\nstill happening, TanStack Query will also pause the retry mechanism. Paused\nqueries will then continue to run once you re-gain network connection. This is\nindependent of (which also defaults to in this mode), because it is not a , but\nrather a . If the query has been in the meantime, it will not continue.\n\nIn this mode, TanStack Query will always fetch and ignore the online / offline\nstate. This is likely the mode you want to choose if you use TanStack Query in\nan environment where you don't need an active network connection for your\nQueries to work - e.g. if you just read from , or if you just want to return\nfrom your .\n\n  * Queries will never be because you have no network connection.\n  * Retries will also not pause - your Query will go to state if it fails.\n  * defaults to in this mode, because reconnecting to the network is not a good indicator anymore that stale queries should be refetched. You can still turn it on if you want.\n\nThis mode is the middle ground between the first two options, where TanStack\nQuery will run the once, but then pause retries. This is very handy if you have\na serviceWorker that intercepts a request for caching like in an , or if you use\nHTTP caching via the .\n\nIn those situations, the first fetch might succeed because it comes from an\noffline storage / cache. However, if there is a cache miss, the network request\nwill go out and fail, in which case this mode behaves like an query - pausing\nretries.\n\nThe will show Queries in a state if they would be fetching, but there is no\nnetwork connection. There is also a toggle button to . Please note that this\nbutton will actually mess with your network connection (you can do that in the\nbrowser devtools), but it will set the in an offline state.\n\n  * networkMode: 'online' | 'always' | 'offlineFirst'\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI5K7KC67DT2QYF67IT27YCA7IK2JWCYAILKQNHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/parallel-queries\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n\"Parallel\" queries are queries that are executed in parallel, or at the same\ntime so as to maximize fetching concurrency.\n\nWhen the number of parallel queries does not change, there is to use parallel\nqueries. Just use any number of TanStack Query's and hooks side-by-side!\n\n```\n\n // The following queries will execute in parallel\n\n```\n\n```\n\n // The following queries will execute in parallel\n\n```\n\n> When using React Query in suspense mode, this pattern of parallelism does not\n> work, since the first query would throw a promise internally and would suspend\n> the component before the other queries run. To get around this, you'll either\n> need to use the hook (which is suggested) or orchestrate your own parallelism\n> with separate components for each instance.\nIf the number of queries you need to execute is changing from render to render,\nyou cannot use manual querying since that would violate the rules of hooks.\nInstead, TanStack Query provides a hook, which you can use to dynamically\nexecute as many queries in parallel as you'd like.\n\naccepts an with a whose value is an . It returns an :\n\n```\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Google Cloud Next is coming to Las Vegas April 9-11. Register now to fuel your\nstartup‚Äôs growth.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICYBI6Z3JCA7IE2JWCASD52QKC67DT2QYF67IT27YCA7IK2JWCYAILKQ7HEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/dependent-queries\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nDependent (or serial) queries depend on previous ones to finish before they can\nexecute. To achieve this, it's as easy as using the option to tell a query when\nit is ready to run:\n\n```\n\n// Then get the user's projects\n\n // The query will not execute until the userId exists\n\n```\n\n```\n\n// Then get the user's projects\n\n // The query will not execute until the userId exists\n\n```\n\nAs soon as the is available, the query will be and will then transition to:\n\nOnce we have the projects, it will go to:\n\nDynamic parallel query - can depend on a previous query also, here's how to\nachieve this:\n\n```\n\n// Get the users ids\n\n// Then get the users messages\n\n// if users is undefined, an empty array will be returned\n\n```\n\n```\n\n// Get the users ids\n\n// Then get the users messages\n\n // if users is undefined, an empty array will be returned\n\n```\n\nthat return an\n\nDependent queries by definition constitutes a form of , which hurts performance.\nIf we pretend both queries take the same amount of time, doing them serially\ninstead of in parallel always takes twice as much time, which is especially\nhurtful when it happens on a client that has high latency. If you can, it's\nalways better to restructure the backend APIs so that both queries can be\nfetched in parallel, though that might not always be practically feasible.\n\nIn the example above, instead of first fetching to be able to , introducing a\nnew query would flatten the waterfall.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSIEK3KC67DT2QYF67IT27YCA7IK2JWCYAIE5QEHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/background-fetching-indicators\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nA query's state is sufficient enough to show the initial hard-loading state for\na query, but sometimes you may want to display an additional indicator that a\nquery is refetching in the background. To do this, queries also supply you with\nan boolean that you can use to show that it's in a fetching state, regardless of\nthe state of the variable:\n\n```\n\n```\n\n## [Displaying Global Background Fetching Loading\nState](https://tanstack.com/query/latest/docs/framework/react/guides/<#displaying-\nglobal-background-fetching-loading-state>)\n\nIn addition to individual query loading states, if you would like to show a\nglobal loading indicator when queries are fetching (including in the\nbackground), you can use the hook:\n\n```\n\n>Queries are fetching in the background...</\n\n```\n\n```\n\nQueries are fetching in the background...\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICAYDEZ3JCA7IE2JWFT7D62QKC67DT2QYF67IT27YCA7IK2JWCYAIE5QMHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/window-focus-refetching\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nIf a user leaves your application and returns and the query data is stale,\n**TanStack Query automatically requests fresh data for you in the background**.\nYou can disable this globally or per-query using the option:\n\n```\n\n```\n\nIn rare circumstances, you may want to manage your own window focus events that\ntrigger TanStack Query to revalidate. To do this, TanStack Query provides a\nfunction that supplies you the callback that should be fired when the window is\nfocused and allows you to set up your own events. When calling , the previously\nset handler is removed (which in most cases will be the default handler) and\nyour new handler is used instead. For example, this is the default handler:\n\n```\n\n   // Be sure to unsubscribe if a new handler is set\n\n```\n\n```\n\n   // Be sure to unsubscribe if a new handler is set\n\n```\n\n## [Managing Focus in React\nNative](https://tanstack.com/query/latest/docs/framework/react/guides/<#managing-\nfocus-in-react-native>)\n\nInstead of event listeners on , React Native provides focus information through\nthe . You can use the \"change\" event to trigger an update when the app state\nchanges to \"active\":\n\n```\n\n```\n\n```\n\n// Override the default focus state\n\n// Fallback to the default focus check\n\n```\n\n```\n\n// Override the default focus state\n\n// Fallback to the default focus check\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD527LCKSITZ3JCA7IE2JYCTADT27KC67DT2QYF67IT27YCA7IK2JWCYAIE5QYHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/disabling-queries\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nIf you ever want to disable a query from automatically running, you can use the\noption. The enabled option also accepts a callback that returns a boolean.\n\n  * If the query has cached data, then the query will be initialized in the or state.\n  * If the query does not have cached data, then the query will start in the and state.\n  * The query will not automatically fetch on mount.\n  * The query will not automatically refetch in the background.\n  * The query will ignore query client and calls that would normally result in the query refetching.\n  * returned from can be used to manually trigger the query to fetch. However, it will not work with .\n\n> TypeScript users may prefer to use as an alternative to .\n```\n\n```\n\nPermanently disabling a query opts out of many great features that TanStack\nQuery has to offer (like background refetches), and it's also not the idiomatic\nway. It takes you from the declarative approach (defining dependencies when your\nquery should run) into an imperative mode (fetch whenever I click here). It is\nalso not possible to pass parameters to . Oftentimes, all you want is a lazy\nquery that defers the initial fetch:\n\nThe enabled option can not only be used to permanently disable a query, but also\nto enable / disable it at a later time. A good example would be a filter form\nwhere you only want to fire off the first request once the user has entered a\nfilter value:\n\n```\n\n  // ‚¨áÔ∏è disabled as long as the filter is empty\n\n   // üöÄ applying the filter will enable and execute the query\n\n```\n\n```\n\n  // ‚¨áÔ∏è disabled as long as the filter is empty\n\n   // üöÄ applying the filter will enable and execute the query\n\n```\n\nLazy queries will be in right from the start because means that there is no data\nyet. This is technically true, however, since we are not currently fetching any\ndata (as the query is not ), it also means you likely cannot use this flag to\nshow a loading spinner.\n\nIf you are using disabled or lazy queries, you can use the flag instead. It's a\nderived flag that is computed from:\n\nso it will only be true if the query is currently fetching for the first time.\n\n## [Typesafe disabling of queries using\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#typesafe-\ndisabling-of-queries-using-skiptoken>)\n\nIf you are using TypeScript, you can use the to disable a query. This is useful\nwhen you want to disable a query based on a condition, but you still want to\nkeep the query to be type safe.\n\n> IMPORTANT: from will not work with . Other than that, works the same as .\n```\n\n  // ‚¨áÔ∏è disabled as long as the filter is undefined or empty\n\n   // üöÄ applying the filter will enable and execute the query\n\n```\n\n```\n\n  // ‚¨áÔ∏è disabled as long as the filter is undefined or empty\n\n   // üöÄ applying the filter will enable and execute the query\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI553KC67DT2QYF67IT27YCA7IK2JWCYAILK3LHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/query-retries\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nWhen a query fails (the query function throws an error), TanStack Query will\nautomatically retry the query if that query's request has not reached the max\nnumber of consecutive retries (defaults to ) or a function is provided to\ndetermine if a retry is allowed.\n\nYou can configure retries both on a global level and an individual query level.\n\n  * Setting will disable retries.\n  * Setting will retry failing requests 6 times before showing the final error thrown by the function.\n  * Setting will infinitely retry failing requests.\n  * Setting retry = (failureCount, error) => ... allows for custom logic based on why the request failed.\n\n> On the server, retries default to to make server rendering as fast as\n> possible.\n```\n\n// Make a specific query retry a certain number of times\n\n// Will retry failed requests 10 times before displaying an error\n\n```\n\n```\n\n// Make a specific query retry a certain number of times\n\n // Will retry failed requests 10 times before displaying an error\n\n```\n\n> Info: Contents of the property will be part of response property of until the\n> last retry attempt. So in above example any error contents will be part of\n> property for first 9 retry attempts (Overall 10 attempts) and finally they\n> will be part of after last attempt if error persists after all retry attempts.\nBy default, retries in TanStack Query do not happen immediately after a request\nfails. As is standard, a back-off delay is gradually applied to each retry\nattempt.\n\nThe default is set to double (starting at ms) with each attempt, but not exceed\n30 seconds:\n\n```\n\n// Configure for all queries\n\n```\n\n```\n\n// Configure for all queries\n\n```\n\nThough it is not recommended, you can obviously override the function/integer in\nboth the Provider and individual query options. If set to an integer instead of\na function the delay will always be the same amount of time:\n\n```\n\n// Will always wait 1000ms to retry, regardless of how many retries\n\n```\n\n```\n\n // Will always wait 1000ms to retry, regardless of how many retries\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I423KC67DT2QYF67IT27YCA7IK2JWCAYD4K7EHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/paginated-queries\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nRendering paginated data is a very common UI pattern and in TanStack Query, it\n\"just works\" by including the page information in the query key:\n\nHowever, if you run this simple example, you might notice something strange:\n\n**The UI jumps in and out of the and states because each new page is treated\nlike a brand new query.**\n\nThis experience is not optimal and unfortunately is how many tools today insist\non working. But not TanStack Query! As you may have guessed, TanStack Query\ncomes with an awesome feature called that allows us to get around this.\n\nConsider the following example where we would ideally want to increment a\npageIndex (or cursor) for a query. If we were to use , **it would still\ntechnically work fine** , but the UI would jump in and out of the and states as\ndifferent queries are created and destroyed for each page or cursor. By setting\nto or function exported from TanStack Query, we get a few new things:\n\n  * **The data from the last successful fetch is available while new data is being requested, even though the query key has changed**.\n  * When the new data arrives, the previous is seamlessly swapped to show the new data.\n  * is made available to know what data the query is currently providing you\n\n```\n\n    // Disable the Next Page button until we know a next page is available\n\n```\n\n```\n\n    // Disable the Next Page button until we know a next page is available\n\n```\n\n## [Lagging Infinite Query results with\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#lagging-\ninfinite-query-results-with-placeholderdata>)\n\nWhile not as common, the option also works flawlessly with the hook, so you can\nseamlessly allow your users to continue to see cached data while infinite query\nkeys change over time.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Deliver website design projects 30% faster with BugHerd.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JWCV7DCZ3JCA7IE2JWF67DV2JKC67DT2QYF67IT27YCA7IK2JWCAYD4K7WHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/infinite-queries\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nRendering lists that can additively \"load more\" data onto an existing set of\ndata or \"infinite scroll\" is also a very common UI pattern. TanStack Query\nsupports a useful version of called for querying these types of lists.\n\nWhen using , you'll notice a few things are different:\n\n  * is now an object containing infinite query data:\n  * array containing the fetched pages\n  * array containing the page params used to fetch the pages\n  * The and functions are now available ( is required)\n  * The option is now available (and required) to specify the initial page param\n  * The and options are available for both determining if there is more data to load and the information to fetch it. This information is supplied as an additional parameter in the query function\n  * A boolean is now available and is if returns a value other than or \n  * A boolean is now available and is if returns a value other than or \n  * The and booleans are now available to distinguish between a background refresh state and a loading more state\n\n> Note: Options or need to conform to the same structure of an object with and\n> properties.\nLet's assume we have an API that returns pages of 3 at a time based on a index\nalong with a cursor that can be used to fetch the next group of projects:\n\n```\n\n// { data: [...], nextCursor: 3}\n\n// { data: [...], nextCursor: 6}\n\n// { data: [...], nextCursor: 9}\n\n// { data: [...] }\n\n```\n\n```\n\n// { data: [...], nextCursor: 3}\n\n// { data: [...], nextCursor: 6}\n\n// { data: [...], nextCursor: 9}\n\n// { data: [...] }\n\n```\n\nWith this information, we can create a \"Load More\" UI by:\n\n  * Waiting for to request the first group of data by default\n  * Returning the information for the next query in \n\n```\n\n```\n\n```\n\n```\n\nIt's essential to understand that calling while an ongoing fetch is in progress\nruns the risk of overwriting data refreshes happening in the background. This\nsituation becomes particularly critical when rendering a list and triggering\nsimultaneously.\n\nRemember, there can only be a single ongoing fetch for an InfiniteQuery. A\nsingle cache entry is shared for all pages, attempting to fetch twice\nsimultaneously might lead to data overwrites.\n\nIf you intend to enable simultaneous fetching, you can utilize the option\n(default: true) within .\n\nTo ensure a seamless querying process without conflicts, it's highly recommended\nto verify that the query is not in an state, especially if the user won't\ndirectly control that call.\n\n## [What happens when an infinite query needs to be\nrefetched?](https://tanstack.com/query/latest/docs/framework/react/guides/<#what-\nhappens-when-an-infinite-query-needs-to-be-refetched>)\n\nWhen an infinite query becomes and needs to be refetched, each group is fetched\n, starting from the first one. This ensures that even if the underlying data is\nmutated, we're not using stale cursors and potentially getting duplicates or\nskipping records. If an infinite query's results are ever removed from the\nqueryCache, the pagination restarts at the initial state with only the initial\ngroup being requested.\n\n## [What if I want to implement a bi-directional infinite\nlist?](https://tanstack.com/query/latest/docs/framework/react/guides/<#what-if-\ni-want-to-implement-a-bi-directional-infinite-list>)\n\nBi-directional lists can be implemented by using the , , and properties and\nfunctions.\n\n```\n\n```\n\n## [What if I want to show the pages in reversed\norder?](https://tanstack.com/query/latest/docs/framework/react/guides/<#what-if-\ni-want-to-show-the-pages-in-reversed-order>)\n\nSometimes you may want to show the pages in reversed order. If this is case, you\ncan use the option:\n\n```\n\n```\n\n## [What if I want to manually update the infinite\nquery?](https://tanstack.com/query/latest/docs/framework/react/guides/<#what-if-\ni-want-to-manually-update-the-infinite-query>) ### [Manually removing a single\nvalue from an individual\npage:](https://tanstack.com/query/latest/docs/framework/react/guides/<#manually-\nremoving-a-single-value-from-an-individual-page>) ### [Keep only the first\npage:](https://tanstack.com/query/latest/docs/framework/react/guides/<#keep-\nonly-the-first-page>)\n\nMake sure to always keep the same data structure of pages and pageParams!\n\n## [What if I want to limit the number of\npages?](https://tanstack.com/query/latest/docs/framework/react/guides/<#what-if-\ni-want-to-limit-the-number-of-pages>)\n\nIn some use cases you may want to limit the number of pages stored in the query\ndata to improve the performance and UX:\n\n  * when the user can load a large number of pages (memory usage)\n  * when you have to refetch an infinite query that contains dozens of pages (network usage: all the pages are sequentially fetched)\n\nThe solution is to use a \"Limited Infinite Query\". This is made possible by\nusing the option in conjunction with and to allow fetching pages when needed in\nboth directions.\n\nIn the following example only 3 pages are kept in the query data pages array. If\na refetch is needed, only 3 pages will be refetched sequentially.\n\n```\n\n```\n\n## [What if my API doesn't return a\ncursor?](https://tanstack.com/query/latest/docs/framework/react/guides/<#what-\nif-my-api-doesnt-return-a-cursor>)\n\nIf your API doesn't return a cursor, you can use the as a cursor. Because and\nalso get the of the current page, you can use it to calculate the next /\nprevious page param.\n\n```\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ High-Performance GPU-accelerated rendering to Visualize Trillion Points in\nReal-Time. Free Trial.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICYBDLZ3JCA7IE2JWCASDC53KC67DT2QYF67IT27YCA7IK2JWCAYD4K7UHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/initial-query-data\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThere are many ways to supply initial data for a query to the cache before you\nneed it:\n\n  * Declaratively:\n    * Provide to a query to prepopulate its cache if empty\n  * Imperatively:\n    * [Manually place the data into the cache using ](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/prefetching>)\n\nThere may be times when you already have the initial data for a query available\nin your app and can simply provide it directly to your query. If and when this\nis the case, you can use the option to set the initial data for a query and skip\nthe initial loading state!\n\n> IMPORTANT: is persisted to the cache, so it is not recommended to provide\n> placeholder, partial or incomplete data to this option and instead use\nBy default, is treated as totally fresh, as if it were just fetched. This also\nmeans that it will affect how it is interpreted by the option.\n\n  * If you configure your query observer with , and no (the default ), the query will immediately refetch when it mounts:\n```\n\n// Will show initialTodos immediately, but also immediately refetch todos after\nmount\n\n```\n\n```\n\n// Will show initialTodos immediately, but also immediately refetch todos after\nmount\n\n```\n\n  * If you configure your query observer with and a of ms, the data will be considered fresh for that same amount of time, as if it was just fetched from your query function.\n```\n\n// Show initialTodos immediately, but won't refetch until another interaction\nevent is encountered after 1000 ms\n\n```\n\n```\n\n// Show initialTodos immediately, but won't refetch until another interaction\nevent is encountered after 1000 ms\n\n```\n\n  * So what if your isn't totally fresh? That leaves us with the last configuration that is actually the most accurate and uses an option called . This option allows you to pass a numeric JS timestamp in milliseconds of when the initialData itself was last updated, e.g. what provides. Take note that if you have a unix timestamp, you'll need to convert it to a JS timestamp by multiplying it by .\n```\n\n// Show initialTodos immediately, but won't refetch until another interaction\nevent is encountered after 1000 ms\n\n // This could be 10 seconds ago or 10 minutes ago\n\n```\n\n```\n\n// Show initialTodos immediately, but won't refetch until another interaction\nevent is encountered after 1000 ms\n\n // This could be 10 seconds ago or 10 minutes ago\n\n```\n\nThis option allows the staleTime to be used for its original purpose,\ndetermining how fresh the data needs to be, while also allowing the data to be\nrefetched on mount if the is older than the . In the example above, our data\nneeds to be fresh within 1 minute, and we can hint to the query when the\ninitialData was last updated so the query can decide for itself whether the data\nneeds to be refetched again or not.\n\n> If you would rather treat your data as , we recommend that you use the or APIs\n> to populate the cache beforehand, thus letting you configure your\n> independently from your initialData\n\nIf the process for accessing a query's initial data is intensive or just not\nsomething you want to perform on every render, you can pass a function as the\nvalue. This function will be executed only once when the query is initialized,\nsaving you precious memory and/or CPU:\n\nIn some circumstances, you may be able to provide the initial data for a query\nfrom the cached result of another. A good example of this would be searching the\ncached data from a todos list query for an individual todo item, then using that\nas the initial data for your individual todo query:\n\n```\n\n  // Use a todo from the 'todos' query as the initial data for this todo query\n\n```\n\n```\n\n  // Use a todo from the 'todos' query as the initial data for this todo query\n\n```\n\n### [Initial Data from the cache with\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#initial-data-\nfrom-the-cache-with-initialdataupdatedat>)\n\nGetting initial data from the cache means the source query you're using to look\nup the initial data from is likely old. Instead of using an artificial to keep\nyour query from refetching immediately, it's suggested that you pass the source\nquery's to . This provides the query instance with all the information it needs\nto determine if and when the query needs to be refetched, regardless of initial\ndata being provided.\n\n```\n\n```\n\n### [Conditional Initial Data from\nCache](https://tanstack.com/query/latest/docs/framework/react/guides/<#conditional-\ninitial-data-from-cache>)\n\nIf the source query you're using to look up the initial data from is old, you\nmay not want to use the cached data at all and just fetch from the server. To\nmake this decision easier, you can use the method instead to get more\ninformation about the source query, including a timestamp you can use to decide\nif the query is \"fresh\" enough for your needs:\n\n```\n\n  // Get the query state\n\n  // If the query exists and has data that is no older than 10 seconds...\n\n   // return the individual todo\n\n  // Otherwise, return undefined and let it fetch from a hard loading state!\n\n```\n\n```\n\n  // Get the query state\n\n  // If the query exists and has data that is no older than 10 seconds...\n\n   // return the individual todo\n\n  // Otherwise, return undefined and let it fetch from a hard loading state!\n\n```\n\nFor a comparison between and , have a look at the .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I423KC67DT2QYF67IT27YCA7IK2JWCAYD423LHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/placeholder-query-data\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nPlaceholder data allows a query to behave as if it already has data, similar to\nthe option, but **the data is not persisted to the cache**. This comes in handy\nfor situations where you have enough partial (or fake) data to render the query\nsuccessfully while the actual data is fetched in the background.\n\n> Example: An individual blog post query could pull \"preview\" data from a parent\n> list of blog posts that only include title and a small snippet of the post\n> body. You would not want to persist this partial data to the query result of\n> the individual query, but it is useful for showing the content layout as\n> quickly as possible while the actual query finishes to fetch the entire\n> object.\nThere are a few ways to supply placeholder data for a query to the cache before\nyou need it:\n\n  * Declaratively:\n    * Provide to a query to prepopulate its cache if empty\n  * Imperatively:\n    * [Prefetch or fetch the data using and the option](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/prefetching>)\n\nWhen we use , our Query will not be in a state - it will start out as being in\nstate, because we have to display - even if that data is just \"placeholder\"\ndata. To distinguish it from \"real\" data, we will also have the flag set to on\nthe Query result.\n\n## [Placeholder Data as a\nValue](https://tanstack.com/query/latest/docs/framework/react/guides/<#placeholder-\ndata-as-a-value>)\n\n```\n\n```\n\nIf the process for accessing a query's placeholder data is intensive or just not\nsomething you want to perform on every render, you can memoize the value:\n\n```\n\n```\n\n## [Placeholder Data as a\nFunction](https://tanstack.com/query/latest/docs/framework/react/guides/<#placeholder-\ndata-as-a-function>)\n\ncan also be a function, where you can get access to the data and Query meta\ninformation of a \"previous\" successful Query. This is useful for situations\nwhere you want to use the data from one query as the placeholder data for\nanother query. When the QueryKey changes, e.g. from to , we can keep displaying\n\"old\" data instead of having to show a loading spinner while data is from one\nQuery to the next. For more information, see .\n\n```\n\n```\n\nIn some circumstances, you may be able to provide the placeholder data for a\nquery from the cached result of another. A good example of this would be\nsearching the cached data from a blog post list query for a preview version of\nthe post, then using that as the placeholder data for your individual post\nquery:\n\n```\n\n   // Use the smaller/preview version of the blogPost from the 'blogPosts'\n\n   // query as the placeholder data for this blogPost query\n\n```\n\n```\n\n   // Use the smaller/preview version of the blogPost from the 'blogPosts'\n\n   // query as the placeholder data for this blogPost query\n\n```\n\nFor a comparison between and , have a look at the .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI527KC67DT2QYF67IT27YCA7IK2JWCAYD4KQWHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/mutations\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nUnlike queries, mutations are typically used to create/update/delete data or\nperform server side-effects. For this purpose, TanStack Query exports a hook.\n\nHere's an example of a mutation that adds a new todo to the server:\n\n```\n\n```\n\n```\n\n```\n\nA mutation can only be in one of the following states at any given moment:\n\n  * or - The mutation is currently idle or in a fresh/reset state\n  * or - The mutation is currently running\n  * or - The mutation encountered an error\n  * or - The mutation was successful and mutation data is available\n\nBeyond those primary states, more information is available depending on the\nstate of the mutation:\n\n  * - If the mutation is in an state, the error is available via the property.\n  * - If the mutation is in a state, the data is available via the property.\n\nIn the example above, you also saw that you can pass variables to your mutations\nfunction by calling the function with a .\n\nEven with just variables, mutations aren't all that special, but when used with\nthe option, the and the , mutations become a very powerful tool.\n\n> IMPORTANT: The function is an asynchronous function, which means you cannot\n> use it directly in an event callback in . If you need to access the event in\n> you need to wrap in another function. This is due to .\n```\n\n// This will not work in React 16 and earlier\n\n```\n\n```\n\n// This will not work in React 16 and earlier\n\n```\n\nIt's sometimes the case that you need to clear the or of a mutation request. To\ndo this, you can use the function to handle this:\n\n```\n\n```\n\ncomes with some helper options that allow quick and easy side-effects at any\nstage during the mutation lifecycle. These come in handy for both [invalidating\nand refetching queries after\nmutations](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/invalidations-\nfrom-mutations>) and even\n\n```\n\n  // A mutation is about to happen!\n\n  // Optionally return a context containing data to use when for example rolling\nback\n\n`rolling back optimistic update with id ${\n\n  // Error or success... doesn't matter!\n\n```\n\n```\n\n  // A mutation is about to happen!\n\n  // Optionally return a context containing data to use when for example rolling\nback\n\nrolling back optimistic update with id\n\n  // Error or success... doesn't matter!\n\n```\n\nWhen returning a promise in any of the callback functions it will first be\nawaited before the next callback is called:\n\nYou might find that you want to beyond the ones defined on when calling . This\ncan be used to trigger component-specific side effects. To do that, you can\nprovide any of the same callback options to the function after your mutation\nvariable. Supported options include: , and . Please keep in mind that those\nadditional callbacks won't run if your component unmounts the mutation finishes.\n\n```\n\n  // I will fire first\n\n  // I will fire first\n\n  // I will fire first\n\n  // I will fire second!\n\n  // I will fire second!\n\n  // I will fire second!\n\n```\n\n```\n\n  // I will fire first\n\n  // I will fire first\n\n  // I will fire first\n\n  // I will fire second!\n\n  // I will fire second!\n\n  // I will fire second!\n\n```\n\nThere is a slight difference in handling , and callbacks when it comes to\nconsecutive mutations. When passed to the function, they will be fired up only\nand only if the component is still mounted. This is due to the fact that\nmutation observer is removed and resubscribed every time when the function is\ncalled. On the contrary, handlers execute for each call.\n\n> Be aware that most likely, passed to is asynchronous. In that case, the order\n> in which mutations are fulfilled may differ from the order of function calls.\n```\n\n  // Will be called 3 times\n\n   // Will execute only once, for the last mutation (Todo 3),\n\n   // regardless which mutation resolves first\n\n```\n\n```\n\n  // Will be called 3 times\n\n   // Will execute only once, for the last mutation (Todo 3),\n\n   // regardless which mutation resolves first\n\n```\n\nUse instead of to get a promise which will resolve on success or throw on an\nerror. This can for example be used to compose side effects.\n\n```\n\n```\n\nBy default, TanStack Query will not retry a mutation on error, but it is\npossible with the option:\n\nIf mutations fail because the device is offline, they will be retried in the\nsame order when the device reconnects.\n\nMutations can be persisted to storage if needed and resumed at a later point.\nThis can be done with the hydration functions:\n\n```\n\n// Define the \"addTodo\" mutation\n\n  // Cancel current queries for the todos list\n\n  // Add optimistic todo to todos list\n\n  // Return context with the optimistic todo\n\n  // Replace optimistic todo in the todos list with the result\n\n  // Remove optimistic todo from the todos list\n\n// Start mutation in some component:\n\n// If the mutation has been paused because the device is for example offline,\n\n// Then the paused mutation can be dehydrated when the application quits:\n\n// The mutation can then be hydrated again when the application is started:\n\n// Resume the paused mutations:\n\n```\n\n```\n\n// Define the \"addTodo\" mutation\n\n  // Cancel current queries for the todos list\n\n  // Add optimistic todo to todos list\n\n  // Return context with the optimistic todo\n\n  // Replace optimistic todo in the todos list with the result\n\n  // Remove optimistic todo from the todos list\n\n// Start mutation in some component:\n\n// If the mutation has been paused because the device is for example offline,\n\n// Then the paused mutation can be dehydrated when the application quits:\n\n// The mutation can then be hydrated again when the application is started:\n\n// Resume the paused mutations:\n\n```\n\nIf you persist offline mutations with the , mutations cannot be resumed when the\npage is reloaded unless you provide a default mutation function.\n\nThis is a technical limitation. When persisting to an external storage, only the\nstate of mutations is persisted, as functions cannot be serialized. After\nhydration, the component that triggers the mutation might not be mounted, so\ncalling might yield an error: .\n\n```\n\n// we need a default mutation function so that paused mutations can resume after\na page reload\n\n    // resume mutations after initial restore from localStorage was successful\n\n```\n\n```\n\n// we need a default mutation function so that paused mutations can resume after\na page reload\n\n    // resume mutations after initial restore from localStorage was successful\n\n```\n\nWe also have an extensive that covers both queries and mutations.\n\nPer default, all mutations run in parallel - even if you invoke of the same\nmutation multiple times. Mutations can be given a with an to avoid that. All\nmutations with the same will run in serial, which means when they are triggered,\nthey will start in state if there is already a mutation for that scope in\nprogress. They will be put into a queue and will automatically resume once their\ntime in the queue has come.\n\nFor more information about mutations, have a look at [#12: Mastering Mutations\nin React\nQuery](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/community/tkdodos-\nblog#12-mastering-mutations-in-react-query>) from the Community Resources.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JUCWADTZ3JCA7IE2JWF67ITK7KC67DT2QYF67IT27YCA7IK2JWCAYD4KQYHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/query-invalidation\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nWaiting for queries to become stale before they are fetched again doesn't always\nwork, especially when you know for a fact that a query's data is out of date\nbecause of something the user has done. For that purpose, the has an method that\nlets you intelligently mark queries as stale and potentially refetch them too!\n\n```\n\n// Invalidate every query in the cache\n\n// Invalidate every query with a key that starts with `todos`\n\n```\n\n```\n\n// Invalidate every query in the cache\n\n// Invalidate every query with a key that starts with `todos`\n\n```\n\n> Note: Where other libraries that use normalized caches would attempt to update\n> local queries with the new data either imperatively or via schema inference,\n> TanStack Query gives you the tools to avoid the manual labor that comes with\n> maintaining normalized caches and instead prescribes **targeted invalidation,\n> background-refetching and ultimately atomic updates**.\nWhen a query is invalidated with , two things happen:\n\n  * It is marked as stale. This stale state overrides any configurations being used in or related hooks\n  * If the query is currently being rendered via or related hooks, it will also be refetched in the background\n\nWhen using APIs like and (and others that support partial query matching), you\ncan match multiple queries by their prefix, or get really specific and match an\nexact query. For information on the types of filters you can use, please see .\n\nIn this example, we can use the prefix to invalidate any queries that start with\nin their query key:\n\n```\n\n// Get QueryClient from the context\n\n// Both queries below will be invalidated\n\n```\n\n```\n\n// Get QueryClient from the context\n\n// Both queries below will be invalidated\n\n```\n\nYou can even invalidate queries with specific variables by passing a more\nspecific query key to the method:\n\n```\n\n// The query below will be invalidated\n\n// However, the following query below will NOT be invalidated\n\n```\n\n```\n\n// The query below will be invalidated\n\n// However, the following query below will NOT be invalidated\n\n```\n\nThe API is very flexible, so even if you want to invalidate queries that don't\nhave any more variables or subkeys, you can pass an option to the method:\n\n```\n\n// The query below will be invalidated\n\n// However, the following query below will NOT be invalidated\n\n```\n\n```\n\n// The query below will be invalidated\n\n// However, the following query below will NOT be invalidated\n\n```\n\nIf you find yourself wanting granularity, you can pass a predicate function to\nthe method. This function will receive each instance from the query cache and\nallow you to return or for whether you want to invalidate that query:\n\n```\n\n// The query below will be invalidated\n\n// The query below will be invalidated\n\n// However, the following query below will NOT be invalidated\n\n```\n\n```\n\n// The query below will be invalidated\n\n// The query below will be invalidated\n\n// However, the following query below will NOT be invalidated\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Monitor K8s Applications Effortlessly. Get 100% Kubernetes production\nvisibility\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICE7DCZ3JCA7IE2JWF6YDT5QKC67DT2QYF67IT27YCA7IK2JWCAYD4KJWHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/invalidations-from-mutations\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nInvalidating queries is only half the battle. Knowing to invalidate them is the\nother half. Usually when a mutation in your app succeeds, it's VERY likely that\nthere are related queries in your application that need to be invalidated and\npossibly refetched to account for the new changes from your mutation.\n\nFor example, assume we have a mutation to post a new todo:\n\nWhen a successful mutation happens, we likely want all queries to get\ninvalidated and possibly refetched to show the new todo item. To do this, you\ncan use 's options and the 's function:\n\n```\n\n// When this mutation succeeds, invalidate any queries with the `todos` or\n`reminders` query key\n\n```\n\n```\n\n// When this mutation succeeds, invalidate any queries with the `todos` or\n`reminders` query key\n\n```\n\nYou can wire up your invalidations to happen using any of the callbacks\navailable in the\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I4KJKC67DT2QYF67IT27YCA7IK2JWCAYDT5QNHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/updates-from-mutation-responses\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nWhen dealing with mutations that objects on the server, it's common for the new\nobject to be automatically returned in the response of the mutation. Instead of\nrefetching any queries for that item and wasting a network call for data we\nalready have, we can take advantage of the object returned by the mutation\nfunction and update the existing query with the new data immediately using the\nmethod:\n\n```\n\n// The query below will be updated with the response from the\n\n```\n\n```\n\n// The query below will be updated with the response from the\n\n```\n\nYou might want to tie the logic into a reusable mutation, for that you can\ncreate a custom hook like this:\n\n```\n\n  // Notice the second argument is the variables object that the `mutate`\nfunction receives\n\n, { id: variables.id }], data)\n\n```\n\n```\n\n  // Notice the second argument is the variables object that the `mutate`\nfunction receives\n\n```\n\nUpdates via must be performed in an way. attempt to write directly to the cache\nby mutating data (that you retrieved from the cache) in place. It might work at\nfirst but can lead to subtle bugs along the way.\n\n```\n\n, { id }], (\n\n  // ‚ùå do not try this\n\n // ‚úÖ this is the way\n\n```\n\n```\n\n  // ‚ùå do not try this\n\n // ‚úÖ this is the way\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI527KC67DT2QYF67IT27YCA7IK2JWCAYDT5Q7HEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/optimistic-updates\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nReact Query provides two ways to optimistically update your UI before a mutation\nhas completed. You can either use the option to update your cache directly, or\nleverage the returned to update your UI from the result.\n\nThis is the simpler variant, as it doesn't interact with the cache directly.\n\n```\n\n, { text: newTodo }),\n\n // make sure to _return_ the Promise from the query invalidation\n\n // so that the mutation stays in `pending` state until the refetch is finished\n\n```\n\n```\n\n // make sure to _return_ the Promise from the query invalidation\n\n // so that the mutation stays in `pending` state until the refetch is finished\n\n```\n\nyou will then have access to , which contain the added todo. In your UI list,\nwhere the query is rendered, you can append another item to the list while the\nmutation :\n\nWe're rendering a temporary item with a different as long as the mutation is\npending. Once it completes, the item will automatically no longer be rendered.\nGiven that the refetch succeeded, we should see the item as a \"normal item\" in\nour list.\n\nIf the mutation errors, the item will also disappear. But we could continue to\nshow it, if we want, by checking for the state of the mutation. are cleared when\nthe mutation errors, so we can still access them, maybe even show a retry\nbutton:\n\n### [If the mutation and the query don't live in the same\ncomponent](https://tanstack.com/query/latest/docs/framework/react/guides/<#if-\nthe-mutation-and-the-query-dont-live-in-the-same-component>)\n\nThis approach works very well if the mutation and the query live in the same\ncomponent, However, you also get access to all mutations in other components via\nthe dedicated hook. It is best combined with a :\n\n```\n\n// somewhere in your app\n\n, { text: newTodo }),\n\n// access variables somewhere else\n\n```\n\n```\n\n// somewhere in your app\n\n// access variables somewhere else\n\n```\n\nwill be an , because there might be multiple mutations running at the same time.\nIf we need a unique key for the items, we can also select . This will even make\ndisplaying concurrent optimistic updates a breeze.\n\nWhen you optimistically update your state before performing a mutation, there is\na chance that the mutation will fail. In most of these failure cases, you can\njust trigger a refetch for your optimistic queries to revert them to their true\nserver state. In some circumstances though, refetching may not work correctly\nand the mutation error could represent some type of server issue that won't make\nit possible to refetch. In this event, you can instead choose to roll back your\nupdate.\n\nTo do this, 's handler option allows you to return a value that will later be\npassed to both and handlers as the last argument. In most cases, it is most\nuseful to pass a rollback function.\n\n### [Updating a list of todos when adding a new\ntodo](https://tanstack.com/query/latest/docs/framework/react/guides/<#updating-\na-list-of-todos-when-adding-a-new-todo>)\n\n```\n\n // When mutate is called:\n\n  // Cancel any outgoing refetches\n\n  // (so they don't overwrite our optimistic update)\n\n  // Snapshot the previous value\n\n  // Optimistically update to the new value\n\n  // Return a context object with the snapshotted value\n\n // If the mutation fails,\n\n // use the context returned from onMutate to roll back\n\n // Always refetch after error or success:\n\n```\n\n```\n\n // When mutate is called:\n\n  // Cancel any outgoing refetches\n\n  // (so they don't overwrite our optimistic update)\n\n  // Snapshot the previous value\n\n  // Optimistically update to the new value\n\n  // Return a context object with the snapshotted value\n\n // If the mutation fails,\n\n // use the context returned from onMutate to roll back\n\n // Always refetch after error or success:\n\n```\n\n```\n\n // When mutate is called:\n\n  // Cancel any outgoing refetches\n\n  // (so they don't overwrite our optimistic update)\n\n  // Snapshot the previous value\n\n  // Optimistically update to the new value\n\n  // Return a context with the previous and new todo\n\n // If the mutation fails, use the context we returned above\n\n // Always refetch after error or success:\n\n```\n\n```\n\n // When mutate is called:\n\n  // Cancel any outgoing refetches\n\n  // (so they don't overwrite our optimistic update)\n\n  // Snapshot the previous value\n\n  // Optimistically update to the new value\n\n  // Return a context with the previous and new todo\n\n // If the mutation fails, use the context we returned above\n\n // Always refetch after error or success:\n\n```\n\nYou can also use the function in place of the separate and handlers if you wish:\n\n```\n\n```\n\n```\n\n```\n\nIf you only have one place where the optimistic result should be shown, using\nand updating the UI directly is the approach that requires less code and is\ngenerally easier to reason about. For example, you don't need to handle\nrollbacks at all.\n\nHowever, if you have multiple places on the screen that would require to know\nabout the update, manipulating the cache directly will take care of this for you\nautomatically.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI5K7KC67DT2QYF67IT27YCA7IK2JWCAYD4K3LHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/query-cancellation\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nTanStack Query provides each query function with an . When a query becomes out-\nof-date or inactive, this will become aborted. This means that all queries are\ncancellable, and you can respond to the cancellation inside your query function\nif desired. The best part about this is that it allows you to continue to use\nnormal async/await syntax while getting all the benefits of automatic\ncancellation.\n\nThe API is available in , but if your runtime environment does not support it,\nyou will need to provide a polyfill. There are .\n\nBy default, queries that unmount or become unused before their promises are\nresolved are cancelled. This means that after the promise has resolved, the\nresulting data will be available in the cache. This is helpful if you've started\nreceiving a query, but then unmount the component before it finishes. If you\nmount the component again and the query has not been garbage collected yet, data\nwill be available.\n\nHowever, if you consume the , the Promise will be cancelled (e.g. aborting the\nfetch) and therefore, also the Query must be cancelled. Cancelling the query\nwill result in its state being to its previous state.\n\n```\n\n   // Pass the signal to one fetch\n\n    // Or pass it to several\n\n```\n\n```\n\n   // Pass the signal to one fetch\n\n    // Or pass it to several\n\n```\n\n```\n\n   // Pass the signal to `axios`\n\n```\n\n```\n\n   // Pass the signal to `axios`\n\n```\n\n### [Using with version lower than\nv0.22.0](https://tanstack.com/query/latest/docs/framework/react/guides/<#using-\naxios-with-version-lower-than-v0220>)\n\n```\n\n  // Create a new CancelToken source for this request\n\n   // Pass the source token to your request\n\n  // Cancel the request if TanStack Query signals to abort\n\n'Query was cancelled by TanStack Query'\n\n```\n\n```\n\n  // Create a new CancelToken source for this request\n\n   // Pass the source token to your request\n\n  // Cancel the request if TanStack Query signals to abort\n\nQuery was cancelled by TanStack Query\n\n```\n\n```\n\n```\n\nAn can be set in the client method.\n\n```\n\n({ document: query, signal })\n\n```\n\n## [Using with version lower than\nv4.0.0](https://tanstack.com/query/latest/docs/framework/react/guides/<#using-\ngraphql-request-with-version-lower-than-v400>)\n\nAn can be set in the constructor.\n\n```\n\n```\n\nYou might want to cancel a query manually. For example, if the request takes a\nlong time to finish, you can allow the user to click a cancel button to stop the\nrequest. To do this, you just need to call , which will cancel the query and\nrevert it back to its previous state. If you have consumed the passed to the\nquery function, TanStack Query will additionally also cancel the Promise.\n\n```\n\n```\n\nCancelation does not work when working with hooks: , and .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JUCWADTZ3JCA7IE2JWF67IT23KC67DT2QYF67IT27YCA7IK2JWCAYD4K3UHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/scroll-restoration\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nTraditionally, when you navigate to a previously visited page on a web browser,\nyou would find that the page would be scrolled to the exact position where you\nwere before you navigated away from that page. This is called and has been in a\nbit of a regression since web applications have started moving towards client\nside data fetching. With TanStack Query however, that's no longer the case.\n\nOut of the box, \"scroll restoration\" for all queries (including paginated and\ninfinite queries) Just Works‚Ñ¢Ô∏è in TanStack Query. The reason for this is that\nquery results are cached and able to be retrieved synchronously when a query is\nrendered. As long as your queries are being cached long enough (the default time\nis 5 minutes) and have not been garbage collected, scroll restoration will work\nout of the box all the time.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I423KC67DT2QYF67IT27YCA7IK2JWCAYD4KQJHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/filters\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nSome methods within TanStack Query accept a or object.\n\nA query filter is an object with certain conditions to match a query with:\n\n```\n\n// Remove all inactive queries that begin with `posts` in the key\n\n// Refetch all active queries\n\n// Refetch all active queries that begin with `posts` in the key\n\n```\n\n```\n\n// Remove all inactive queries that begin with `posts` in the key\n\n// Refetch all active queries\n\n// Refetch all active queries that begin with `posts` in the key\n\n```\n\nA query filter object supports the following properties:\n\n  *     * Set this property to define a query key to match on.\n  *     * If you don't want to search queries inclusively by query key, you can pass the option to return only the query with the exact query key you have passed.\n  * type?: 'active' | 'inactive' | 'all'\n    * When set to it will match active queries.\n    * When set to it will match inactive queries.\n  *     * When set to it will match stale queries.\n    * When set to it will match fresh queries.\n  *     * When set to it will match queries that are currently fetching.\n    * When set to it will match queries that wanted to fetch, but have been .\n    * When set to it will match queries that are not fetching.\n  * predicate?: (query: Query) => boolean\n    * This predicate function will be used as a final filter on all matching queries. If no other filters are specified, this function will be evaluated against every query in the cache.\n\nA mutation filter is an object with certain conditions to match a mutation with:\n\n```\n\n// Get the number of all fetching mutations\n\n// Filter mutations by mutationKey\n\n// Filter mutations using a predicate function\n\n```\n\n```\n\n// Get the number of all fetching mutations\n\n// Filter mutations by mutationKey\n\n// Filter mutations using a predicate function\n\n```\n\nA mutation filter object supports the following properties:\n\n  *     * Set this property to define a mutation key to match on.\n  *     * If you don't want to search mutations inclusively by mutation key, you can pass the option to return only the mutation with the exact mutation key you have passed.\n  *     * Allows for filtering mutations according to their status.\n  * predicate?: (mutation: Mutation) => boolean\n    * This predicate function will be used as a final filter on all matching mutations. If no other filters are specified, this function will be evaluated against every mutation in the cache.\n\nReturns a boolean that indicates whether a query matches the provided set of\nquery filters.\n\nReturns a boolean that indicates whether a mutation matches the provided set of\nmutation filters.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD527LCKSITZ3JCA7IE2JYCTADTK7KC67DT2QYF67IT27YCA7IK2JWCAYDT53LHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/request-waterfalls\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nApplication performance is a broad and complex area and while React Query can't\nmake your APIs faster, there are still things to be mindful about in how you use\nReact Query to ensure the best performance.\n\nThe biggest performance footgun when using React Query, or indeed any data\nfetching library that lets you fetch data inside of components, is request\nwaterfalls. The rest of this page will explain what they are, how you can spot\nthem and how you can restructure your application or APIs to avoid them.\n\nThe [Prefetching & Router Integration\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/prefetching>)\nbuilds on this and teaches you how to prefetch data ahead of time when it's not\npossible or feasible to restructure your application or APIs.\n\nThe [Server Rendering & Hydration\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/ssr>)\nteaches you how to prefetch data on the server and pass that data down to the\nclient so you don't have to fetch it again.\n\nThe further teaches you how to apply these patterns to Server Components and\nStreaming Server Rendering.\n\n## [What is a Request\nWaterfall?](https://tanstack.com/query/latest/docs/framework/react/guides/<#what-\nis-a-request-waterfall>)\n\nA request waterfall is what happens when a request for a resource (code, css,\nimages, data) does not start until another request for a resource has finished.\n\nConsider a web page. Before you can load things like the CSS, JS etc, the\nbrowser first needs to load the markup. This is a request waterfall.\n\n```\n\n```\n\n```\n\n```\n\nIf you fetch your CSS inside a JS file, you now have a double waterfall:\n\n```\n\n3.   |-> CSS\n\n```\n\n```\n\n3.   |-> CSS\n\n```\n\nIf that CSS uses a background image, it's a triple waterfall:\n\n```\n\n3.   |-> CSS\n4.    |-> Image\n\n```\n\n```\n\n3.   |-> CSS\n4.    |-> Image\n\n```\n\nThe best way to spot and analyze your request waterfalls is usually by opening\nyour browsers devtools \"Network\" tab.\n\nEach waterfall represents at least one roundtrip to the server, unless the\nresource is locally cached (in practice, some of these waterfalls might\nrepresent more than one roundtrip because the browser needs to establish a\nconnection which requires some back and forth, but let's ignore that here).\nBecause of this, the negative effects of request waterfalls are highly dependent\non the users latency. Consider the example of the triple waterfall, which\nactually represents 4 server roundtrips. With 250ms latency, which is not\nuncommon on 3g networks or in bad network conditions, we end up with a total\ntime of 4*250=1000ms . If we were able to flatten that to the first example with\nonly 2 roundtrips, we get 500ms instead, possibly loading that background image\nin half the time!\n\n## [Request Waterfalls & React\nQuery](https://tanstack.com/query/latest/docs/framework/react/guides/<#request-\nwaterfalls--react-query>)\n\nNow let's consider React Query. We'll focus on the case without Server Rendering\nfirst. Before we can even start making a query, we need to load the JS, so\nbefore we can show that data on the screen, we have a double waterfall:\n\n```\n\n3.   |-> Query\n\n```\n\n```\n\n3.   |-> Query\n\n```\n\nWith this as a basis, let's look at a few different patterns that can lead to\nRequest Waterfalls in React Query, and how to avoid them.\n\n  * Single Component Waterfalls / Serial Queries\n\n### [Single Component Waterfalls / Serial\nQueries](https://tanstack.com/query/latest/docs/framework/react/guides/<#single-\ncomponent-waterfalls--serial-queries>)\n\nWhen a single component first fetches one query, and then another, that's a\nrequest waterfall. This can happen when the second query is a , that is, it\ndepends on data from the first query when fetching:\n\n```\n\n// Then get the user's projects\n\n // The query will not execute until the userId exists\n\n```\n\n```\n\n// Then get the user's projects\n\n // The query will not execute until the userId exists\n\n```\n\nWhile not always feasible, for optimal performance it's better to restructure\nyour API so you can fetch both of these in a single query. In the example above,\ninstead of first fetching to be able to , introducing a new query would flatten\nthe waterfall.\n\n> Another way to mitigate dependent queries without restructuring your API is to\n> move the waterfall to the server where latency is lower. This is the idea\n> behind Server Components which are covered in the .\nAnother example of serial queries is when you use React Query with Suspense:\n\n```\n\n // The following queries will execute in serial, causing separate roundtrips to\nthe server:\n\n // Note that since the queries above suspend rendering, no data\n\n // gets rendered until all of the queries finished\n\n```\n\n```\n\n // The following queries will execute in serial, causing separate roundtrips to\nthe server:\n\n // Note that since the queries above suspend rendering, no data\n\n // gets rendered until all of the queries finished\n\n```\n\nNote that with regular these would happen in parallel.\n\nLuckily, this is easy to fix, by always using the hook when you have multiple\nsuspenseful queries in a component.\n\n```\n\n```\n\nNested Component Waterfalls is when both a parent and a child component contains\nqueries, and the parent does not render the child until its query is done. This\ncan happen both with and .\n\nIf the child renders conditionally based on the data in the parent, or if the\nchild relies on some part of the result being passed down as a prop from the\nparent to make its query, we have a nested component waterfall.\n\nLet's first look at an example where the child is dependent on the parent.\n\n```\n\n```\n\nNote that while takes a prop from the parent, that id is already available when\nthe renders so there is no reason we could not fetch the comments at the same\ntime as the article. In real world applications, the child might be nested far\nbelow the parent and these kinds of waterfalls are often trickier to spot and\nfix, but for our example, one way to flatten the waterfall would be to hoist the\ncomments query to the parent instead:\n\n```\n\n```\n\nThe two queries will now fetch in parallel. Note that if you are using suspense,\nyou'd want to combine these two queries into a single instead.\n\nAnother way to flatten this waterfall would be to prefetch the comments in the\ncomponent, or prefetch both of these queries at the router level on page load or\npage navigation, read more about this in the [Prefetching & Router Integration\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/prefetching>).\n\nNext, let's look at a .\n\n```\n\n```\n\nThe second query is dependent on it's parent in two different ways. First of\nall, it doesn't ever happen unless the is a graph, and second, it needs an from\nthe parent.\n\n```\n\n```\n\n```\n\n```\n\nIn this example, we can't trivially flatten the waterfall by just hoisting the\nquery to the parent, or even adding prefetching. Just like the dependent query\nexample at the beginning of this guide, one option is to refactor our API to\ninclude the graph data in the query. Another more advanced solution is to\nleverage Server Components to move the waterfall to the server where latency is\nlower (read more about this in the ) but note that this can be a very big\narchitectural change.\n\nYou can have good performance even with a few query waterfalls here and there,\njust know they are a common performance concern and be mindful about them. An\nespecially insidious version is when Code Splitting is involved, let's take a\nlook at this next.\n\nSplitting an applications JS-code into smaller chunks and only loading the\nnecessary parts is usually a critical step in achieving good performance. It\ndoes have a downside however, in that it often introduces request waterfalls.\nWhen that code split code also has a query inside it, this problem is worsened\nfurther.\n\nConsider this a slightly modified version of the Feed example.\n\n```\n\n// This lazy loads the GraphFeedItem component, meaning\n\n// it wont start loading until something renders it\n\n```\n\n```\n\n// This lazy loads the GraphFeedItem component, meaning\n\n// it wont start loading until something renders it\n\n```\n\nThis example has a double waterfall, looking like this:\n\n```\n\n2.  |> JS for <GraphFeedItem>\n3.   |> getGraphDataById()\n\n```\n\n```\n\n2.  |> JS for <GraphFeedItem>\n3.   |> getGraphDataById()\n\n```\n\nBut that's just looking at the code from the example, if we consider what the\nfirst page load of this page looks like, we actually have to complete 5 round\ntrips to the server before we can render the graph!\n\n```\n\n2.  |> JS for <Feed>\n3.   |> getFeed()\n4.    |> JS for <GraphFeedItem>\n5.     |> getGraphDataById()\n\n```\n\n```\n\n2.  |> JS for <Feed>\n3.   |> getFeed()\n4.    |> JS for <GraphFeedItem>\n5.     |> getGraphDataById()\n\n```\n\nNote that this looks a bit different when server rendering, we will explore that\nfurther in the [Server Rendering & Hydration\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/ssr>).\nAlso note that it's not uncommon for the route that contains to also be code\nsplit, which could add yet another hop.\n\nIn the code split case, it might actually help to hoist the query to the\ncomponent and make it conditional, or add a conditional prefetch. That query\ncould then be fetched in parallel with the code, turning the example part into\nthis:\n\n```\n\n2.  |> JS for <GraphFeedItem>\n\n```\n\n```\n\n2.  |> JS for <GraphFeedItem>\n\n```\n\nThis is very much a tradeoff however. You are now including the data fetching\ncode for in the same bundle as , so evaluate what is best for your case. Read\nmore about how to do this in the [Prefetching & Router Integration\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/prefetching>).\n\n>   * Include all data fetching code in the main bundle, even if we seldom use\n> it\n>   * Put the data fetching code in the code split bundle, but with a request\n> waterfall\n>\n\n> is not great and has been one of the motivations for Server Components. With\n> Server Components, it's possible to avoid both, read more about how this\n> applies to React Query in the .\nRequest Waterfalls are a very common and complex performance concern with many\ntradeoffs. There are many ways to accidentally introduce them into your\napplication:\n\n  * Adding a query to a child, not realizing a parent already has a query\n  * Adding a query to a parent, not realizing a child already has a query\n  * Moving a component with descendants that has a query to a new parent with an ancestor that has a query\n\nBecause of this accidental complexity, it pays off to be mindful of waterfalls\nand regularly examine your application looking for them (a good way is to\nexamine the Network tab every now and then!). You don't necessarily have to\nflatten them all to have good performance, but keep an eye out for the high\nimpact ones.\n\nIn the next guide, we'll look at more ways to flatten waterfalls, by leveraging\n.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ See what your team could do with The DevSecOps Platform. Take GitLab for a\nspin.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JLCAADLZ3JCA7IE2JWCABI52QKC67DT2QYF67IT27YCA7IK2JWCAYDT53NHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/prefetching\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nWhen you know or suspect that a certain piece of data will be needed, you can\nuse prefetching to populate the cache with that data ahead of time, leading to a\nfaster experience.\n\nThere are a few different prefetching patterns:\n\n  1. During Server Rendering (another form of router integration)\n\nIn this guide, we'll take a look at the first three, while the fourth will be\ncovered in depth in the [Server Rendering & Hydration\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/ssr>)\nand the .\n\nOne specific use of prefetching is to avoid Request Waterfalls, for an in-depth\nbackground and explanation of those, see the [Performance & Request Waterfalls\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/request-\nwaterfalls>).\n\nBefore jumping into the different specific prefetch patterns, let's look at the\nand functions. First a few basics:\n\n  * Out of the box, these functions use the default configured for the to determine whether existing data in the cache is fresh or needs to be fetched again\n  * You can also pass a specific like this: prefetchQuery({ queryKey: ['todos'], queryFn: fn, staleTime: 5000 })\n    * This is only used for the prefetch, you still need to set it for any call as well\n    * If you want to ignore and instead always return data if it's available in the cache, you can use the function.\n    * Tip: If you are prefetching on the server, set a default higher than for that to avoid having to pass in a specific to each prefetch call\n  * If no instances of appear for a prefetched query, it will be deleted and garbage collected after the time specified in \n  * These functions returns and thus never return query data. If that's something you need, use / instead.\n  * The prefetch functions never throws errors because they usually try to fetch again in a which is a nice graceful fallback. If you need to catch errors, use / instead.\n\nThis is how you use :\n\n```\n\n // The results of this query will be cached like a normal query\n\n```\n\n```\n\n // The results of this query will be cached like a normal query\n\n```\n\nInfinite Queries can be prefetched like regular Queries. Per default, only the\nfirst page of the Query will be prefetched and will be stored under the given\nQueryKey. If you want to prefetch more than one page, you can use the option, in\nwhich case you also have to provide a function:\n\n```\n\n // The results of this query will be cached like a normal query\n\n// prefetch the first 3 pages\n\n```\n\n```\n\n // The results of this query will be cached like a normal query\n\n // prefetch the first 3 pages\n\n```\n\nNext, let's look at how you can use these and other ways to prefetch in\ndifferent situations.\n\nA straightforward form of prefetching is doing it when the user interacts with\nsomething. In this example we'll use to start a prefetch on or .\n\n```\n\n   // Prefetch only fires when data is older than the staleTime,\n\n   // so in a case like this you definitely want to set one\n\n```\n\n```\n\n   // Prefetch only fires when data is older than the staleTime,\n\n   // so in a case like this you definitely want to set one\n\n```\n\nPrefetching during the component lifecycle is useful when we know some child or\ndescendant will need a particular piece of data, but we can't render that until\nsome other query has finished loading. Let's borrow an example from the Request\nWaterfall guide to explain:\n\n```\n\n```\n\nThis results in a request waterfall looking like this:\n\n```\n\n```\n\n```\n\n```\n\nAs mentioned in that guide, one way to flatten this waterfall and improve\nperformance is to hoist the query to the parent and pass down the result as a\nprop, but what if this is not feasible or desirable, for example when the\ncomponents are unrelated and have multiple levels between them?\n\nIn that case, we can instead prefetch the query in the parent. The simplest way\nto do this is to use a query but ignore the result:\n\n```\n\n  // Optional optimization to avoid rerenders when this query changes:\n\n```\n\n```\n\n  // Optional optimization to avoid rerenders when this query changes:\n\n```\n\nThis starts fetching immediately and flattens the waterfall:\n\n```\n\n```\n\n```\n\n```\n\nIf you want to prefetch together with Suspense, you will have to do things a bit\ndifferently. You can't use to prefetch, since the prefetch would block the\ncomponent from rendering. You also can not use for the prefetch, because that\nwouldn't start the prefetch until after suspenseful query had resolved. For this\nscenario, you can use the or the hooks available in the library.\n\nYou can now use in the component that actually needs the data. You want to wrap\nthis later component in its own boundary so the \"secondary\" query we are\nprefetching does not block rendering of the \"primary\" data.\n\n```\n\n```\n\nAnother way is to prefetch inside of the query function. This makes sense if you\nknow that every time an article is fetched it's very likely comments will also\nbe needed. For this, we'll use :\n\n```\n\n```\n\nPrefetching in an effect also works, but note that if you are using in the same\ncomponent, this effect wont run until the query finishes which might not be what\nyou want.\n\n```\n\n```\n\nTo recap, if you want to prefetch a query during the component lifecycle, there\nare a few different ways to do it, pick the one that suits your situation best:\n\n  * Prefetch before a suspense boundary using or hooks\n  * Prefetch inside the query function\n\nLet's look at a slightly more advanced case next.\n\n### [Dependent Queries & Code\nSplitting](https://tanstack.com/query/latest/docs/framework/react/guides/<#dependent-\nqueries--code-splitting>)\n\nSometimes we want to prefetch conditionally, based on the result of another\nfetch. Consider this example borrowed from the [Performance & Request Waterfalls\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/request-\nwaterfalls>):\n\n```\n\n// This lazy loads the GraphFeedItem component, meaning\n\n// it wont start loading until something renders it\n\n```\n\n```\n\n// This lazy loads the GraphFeedItem component, meaning\n\n// it wont start loading until something renders it\n\n```\n\nAs noted over in that guide, this example leads to the following double request\nwaterfall:\n\n```\n\n2.  |> JS for <GraphFeedItem>\n3.   |> getGraphDataById()\n\n```\n\n```\n\n2.  |> JS for <GraphFeedItem>\n3.   |> getGraphDataById()\n\n```\n\nIf we can not restructure our API so also returns the data when necessary, there\nis no way to get rid of the waterfall, but by leveraging conditional\nprefetching, we can at least load the code and data in parallel. Just like\ndescribed above, there are multiple ways to do this, but for this example, we'll\ndo it in the query function:\n\n```\n\n```\n\nThis would load the code and data in parallel:\n\n```\n\n2.  |> JS for <GraphFeedItem>\n\n```\n\n```\n\n2.  |> JS for <GraphFeedItem>\n\n```\n\nThere is a tradeoff however, in that the code for is now included in the parent\nbundle instead of in so you'll need to determine what's the best performance\ntradeoff on a case by case basis. If are likely, it's probably worth to include\nthe code in the parent. If they are exceedingly rare, it's probably not.\n\nBecause data fetching in the component tree itself can easily lead to request\nwaterfalls and the different fixes for that can be cumbersome as they accumulate\nthroughout the application, an attractive way to do prefetching is integrating\nit at the router level.\n\nIn this approach, you explicitly declare for each what data is going to be\nneeded for that component tree, ahead of time. Because Server Rendering has\ntraditionally needed all data to be loaded before rendering starts, this has\nbeen the dominating approach for SSR'd apps for a long time. This is still a\ncommon approach and you can read more about it in the [Server Rendering &\nHydration\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/ssr>).\n\nFor now, let's focus on the client side case and look at an example of how you\ncan make this work with . These examples leave out a lot of setup and\nboilerplate to stay concise, you can check out a over in the .\n\nWhen integrating at the router level, you can choose to either rendering of that\nroute until all data is present, or you can start a prefetch but not await the\nresult. That way, you can start rendering the route as soon as possible. You can\nalso mix these two approaches and await some critical data, but start rendering\nbefore all the secondary data has finished loading. In this example, we'll\nconfigure an route to not render until the article data has finished loading, as\nwell as start prefetching comments as soon as possible, but not block rendering\nthe route if comments haven't finished loading yet.\n\n```\n\n  routeContext: { articleQueryOptions, commentsQueryOptions },\n\n  // Fetch comments asap, but don't block\n\n  // Don't render the route at all until article has been fetched\n\n```\n\n```\n\n  // Fetch comments asap, but don't block\n\n  // Don't render the route at all until article has been fetched\n\n```\n\nIntegration with other routers is also possible, see the for another\ndemonstration.\n\nIf you already have the data for your query synchronously available, you don't\nneed to prefetch it. You can just use the to directly add or update a query's\ncached result by key.\n\nFor a deep-dive on how to get data into your Query Cache before you fetch, have\na look at [#17: Seeding the Query\nCache](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/community/tkdodos-\nblog#17-seeding-the-query-cache>) from the Community Resources.\n\nIntegrating with Server Side routers and frameworks is very similar to what we\njust saw, with the addition that the data has to passed from the server to the\nclient to be hydrated into the cache there. To learn how, continue on to the\n[Server Rendering & Hydration\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/ssr>).\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD527LCKSITZ3JCA7IE2JYCTADT53KC67DT2QYF67IT27YCA7IK2JWCAYDT5QWHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/ssr\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nIn this guide you'll learn how to use React Query with server rendering.\n\nSee the guide on for some background. You might also want to check out the\n[Performance & Request Waterfalls\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/request-\nwaterfalls>) before that.\n\nFor advanced server rendering patterns, such as streaming, Server Components and\nthe new Next.js app router, see the .\n\nIf you just want to see some code, you can skip ahead to the [Full Next.js pages\nrouter\nexample](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/ssr/#full-\nnextjs-pages-router-example>) or the below.\n\n## [Server Rendering & React\nQuery](https://tanstack.com/query/latest/docs/framework/react/guides/<#server-\nrendering--react-query>)\n\nSo what is server rendering anyway? The rest of this guide will assume you are\nfamiliar with the concept, but let's spend some time to look at how it relates\nto React Query. Server rendering is the act of generating the initial html on\nthe server, so that the user has some content to look at as soon as the page\nloads. This can happen on demand when a page is requested (SSR). It can also\nhappen ahead of time either because a previous request was cached, or at build\ntime (SSG).\n\nIf you've read the Request Waterfalls guide, you might remember this:\n\n```\n\n1. |-> Markup (without content)\n\n3.   |-> Query\n\n```\n\n```\n\n1. |-> Markup (without content)\n\n3.   |-> Query\n\n```\n\nWith a client rendered application, these are the minimum 3 server roundtrips\nyou will need to make before getting any content on the screen for the user. One\nway of viewing server rendering is that it turns the above into this:\n\n```\n\n1. |-> Markup (with content AND initial data)\n\n```\n\n```\n\n1. |-> Markup (with content AND initial data)\n\n```\n\nAs soon as is complete, the user can see the content and when finishes, the page\nis interactive and clickable. Because the markup also contains the initial data\nwe need, step does not need to run on the client at all, at least until you want\nto revalidate the data for some reason.\n\nThis is all from the clients perspective. On the server, we need to that data\nbefore we generate/render the markup, we need to that data into a serializable\nformat we can embed in the markup, and on the client we need to that data into a\nReact Query cache so we can avoid doing a new fetch on the client.\n\nRead on to learn how to implement these three steps with React Query.\n\n## [A quick note on\nSuspense](https://tanstack.com/query/latest/docs/framework/react/guides/<#a-quick-\nnote-on-suspense>)\n\nThis guide uses the regular API. While we don't necessarily recommend it, it is\npossible to replace this with instead **as long as you always prefetch all your\nqueries**. The upside is that you get to use for loading states on the client.\n\nIf you do forget to prefetch a query when you are using , the consequences will\ndepend on the framework you are using. In some cases, the data will Suspend and\nget fetched on the server but never be hydrated to the client, where it will\nfetch again. In these cases you will get a markup hydration mismatch, because\nthe server and the client tried to render different things.\n\nThe first steps of using React Query is always to create a and wrap the\napplication in a . When doing server rendering, it's important to create the\ninstance , in React state (an instance ref works fine too). **This ensures that\ndata is not shared between different users and requests** , while still only\ncreating the once per component lifecycle.\n\n```\n\n// const queryClient = new QueryClient()\n\n// Creating the queryClient at the file root level makes the cache shared\n\n// between all requests and means _all_ data gets passed to _all_ users.\n\n// Besides being bad for performance, this also leaks any sensitive data.\n\n // Instead do this, which ensures each request has its own cache:\n\n      // With SSR, we usually want to set some default staleTime\n      // above 0 to avoid refetching immediately on the client\n\n```\n\n```\n\n// const queryClient = new QueryClient()\n\n// Creating the queryClient at the file root level makes the cache shared\n\n// between all requests and means _all_ data gets passed to _all_ users.\n\n// Besides being bad for performance, this also leaks any sensitive data.\n\n // Instead do this, which ensures each request has its own cache:\n\n      // With SSR, we usually want to set some default staleTime\n      // above 0 to avoid refetching immediately on the client\n\n```\n\n```\n\n      // With SSR, we usually want to set some default staleTime\n      // above 0 to avoid refetching immediately on the client\n\n```\n\n```\n\n      // With SSR, we usually want to set some default staleTime\n      // above 0 to avoid refetching immediately on the client\n\n```\n\nThe quickest way to get started is to not involve React Query at all when it\ncomes to prefetching and not use the / APIs. What you do instead is passing the\nraw data in as the option to . Let's look at an example using Next.js pages\nrouter, using .\n\n```\n\n { props: { posts } }\n\n```\n\nThis also works with or even the older and the same pattern can be applied in\nany other framework that has equivalent functions. This is what the same example\nlooks like with Remix:\n\n```\n\n```\n\nThe setup is minimal and this can be a quick solution for some cases, but there\nare a when compared to the full approach:\n\n  * If you are calling in a component deeper down in the tree you need to pass the down to that point\n  * If you are calling with the same query in multiple locations, passing to only one of them can be brittle and break when your app changes since. If you remove or move the component that has the with , the more deeply nested might no longer have any data. Passing to queries that needs it can also be cumbersome.\n  * There is no way to know at what time the query was fetched on the server, so and determining if the query needs refetching is based on when the page loaded instead\n  * If there is already data in the cache for a query, will never overwrite this data, **even if the new data is fresher than the old one**.\n    * To understand why this is especially bad, consider the example above. If you navigate back and forth to a page several times, would get called each time and fetch new data, but because we are using the option, the client cache and data would never be updated.\n\nSetting up the full hydration solution is straightforward and does not have\nthese drawbacks, this will be the focus for the rest of the documentation.\n\nWith just a little more setup, you can use a to prefetch queries during a\npreload phase, pass a serialized version of that to the rendering part of the\napp and reuse it there. This avoid the drawbacks above. Feel free to skip ahead\nfor full Next.js pages router and Remix examples, but at a general level these\nare the extra steps:\n\n  * In the framework loader function, create a const queryClient = new QueryClient(options)\n  * In the loader function, do for each query you want to prefetch\n    * You want to use to fetch the queries in parallel when possible\n    * It's fine to have queries that aren't prefetched. These wont be server rendered, instead they will be fetched on the client after the application is interactive. This can be great for content that are shown only after user interaction, or is far down on the page to avoid blocking more critical content.\n  * From the loader, return , note that the exact syntax to return this differs between frameworks\n  * Wrap your tree with where comes from the framework loader. How you get also differs between frameworks.\n    * This can be done for each route, or at the top of the application to avoid boilerplate, see examples\n\n> An interesting detail is that there are actually s involved. The framework\n> loaders are a form of \"preloading\" phase that happens before rendering, and\n> this phase has its own that does the prefetching. The dehydrated result of\n> this phase gets passed to the server rendering process the client rendering\n> process which each has its own . This ensures they both start with the same\n> data so they can return the same markup.\n> Server Components are another form of \"preloading\" phase, that can also\n> \"preload\" (pre-render) parts of a React component tree. Read more in the .\n### [Full Next.js pages router\nexample](https://tanstack.com/query/latest/docs/framework/react/guides/<#full-\nnextjs-pages-router-example>)\n\n> For app router documentation, see the .\n```\n\n      // With SSR, we usually want to set some default staleTime\n      // above 0 to avoid refetching immediately on the client\n\n```\n\n```\n\n      // With SSR, we usually want to set some default staleTime\n      // above 0 to avoid refetching immediately on the client\n\n```\n\n```\n\n// This could also be getServerSideProps\n\n // This useQuery could just as well happen in some deeper child to\n\n // the <PostsRoute>, data will be available immediately either way\n\n // This query was not prefetched on the server and will not start\n\n // fetching until on the client, both patterns are fine to mix\n\n```\n\n```\n\n// This could also be getServerSideProps\n\n // This useQuery could just as well happen in some deeper child to\n\n // the <PostsRoute>, data will be available immediately either way\n\n // This query was not prefetched on the server and will not start\n\n // fetching until on the client, both patterns are fine to mix\n\n```\n\n```\n\n      // With SSR, we usually want to set some default staleTime\n      // above 0 to avoid refetching immediately on the client\n\n```\n\n```\n\n      // With SSR, we usually want to set some default staleTime\n      // above 0 to avoid refetching immediately on the client\n\n```\n\nIn each route, note that it's fine to do this in nested routes too:\n\n```\n\n // This useQuery could just as well happen in some deeper child to\n\n // the <PostsRoute>, data will be available immediately either way\n\n // This query was not prefetched on the server and will not start\n\n // fetching until on the client, both patterns are fine to mix\n\n```\n\n```\n\n // This useQuery could just as well happen in some deeper child to\n\n // the <PostsRoute>, data will be available immediately either way\n\n // This query was not prefetched on the server and will not start\n\n // fetching until on the client, both patterns are fine to mix\n\n```\n\nHaving this part in every route might seem like a lot of boilerplate:\n\nWhile there is nothing wrong with this approach, if you want to get rid of this\nboilerplate, here's how you can modify your setup in Next.js:\n\n```\n\n// Remove PostsRoute with the HydrationBoundary and instead export Posts\ndirectly:\n\n```\n\n```\n\n// Remove PostsRoute with the HydrationBoundary and instead export Posts\ndirectly:\n\n```\n\nWith Remix, this is a little bit more involved, we recommend checking out the\npackage.\n\nOver in the Prefetching guide we learned how to , but how do we do this in\nframework loaders? Consider the following code, taken from the :\n\n```\n\n// Then get the user's projects\n\n // The query will not execute until the userId exists\n\n```\n\n```\n\n// Then get the user's projects\n\n // The query will not execute until the userId exists\n\n```\n\nHow would we prefetch this so it can be server rendered? Here's an example:\n\n```\n\n// For Remix, rename this to loader instead\n\n // return json({ dehydratedState: dehydrate(queryClient) })\n\n```\n\n```\n\n// For Remix, rename this to loader instead\n\n // return json({ dehydratedState: dehydrate(queryClient) })\n\n```\n\nThis can get more complex of course, but since these loader functions are just\nJavaScript, you can use the full power of the language to build your logic. Make\nsure you prefetch all queries that you want to be server rendered.\n\nReact Query defaults to a graceful degradation strategy. This means:\n\n  * only includes successful queries, not failed ones\n\nThis will lead to any failed queries being retried on the client and that the\nserver rendered output will include loading states instead of the full content.\n\nWhile a good default, sometimes this is not what you want. When critical content\nis missing, you might want to respond with a 404 or 500 status code depending on\nthe situation. For these cases, use instead, which will throw errors when it\nfails, letting you handle things in a suitable way.\n\n```\n\n // Handle the error, refer to your framework documentation\n\n// You might also want to check and handle any invalid `result` here\n\n```\n\n```\n\n // Handle the error, refer to your framework documentation\n\n// You might also want to check and handle any invalid `result` here\n\n```\n\nIf you for some reason want to include failed queries in the dehydrated state to\navoid retries, you can use the option to override the default function and\nimplement your own logic:\n\n```\n\n  // This will include all queries, including failed ones,\n\n  // but you can also implement your own logic by inspecting `query`\n\n```\n\n```\n\n  // This will include all queries, including failed ones,\n\n  // but you can also implement your own logic by inspecting `query`\n\n```\n\nWhen doing return { props: { dehydratedState: dehydrate(queryClient) } } in\nNext.js, or return json({ dehydratedState: dehydrate(queryClient) }) in Remix,\nwhat happens is that the representation of the is serialized by the framework so\nit can be embedded into the markup and transported to the client.\n\nBy default, these frameworks only supports returning things that are safely\nserializable/parsable, and therefore does not support , , , , , , , , , regular\nexpressions etc. This also means that you can not return any of these things\nfrom your queries. If returning these values is something you want, check out or\nsimilar packages.\n\nIf you are using a custom SSR setup, you need to take care of this step\nyourself. Your first instinct might be to use , but because this doesn't escape\nthings like by default, this can easily lead to in your application. also escape\nvalues and is unsafe to use by itself in a custom SSR setup (unless you add an\nextra step for escaping the output). Instead we recommend using a library like\nor which are both safe against XSS injections out of the box.\n\n## [A note about request\nwaterfalls](https://tanstack.com/query/latest/docs/framework/react/guides/<#a-note-\nabout-request-waterfalls>)\n\nIn the [Performance & Request Waterfalls\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/request-\nwaterfalls>) we mentioned we would revisit how server rendering changes one of\nthe more complex nested waterfalls. Check back for the , but as a refresher, we\nhave a code split component inside a component. This only renders if the feed\ncontains a graph item and both of these components fetches their own data. With\nclient rendering, this leads to the following request waterfall:\n\n```\n\n1. |> Markup (without content)\n2.  |> JS for <Feed>\n3.   |> getFeed()\n4.    |> JS for <GraphFeedItem>\n5.     |> getGraphDataById()\n\n```\n\n```\n\n1. |> Markup (without content)\n2.  |> JS for <Feed>\n3.   |> getFeed()\n4.    |> JS for <GraphFeedItem>\n5.     |> getGraphDataById()\n\n```\n\nThe nice thing about server rendering is that we can turn the above into:\n\n```\n\n1. |> Markup (with content AND initial data)\n2.  |> JS for <Feed>\n2.  |> JS for <GraphFeedItem>\n\n```\n\n```\n\n1. |> Markup (with content AND initial data)\n2.  |> JS for <Feed>\n2.  |> JS for <GraphFeedItem>\n\n```\n\nNote that the queries are no longer fetched on the client, instead their data\nwas included in the markup. The reason we can now load the JS in parallel is\nthat since was rendered on the server we know that we are going to need this JS\non the client as well and can insert a script-tag for this chunk in the markup.\nOn the server, we would still have this request waterfall:\n\n```\n\n```\n\n```\n\n```\n\nWe simply can not know before we have fetched the feed if we also need to fetch\ngraph data, they are dependent queries. Because this happens on the server where\nlatency is generally both lower and more stable, this often isn't such a big\ndeal.\n\nAmazing, we've mostly flattened our waterfalls! There's a catch though. Let's\ncall this page the page, and let's pretend we also have another page like . If\nwe type in directly in the url bar and hit enter, we get all these great server\nrendering benefits, BUT, if we instead type in and then to , we're back to to\nthis:\n\n```\n\n1. |> JS for <Feed>\n\n3.   |> JS for <GraphFeedItem>\n4.    |> getGraphDataById()\n\n```\n\n```\n\n1. |> JS for <Feed>\n\n3.   |> JS for <GraphFeedItem>\n4.    |> getGraphDataById()\n\n```\n\nThis is because with SPA's, server rendering only works for the initial page\nload, not for any subsequent navigation.\n\nModern frameworks often try to solve this by fetching the initial code and data\nin parallel, so if you were using Next.js or Remix with the prefetching patterns\nwe outlined in this guide, including how to prefetch dependent queries, it would\nactually look like this instead:\n\n```\n\n1. |> JS for <Feed>\n1. |> getFeed() + getGraphDataById()\n2.  |> JS for <GraphFeedItem>\n\n```\n\n```\n\n1. |> JS for <Feed>\n1. |> getFeed() + getGraphDataById()\n2.  |> JS for <GraphFeedItem>\n\n```\n\nThis is much better, but if we want to improve this further we can flatten this\nto a single roundtrip with Server Components. Learn how in the .\n\n### [Staleness is measured from when the query was fetched on the\nserver](https://tanstack.com/query/latest/docs/framework/react/guides/<#staleness-\nis-measured-from-when-the-query-was-fetched-on-the-server>)\n\nA query is considered stale depending on when it was . A caveat here is that the\nserver needs to have the correct time for this to work properly, but UTC time is\nused, so timezones do not factor into this.\n\nBecause defaults to , queries will be refetched in the background on page load\nby default. You might want to use a higher to avoid this double fetching,\nespecially if you don't cache your markup.\n\nThis refetching of stale queries is a perfect match when caching markup in a\nCDN! You can set the cache time of the page itself decently high to avoid having\nto re-render pages on the server, but configure the of the queries lower to make\nsure data is refetched in the background as soon as a user visits the page.\nMaybe you want to cache the pages for a week, but refetch the data automatically\non page load if it's older than a day?\n\n### [High memory consumption on\nserver](https://tanstack.com/query/latest/docs/framework/react/guides/<#high-\nmemory-consumption-on-server>)\n\nIn case you are creating the for every request, React Query creates the isolated\ncache for this client, which is preserved in memory for the period. That may\nlead to high memory consumption on server in case of high number of requests\nduring that period.\n\nOn the server, defaults to which disables manual garbage collection and will\nautomatically clear memory once a request has finished. If you are explicitly\nsetting a non-Infinity then you will be responsible for clearing the cache\nearly.\n\nAvoid setting to as it may result in a hydration error. This occurs because the\nplaces necessary data into the cache for rendering, but if the garbage collector\nremoves the data before the rendering completes, issues may arise. If you\nrequire a shorter , we recommend setting it to to allow sufficient time for the\napp to reference the data.\n\nTo clear the cache after it is not needed and to lower memory consumption, you\ncan add a call to after the request is handled and dehydrated state has been\nsent to the client.\n\nAlternatively, you can set a smaller .\n\nThere's a catch if you're using together with or : It will cause a second\nhydration by React Query. That's because [Next.js needs to ensure that they\nparse the\nrewrites](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/nextjs.org/docs/app/api-\nreference/next-config-js/rewrites#rewrite-parameters>) on the client and collect\nany params after hydration so that they can be provided in .\n\nThe result is missing referential equality for all the hydration data, which for\nexample triggers wherever your data is used as props of components or in the\ndependency array of s/s.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Go from professional web developer to lead engineer with the Frontend Masters\nProfessional Path. Start now!\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JWCTBDVZ3JCA7IE2JWF6YIK53KC67DT2QYF67IT27YCA7IK2JWCAYDT2JYHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/advanced-ssr\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nWelcome to the Advanced Server Rendering guide, where you will learn all about\nusing React Query with streaming, Server Components and the Next.js app router.\n\nYou might want to read the [Server Rendering & Hydration\nguide](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/ssr>)\nbefore this one as it teaches the basics for using React Query with SSR, and as\nwell as also contains valuable background.\n\nBefore we start, let's note that while the approach outlined in the SSR guide\nalso works with Server Components, we'll focus this guide on the hydration APIs.\n\n## [Server Components & Next.js app\nrouter](https://tanstack.com/query/latest/docs/framework/react/guides/<#server-\ncomponents--nextjs-app-router>)\n\nWe won't cover Server Components in depth here, but the short version is that\nthey are components that are guaranteed to run on the server, both for the\ninitial page view and . This is similar to how Next.js / and Remix works, as\nthese also always run on the server but while those can only return data, Server\nComponents can do a lot more. The data part is central to React Query however,\nso let's focus on that.\n\nHow do we take what we learned in the Server Rendering guide about [passing data\nprefetched in framework loaders to the\napp](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/ssr#using-\nthe-hydration-apis>) and apply that to Server Components and the Next.js app\nrouter? The best way to start thinking about this is to consider Server\nComponents as \"just\" another framework loader.\n\n### [A quick note on\nterminology](https://tanstack.com/query/latest/docs/framework/react/guides/<#a-quick-\nnote-on-terminology>)\n\nSo far in these guides, we've been talking about the and the . It's important to\nnote that confusingly enough this does not match 1-1 with and . Server\nComponents are guaranteed to only run on the server, but Client Components can\nactually run in both places. The reason for this is that they can also render\nduring the initial pass.\n\nOne way to think of this is that even though Server Components also , they\nhappen during a \"loader phase\" (always happens on the server), while Client\nComponents run during the \"application phase\". That application can run both on\nthe server during SSR, and in for example a browser. Where exactly that\napplication runs and if it runs during SSR or not might differ between\nframeworks.\n\nThe first step of any React Query setup is always to create a and wrap your\napplication in a . With Server Components, this looks mostly the same across\nframeworks, one difference being the filename conventions:\n\n```\n\n// In Next.js, this file would be called: app/providers.tsx\n\n// Since QueryClientProvider relies on useContext under the hood, we have to put\n'use client' on top\n\n    // With SSR, we usually want to set some default staleTime\n    // above 0 to avoid refetching immediately on the client\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n // NOTE: Avoid useState when initializing the query client if you don't\n\n //    have a suspense boundary between this and the code that may\n\n //    suspend because React will throw away the client on the initial\n\n //    render if it suspends and there is no boundary\n\n```\n\n```\n\n// In Next.js, this file would be called: app/providers.tsx\n\n// Since QueryClientProvider relies on useContext under the hood, we have to put\n'use client' on top\n\n    // With SSR, we usually want to set some default staleTime\n    // above 0 to avoid refetching immediately on the client\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n // NOTE: Avoid useState when initializing the query client if you don't\n\n //    have a suspense boundary between this and the code that may\n\n //    suspend because React will throw away the client on the initial\n\n //    render if it suspends and there is no boundary\n\n```\n\n```\n\n// In Next.js, this file would be called: app/layout.tsx\n\n```\n\n```\n\n// In Next.js, this file would be called: app/layout.tsx\n\n```\n\nThis part is pretty similar to what we did in the SSR guide, we just need to\nsplit things up into two different files.\n\nLet's next look at how to actually prefetch data and dehydrate and hydrate it.\nThis is what it looked like using the :\n\n```\n\n// This could also be getServerSideProps\n\n // This useQuery could just as well happen in some deeper child to\n\n // the <PostsRoute>, data will be available immediately either way\n\n // Note that we are using useQuery here instead of useSuspenseQuery.\n\n // Because this data has already been prefetched, there is no need to\n\n // ever suspend in the component itself. If we forget or remove the\n\n // prefetch, this will instead fetch the data on the client, while\n\n // using useSuspenseQuery would have had worse side effects.\n\n // This query was not prefetched on the server and will not start\n\n // fetching until on the client, both patterns are fine to mix\n\n```\n\n```\n\n// This could also be getServerSideProps\n\n // This useQuery could just as well happen in some deeper child to\n\n // the <PostsRoute>, data will be available immediately either way\n\n // Note that we are using useQuery here instead of useSuspenseQuery.\n\n // Because this data has already been prefetched, there is no need to\n\n // ever suspend in the component itself. If we forget or remove the\n\n // prefetch, this will instead fetch the data on the client, while\n\n // using useSuspenseQuery would have had worse side effects.\n\n // This query was not prefetched on the server and will not start\n\n // fetching until on the client, both patterns are fine to mix\n\n```\n\nConverting this to the app router actually looks pretty similar, we just need to\nmove things around a bit. First, we'll create a Server Component to do the\nprefetching part:\n\n```\n\n  // Neat! Serialization is now as easy as passing props.\n\n  // HydrationBoundary is a Client Component, so hydration will happen there.\n\n```\n\n```\n\n  // Neat! Serialization is now as easy as passing props.\n\n  // HydrationBoundary is a Client Component, so hydration will happen there.\n\n```\n\nNext, we'll look at what the Client Component part looks like:\n\n```\n\n // This useQuery could just as well happen in some deeper\n\n // child to <Posts>, data will be available immediately either way\n\n // This query was not prefetched on the server and will not start\n\n // fetching until on the client, both patterns are fine to mix.\n\n```\n\n```\n\n // This useQuery could just as well happen in some deeper\n\n // child to <Posts>, data will be available immediately either way\n\n // This query was not prefetched on the server and will not start\n\n // fetching until on the client, both patterns are fine to mix.\n\n```\n\nOne neat thing about the examples above is that the only thing that is Next.js-\nspecific here are the file names, everything else would look the same in any\nother framework that supports Server Components.\n\nIn the SSR guide, we noted that you could get rid of the boilerplate of having\nin every route. This is not possible with Server Components.\n\n> NOTE: If you encounter a type error while using async Server Components with\n> TypeScript versions lower than and versions lower than , it is recommended to\n> update to the latest versions of both. Alternatively, you can use the\n> temporary workaround of adding {/* @ts-expect-error Server Component */} when\n> calling this component inside another. For more information, see [Async Server\n> Component TypeScript\n> Error](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/nextjs.org/docs/app/building-\n> your-application/configuring/typescript#async-server-component-typescript-\n> error>) in the Next.js 13 docs.\n> NOTE: If you encounter an error Only plain objects, and a few built-ins, can\n> be passed to Server Actions. Classes or null prototypes are not supported.\n> make sure that you're passing to queryFn a function reference, instead call\n> the function because queryFn args has a bunch of properties and not all of it\n> would be serializable. see [Server Action only works when queryFn isn't a\n> reference](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/github.com/TanStack/query/issues/6264>).\nA nice thing about Server Components is that they can be nested and exist on\nmany levels in the React tree, making it possible to prefetch data closer to\nwhere it's actually used instead of only at the top of the application (just\nlike Remix loaders). This can be as simple as a Server Component rendering\nanother Server Component (we'll leave the Client Components out in this example\nfor brevity):\n\n```\n\n```\n\nAs you can see, it's perfectly fine to use in multiple places, and create and\ndehydrate multiple for prefetching.\n\nNote that because we are awaiting before rendering this would lead to a server\nside waterfall:\n\n```\n\n```\n\n```\n\n```\n\nIf the server latency to the data is low, this might not be a huge issue, but is\nstill worth pointing out.\n\nIn Next.js, besides prefetching data in , you can also do it in , and in .\nBecause these are all part of the routing, Next.js knows how to fetch them all\nin parallel. So if above was instead expressed as a parallel route, the\nwaterfall would be flattened automatically.\n\nAs more frameworks start supporting Server Components, they might have other\nrouting conventions. Read your framework docs for details.\n\n### [Alternative: Use a single for\nprefetching](https://tanstack.com/query/latest/docs/framework/react/guides/<#alternative-\nuse-a-single-queryclient-for-prefetching>)\n\nIn the example above, we create a new for each Server Component that fetches\ndata. This is the recommended approach, but if you want to, you can\nalternatively create a single one that is reused across all Server Components:\n\n```\n\n// cache() is scoped per request, so we don't leak data between requests\n\n```\n\n```\n\n// cache() is scoped per request, so we don't leak data between requests\n\n```\n\nThe benefit of this is that you can call to get a hold of this client anywhere\nthat gets called from a Server Component, including utility functions. The\ndownside is that every time you call , you serialize , including queries that\nhave already been serialized before and are unrelated to the current Server\nComponent which is unnecessary overhead.\n\nNext.js already dedupes requests that utilize , but if you are using something\nelse in your , or if you use a framework that does dedupe these requests\nautomatically, using a single as described above might make sense, despite the\nduplicated serialization.\n\n> As a future improvement, we might look into creating a function (name pending)\n> that only dehydrate queries that are since the last call to . Feel free to get\n> in touch if this sounds interesting and like something you want to help out\n> with!\nWith Server Components, it's important to think about data ownership and\nrevalidation. To explain why, let's look at a modified example from above:\n\n```\n\n // Note we are now using fetchQuery()\n\n/* This is the new part */\n\n```\n\n```\n\n // Note we are now using fetchQuery()\n\n/* This is the new part */\n\n```\n\nWe are now rendering data from the query both in a Server Component and in a\nClient Component. This will be fine for the initial page render, but what\nhappens when the query revalidates on the client for some reason when has been\npassed?\n\nReact Query has no idea of how to , so if it refetches the data on the client,\ncausing React to rerender the list of posts, the will end up out of sync.\n\nThis is fine if you set , so that React Query never revalidates, but this is\nprobably not what you want if you are using React Query in the first place.\n\nUsing React Query with Server Components makes most sense if:\n\n  * You have an app using React Query and want to migrate to Server Components without rewriting all the data fetching\n  * You want a familiar programming paradigm, but want to still sprinkle in the benefits of Server Components where it makes most sense\n  * You have some use case that React Query covers, but that your framework of choice does not cover\n\nIt's hard to give general advice on when it makes sense to pair React Query with\nServer Components and not. **If you are just starting out with a new Server\nComponents app, we suggest you start out with any tools for data fetching your\nframework provides you with and avoid bringing in React Query until you actually\nneed it.** This might be never, and that's fine, use the right tool for the job!\n\nIf you do use it, a good rule of thumb is to avoid unless you need to catch\nerrors. If you do use it, don't render its result on the server or pass the\nresult to another component, even a Client Component one.\n\nFrom the React Query perspective, treat Server Components as a place to prefetch\ndata, nothing more.\n\nOf course, it's fine to have Server Components own some data, and Client\nComponents own other, just make sure those two realities don't get out of sync.\n\nThe Next.js app router automatically streams any part of the application that is\nready to be displayed to the browser as soon as possible, so finished content\ncan be displayed immediately without waiting for still pending content. It does\nthis along boundary lines. Note that if you create a file , this automatically\ncreates a boundary behind the scenes.\n\nWith the prefetching patterns described above, React Query is perfectly\ncompatible with this form of streaming. As the data for each Suspense boundary\nresolves, Next.js can render and stream the finished content to the browser.\nThis works even if you are using as outlined above because the suspending\nactually happens when you the prefetch.\n\nAs of React Query v5.40.0, you don't have to all prefetches for this to work, as\nQueries can also be dehydrated and sent to the client. This lets you kick off\nprefetches as early as possible without letting them block an entire Suspense\nboundary, and streams the to the client as the query finishes. This can be\nuseful for example if you want to prefetch some content that is only visible\nafter some user interaction, or say if you want to and render the first page of\nan infinite query, but start prefetching page 2 without blocking rendering.\n\nTo make this work, we have to instruct the to also pending Queries. We can do\nthis globally, or by passing that option directly to .\n\nWe will also need to move the function out of our file as we want to use it in\nour server component and our client provider.\n\n```\n\n    // include pending queries in dehydration\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n```\n\n```\n\n    // include pending queries in dehydration\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n```\n\n> Note: This works in NextJs and Server Components because React can serialize\n> Promises over the wire when you pass them down to Client Components.\nThen, all we need to do is provide a , but we don't need to prefetches anymore:\n\n```\n\n// the function doesn't need to be `async` because we don't `await` anything\n\n // look ma, no await\n\n```\n\n```\n\n// the function doesn't need to be `async` because we don't `await` anything\n\n // look ma, no await\n\n```\n\nOn the client, the Promise will be put into the QueryCache for us. That means we\ncan now call inside the component to \"use\" that Promise (which was created on\nthe Server):\n\n```\n\n```\n\n> Note that you could also instead of , and the Promise would still be picked up\n> correctly. However, NextJs won't suspend in that case and the component will\n> render in the status, which also opts out of server rendering the content.\nIf you're using non-JSON data types and serialize the query results on the\nserver, you can specify the and options to serialize and deserialize the data on\neach side of the boundary to ensure the data in the cache is the same format\nboth on the server and the client:\n\n```\n\n```\n\n```\n\n // look ma, no await\n\n// <-- serialize the data on the server\n\n```\n\n```\n\n // look ma, no await\n\n // <-- serialize the data on the server\n\n```\n\n```\n\n```\n\nNow, your function can return e.g. datetime objects and the data will be\nserialized and deserialized on the client, assuming your transformer can\nserialize and deserialize those data types.\n\nFor more information, check out the [Next.js App with Prefetching\nExample](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/nextjs-\napp-prefetching>).\n\n## [Experimental streaming without prefetching in\nNext.js](https://tanstack.com/query/latest/docs/framework/react/guides/<#experimental-\nstreaming-without-prefetching-in-nextjs>)\n\nWhile we recommend the prefetching solution detailed above because it flattens\nrequest waterfalls both on the initial page load any subsequent page navigation,\nthere is an experimental way to skip prefetching altogether and still have\nstreaming SSR work:\n\nThis package will allow you to fetch data on the server (in a Client Component)\nby just calling in your component. Results will then be streamed from the server\nto the client as SuspenseBoundaries resolve. If you call without wrapping it in\na boundary, the HTML response won't start until the fetch resolves. This can be\nwhen you want depending on the situation, but keep in mind that this will hurt\nyour TTFB.\n\nTo achieve this, wrap your app in the component:\n\n```\n\n    // With SSR, we usually want to set some default staleTime\n    // above 0 to avoid refetching immediately on the client\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n // NOTE: Avoid useState when initializing the query client if you don't\n\n //    have a suspense boundary between this and the code that may\n\n //    suspend because React will throw away the client on the initial\n\n //    render if it suspends and there is no boundary\n\n```\n\n```\n\n    // With SSR, we usually want to set some default staleTime\n    // above 0 to avoid refetching immediately on the client\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n // NOTE: Avoid useState when initializing the query client if you don't\n\n //    have a suspense boundary between this and the code that may\n\n //    suspend because React will throw away the client on the initial\n\n //    render if it suspends and there is no boundary\n\n```\n\nFor more information, check out the .\n\nThe big upside is that you no longer need to prefetch queries manually to have\nSSR work, and it even still streams in the result! This gives you phenomenal DX\nand lower code complexity.\n\nThe downside is easiest to explain if we look back at [the complex request\nwaterfall\nexample](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/request-\nwaterfalls#code-splitting>) in the Performance & Request Waterfalls guide.\nServer Components with prefetching effectively eliminates the request waterfalls\nboth for the initial page load any subsequent navigation. This prefetch-less\napproach however will only flatten the waterfalls on the initial page load but\nends up the same deep waterfall as the original example on page navigations:\n\n```\n\n1. |> JS for <Feed>\n\n3.   |> JS for <GraphFeedItem>\n4.    |> getGraphDataById()\n\n```\n\n```\n\n1. |> JS for <Feed>\n\n3.   |> JS for <GraphFeedItem>\n4.    |> getGraphDataById()\n\n```\n\nThis is even worse than with /, since with those we could at least parallelize\ndata- and code-fetching.\n\nIf you value DX/iteration/shipping speed with low code complexity over\nperformance, don't have deeply nested queries, or are on top of your request\nwaterfalls with parallel fetching using tools like , this can be a good\ntradeoff.\n\n> It might be possible to combine the two approaches, but even we haven't tried\n> that out yet. If you do try this, please report back your findings, or even\n> update these docs with some tips!\nServer Components and streaming are still fairly new concepts and we are still\nfiguring out how React Query fits in and what improvements we can make to the\nAPI. We welcome suggestions, feedback and bug reports!\n\nSimilarly, it would be impossible to teach all the intricacies of this new\nparadigm all in one guide, on the first try. If you are missing some piece of\ninformation here or have suggestions on how to improve this content, also get in\ntouch, or even better, click the \"Edit on GitHub\" button below and help us out.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Get 20% off your first 3 months of BugHerd. Start Shipping Faster Today.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JWCV7DCZ3JCA7IE2JWF67D427KC67DT2QYF67IT27YCA7IK2JWCAYDT27YHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/caching\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n> Please thoroughly read the before reading this guide\nThis caching example illustrates the story and lifecycle of:\n\n  * Query Instances with and without cache data\n\nLet's assume we are using the default of and the default of .\n\n  * A new instance of useQuery({ queryKey: ['todos'], queryFn: fetchTodos }) mounts.\n    * Since no other queries have been made with the query key, this query will show a hard loading state and make a network request to fetch the data.\n    * When the network request has completed, the returned data will be cached under the key.\n    * The hook will mark the data as stale after the configured (defaults to , or immediately).\n  * A second instance of useQuery({ queryKey: ['todos'], queryFn: fetchTodos }) mounts elsewhere.\n    * Since the cache already has data for the key from the first query, that data is immediately returned from the cache.\n    * The new instance triggers a new network request using its query function.\n      * Note that regardless of whether both query functions are identical or not, both queries' are updated (including , , and other related values) because they have the same query key.\n    * When the request completes successfully, the cache's data under the key is updated with the new data, and both instances are updated with the new data.\n  * Both instances of the useQuery({ queryKey: ['todos'], queryFn: fetchTodos }) query are unmounted and no longer in use.\n    * Since there are no more active instances of this query, a garbage collection timeout is set using to delete and garbage collect the query (defaults to ).\n  * Before the cache timeout has completed, another instance of useQuery({ queryKey: ['todos'], queryFn: fetchTodos }) mounts. The query immediately returns the available cached data while the function is being run in the background. When it completes successfully, it will populate the cache with fresh data.\n  * The final instance of useQuery({ queryKey: ['todos'], queryFn: fetchTodos }) unmounts.\n  * No more instances of useQuery({ queryKey: ['todos'], queryFn: fetchTodos }) appear within .\n    * The cached data under the key is deleted and garbage collected.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I423KC67DT2QYF67IT27YCA7IK2JWCAYDT2QMHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/render-optimizations\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nReact Query applies a couple of optimizations automatically to ensure that your\ncomponents only re-render when they actually need to. This is done by the\nfollowing means:\n\nReact Query uses a technique called \"structural sharing\" to ensure that as many\nreferences as possible will be kept intact between re-renders. If data is\nfetched over the network, usually, you'll get a completely new reference by json\nparsing the response. However, React Query will keep the original reference if\nchanged in the data. If a subset changed, React Query will keep the unchanged\nparts and only replace the changed parts.\n\n> Note: This optimization only works if the returns JSON compatible data. You\n> can turn it off by setting globally or on a per-query basis, or you can\n> implement your own structural sharing by passing a function to it.\nThe top level object returned from , , and the Array returned from is . It will\nbe a new reference on every render. However, the properties returned from these\nhooks will be as stable as possible.\n\nReact Query will only trigger a re-render if one of the properties returned from\nis actually \"used\". This is done by using . This avoids a lot of unnecessary re-\nrenders, e.g. because properties like or might change often, but are not used in\nthe component.\n\nYou can customize this feature by setting manually globally or on a per-query\nbasis. If you want to turn that feature off, you can set .\n\n> Note: Custom getters are invoked by accessing a property, either via\n> destructuring or by accessing it directly. If you use object rest\n> destructuring, you will disable this optimization. We have a to guard against\n> this pitfall.\nYou can use the option to select a subset of the data that your component should\nsubscribe to. This is useful for highly optimized data transformations or to\navoid unnecessary re-renders.\n\nA component using the custom hook will only re-render if the length of the todos\nchanges. It will re-render if e.g. the name of a todo changed.\n\n> Note: operates on successfully cached data and is not the appropriate place to\n> throw errors. The source of truth for errors is the , and a function that\n> returns an error results in being and being . We recommend handling errors in\n> the if you wish to have a query fail on incorrect data, or outside of the\n> query hook if you have a error case not related to caching.\nThe function will only re-run if:\n\nThis means that an inlined function, as shown above, will run on every render.\nTo avoid this, you can wrap the function in , or extract it to a stable function\nreference if it doesn't have any dependencies:\n\n```\n\n```\n\n```\n\n// extracted to a stable function reference\n\n```\n\n```\n\n// extracted to a stable function reference\n\n```\n\nFor an in-depth guide about these topics, read from the Community Resources.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I4KJKC67DT2QYF67IT27YCA7IK2JWCAYDT2Q7HEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/default-query-function\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nIf you find yourself wishing for whatever reason that you could just share the\nsame query function for your entire app and just use query keys to identify what\nit should fetch, you can do that by providing a to TanStack Query:\n\n```\n\n// Define a default query function that will receive the query key\n\n// provide the default query function to your app with defaultOptions\n\n// All you have to do now is pass a key!\n\n// You can even leave out the queryFn and just go straight into options\n\n```\n\n```\n\n// Define a default query function that will receive the query key\n\n// provide the default query function to your app with defaultOptions\n\n// All you have to do now is pass a key!\n\n// You can even leave out the queryFn and just go straight into options\n\n```\n\nIf you ever want to override the default queryFn, you can just provide your own\nlike you normally would.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Get 20% off your first 3 months of BugHerd. Start Shipping Faster Today.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JWCV7DCZ3JCA7IE2JWF67D427KC67DT2QYF67IT27YCA7IK2JWCAYDT2JIHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/suspense\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nReact Query can also be used with React's Suspense for Data Fetching API's. For\nthis, we have dedicated hooks:\n\n  * Additionally, you can use the and (Experimental)\n\nWhen using suspense mode, states and objects are not needed and are then\nreplaced by usage of the component (including the use of the prop and React\nerror boundaries for catching errors). Please read the and look at the for more\ninformation on how to set up suspense mode.\n\nIf you want mutations to propagate errors to the nearest error boundary (similar\nto queries), you can set the option to as well.\n\nEnabling suspense mode for a query:\n\n```\n\n```\n\nThis works nicely in TypeScript, because is guaranteed to be defined (as errors\nand loading states are handled by Suspense- and ErrorBoundaries).\n\nOn the flip side, you therefore can't conditionally enable / disable the Query.\nThis generally shouldn't be necessary for dependent Queries because with\nsuspense, all your Queries inside one component are fetched in serial.\n\nalso doesn't exist for this Query. To prevent the UI from being replaced by a\nfallback during an update, wrap your updates that change the QueryKey into .\n\nNot all errors are thrown to the nearest Error Boundary per default - we're only\nthrowing errors if there is no other data to show. That means if a Query ever\nsuccessfully got data in the cache, the component will render, even if data is .\nThus, the default for is:\n\n```\n\nthrowOnError: (error, query) => typeof query.state.data === 'undefined'\n\n```\n\n```\n\nthrowOnError: (error, query) => typeof query.state.data === 'undefined'\n\n```\n\nSince you can't change (because it would allow for to become potentially ), you\nhave to throw errors manually if you want all errors to be handled by Error\nBoundaries:\n\n```\n\n```\n\nWhether you are using or in your queries, you will need a way to let queries\nknow that you want to try again when re-rendering after some error occurred.\n\nQuery errors can be reset with the component or with the hook.\n\nWhen using the component it will reset any query errors within the boundaries of\nthe component:\n\n```\n\n```\n\n```\n\n```\n\nWhen using the hook it will reset any query errors within the closest . If there\nis no boundary defined it will reset them globally:\n\n```\n\n```\n\n```\n\n```\n\nOut of the box, React Query in mode works really well as a solution with no\nadditional configuration. This means that when your components attempt to mount,\nthey will trigger query fetching and suspend, but only once you have imported\nthem and mounted them. If you want to take it to the next level and implement a\nmodel, we recommend implementing on routing callbacks and/or user interactions\nevents to start loading queries before they are mounted and hopefully even\nbefore you start importing or mounting their parent components.\n\n## [Suspense on the Server with\nstreaming](https://tanstack.com/query/latest/docs/framework/react/guides/<#suspense-\non-the-server-with-streaming>)\n\nIf you are using , you can use our integration for Suspense on the Server: .\nThis package will allow you to fetch data on the server (in a client component)\nby just calling in your component. Results will then be streamed from the server\nto the client as SuspenseBoundaries resolve.\n\nTo achieve this, wrap your app in the component:\n\n```\n\n    // With SSR, we usually want to set some default staleTime\n    // above 0 to avoid refetching immediately on the client\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n // NOTE: Avoid useState when initializing the query client if you don't\n\n //    have a suspense boundary between this and the code that may\n\n //    suspend because React will throw away the client on the initial\n\n //    render if it suspends and there is no boundary\n\n```\n\n```\n\n    // With SSR, we usually want to set some default staleTime\n    // above 0 to avoid refetching immediately on the client\n\n  // Server: always make a new query client\n\n  // Browser: make a new query client if we don't already have one\n\n  // This is very important, so we don't re-make a new client if React\n\n  // suspends during the initial render. This may not be needed if we\n\n  // have a suspense boundary BELOW the creation of the query client\n\n // NOTE: Avoid useState when initializing the query client if you don't\n\n //    have a suspense boundary between this and the code that may\n\n //    suspend because React will throw away the client on the initial\n\n //    render if it suspends and there is no boundary\n\n```\n\nFor more information, check out the and the guide.\n\n> To enable this feature, you need to set the option to when creating your\n```\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JUCWADTZ3JCA7IE2JWF67ITK7KC67DT2QYF67IT27YCA7IK2JWCAYDTK7WHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/testing\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nReact Query works by means of hooks - either the ones we offer or custom ones\nthat wrap around them.\n\nWith React 17 or earlier, writing unit tests for these custom hooks can be done\nby means of the library.\n\n(The library is needed as a peer dependency of , and needs to correspond to the\nversion of React that you are using.)\n\n: when using React 18 or later, is available directly through the package, and\nis no longer required.\n\nOnce installed, a simple test can be written. Given the following custom hook:\n\n```\n\n```\n\nUsing React 17 or earlier, we can write a test for this as follows:\n\nUsing React 18 or later, the semantics of have changed, and the above test needs\nto be modified as follows:\n\n```\n\n```\n\nNote that we provide a custom wrapper that builds the and . This helps to ensure\nthat our test is completely isolated from any other tests.\n\nIt is possible to write this wrapper only once, but if so we need to ensure that\nthe gets cleared before every test, and that tests don't run in parallel\notherwise one test will influence the results of others.\n\nThe library defaults to three retries with exponential backoff, which means that\nyour tests are likely to timeout if you want to test an erroneous query. The\neasiest way to turn retries off is via the QueryClientProvider. Let's extend the\nabove example:\n\n```\n\n   // ‚úÖ turns retries off\n\n```\n\n```\n\n   // ‚úÖ turns retries off\n\n```\n\nThis will set the defaults for all queries in the component tree to \"no\nretries\". It is important to know that this will only work if your actual\nuseQuery has no explicit retries set. If you have a query that wants 5 retries,\nthis will still take precedence, because defaults are only taken as a fallback.\n\n## [Set gcTime to Infinity with\nJest](https://tanstack.com/query/latest/docs/framework/react/guides/<#set-\ngctime-to-infinity-with-jest>)\n\nIf you use Jest, you can set the to to prevent \"Jest did not exit one second\nafter the test run completed\" error message. This is the default behavior on the\nserver, and is only necessary to set if you are explicitly setting a .\n\nThe primary use for React Query is to cache network requests, so it's important\nthat we can test our code is making the correct network requests in the first\nplace.\n\nThere are plenty of ways that these can be tested, but for this example we are\ngoing to use .\n\nGiven the following custom hook:\n\nWe can write a test for this as follows:\n\n```\n\n```\n\nHere we are making use of and waiting until the query status indicates that the\nrequest has succeeded. This way we know that our hook has finished and should\nhave the correct data. : when using React 18, the semantics of have changed as\nnoted above.\n\n## [Testing Load More / Infinite\nScroll](https://tanstack.com/query/latest/docs/framework/react/guides/<#testing-\nload-more--infinite-scroll>)\n\nFirst we need to mock our API response\n\nThen, our configuration needs to differentiate responses based on the page, and\nwe'll be using to do this. 's value here will be something like or\n\n(Notice the , because we'll be calling from this endpoint multiple times)\n\nNow we can safely run our tests, the trick here is to await for the data\nassertion to pass:\n\n: when using React 18, the semantics of have changed as noted above.\n\nFor additional tips and an alternative setup using , have a look at from the\nCommunity Resources.\n\n[Does this replace [Redux, MobX, etc]?\n](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-\nthis-replace-client-state>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ See what your team could do with The DevSecOps Platform. Take GitLab for a\nspin.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JLCAADLZ3JCA7IE2JWCABI52QKC67DT2QYF67IT27YCA7IK2JWCAYDT23EHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/does-this-replace-client-state\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# Does TanStack Query replace Redux, MobX or other global state managers?\n\nWell, let's start with a few important items:\n\n  * TanStack Query is a library, responsible for managing asynchronous operations between your server and client\n  * Redux, MobX, Zustand, etc. are libraries that _can be used to store asynchronous data, albeit inefficiently when compared to a tool like TanStack Query_\n\nWith those points in mind, the short answer is that TanStack Query **replaces\nthe boilerplate code and related wiring used to manage cache data in your\nclient-state and replaces it with just a few lines of code.**\n\nFor a vast majority of applications, the truly that is left over after migrating\nall of your async code to TanStack Query is usually very tiny.\n\n> There are still some circumstances where an application might indeed have a\n> massive amount of synchronous client-only state (like a visual designer or\n> music production application), in which case, you will probably still want a\n> client state manager. In this situation it's important to note that **TanStack\n> Query is not a replacement for local/client state management**. However, you\n> can use TanStack Query alongside most client state managers with zero issues.\nHere we have some \"global\" state being managed by a global state library:\n\nCurrently, the global state manager is caching 4 types of server-state: , , ,\nand . If we were to move these server-state assets to TanStack Query, our\nremaining global state would look more like this:\n\nThis also means that with a few hook calls to and , we also get to remove any\nboilerplate code that was used to manage our server state e.g.\n\nWith all of those things removed, you may ask yourself, **\"Is it worth it to\nkeep using our client state manager for this tiny global state?\"**\n\n**And that's up to you!**\n\nBut TanStack Query's role is clear. It removes asynchronous wiring and\nboilerplate from your application and replaces it with just a few lines of code.\n\nWhat are you waiting for, give it a go already!\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI52QKC67DT2QYF67IT27YCA7IK2JWCAYDT23MHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/migrating-to-react-query-3\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# Migrating to React Query 3\n\nPrevious versions of React Query were awesome and brought some amazing new\nfeatures, more magic, and an overall better experience to the library. They also\nbrought on massive adoption and likewise a lot of refining fire\n(issues/contributions) to the library and brought to light a few things that\nneeded more polish to make the library even better. v3 contains that very\npolish.\n\n  * More scalable and testable cache configuration\n  * Fully configure defaults for queries and/or mutations before use\n  * More granularity for optional rendering optimization\n  * New hook! (Variable-length parallel query execution)\n  * Query filter support for the hook!\n  * Observe queries/mutations outside of React\n  * Use the React Query core logic anywhere you want!\n  * Cache Persistence to web storage (experimental via and )\n\n### [The has been split into a and lower-level and\ninstances.](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nquerycache-has-been-split-into-a-queryclient-and-lower-level-querycache-and-\nmutationcache-instances>)\n\nThe contains all queries, the contains all mutations, and the can be used to set\nconfiguration and to interact with them.\n\n  * Allows for different types of caches.\n  * Multiple clients with different configurations can use the same cache.\n  * Clients can be used to track queries, which can be used for shared caches on SSR.\n  * The client API is more focused towards general usage.\n  * Easier to test the individual components.\n\nWhen creating a , a and are automatically created for you if you don't supply\nthem.\n\n### [ and have both been replaced by\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#reactqueryconfigprovider-\nand-reactquerycacheprovider-have-both-been-replaced-by-queryclientprovider>)\n\nDefault options for queries and mutations can now be specified in :\n\n**Notice that it's now defaultOptions instead of defaultConfig**\n\n```\n\n```\n\n```\n\n```\n\nThe component is now used to connect a to your application:\n\n```\n\n```\n\n### [The default is gone.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-default-\nquerycache-is-gone-for-real-this-time>)\n\nAs previously noted with a deprecation, there is no longer a default that is\ncreated or exported from the main package. **You must create your own via or\n(which you can then pass to )**\n\n### [The deprecated utility has been\nremoved.](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\ndeprecated-makequerycache-utility-has-been-removed>)\n\nIt's been a long time coming, but it's finally gone :)\n\nThe new function is async, but **does not return the data from the query**. If\nyou require the data, use the new function\n\n```\n\n```\n\n```\n\n```\n\nTogether, these provide the same experience as before, but with added control to\nchoose which component trees you want to reset. For more information, see:\n\nshould now be used to look up individual queries from a cache\n\nshould now be used to look up multiple queries from a cache\n\n**Notice that it's now a function instead of a property**\n\n### [The hook has been replaced by the\nhook.](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nusequerycache-hook-has-been-replaced-by-the-usequeryclient-hook>)\n\nIt returns the provided for its component tree and shouldn't need much tweaking\nbeyond a rename.\n\n### [Query key parts/pieces are no longer automatically spread to the query\nfunction.](https://tanstack.com/query/latest/docs/framework/react/guides/<#query-\nkey-partspieces-are-no-longer-automatically-spread-to-the-query-function>)\n\nInline functions are now the suggested way of passing parameters to your query\nfunctions:\n\n```\n\n```\n\nIf you still insist on not using inline functions, you can use the newly passed\n:\n\n### [Infinite Query Page params are now passed via\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#infinite-\nquery-page-params-are-now-passed-via-queryfunctioncontextpageparam>)\n\nThey were previously added as the last query key parameter in your query\nfunction, but this proved to be difficult for some patterns\n\n```\n\n```\n\n### [usePaginatedQuery() has been removed in favor of the\noption](https://tanstack.com/query/latest/docs/framework/react/guides/<#usepaginatedquery-\nhas-been-removed-in-favor-of-the-keeppreviousdata-option>)\n\nThe new options is available for both and and will have the same \"lagging\"\neffect on your data:\n\n```\n\n```\n\nThe interface has changed to fully support bi-directional infinite lists.\n\n  * The of an infinite query is now an object containing the and the used to fetch the pages: { pages: [data, data, data], pageParams: [...]}\n\n```\n\n```\n\n### [Infinite Query data now contains the array of pages and pageParams used to\nfetch those\npages.](https://tanstack.com/query/latest/docs/framework/react/guides/<#infinite-\nquery-data-now-contains-the-array-of-pages-and-pageparams-used-to-fetch-those-\npages>)\n\nThis allows for easier manipulation of the data and the page params, like, for\nexample, removing the first page of data along with it's params:\n\n### [useMutation now returns an object instead of an\narray](https://tanstack.com/query/latest/docs/framework/react/guides/<#usemutation-\nnow-returns-an-object-instead-of-an-array>)\n\nThough the old way gave us warm fuzzy feelings of when we first discovered for\nthe first time, they didn't last long. Now the mutation return is a single\nobject.\n\n### [ no longer return a\npromise](https://tanstack.com/query/latest/docs/framework/react/guides/<#mutationmutate-\nno-longer-return-a-promise>)\n\n  * The variable has been changed to the function\n\nWe got a lot of questions regarding this behavior as users expected the promise\nto behave like a regular promise.\n\nBecause of this the function is now split into a and function.\n\nThe function can be used when using callbacks:\n\n```\n\n```\n\nThe function can be used when using async/await:\n\n```\n\n```\n\n### [The object syntax for useQuery now uses a collapsed\nconfig:](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nobject-syntax-for-usequery-now-uses-a-collapsed-config>)\n\n```\n\n```\n\n### [If set, the QueryOptions.enabled option must be a boolean\n(/)](https://tanstack.com/query/latest/docs/framework/react/guides/<#if-set-the-\nqueryoptionsenabled-option-must-be-a-boolean-truefalse>)\n\nThe query option will now only disable a query when the value is . If needed,\nvalues can be casted with or and a handy error will be thrown if a non-boolean\nvalue is passed.\n\n### [The QueryOptions.initialStale option has been\nremoved](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nqueryoptionsinitialstale-option-has-been-removed>)\n\nThe query option has been removed and initial data is now treated as regular\ndata. Which means that if is provided, the query will refetch on mount by\ndefault. If you do not want to refetch immediately, you can define a .\n\n### [The option has been replaced by\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nqueryoptionsforcefetchonmount-option-has-been-replaced-by-refetchonmount-\nalways>)\n\nHonestly, we were accruing way too many options, so this should clean things up.\n\n### [The options now only applies to its parent component instead of all query\nobservers](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nqueryoptionsrefetchonmount-options-now-only-applies-to-its-parent-component-\ninstead-of-all-query-observers>)\n\nWhen was set to any additional components were prevented from refetching on\nmount. In version 3 only the component where the option has been set will not\nrefetch on mount.\n\n### [The has been removed in favor of the new\nobject.](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nqueryoptionsqueryfnparamsfilter-has-been-removed-in-favor-of-the-new-\nqueryfunctioncontext-object>)\n\nThe option has been removed because query functions now get a object instead of\nthe query key.\n\nParameters can still be filtered within the query function itself as the also\ncontains the query key.\n\n### [The option has been superseded by the new and\noptions.](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nqueryoptionsnotifyonstatuschange-option-has-been-superseded-by-the-new-\nnotifyonchangeprops-and-notifyonchangepropsexclusions-options>)\n\nWith these new options it is possible to configure when a component should re-\nrender on a granular level.\n\nOnly re-render when the or properties change:\n\n```\n\n```\n\nPrevent re-render when the property changes:\n\n```\n\n```\n\n### [The function has been renamed to\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nqueryresultclear-function-has-been-renamed-to-queryresultremove>)\n\nAlthough it was called , it really just removed the query from the cache. The\nname now matches the functionality.\n\n### [The property has been split into and\nproperties](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nqueryresultupdatedat-property-has-been-split-into-queryresultdataupdatedat-and-\nqueryresulterrorupdatedat-properties>)\n\nBecause data and errors can be present at the same time, the property has been\nsplit into and .\n\n### [ has been replaced by the new\nfunction](https://tanstack.com/query/latest/docs/framework/react/guides/<#setconsole-\nhas-been-replaced-by-the-new-setlogger-function>)\n\n```\n\n```\n\n```\n\n```\n\n### [React Native no longer requires overriding the\nlogger](https://tanstack.com/query/latest/docs/framework/react/guides/<#react-\nnative-no-longer-requires-overriding-the-logger>)\n\nTo prevent showing error screens in React Native when a query fails it was\nnecessary to manually change the Console:\n\n```\n\n```\n\nIn version 3 **this is done automatically when React Query is used in React\nNative**.\n\n#### [ has been changed from an to a\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#querystatus-\nhas-been-changed-from-an-enum-to-a-union-type>)\n\nSo, if you were checking the status property of a query or mutation against a\nQueryStatus enum property you will have to check it now against the string\nliteral the enum previously held for each property.\n\nTherefore you have to change the enum properties to their equivalent string\nliteral, like this:\n\nHere is an example of the changes you would have to make:\n\n```\n\n```\n\nThe and hooks now have a option to select or transform parts of the query\nresult.\n\n```\n\n```\n\nSet the option to to only re-render when the selected data changes.\n\n#### [The useQueries() hook, for variable-length parallel query\nexecution](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nusequeries-hook-for-variable-length-parallel-query-execution>)\n\nWish you could run in a loop? The rules of hooks say no, but with the new hook,\nyou can!\n\n```\n\n```\n\nBy default React Query will not retry a mutation on error, but it is possible\nwith the option:\n\nIf mutations fail because the device is offline, they will be retried in the\nsame order when the device reconnects.\n\nMutations can now be persisted to storage and resumed at a later point. More\ninformation can be found in the mutations documentation.\n\nA can be used to create and/or watch a query:\n\nA can be used to create and/or watch an infinite query:\n\n```\n\n```\n\nA can be used to create and/or watch multiple queries:\n\n```\n\n```\n\n#### [Set default options for specific\nqueries](https://tanstack.com/query/latest/docs/framework/react/guides/<#set-\ndefault-options-for-specific-queries>)\n\nThe method can be used to set default options for specific queries:\n\n```\n\n], { queryFn: fetchPosts })\n\n```\n\n#### [Set default options for specific\nmutations](https://tanstack.com/query/latest/docs/framework/react/guides/<#set-\ndefault-options-for-specific-mutations>)\n\nThe method can be used to set default options for specific mutations:\n\n```\n\n], { mutationFn: addPost })\n\n```\n\nThe hook now accepts filters which can be used to for example only show a\nspinner for certain type of queries:\n\nThe core of React Query is now fully separated from React, which means it can\nalso be used standalone or in other frameworks. Use the entry point to only\nimport the core functionality:\n\n### [Devtools are now part of the main repo and npm\npackage](https://tanstack.com/query/latest/docs/framework/react/guides/<#devtools-\nare-now-part-of-the-main-repo-and-npm-package>)\n\nThe devtools are now included in the package itself under the import . Simply\nreplace imports with\n\n[Does this replace [Redux, MobX,\netc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-\nthis-replace-client-state>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI5K7KC67DT2QYF67IT27YCA7IK2JWCAYDTKQNHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/migrating-to-react-query-4\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# Migrating to React Query 4\n\nv4 is a major version, so there are some breaking changes to be aware of:\n\nYou will need to un-/install dependencies and change the imports:\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\nTo make the import migration easier, v4 comes with a codemod.\n\n> The codemod is a best efforts attempt to help you migrate the breaking change.\n> Please review the generated code thoroughly! Also, there are edge cases that\n> cannot be found by the code mod, so please keep an eye on the log output.\nYou can easily apply it by using one (or both) of the following commands:\n\nIf you want to run it against or files, please use the command below:\n\n```\n\n```\n\n```\n\n```\n\nIf you want to run it against or files, please use the command below:\n\n```\n\n```\n\n```\n\n```\n\nPlease note in the case of you need to use as the parser; otherwise, the codemod\nwon't be applied properly!\n\nApplying the codemod might break your code formatting, so please don't forget to\nrun and/or after you've applied the codemod!\n\nThe codemod will change the imports - you still have to install the separate\ndevtools package manually.\n\n### [Query Keys (and Mutation Keys) need to be an\nArray](https://tanstack.com/query/latest/docs/framework/react/guides/<#query-\nkeys-and-mutation-keys-need-to-be-an-array>)\n\nIn v3, Query and Mutation Keys could be a String or an Array. Internally, React\nQuery has always worked with Array Keys only, and we've sometimes exposed this\nto consumers. For example, in the , you would always get the key as an Array to\nmake working with easier.\n\nHowever, we have not followed this concept through to all apis. For example,\nwhen using the function on you would get the raw Query Key. This makes it\ndifficult to work with such functions if you use Query Keys that are mixed\nArrays and Strings. The same was true when using global callbacks.\n\nTo streamline all apis, we've decided to make all keys Arrays only:\n\nTo make this migration easier, we decided to deliver a codemod.\n\n> The codemod is a best efforts attempt to help you migrate the breaking change.\n> Please review the generated code thoroughly! Also, there are edge cases that\n> cannot be found by the code mod, so please keep an eye on the log output.\nYou can easily apply it by using one (or both) of the following commands:\n\nIf you want to run it against or files, please use the command below:\n\n```\n\n```\n\n```\n\n```\n\nIf you want to run it against or files, please use the command below:\n\n```\n\n```\n\n```\n\n```\n\nPlease note in the case of you need to use as the parser; otherwise, the codemod\nwon't be applied properly!\n\nApplying the codemod might break your code formatting, so please don't forget to\nrun and/or after you've applied the codemod!\n\n### [The idle state has been\nremoved](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nidle-state-has-been-removed>)\n\nWith the introduction of the new for better offline support, the state became\nirrelevant, because captures the same state better. For more information, please\nread .\n\nThis will mostly affect queries that don't have any yet, as those were in state\nbefore:\n\nAlso, have a look at [the guide on dependent\nqueries](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/dependent-\nqueries>)\n\nDue to this change, disabled queries (even temporarily disabled ones) will start\nin state. To make migration easier, especially for having a good flag to know\nwhen to display a loading spinner, you can check for instead of :\n\nSee also the guide on\n\nThe hook now accepts an object with a prop as its input. The value of the prop\nis an array of queries (this array is identical to what was passed into in v3).\n\n```\n\n { queryKey1, queryFn1, options1 },\n\n { queryKey2, queryFn2, options2 },\n\n   { queryKey1, queryFn1, options1 },\n\n   { queryKey2, queryFn2, options2 },\n\n```\n\n### [Undefined is an illegal cache value for successful\nqueries](https://tanstack.com/query/latest/docs/framework/react/guides/<#undefined-\nis-an-illegal-cache-value-for-successful-queries>)\n\nIn order to make bailing out of updates possible by returning , we had to make\nan illegal cache value. This is in-line with other concepts of react-query, for\nexample, returning from the will also set data.\n\nFurther, it is an easy bug to produce by adding logging in the queryFn:\n\nThis is now disallowed on type level; at runtime, will be transformed to a ,\nwhich means you will get an , which will also be logged to the console in\ndevelopment mode.\n\n### [Queries and mutations, per default, need network connection to\nrun](https://tanstack.com/query/latest/docs/framework/react/guides/<#queries-\nand-mutations-per-default-need-network-connection-to-run>)\n\nPlease read the about online / offline support, and also the dedicated page\nabout\n\nEven though React Query is an Async State Manager that can be used for anything\nthat produces a Promise, it is most often used for data fetching in combination\nwith data fetching libraries. That is why, per default, queries and mutations\nwill be if there is no network connection. If you want to opt-in to the previous\nbehavior, you can globally set for both queries and mutations:\n\n### [ property no longer accepts as a\nvalue](https://tanstack.com/query/latest/docs/framework/react/guides/<#notifyonchangeprops-\nproperty-no-longer-accepts-tracked-as-a-value>)\n\nThe option no longer accepts a value. Instead, defaults to tracking properties.\nAll queries using should be updated by removing this option.\n\nIf you would like to bypass this in any queries to emulate the v3 default\nbehavior of re-rendering whenever a query changes, now accepts an value to opt-\nout of the default smart tracking optimization.\n\nIn v4, defaults to the behavior of v3 instead of . Now that is the default\nbehavior for v4, it no longer makes sense to include this config option.\n\nThe option can be passed to all functions that imperatively fetch a query,\nnamely:\n\nExcept for and , this flag was defaulting to , which was inconsistent and\npotentially troublesome: Calling or after a mutation might not yield the latest\nresult if a previous slow fetch was already ongoing, because this refetch would\nhave been skipped.\n\nWe believe that if a query is actively refetched by some code you write, it\nshould, per default, re-start the fetch.\n\nThat is why this flag now defaults to for all methods mentioned above. It also\nmeans that if you call twice in a row, without awaiting it, it will now cancel\nthe first fetch and re-start it with the second one:\n\n```\n\n// this will abort the previous refetch and start a new fetch\n\n```\n\n```\n\n// this will abort the previous refetch and start a new fetch\n\n```\n\nYou can opt-out of this behaviour by explicitly passing :\n\n```\n\n// this will not abort the previous refetch - it will just be ignored\n\nqueryClient.refetchQueries({ queryKey: ['todos'] }, { cancelRefetch: false })\n\n```\n\n```\n\n// this will not abort the previous refetch - it will just be ignored\n\nqueryClient.refetchQueries({ queryKey: ['todos'] }, { cancelRefetch: false })\n\n```\n\n> Note: There is no change in behaviour for automatically triggered fetches,\n> e.g. because a query mounts or because of a window focus refetch.\nA is an object with certain conditions to match a query. Historically, the\nfilter options have mostly been a combination of boolean flags. However,\ncombining those flags can lead to impossible states. Specifically:\n\n```\n\n - When set to true it will match active queries.\n - When set to false it will match inactive queries.\n\n - When set to true it will match inactive queries.\n - When set to false it will match active queries.\n\n```\n\n```\n\n - When set to true it will match active queries.\n - When set to false it will match inactive queries.\n\n - When set to true it will match inactive queries.\n - When set to false it will match active queries.\n\n```\n\nThose flags don't work well when used together, because they are mutually\nexclusive. Setting for both flags could match all queries, judging from the\ndescription, or no queries, which doesn't make much sense.\n\nWith v4, those filters have been combined into a single filter to better show\nthe intent:\n\nThe filter defaults to , and you can choose to only match or queries.\n\nhad two additional, similar flags:\n\n```\n\n - When set to false, queries that match the refetch predicate and are actively being rendered\n  via useQuery and friends will NOT be refetched in the background, and only\nmarked as invalid.\n\n - When set to true, queries that match the refetch predicate and are not being rendered\n  via useQuery and friends will be both marked as invalid and also refetched in\nthe background\n\n```\n\n```\n\n - When set to false, queries that match the refetch predicate and are actively being rendered\n  via useQuery and friends will NOT be refetched in the background, and only\nmarked as invalid.\n\n - When set to true, queries that match the refetch predicate and are not being rendered\n  via useQuery and friends will be both marked as invalid and also refetched in\nthe background\n\n```\n\nFor the same reason, those have also been combined:\n\nThis flag defaults to because defaulted to . This means we also need a way to\ntell to not refetch at all, which is why a fourth option () is also allowed\nhere.\n\n### [ is no longer called from\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#onsuccess-is-\nno-longer-called-from-setquerydata>)\n\nThis was confusing to many and also created infinite loops if was called from\nwithin . It was also a frequent source of error when combined with , because if\ndata was read from the cache only, was called.\n\nSimilar to and , the callback is now tied to a request being made. No request ->\nno callback.\n\nIf you want to listen to changes of the field, you can best do this with a ,\nwhere is part of the dependency Array. Since React Query ensures stable data\nthrough structural sharing, the effect will not execute with every background\nrefetch, but only if something within data has changed:\n\n```\n\nconst { data } = useQuery({ queryKey, queryFn })\n\n```\n\n```\n\nconst { data } = useQuery({ queryKey, queryFn })\n\n```\n\n### [ and the corresponding persister plugins are no longer experimental and\nhave been\nrenamed](https://tanstack.com/query/latest/docs/framework/react/guides/<#persistqueryclient-\nand-the-corresponding-persister-plugins-are-no-longer-experimental-and-have-\nbeen-renamed>)\n\nThe plugins and have been renamed to and respectively. The interface in has also\nbeen renamed to . Checkout for the motivation of this change.\n\nSince these plugins are no longer experimental, their import paths have also\nbeen updated:\n\n```\n\n```\n\n### [The method on promises is no longer\nsupported](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\ncancel-method-on-promises-is-no-longer-supported>)\n\nThe that allowed you to define a function on promises, which was then used by\nthe library to support query cancellation, has been removed. We recommend to use\nthe (introduced with v3.30.0) for query cancellation that uses the internally\nand provides you with an for your query function to support query cancellation.\n\nTypes now require using TypeScript v4.1 or greater\n\nAs of v4, React Query is optimized for modern browsers. We have updated our\nbrowserslist to produce a more modern, performant and smaller bundle. You can\nread about the requirements .\n\nIt was possible to change the logger globally by calling . In v4, that function\nis replaced with an optional field when creating a .\n\n```\n\n```\n\nIn v3, React Query would cache query results for a default of 5 minutes, then\nmanually garbage collect that data. This default was applied to server-side\nReact Query as well.\n\nThis lead to high memory consumption and hanging processes waiting for this\nmanual garbage collection to complete. In v4, by default the server-side is now\nset to effectively disabling manual garbage collection (the NodeJS process will\nclear everything once a request is complete).\n\nThis change only impacts users of server-side React Query, such as with Next.js.\nIf you are setting a manually this will not impact you (although you may want to\nmirror behavior).\n\nStarting with v4, react-query will no longer log errors (e.g. failed fetches) to\nthe console in production mode, as this was confusing to many. Errors will still\nshow up in development mode.\n\nReact Query now supports and is fully compatible with Node's native resolution\nfor both CommonJS and ESM. We don't expect this to be a breaking change for most\nusers, but this restricts the files you can import into your project to only the\nentry points we officially support.\n\nSubscribing manually to the has always given you a , but this was not true for\nthe . We have streamlined the behavior and also adapted event names accordingly.\n\nThe uses the same types as the .\n\n> Note: This is only relevant if you manually subscribe to the caches via or\n### [Separate hydration exports have been\nremoved](https://tanstack.com/query/latest/docs/framework/react/guides/<#separate-\nhydration-exports-have-been-removed>)\n\nWith version , hydration utilities moved into the React Query core. With v3, you\ncould still use the old exports from , but these exports have been removed with\nv4.\n\n```\n\n { dehydrate, hydrate, useHydrate, Hydrate }\n\n { dehydrate, hydrate, useHydrate, Hydrate }\n\n```\n\n### [Removed undocumented methods from the , and\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#removed-\nundocumented-methods-from-the-queryclient-query-and-mutation>)\n\nThe methods and on the were undocumented and unused internally, so we removed\nthem. Since it was just a wrapper around a method available on the , you can\nstill use the functionality of\n\n```\n\n-  return this.mutationCache.build(this, options).execute() \n\n```\n\nAdditionally, was removed because it was also unused. was removed because it\ndidn't actually cancel the outgoing request.\n\nPreviously, React Query had a directory named which imported from the module.\nThis could cause problems with some Jest configurations, resulting in errors\nwhen running tests like:\n\n```\n\nTypeError: Cannot read property 'createContext' of undefined\n\n```\n\n```\n\nTypeError: Cannot read property 'createContext' of undefined\n\n```\n\nWith the renamed directory this no longer is an issue.\n\nIf you were importing anything from directly in your project (as opposed to just\n), then you need to update your imports:\n\n```\n\n```\n\nv4 comes with an awesome set of new features:\n\nReact 18 was released earlier this year, and v4 now has first class support for\nit and the new concurrent features it brings.\n\nIn v3, React Query has always fired off queries and mutations, but then taken\nthe assumption that if you want to retry it, you need to be connected to the\ninternet. This has led to several confusing situations:\n\n  * You are offline and mount a query - it goes to loading state, the request fails, and it stays in loading state until you go online again, even though it is not really fetching.\n  * Similarly, if you are offline and have retries turned off, your query will just fire and fail, and the query goes to error state.\n  * You are offline and want to fire off a query that doesn't necessarily need network connection (because you use React Query for something other than data fetching), but it fails for some other reason. That query will now be paused until you go online again.\n  * Window focus refetching didn't do anything at all if you were offline.\n\nWith v4, React Query introduces a new to tackle all these issues. Please read\nthe dedicated page about the new for more information.\n\nReact Query defaults to \"tracking\" query properties, which should give you a\nnice boost in render optimization. The feature has existed since and has now\nbecome the default behavior with v4.\n\n### [Bailing out of updates with\nsetQueryData](https://tanstack.com/query/latest/docs/framework/react/guides/<#bailing-\nout-of-updates-with-setquerydata>)\n\nWhen using the [functional updater form of\nsetQueryData](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/reference/QueryClient/#queryclientsetquerydata>),\nyou can now bail out of the update by returning . This is helpful if is given to\nyou as , which means that currently, no cached entry exists and you don't want\nto / cannot create one, like in the example of toggling a todo:\n\nMutations can now also be garbage collected automatically, just like queries.\nThe default for mutations is also set to 5 minutes.\n\n### [Custom Contexts for Multiple\nProviders](https://tanstack.com/query/latest/docs/framework/react/guides/<#custom-\ncontexts-for-multiple-providers>)\n\nCustom contexts can now be specified to pair hooks with their matching . This is\ncritical when there may be multiple React Query instances in the component tree,\nand you need to ensure your hook uses the correct instance.\n\n```\n\n// Our first data package: @my-scope/container-data\n\n```\n\n```\n\n// Our first data package: @my-scope/container-data\n\n```\n\n  1. Create a second data package.\n\n```\n\n// Our second data package: @my-scope/my-component-data\n\n```\n\n```\n\n// Our second data package: @my-scope/my-component-data\n\n```\n\n  1. Use these two data packages in your application.\n\n```\n\n> // <-- Provides container data (like \"user\") using its own React Query\n> provider\n\n> // <-- Provides app data using its own React Query provider (unused in this\n> example)\n\n> // <-- Provides component data (like \"items\") using its own React Query\n> provider\n\n// Example of hooks provided by the \"DataProvider\" components above:\n\n// <-- Uses the context specified in ContainerDataProvider.\n\n// <-- Uses the context specified in MyComponentDataProvider\n\n```\n\n```\n\n // <-- Provides container data (like \"user\") using its own React Query provider\n\n // <-- Provides app data using its own React Query provider (unused in this\nexample)\n\n // <-- Provides component data (like \"items\") using its own React Query\nprovider\n\n// Example of hooks provided by the \"DataProvider\" components above:\n\n// <-- Uses the context specified in ContainerDataProvider.\n\n// <-- Uses the context specified in MyComponentDataProvider\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JUCWADTZ3JCA7IE2JWF67ITK7KC67DT2QYF67IT27YCA7IK2JWCAYDTKJNHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/guides/migrating-to-v5\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# Migrating to TanStack Query v5\n\nv5 is a major version, so there are some breaking changes to be aware of:\n\n### [Supports a single signature, one\nobject](https://tanstack.com/query/latest/docs/framework/react/guides/<#supports-\na-single-signature-one-object>)\n\nuseQuery and friends used to have many overloads in TypeScript - different ways\nhow the function can be invoked. Not only this was tough to maintain, type wise,\nit also required a runtime check to see which type the first and the second\nparameter, to correctly create options.\n\nnow we only support the object format.\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n### [ now accepts queryKey only as an\nArgument](https://tanstack.com/query/latest/docs/framework/react/guides/<#queryclientgetquerydata-\nnow-accepts-querykey-only-as-an-argument>)\n\nargument is changed to accept only a\n\n### [ now accepts queryKey only as an\nArgument](https://tanstack.com/query/latest/docs/framework/react/guides/<#queryclientgetquerystate-\nnow-accepts-querykey-only-as-an-argument>)\n\nargument is changed to accept only a\n\nTo make the remove overloads migration easier, v5 comes with a codemod.\n\n> The codemod is a best efforts attempt to help you migrate the breaking change.\n> Please review the generated code thoroughly! Also, there are edge cases that\n> cannot be found by the code mod, so please keep an eye on the log output.\nIf you want to run it against or files, please use the command below:\n\n```\n\n```\n\n```\n\n```\n\nIf you want to run it against or files, please use the command below:\n\n```\n\n```\n\n```\n\n```\n\nPlease note in the case of you need to use as the parser; otherwise, the codemod\nwon't be applied properly!\n\nApplying the codemod might break your code formatting, so please don't forget to\nrun and/or after you've applied the codemod!\n\nA few notes about how codemod works:\n\n  * Generally, we're looking for the lucky case, when the first parameter is an object expression and contains the \"queryKey\" or \"mutationKey\" property (depending on which hook/method call is being transformed). If this is the case, your code already matches the new signature, so the codemod won't touch it. üéâ\n  * If the condition above is not fulfilled, then the codemod will check whether the first parameter is an array expression or an identifier that references an array expression. If this is the case, the codemod will put it into an object expression, then it will be the first parameter.\n  * If object parameters can be inferred, the codemod will attempt to copy the already existing properties to the newly created one.\n  * If the codemod cannot infer the usage, then it will leave a message on the console. The message contains the file name and the line number of the usage. In this case, you need to do the migration manually.\n  * If the transformation results in an error, you will also see a message on the console. This message will notify you something unexpected happened, please do the migration manually.\n\n### [Callbacks on useQuery (and QueryObserver) have been\nremoved](https://tanstack.com/query/latest/docs/framework/react/guides/<#callbacks-\non-usequery-and-queryobserver-have-been-removed>)\n\n, and have been removed from Queries. They haven't been touched for Mutations.\nPlease see for motivations behind this change and what to do instead.\n\nThis streamlines how callbacks are invoked (the , and callbacks all only get the\nquery passed as well), and it fixes some typing issues when callbacks get data\ntransformed by .\n\nYou can still access data with , however, it will not be data that has been\ntransformed by . If you need to access the transformed data, you can call the\ntransformation again on .\n\n### [The method has been removed from\nuseQuery](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nremove-method-has-been-removed-from-usequery>)\n\nPreviously, remove method used to remove the query from the queryCache without\ninforming observers about it. It was best used to remove data imperatively that\nis no longer needed, e.g. when logging a user out.\n\nBut It doesn't make much sense to do this while a query is still active, because\nit will just trigger a hard loading state with the next re-render.\n\nif you still need to remove a query, you can use\n\n```\n\n```\n\n### [The minimum required TypeScript version is now\n4.7](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nminimum-required-typescript-version-is-now-47>)\n\nMainly because an important fix was shipped around type inference. Please see\nthis for more information.\n\n### [The option has been removed from\nuseQuery](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nisdataequal-option-has-been-removed-from-usequery>)\n\nPreviously, This function was used to indicate whether to use previous () or new\ndata () as a resolved data for the query.\n\nYou can achieve the same functionality by passing a function to instead:\n\n```\n\n```\n\n### [The deprecated custom logger has been\nremoved](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\ndeprecated-custom-logger-has-been-removed>)\n\nCustom loggers were already deprecated in 4 and have been removed in this\nversion. Logging only had an effect in development mode, where passing a custom\nlogger is not necessary.\n\nWe have updated our browserslist to produce a more modern, performant and\nsmaller bundle. You can read about the requirements .\n\n### [Private class fields and\nmethods](https://tanstack.com/query/latest/docs/framework/react/guides/<#private-\nclass-fields-and-methods>)\n\nTanStack Query has always had private fields and methods on classes, but they\nweren't really private - they were just private in . We now use , which means\nthose fields are now truly private and can't be accessed from the outside at\nruntime.\n\nAlmost everyone gets wrong. It sounds like \"the amount of time that data is\ncached for\", but that is not correct.\n\ndoes nothing as long as a query is still in use. It only kicks in as soon as the\nquery becomes unused. After the time has passed, data will be \"garbage\ncollected\" to avoid the cache from growing.\n\nis referring to \"garbage collect\" time. It's a bit more technical, but also a\nquite in computer science.\n\n```\n\n```\n\n### [The option has been renamed to\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nuseerrorboundary-option-has-been-renamed-to-throwonerror>)\n\nTo make the option more framework-agnostic and avoid confusion with the\nestablished React function prefix \"\" for hooks and the \"ErrorBoundary\" component\nname, it has been renamed to to more accurately reflect its functionality.\n\n### [TypeScript: is now the default type for errors instead of\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#typescript-\nerror-is-now-the-default-type-for-errors-instead-of-unknown>)\n\nEven though in JavaScript, you can anything (which makes the most correct type),\nalmost always, (or subclasses of ) are thrown. This change makes it easier to\nwork with the field in TypeScript for most cases.\n\nIf you want to throw something that isn't an Error, you'll now have to set the\ngeneric for yourself:\n\nFor a way to set a different kind of Error globally, see .\n\nSince the only supported syntax now is the object syntax, this rule is no longer\nneeded\n\nWe have removed the option and flag as they were doing mostly the same thing as\nand flag.\n\nTo achieve the same functionality as , we have added previous query as an\nargument to which accepts an identity function. Therefore you just need to\nprovide an identity function to or use the included function from Tanstack\nQuery.\n\n> A note here is that would not receive in the function as argument. This is due\n> to a dynamic nature of queries passed in the array, which may lead to a\n> different shape of result from placeholder and queryFn.\n```\n\n```\n\nAn identity function, in the context of Tanstack Query, refers to a function\nthat always returns its provided argument (i.e. data) unchanged.\n\n```\n\n// identity function with the same behaviour as `keepPreviousData`\n\n```\n\n```\n\n // identity function with the same behaviour as `keepPreviousData`\n\n```\n\nThere are some caveats to this change however, which you must be aware of:\n\n  * will always put you into state, while gave you the status of the previous query. That status could be if we have data fetched successfully and then got a background refetch error. However, the error itself was not shared, so we decided to stick with behavior of .\n  * gave you the timestamp of the previous data, while with , will stay at . This might be annoying if you want to show that timestamp continuously on screen. However you might get around it with .\n```\n\n```\n\n### [Window focus refetching no longer listens to the\nevent](https://tanstack.com/query/latest/docs/framework/react/guides/<#window-\nfocus-refetching-no-longer-listens-to-the-focus-event>)\n\nThe event is used exclusively now. This is possible because we only support\nbrowsers that support the event. This fixes a bunch of issues .\n\n### [Network status no longer relies on the\nproperty](https://tanstack.com/query/latest/docs/framework/react/guides/<#network-\nstatus-no-longer-relies-on-the-navigatoronline-property>)\n\ndoesn't work well in Chromium based browsers. There are around false negatives,\nwhich lead to Queries being wrongfully marked as .\n\nTo circumvent this, we now always start with and only listen to and events to\nupdate the status.\n\nThis should reduce the likelihood of false negatives, however, it might mean\nfalse positives for offline apps that load via serviceWorkers, which can work\neven without an internet connection.\n\n### [Removed custom prop in favor of custom\ninstance](https://tanstack.com/query/latest/docs/framework/react/guides/<#removed-\ncustom-context-prop-in-favor-of-custom-queryclient-instance>)\n\nIn v4, we introduced the possibility to pass a custom to all react-query hooks.\nThis allowed for proper isolation when using MicroFrontends.\n\nHowever, is a react-only feature. All that does is give us access to the . We\ncould achieve the same isolation by allowing to pass in a custom directly. This\nin turn will enable other frameworks to have the same functionality in a\nframework-agnostic way.\n\n```\n\n```\n\nIn v4, we introduced the possibility to define the pages to refetch for infinite\nqueries with the function.\n\nHowever, refetching all pages might lead to UI inconsistencies. Also, this\noption is available on e.g. , but it only does something for infinite queries,\nnot \"normal\" queries.\n\nThe v5 includes a new option for infinite queries to limit the number of pages\nto store in the query data and to refetch. This new feature handles the use\ncases initially identified for the page feature without the related issues.\n\nThe options you can pass to have been simplified. Queries and Mutations are\nalways dehydrated (according to the default function implementation). To change\nthis behaviour, instead of using the removed boolean options and you can\nimplement the function equivalents or instead. To get the old behaviour of not\nhydrating queries/mutations at all, pass in .\n\n### [Infinite queries now need a\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#infinite-\nqueries-now-need-a-initialpageparam>)\n\nPreviously, we've passed to the as , and you could assign a default value to the\nparameter in the function signature. This had the drawback of storing in the ,\nwhich is not serializable.\n\nInstead, you now have to pass an explicit to the infinite query options. This\nwill be used as the for the first page:\n\n```\n\n```\n\n### [Manual mode for infinite queries has been\nremoved](https://tanstack.com/query/latest/docs/framework/react/guides/<#manual-\nmode-for-infinite-queries-has-been-removed>)\n\nPreviously, we've allowed to overwrite the that would be returned from or by\npassing a value directly to or . This feature didn't work at all with refetches\nand wasn't widely known or used. This also means that is now required for\ninfinite queries.\n\n### [Returning from or now indicates that there is no further page\navailable](https://tanstack.com/query/latest/docs/framework/react/guides/<#returning-\nnull-from-getnextpageparam-or-getpreviouspageparam-now-indicates-that-there-is-\nno-further-page-available>)\n\nIn v4, you needed to explicitly return to indicate that there is no further page\navailable. We've widened this check to include .\n\n### [No retries on the\nserver](https://tanstack.com/query/latest/docs/framework/react/guides/<#no-\nretries-on-the-server>)\n\nOn the server, now defaults to instead of . For prefetching, we have always\ndefaulted to retries, but since queries that have enabled can now execute\ndirectly on the server as well (since React18), we have to make sure that we\ndon't retry on the server at all.\n\n### [ has been changed to and has been changed to and has now been renamed to\n](https://tanstack.com/query/latest/docs/framework/react/guides/<#status-\nloading-has-been-changed-to-status-pending-and-isloading-has-been-changed-to-\nispending-and-isinitialloading-has-now-been-renamed-to-isloading>)\n\nThe status has been renamed to , and similarly the derived flag has been renamed\nto .\n\nFor mutations as well the has been changed from to and the flag has been changed\nto .\n\nLastly, a new derived flag has been added to the queries that is implemented as\n. This means that and have the same thing, but is deprecated now and will be\nremoved in the next major version.\n\nTo understand the reasoning behind this change checkout the .\n\nbecause it also hashes mutation keys and can be used inside the functions of and\n, which gets mutations passed.\n\n### [The minimum required React version is now\n18.0](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\nminimum-required-react-version-is-now-180>)\n\nReact Query v5 requires React 18.0 or later. This is because we are using the\nnew hook, which is only available in React 18.0 and later. Previously, we have\nbeen using the shim provided by React.\n\n### [The prop has been removed from\nQueryClientProvider](https://tanstack.com/query/latest/docs/framework/react/guides/<#the-\ncontextsharing-prop-has-been-removed-from-queryclientprovider>)\n\nYou could previously use the property to share the first (and at least one)\ninstance of the query client context across the window. This ensured that if\nTanStack Query was used across different bundles or microfrontends then they\nwill all use the same instance of the context, regardless of module scoping.\n\nWith the removal of the custom context prop in v5, refer to the section on\n[Removed custom context prop in favor of custom queryClient\ninstance](https://tanstack.com/query/latest/docs/framework/react/guides/</query/latest/docs/framework/react/guides/migrating-\nto-v5/#removed-custom-context-prop-in-favor-of-custom-queryclient-instance>). If\nyou wish to share the same query client across multiple packages of an\napplication, you can directly pass a shared custom instance.\n\n### [No longer using as the batching function in React and React\nNative](https://tanstack.com/query/latest/docs/framework/react/guides/<#no-\nlonger-using-unstable_batchedupdates-as-the-batching-function-in-react-and-\nreact-native>)\n\nSince the function is noop in React 18, it will no longer be automatically set\nas the batching function in .\n\nIf your framework supports a custom batching function, you can let TanStack\nQuery know about it by calling .\n\nFor example, this is how the batch function is set in :\n\n```\n\n```\n\nTo better support concurrent features and transitions we've made some changes to\nthe hydration APIs. The component has been renamed to and the hook has been\nremoved.\n\nThe no longer hydrates mutations, only queries. To hydrate mutations, use the\nlow level API or the plugin.\n\nFinally, as a technical detail, the timing for when queries are hydrated have\nchanged slightly. New queries are still hydrated in the render phase so that SSR\nworks as usual, but any queries that already exist in the cache are now hydrated\nin an effect instead (as long as their data is fresher than what is in the\ncache). If you are hydrating just once at the start of your application as is\ncommon, this wont affect you, but if you are using Server Components and pass\ndown fresh data for hydration on a page navigation, you might notice a flash of\nthe old data before the page immediately rerenders.\n\nThis last change is technically a breaking one, and was made so we don't\nprematurely update content on the page before a page transition has been fully\ncommitted. No action is required on your part.\n\n```\n\n```\n\nwill now merge together all matching registrations instead of returning only the\nfirst matching registration.\n\nAs a result, calls to should now be ordered with specificity. That is,\nregistrations should be made from the to the .\n\n```\n\n```\n\nNote that in this specific example, was added to the registration to counteract\nit now inheriting from the more general registration. The specific changes\nneeded to maintain exact behavior will vary depending on your defaults.\n\nv5 also comes with new features:\n\nWe have a new, simplified way to perform optimistic updates by leveraging the\nreturned from :\n\n```\n\n, { text: newTodo }),\n\n```\n\nHere, we are only changing how the UI looks when the mutation is running instead\nof writing data directly to the cache. This works best if we only have one place\nwhere we need to show the optimistic update. For more details, have a look at\nthe .\n\n### [Limited, Infinite Queries with new maxPages\noption](https://tanstack.com/query/latest/docs/framework/react/guides/<#limited-\ninfinite-queries-with-new-maxpages-option>)\n\nInfinite queries are great when infinite scroll or pagination are needed.\nHowever, the more pages you fetch, the more memory you consume, and this also\nslows down the query refetching process as all the pages are sequentially\nrefetched.\n\nVersion 5 has a new option for infinite queries, which allows developers to\nlimit the number of pages that are stored in the query data and subsequently\nrefetched. You can adjust the value according to the UX and refetching\nperformance you want to deliver.\n\nNote that the infinite list must be bi-directional, which requires both and to\nbe defined.\n\n### [Infinite Queries can prefetch multiple\npages](https://tanstack.com/query/latest/docs/framework/react/guides/<#infinite-\nqueries-can-prefetch-multiple-pages>)\n\nInfinite Queries can be prefetched like regular Queries. Per default, only the\nfirst page of the Query will be prefetched and will be stored under the given\nQueryKey. If you want to prefetch more than one page, you can use the option.\nRead the for more information.\n\nSee the for more details.\n\nSee the for more details.\n\n### [Typesafe way to create Query\nOptions](https://tanstack.com/query/latest/docs/framework/react/guides/<#typesafe-\nway-to-create-query-options>)\n\nSee the for more details.\n\nWith v5, suspense for data fetching finally becomes \"stable\". We've added\ndedicated , and hooks. With these hooks, will never be potentially on type\nlevel:\n\n```\n\n // ^? const post: Post\n\n```\n\n```\n\n // ^? const post: Post\n\n```\n\nThe experimental flag on the query hooks has been removed.\n\nYou can read more about them in the .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n[ Streamline software patching and vulnerability response on macOS. Deploy\nWorkbrew ‚Äì it‚Äôs free.\n](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICAYDEZ3JCA7IE2JWFT7D62JKC67DT2QYF67IT27YCA7IK2JWCA7ICK7JHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/guides/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/reference/QueryClient\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe can be used to interact with a cache:\n\n```\n\n```\n\n  *     * The query cache this client is connected to.\n  *     * The mutation cache this client is connected to.\n  *     * Define defaults for all queries and mutations using this queryClient.\n    * You can also define defaults to be used for \n\nis an asynchronous method that can be used to fetch and cache a query. It will\neither resolve with the data or throw with the error. Use the method if you just\nwant to fetch a query without needing the result.\n\nIf the query exists and the data is not invalidated or older than the given ,\nthen the data from the cache will be returned. Otherwise it will try to fetch\nthe latest data.\n\n```\n\n```\n\nSpecify a to only fetch when the data is older than a certain amount of time:\n\nThe options for are exactly the same as those of , except the following:\nenabled, refetchInterval, refetchIntervalInBackground, refetchOnWindowFocus,\nrefetchOnReconnect, refetchOnMount, notifyOnChangeProps, throwOnError, select,\nsuspense, placeholderData; which are strictly for useQuery and useInfiniteQuery.\nYou can check the for more clarity.\n\nis similar to but can be used to fetch and cache an infinite query.\n\n```\n\n```\n\nThe options for are exactly the same as those of .\n\nis an asynchronous method that can be used to prefetch a query before it is\nneeded or rendered with and friends. The method works the same as except that it\nwill not throw or return any data.\n\nYou can even use it with a default queryFn in your config!\n\nThe options for are exactly the same as those of .\n\n  *     * A promise is returned that will either immediately resolve if no fetch is needed or after the query has been executed. It will not return any data or throw any errors.\n\nis similar to but can be used to prefetch and cache an infinite query.\n\nThe options for are exactly the same as those of .\n\n  *     * A promise is returned that will either immediately resolve if no fetch is needed or after the query has been executed. It will not return any data or throw any errors.\n\nis a synchronous function that can be used to get an existing query's cached\ndata. If the query does not exist, will be returned.\n\n  *     * The data for the cached query, or if the query does not exist.\n\nis an asynchronous function that can be used to get an existing query's cached\ndata. If the query does not exist, will be called and its results returned.\n\n  *     * If set to , stale data will be refetched in the background, but cached data will be returned immediately.\n\nis an asynchronous function that can be used to get an existing infinite query's\ncached data. If the query does not exist, will be called and its results\nreturned.\n\n  *     * If set to , stale data will be refetched in the background, but cached data will be returned immediately.\n\nis a synchronous function that can be used to get the cached data of multiple\nqueries. Only queries that match the passed queryKey or queryFilter will be\nreturned. If there are no matching queries, an empty array will be returned.\n\n  * : \n    * if a filter is passed, the data with queryKeys matching the filter will be returned\n\n  * [queryKey: QueryKey, data: TQueryFnData | undefined][]\n    * An array of tuples for the matched query keys, or if there are no matches. The tuples are the query key and its associated data.\n\nBecause the returned data in each tuple can be of varying structures (i.e. using\na filter to return \"active\" queries can return different data types), the\ngeneric defaults to . If you provide a more specific type to it is assumed that\nyou are certain each tuple's data entry is all the same type.\n\nThis distinction is more a \"convenience\" for ts devs that know which structure\nwill be returned.\n\nis a synchronous function that can be used to immediately update a query's\ncached data. If the query does not exist, it will be created. **If the query is\nnot utilized by a query hook in the default of 5 minutes, the query will be\ngarbage collected**. To update multiple queries at once and match query keys\npartially, you need to use instead.\n\n> The difference between using and is that is sync and assumes that you already\n> synchronously have the data available. If you need to fetch the data\n> asynchronously, it's suggested that you either refetch the query key or use to\n> handle the asynchronous fetch.\n  * updater: TQueryFnData | undefined | ((oldData: TQueryFnData | undefined) => TQueryFnData | undefined)\n    * If non-function is passed, the data will be updated to this value\n    * If a function is passed, it will receive the old data value and be expected to return a new one.\n\nIf the value is , the query data is not updated.\n\nFor convenience in syntax, you can also pass an updater function which receives\nthe current data value and returns the new one:\n\nIf the updater function returns , the query data will not be updated. If the\nupdater function receives as input, you can return to bail out of the update and\nthus create a new cache entry.\n\nUpdates via must be performed in an way. attempt to write directly to the cache\nby mutating or data that you retrieved via in place.\n\nis a synchronous function that can be used to get an existing query's state. If\nthe query does not exist, will be returned.\n\nis a synchronous function that can be used to immediately update cached data of\nmultiple queries by using filter function or partially matching the query key.\nOnly queries that match the passed queryKey or queryFilter will be updated - no\nnew cache entries will be created. Under the hood, is called for each existing\nquery.\n\n  * : \n    * if a filter is passed, queryKeys matching the filter will be updated\n  * updater: TQueryFnData | (oldData: TQueryFnData | undefined) => TQueryFnData\n    * the updater function or new data, will be called for each matching queryKey\n\nThe method can be used to invalidate and refetch single or multiple queries in\nthe cache based on their query keys or any other functionally accessible\nproperty/state of the query. By default, all matching queries are immediately\nmarked as invalid and active queries are refetched in the background.\n\n  * If you **do not want active queries to refetch** , and simply be marked as invalid, you can use the option.\n  * If you **want inactive queries to refetch** as well, use the option\n\n```\n\n```\n\n  * : \n    * refetchType?: 'active' | 'inactive' | 'all' | 'none'\n      * When set to , only queries that match the refetch predicate and are actively being rendered via and friends will be refetched in the background.\n      * When set to , only queries that match the refetch predicate and are NOT actively being rendered via and friends will be refetched in the background.\n      * When set to , all queries that match the refetch predicate will be refetched in the background.\n      * When set to , no queries will be refetched, and those that match the refetch predicate will be marked as invalid only.\n  * :\n    *       * When set to , this method will throw if any of the query refetch tasks fail.\n    *       * Defaults to \n        * Per default, a currently running request will be cancelled before a new request is made\n      * When set to , no refetch will be made if there is already a request running.\n\nThe method can be used to refetch queries based on certain conditions.\n\n```\n\n// refetch all stale queries:\n\n// refetch all active queries partially matching a query key:\n\n// refetch all active queries exactly matching a query key:\n\n```\n\n```\n\n// refetch all stale queries:\n\n// refetch all active queries partially matching a query key:\n\n// refetch all active queries exactly matching a query key:\n\n```\n\n  * :\n    *       * When set to , this method will throw if any of the query refetch tasks fail.\n    *       * Defaults to \n        * Per default, a currently running request will be cancelled before a new request is made\n      * When set to , no refetch will be made if there is already a request running.\n\nThis function returns a promise that will resolve when all of the queries are\ndone being refetched. By default, it throw an error if any of those queries\nrefetches fail, but this can be configured by setting the option to\n\nThe method can be used to cancel outgoing queries based on their query keys or\nany other functionally accessible property/state of the query.\n\nThis is most useful when performing optimistic updates since you will likely\nneed to cancel any outgoing query refetches so they don't clobber your\noptimistic update when they resolve.\n\nThis method does not return anything\n\nThe method can be used to remove queries from the cache based on their query\nkeys or any other functionally accessible property/state of the query.\n\nThis method does not return anything\n\nThe method can be used to reset queries in the cache to their initial state\nbased on their query keys or any other functionally accessible property/state of\nthe query.\n\nThis will notify subscribers ‚Äî unlike , which removes all subscribers ‚Äî and\nreset the query to its pre-loaded state ‚Äî unlike . If a query has , the query's\ndata will be reset to that. If a query is active, it will be refetched.\n\n  * :\n    *       * When set to , this method will throw if any of the query refetch tasks fail.\n    *       * Defaults to \n        * Per default, a currently running request will be cancelled before a new request is made\n      * When set to , no refetch will be made if there is already a request running.\n\nThis method returns a promise that resolves when all active queries have been\nrefetched.\n\nThis method returns an representing how many queries, if any, in the cache are\ncurrently fetching (including background-fetching, loading new pages, or loading\nmore infinite query results)\n\n```\n\n'At least one query is fetching!'\n\n```\n\n```\n\nAt least one query is fetching!\n\n```\n\nTanStack Query also exports a handy hook that will let you subscribe to this\nstate in your components without creating a manual subscription to the query\ncache.\n\nThis method returns the number of fetching queries.\n\nThis method returns an representing how many mutations, if any, in the cache are\ncurrently fetching.\n\n```\n\n'At least one mutation is fetching!'\n\n```\n\n```\n\nAt least one mutation is fetching!\n\n```\n\nTanStack Query also exports a handy hook that will let you subscribe to this\nstate in your components without creating a manual subscription to the mutation\ncache.\n\nThis method returns the number of fetching mutations.\n\nThe method returns the default options which have been set when creating the\nclient or with .\n\nThe method can be used to dynamically set the default options for this\nqueryClient. Previously defined default options will be overwritten.\n\nThe method returns the default options which have been set for specific queries:\n\n> Note that if several query defaults match the given query key, they will be\n> merged together based on the order of registration. See .\ncan be used to set default options for specific queries:\n\n```\n\n], { queryFn: fetchPosts })\n\n```\n\n> As stated in , the order of registration of query defaults does matter. Since\n> the matching defaults are merged by , the registration should be made in the\n> following order: from the to the . This way, more specific defaults will\n> override more generic defaults.\nThe method returns the default options which have been set for specific\nmutations:\n\ncan be used to set default options for specific mutations:\n\n```\n\n], { mutationFn: addPost })\n\n```\n\n> Similar to , the order of registration does matter here.\nThe method returns the query cache this client is connected to.\n\nThe method returns the mutation cache this client is connected to.\n\nThe method clears all connected caches.\n\nCan be used to resume mutations that have been paused because there was no\nnetwork connection.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n[ Lock into your work. Ditch the distractions with Opera One.\n](https://tanstack.com/query/latest/docs/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I4K7KC67DT2QYF67IT27YCA7IK2JWCA7IC23JHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/reference/QueryCache\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe is the storage mechanism for TanStack Query. It stores all the data, meta\ninformation and state of queries it contains.\n\n**Normally, you will not interact with the QueryCache directly and instead use\nthe for a specific cache.**\n\n```\n\n```\n\n  * onError?: (error: unknown, query: Query) => void\n    * This function will be called if some query encounters an error.\n  * onSuccess?: (data: unknown, query: Query) => void\n    * This function will be called if some query is successful.\n  * onSettled?: (data: unknown | undefined, error: unknown | null, query: Query) => void\n    * This function will be called if some query is settled (either successful or errored).\n\nis a slightly more advanced synchronous method that can be used to get an\nexisting query instance from the cache. This instance not only contains the\nstate for the query, but all of the instances, and underlying guts of the query\nas well. If the query does not exist, will be returned.\n\n> Note: This is not typically needed for most applications, but can come in\n> handy when needing more information about a query in rare scenarios (eg.\n> Looking at the query.state.dataUpdatedAt timestamp to decide whether a query\n> is fresh enough to be used as an initial value)\n  *     * The query instance from the cache\n\nis even more advanced synchronous method that can be used to get existing query\ninstances from the cache that partially match query key. If queries do not\nexist, empty array will be returned.\n\n> Note: This is not typically needed for most applications, but can come in\n> handy when needing more information about a query in rare scenarios\n\n  *     * Query instances from the cache\n\nThe method can be used to subscribe to the query cache as a whole and be\ninformed of safe/known updates to the cache like query states changing or\nqueries being updated, added or removed\n\n  * callback: (event: QueryCacheNotifyEvent) => void\n    * This function will be called with the query cache any time it is updated via its tracked update mechanisms (eg, , , etc). Out of scope mutations to the cache are not encouraged and will not fire subscription callbacks\n\n  *     * This function will unsubscribe the callback from the query cache.\n\nThe method can be used to clear the cache entirely and start fresh.\n\nTo get a better understanding how the QueryCache works internally, have a look\nat from the Community Resources.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n[ Google Cloud Next is April 9-11 to learn how the hottest startups are putting\nAI into action.\n](https://tanstack.com/query/latest/docs/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICYBI6Z3JCA7IE2JWCASD527KC67DT2QYF67IT27YCA7IK2JWCA7ICKQ7HEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/reference/MutationCache\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe is the storage for mutations.\n\n**Normally, you will not interact with the MutationCache directly and instead\nuse the .**\n\n```\n\n```\n\n  * onError?: (error: unknown, variables: unknown, context: unknown, mutation: Mutation) => Promise<unknown> | unknown\n    * This function will be called if some mutation encounters an error.\n    * If you return a Promise from it, it will be awaited\n  * onSuccess?: (data: unknown, variables: unknown, context: unknown, mutation: Mutation) => Promise<unknown> | unknown\n    * This function will be called if some mutation is successful.\n    * If you return a Promise from it, it will be awaited\n  * onSettled?: (data: unknown | undefined, error: unknown | null, variables: unknown, context: unknown, mutation: Mutation) => Promise<unknown> | unknown\n    * This function will be called if some mutation is settled (either successful or errored).\n    * If you return a Promise from it, it will be awaited\n  * onMutate?: (variables: unknown, mutation: Mutation) => Promise<unknown> | unknown\n    * This function will be called before some mutation executes.\n    * If you return a Promise from it, it will be awaited\n\nThe , , and callbacks on the MutationCache can be used to handle these events on\na global level. They are different to provided to the QueryClient because:\n\n  * can be overridden by each Mutation - the global callbacks will be called.\n  * does not allow returning a context value.\n\nreturns all mutations within the cache.\n\n> Note: This is not typically needed for most applications, but can come in\n> handy when needing more information about a mutation in rare scenarios\n  *     * Mutation instances from the cache\n\nThe method can be used to subscribe to the mutation cache as a whole and be\ninformed of safe/known updates to the cache like mutation states changing or\nmutations being updated, added or removed.\n\n  * callback: (mutation?: MutationCacheNotifyEvent) => void\n    * This function will be called with the mutation cache any time it is updated.\n\n  *     * This function will unsubscribe the callback from the mutation cache.\n\nThe method can be used to clear the cache entirely and start fresh.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/latest/docs/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI553KC67DT2QYF67IT27YCA7IK2JWCA7ICKJWHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/reference/QueryObserver\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe can be used to observe and switch between queries.\n\n```\n\nconst observer = new QueryObserver(queryClient, { queryKey: ['posts'] })\n\nconst unsubscribe = observer.subscribe((result) => {\n\n console.log(result)\n\n unsubscribe()\n\n})\n\n```\n\n```\n\nconst observer = new QueryObserver(queryClient, { queryKey: ['posts'] })\n\nconst unsubscribe = observer.subscribe((result) => {\n\n console.log(result)\n\n unsubscribe()\n\n})\n\n```\n\nThe options for the are exactly the same as those of .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/reference/InfiniteQueryObserver\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe can be used to observe and switch between infinite queries.\n\n```\n\n```\n\nThe options for the are exactly the same as those of .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/query/latest/docs/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD527LCKSITZ3JCA7IE2JYCTADT53KC67DT2QYF67IT27YCA7IK2JWCA7ICK3EHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/reference/QueriesObserver\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe can be used to observe multiple queries.\n\n```\n\n```\n\nThe options for the are exactly the same as those of .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n[ Deliver website design projects 30% faster with BugHerd.\n](https://tanstack.com/query/latest/docs/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JWCV7DCZ3JCA7IE2JWF67DV2JKC67DT2QYF67IT27YCA7IK2JWCA7ICK3IHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/reference/focusManager\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe manages the focus state within TanStack Query.\n\nIt can be used to change the default event listeners or to manually change the\nfocus state.\n\ncan be used to set a custom event listener:\n\n```\n\n  // Be sure to unsubscribe if a new handler is set\n\n```\n\n```\n\n  // Be sure to unsubscribe if a new handler is set\n\n```\n\ncan be used to subscribe to changes in the visibility state. It returns an\nunsubscribe function:\n\ncan be used to manually set the focus state. Set to fall back to the default\nfocus check.\n\n```\n\n// Fallback to the default focus check\n\n```\n\n```\n\n// Fallback to the default focus check\n\n```\n\ncan be used to get the current focus state.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/query/latest/docs/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I423KC67DT2QYF67IT27YCA7IK2JWCA7ICK3NHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/reference/onlineManager\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe manages the online state within TanStack Query. It can be used to change the\ndefault event listeners or to manually change the online state.\n\n> Per default, the assumes an active network connection, and listens to the and\n> events on the object to detect changes.\n> In previous versions, was used to determine the network status. However, it\n> doesn't work well in Chromium based browsers. There are around false\n> negatives, which lead to Queries being wrongfully marked as .\n> To circumvent this, we now always start with and only listen to and events to\n> update the status.\n> This should reduce the likelihood of false negatives, however, it might mean\n> false positives for offline apps that load via serviceWorkers, which can work\n> even without an internet connection.\ncan be used to set a custom event listener:\n\ncan be used to subscribe to changes in the online state. It returns an\nunsubscribe function:\n\ncan be used to manually set the online state.\n\n```\n\n```\n\n```\n\n```\n\ncan be used to get the current online state.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/query/latest/docs/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI52QKC67DT2QYF67IT27YCA7IK2JWCA7ICKQEHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/reference/notifyManager\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe handles scheduling and batching callbacks in Tanstack Query.\n\nIt exposes the following methods:\n\ncan be used to batch all updates scheduled inside the passed callback. This is\nmainly used internally to optimize queryClient updating.\n\nis a higher-order function that takes a callback and wraps it. All calls to the\nwrapped function schedule the callback to be run on the next batch.\n\nschedules a function to be run on the next batch. By default, the batch is run\nwith a setTimeout, but this can be configured.\n\noverrides the notify function. This function is passed the callback when it\nshould be executed. The default notifyFunction just calls it.\n\nThis can be used to for example wrap notifications with while running tests:\n\n```\n\n```\n\nsets the function to use for batched updates\n\nIf your framework supports a custom batching function, you can let TanStack\nQuery know about it by calling notifyManager.setBatchNotifyFunction.\n\nFor example, this is how the batch function is set in solid-query:\n\n```\n\n```\n\nconfigures a custom callback that should schedules when the next batch runs. The\ndefault behaviour is .\n\n```\n\n// Schedule batches in the next microtask\n\n// Schedule batches before the next frame is rendered\n\n// Schedule batches some time in the future\n\n```\n\n```\n\n// Schedule batches in the next microtask\n\n// Schedule batches before the next frame is rendered\n\n// Schedule batches some time in the future\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/query/latest/docs/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICAYDEZ3JCA7IE2JWFT7D62QKC67DT2QYF67IT27YCA7IK2JWCA7I653JHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/useQuery\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  *     * The query key to use for this query.\n    * The query key will be hashed into a stable hash. See for more information.\n    * The query will automatically update when this key changes (as long as is not set to ).\n  * queryFn: (context: QueryFunctionContext) => Promise<TData>\n    * **Required, but only if no default query function has been defined** See for more information.\n    * The function that the query will use to request data.\n    * Must return a promise that will either resolve data or throw an error. The data cannot be .\n  * enabled: boolean | (query: Query) => boolean\n    * Set this to to disable this query from automatically running.\n    * Can be used for .\n  * networkMode: 'online' | 'always' | 'offlineFirst\n  * retry: boolean | number | (failureCount: number, error: TError) => boolean\n    * If , failed queries will not retry by default.\n    * If , failed queries will retry infinitely.\n    * If set to a , e.g. , failed queries will retry until the failed query count meets that number.\n    * defaults to on the client and on the server\n  *     * If set to , the query will not be retried on mount if it contains an error. Defaults to .\n  * retryDelay: number | (retryAttempt: number, error: TError) => number\n    * This function receives a integer and the actual Error and returns the delay to apply before the next attempt in milliseconds.\n    * A function like attempt => Math.min(attempt > 1 ? 2 ** attempt * 1000 : 1000, 30 * 1000) applies exponential backoff.\n    * A function like attempt => attempt * 1000 applies linear backoff.\n  * staleTime: number | ((query: Query) => number)\n    * The time in milliseconds after which data is considered stale. This value only applies to the hook it is defined on.\n    * If set to , the data will never be considered stale\n    * If set to a function, the function will be executed with the query to compute a .\n  *     * Defaults to 5 * 60 * 1000 (5 minutes) or during SSR\n    * The time in milliseconds that unused/inactive cache data remains in memory. When a query's cache becomes unused or inactive, that cache data will be garbage collected after this duration. When different garbage collection times are specified, the longest one will be used.\n    * Note: the maximum allowed time is about 24 days. See .\n    * If set to , will disable garbage collection\n  * queryKeyHashFn: (queryKey: QueryKey) => string\n    * If specified, this function is used to hash the to a string.\n  * refetchInterval: number | false | ((query: Query) => number | false | undefined)\n    * If set to a number, all queries will continuously refetch at this frequency in milliseconds\n    * If set to a function, the function will be executed with the query to compute a frequency\n  *     * If set to , queries that are set to continuously refetch with a will continue to refetch while their tab/window is in the background\n  * refetchOnMount: boolean | \"always\" | ((query: Query) => boolean | \"always\")\n    * If set to , the query will refetch on mount if the data is stale.\n    * If set to , the query will not refetch on mount.\n    * If set to , the query will always refetch on mount.\n    * If set to a function, the function will be executed with the query to compute the value\n  * refetchOnWindowFocus: boolean | \"always\" | ((query: Query) => boolean | \"always\")\n    * If set to , the query will refetch on window focus if the data is stale.\n    * If set to , the query will not refetch on window focus.\n    * If set to , the query will always refetch on window focus.\n    * If set to a function, the function will be executed with the query to compute the value\n  * refetchOnReconnect: boolean | \"always\" | ((query: Query) => boolean | \"always\")\n    * If set to , the query will refetch on reconnect if the data is stale.\n    * If set to , the query will not refetch on reconnect.\n    * If set to , the query will always refetch on reconnect.\n    * If set to a function, the function will be executed with the query to compute the value\n  * notifyOnChangeProps: string[] | \"all\" | (() => string[] | \"all\" | undefined)\n    * If set, the component will only re-render if any of the listed properties change.\n    * If set to for example, the component will only re-render when the or properties change.\n    * If set to , the component will opt-out of smart tracking and re-render whenever a query is updated.\n    * If set to a function, the function will be executed to compute the list of properties.\n    * By default, access to properties will be tracked, and the component will only re-render when one of the tracked properties change.\n  * select: (data: TData) => unknown\n    * This option can be used to transform or select a part of the data returned by the query function. It affects the returned value, but does not affect what gets stored in the query cache.\n    * The function will only run if changed, or if the reference to the function itself changes. To optimize, wrap the function in .\n  * initialData: TData | () => TData\n    * If set, this value will be used as the initial data for the query cache (as long as the query hasn't been created or cached yet)\n    * If set to a function, the function will be called during the shared/root query initialization, and be expected to synchronously return the initialData\n    * Initial data is considered stale by default unless a has been set.\n  * initialDataUpdatedAt: number | (() => number | undefined)\n    * If set, this value will be used as the time (in milliseconds) of when the itself was last updated.\n  * placeholderData: TData | (previousValue: TData | undefined; previousQuery: Query | undefined,) => TData\n    * If set, this value will be used as the placeholder data for this particular query observer while the query is still in the state.\n    * If you provide a function for , as a first argument you will receive previously watched query data if available, and the second argument will be the complete previousQuery instance.\n  * structuralSharing: boolean | (oldData: unknown | undefined, newData: unknown) => unknown)\n    * If set to , structural sharing between query results will be disabled.\n    * If set to a function, the old and new data values will be passed through this function, which should combine them into resolved data for the query. This way, you can retain references from the old data to improve performance even when that data contains non-serializable values.\n  *     * If set to , this instance of will not be subscribed to the cache. This means it won't trigger the on its own, and it won't receive updates if data gets into cache by other means.\n  * throwOnError: undefined | boolean | (error: TError, query: Query) => boolean\n    * Defaults to the global query config's value, which is \n    * Set this to if you want errors to be thrown in the render phase and propagate to the nearest error boundary\n    * Set this to to disable 's default behavior of throwing errors to the error boundary.\n    * If set to a function, it will be passed the error and the query, and it should return a boolean indicating whether to show the error in an error boundary () or return the error as state ()\n  *     * If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the is available, and is also part of the provided to the .\n\n  * ,\n    * Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.\n\n  *     * Will be:\n      * if there's no cached data and no query attempt was finished yet.\n      * if the query attempt resulted in an error. The corresponding property has the error received from the attempted fetch\n      * if the query has received a response with no errors and is ready to display its data. The corresponding property on the query is the data received from the successful fetch or if the query's property is set to and has not been fetched yet is the first supplied to the query on initialization.\n  *     * A derived boolean from the variable above, provided for convenience.\n  *     * A derived boolean from the variable above, provided for convenience.\n  *     * A derived boolean from the variable above, provided for convenience.\n  *     * Will be if the query failed while fetching for the first time.\n  *     * Will be if the query failed while refetching.\n  *     * The last successfully resolved data for the query.\n  *     * The timestamp for when the query most recently returned the as .\n  *     * The error object for the query, if an error was thrown.\n  *     * The timestamp for when the query most recently returned the as .\n  *     * Will be if the data in the cache is invalidated or if the data is older than the given .\n  *     * Will be if the data shown is the placeholder data.\n  *     * Will be if the query has been fetched.\n  *     * Will be if the query has been fetched after the component mounted.\n    * This property can be used to not show any previously cached data.\n  *     * : Is whenever the queryFn is executing, which includes initial as well as background refetches.\n    * : The query wanted to fetch, but has been .\n    * : The query is not fetching.\n  *     * A derived boolean from the variable above, provided for convenience.\n  *     * A derived boolean from the variable above, provided for convenience.\n  *     * Is whenever a background refetch is in-flight, which include initial \n    * Is the same as \n  *     * Is whenever the first fetch for a query is in-flight\n    * Is the same as \n  *     * An alias for , will be removed in the next major version.\n  *     * The failure count for the query.\n    * Incremented every time the query fails.\n    * Reset to when the query succeeds.\n  *     * The failure reason for the query retry.\n    * Reset to when the query succeeds.\n  *     * The sum of all errors.\n  * refetch: (options: { throwOnError: boolean, cancelRefetch: boolean }) => Promise<UseQueryResult>\n    * A function to manually refetch the query.\n    * If the query errors, the error will only be logged. If you want an error to be thrown, pass the option\n    *       * Defaults to \n        * Per default, a currently running request will be cancelled before a new request is made\n      * When set to , no refetch will be made if there is already a request running.\n  *     * A stable promise that will be resolved with the data of the query.\n    * Requires the feature flag to be enabled on the .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Streamline software patching and vulnerability response on macOS. Deploy\nWorkbrew ‚Äì it‚Äôs free.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICAYDEZ3JCA7IE2JWFT7D62JKC67DT2QYF67IT27YCA7IK2JWCA7I653NHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/useQueries\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe hook can be used to fetch a variable number of queries:\n\n```\n\n```\n\nThe hook accepts an options object with a key whose value is an array with query\noption objects identical to the (excluding the option - because the can be\npassed in on the top level).\n\n  *     * Use this to provide a custom QueryClient. Otherwise, the one from the nearest context will be used.\n  * combine?: (result: UseQueriesResults) => TCombinedResult\n    * Use this to combine the results of the queries into a single value.\n\n> Having the same query key more than once in the array of query objects may\n> cause some data to be shared between queries. To avoid this, consider de-\n> duplicating the queries and map the results back to the desired structure.\nThe option exists for as well, but it doesn't get information passed from\npreviously rendered Queries like does, because the input to can be a different\nnumber of Queries on each render.\n\nThe hook returns an array with all the query results. The order returned is the\nsame as the input order.\n\nIf you want to combine (or other Query information) from the results into a\nsingle value, you can use the option. The result will be structurally shared to\nbe as referentially stable as possible.\n\n```\n\n```\n\nIn the above example, will be an object with a and a property. Note that all\nother properties of the Query results will be lost.\n\nThe function will only re-run if:\n\n  * any of the query results changed\n\nThis means that an inlined function, as shown above, will run on every render.\nTo avoid this, you can wrap the function in , or extract it to a stable function\nreference if it doesn't have any dependencies.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JUCWADTZ3JCA7IE2JWF67ITK7KC67DT2QYF67IT27YCA7IK2JWCA7I65QLHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/useInfiniteQuery\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe options for are identical to the with the addition of the following:\n\n  * queryFn: (context: QueryFunctionContext) => Promise<TData>\n    * **Required, but only if no default query function has been defined**\n    * The function that the query will use to request data.\n    * Must return a promise that will either resolve data or throw an error.\n  *     * The default page param to use when fetching the first page.\n  * getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => TPageParam | undefined | null\n    * When new data is received for this query, this function receives both the last page of the infinite list of data and the full array of all pages, as well as pageParam information.\n    * It should return a that will be passed as the last optional parameter to your query function.\n    * Return or to indicate there is no next page available.\n  * getPreviousPageParam: (firstPage, allPages, firstPageParam, allPageParams) => TPageParam | undefined | null\n    * When new data is received for this query, this function receives both the first page of the infinite list of data and the full array of all pages, as well as pageParam information.\n    * It should return a that will be passed as the last optional parameter to your query function.\n    * Return or to indicate there is no previous page available.\n  *     * The maximum number of pages to store in the infinite query data.\n    * When the maximum number of pages is reached, fetching a new page will result in the removal of either the first or last page from the pages array, depending on the specified direction.\n    * If or equals , the number of pages is unlimited\n    * and must be properly defined if value is greater than to allow fetching a page in both directions when needed.\n\nThe returned properties for are identical to the , with the addition of the\nfollowing properties and a small difference in and :\n\n  *   *     * Array containing all page params.\n  *     * Will be while fetching the next page with .\n  *     * Will be while fetching the previous page with .\n  * fetchNextPage: (options?: FetchNextPageOptions) => Promise<UseInfiniteQueryResult>\n    * This function allows you to fetch the next \"page\" of results.\n    * if set to , calling repeatedly will invoke every time, whether the previous invocation has resolved or not. Also, the result from previous invocations will be ignored. If set to , calling repeatedly won't have any effect until the first invocation has resolved. Default is .\n  * fetchPreviousPage: (options?: FetchPreviousPageOptions) => Promise<UseInfiniteQueryResult>\n    * This function allows you to fetch the previous \"page\" of results.\n  *     * Will be if there is a next page to be fetched (known via the option).\n  *     * Will be if there is a previous page to be fetched (known via the option).\n  *     * Will be if the query failed while fetching the next page.\n  *     * Will be if the query failed while fetching the previous page.\n  *     * Will be whenever a background refetch is in-flight, which include initial or fetching of next or previous page\n    * Is the same as isFetching && !isPending && !isFetchingNextPage && !isFetchingPreviousPage\n  *     * Will be if the query failed while refetching a page.\n  *     * A stable promise that resolves to the query result.\n    * This can be used with to fetch data\n    * Requires the feature flag to be enabled on the .\n\nKeep in mind that imperative fetch calls, such as , may interfere with the\ndefault refetch behaviour, resulting in outdated data. Make sure to call these\nfunctions only in response to user actions, or add conditions like .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ GitLab is the most comprehensive AI-powered DevSecOps Platform. Software.\nFaster.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JLCAADLZ3JCA7IE2JWCABI5K7KC67DT2QYF67IT27YCA7IK2JWCA7I65QMHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/useMutation\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * mutationFn: (variables: TVariables) => Promise<TData>\n    * **Required, but only if no default mutation function has been defined**\n    * A function that performs an asynchronous task and returns a promise.\n    * is an object that will pass to your \n  *     * The time in milliseconds that unused/inactive cache data remains in memory. When a mutation's cache becomes unused or inactive, that cache data will be garbage collected after this duration. When different cache times are specified, the longest one will be used.\n    * If set to , will disable garbage collection\n    * Note: the maximum allowed time is about 24 days. See .\n  *     * A mutation key can be set to inherit defaults set with .\n  * networkMode: 'online' | 'always' | 'offlineFirst'\n  * onMutate: (variables: TVariables) => Promise<TContext | void> | TContext | void\n    * This function will fire before the mutation function is fired and is passed the same variables the mutation function would receive\n    * Useful to perform optimistic updates to a resource in hopes that the mutation succeeds\n    * The value returned from this function will be passed to both the and functions in the event of a mutation failure and can be useful for rolling back optimistic updates.\n  * onSuccess: (data: TData, variables: TVariables, context: TContext) => Promise<unknown> | unknown\n    * This function will fire when the mutation is successful and will be passed the mutation's result.\n    * If a promise is returned, it will be awaited and resolved before proceeding\n  * onError: (err: TError, variables: TVariables, context?: TContext) => Promise<unknown> | unknown\n    * This function will fire if the mutation encounters an error and will be passed the error.\n    * If a promise is returned, it will be awaited and resolved before proceeding\n  * onSettled: (data: TData, error: TError, variables: TVariables, context?: TContext) => Promise<unknown> | unknown\n    * This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error\n    * If a promise is returned, it will be awaited and resolved before proceeding\n  * retry: boolean | number | (failureCount: number, error: TError) => boolean\n    * If , failed mutations will not retry.\n    * If , failed mutations will retry infinitely.\n    * If set to an , e.g. , failed mutations will retry until the failed mutations count meets that number.\n  * retryDelay: number | (retryAttempt: number, error: TError) => number\n    * This function receives a integer and the actual Error and returns the delay to apply before the next attempt in milliseconds.\n    * A function like attempt => Math.min(attempt > 1 ? 2 ** attempt * 1000 : 1000, 30 * 1000) applies exponential backoff.\n    * A function like attempt => attempt * 1000 applies linear backoff.\n  * scope: { id: string }\n    * Defaults to a unique id (so that all mutations run in parallel)\n    * Mutations with the same scope id will run in serial\n  * throwOnError: undefined | boolean | (error: TError) => boolean\n    * Defaults to the global query config's value, which is \n    * Set this to if you want mutation errors to be thrown in the render phase and propagate to the nearest error boundary\n    * Set this to to disable the behavior of throwing errors to the error boundary.\n    * If set to a function, it will be passed the error and should return a boolean indicating whether to show the error in an error boundary () or return the error as state ()\n  *     * If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever the is available (eg. , functions of the ).\n\n  * ,\n    * Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.\n\n  * mutate: (variables: TVariables, { onSuccess, onSettled, onError }) => void\n    * The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.\n    *       * The variables object to pass to the .\n    * onSuccess: (data: TData, variables: TVariables, context: TContext) => void\n      * This function will fire when the mutation is successful and will be passed the mutation's result.\n      * Void function, the returned value will be ignored\n    * onError: (err: TError, variables: TVariables, context: TContext | undefined) => void\n      * This function will fire if the mutation encounters an error and will be passed the error.\n      * Void function, the returned value will be ignored\n    * onSettled: (data: TData | undefined, error: TError | null, variables: TVariables, context: TContext | undefined) => void\n      * This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error\n      * Void function, the returned value will be ignored\n    * If you make multiple requests, will fire only after the latest call you've made.\n  * mutateAsync: (variables: TVariables, { onSuccess, onSettled, onError }) => Promise<TData>\n    * Similar to but returns a promise which can be awaited.\n  *     * Will be:\n      * initial status prior to the mutation function executing.\n      * if the mutation is currently executing.\n      * if the last mutation attempt resulted in an error.\n      * if the last mutation attempt was successful.\n  * , , , : boolean variables derived from \n  *     * will be if the mutation has been \n  *     * The last successfully resolved data for the mutation.\n  *     * The error object for the query, if an error was encountered.\n  *     * A function to clean the mutation internal state (i.e., it resets the mutation to its initial state).\n  *     * The failure count for the mutation.\n    * Incremented every time the mutation fails.\n    * Reset to when the mutation succeeds.\n  *     * The failure reason for the mutation retry.\n    * Reset to when the mutation succeeds.\n  *     * The timestamp for when the mutation was submitted.\n  * \n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Develop and launch modern apps with MongoDB Atlas, a resilient data platform.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICWBILZ3JCA7IE2JLCASIC53KC67DT2QYF67IT27YCA7IK2JWCA7I62JUHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/useIsFetching\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nis an optional hook that returns the of the queries that your application is\nloading or fetching in the background (useful for app-wide loading indicators).\n\n```\n\n// How many queries are fetching?\n\n// How many queries matching the posts prefix are fetching?\n\n```\n\n```\n\n// How many queries are fetching?\n\n// How many queries matching the posts prefix are fetching?\n\n```\n\n  * ,\n    * Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.\n\n  *     * Will be the of the queries that your application is currently loading or fetching in the background.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I423KC67DT2QYF67IT27YCA7IK2JWCA7I627IHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/useIsMutating\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nis an optional hook that returns the of mutations that your application is\nfetching (useful for app-wide loading indicators).\n\n```\n\n// How many mutations are fetching?\n\n// How many mutations matching the posts prefix are fetching?\n\n```\n\n```\n\n// How many mutations are fetching?\n\n// How many mutations matching the posts prefix are fetching?\n\n```\n\n  * ,\n    * Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.\n\n  *     * Will be the of the mutations that your application is currently fetching.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Loved by developers. Trusted by enterprises. Start your free 60 day trial.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JLCAADLZ3JCA7IE2JWCABI52JKC67DT2QYF67IT27YCA7IK2JWCA7I627NHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/useMutationState\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nis a hook that gives you access to all mutations in the . You can pass to it to\nnarrow down your mutations, and to transform the mutation state.\n\n**Example 1: Get all variables of all running mutations**\n\n```\n\n```\n\n**Example 2: Get all data for specific mutations via the**\n\n```\n\n// Some mutation that we want to get the state for\n\n // this mutation key needs to match the mutation key of the given mutation (see\nabove)\n\n```\n\n```\n\n// Some mutation that we want to get the state for\n\n // this mutation key needs to match the mutation key of the given mutation (see\nabove)\n\n```\n\n**Example 3: Access the latest mutation data via the** Each invocation of adds a\nnew entry to the mutation cache for milliseconds.\n\nTo access the latest invocation, you can check for the last item that returns.\n\n```\n\n// Some mutation that we want to get the state for\n\n // this mutation key needs to match the mutation key of the given mutation (see\nabove)\n\n```\n\n```\n\n// Some mutation that we want to get the state for\n\n // this mutation key needs to match the mutation key of the given mutation (see\nabove)\n\n```\n\n  *     * select?: (mutation: Mutation) => TResult\n      * Use this to transform the mutation state.\n  * ,\n    * Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.\n\n  *     * Will be an Array of whatever returns for each matching mutation.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Start Your Web Dev Career! Learn JavaScript, CSS & more with Frontend Masters\ntoday!\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JWCTBDCZ3JCA7IE2JWF6YIL53KC67DT2QYF67IT27YCA7IK2JWCA7I6277HEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/useSuspenseQuery\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe same as for , except for:\n\nSame object as , except that:\n\n  * is guaranteed to be defined\n  * is always \n    * the derived flags are set accordingly.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I423KC67DT2QYF67IT27YCA7IK2JWCA7I62QJHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/useSuspenseInfiniteQuery\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe same as for , except for:\n\nSame object as , except that:\n\n  * is guaranteed to be defined\n  * is always \n    * the derived flags are set accordingly.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD527LCKSITZ3JCA7IE2JYCTADTK7KC67DT2QYF67IT27YCA7IK2JWCA7I62QWHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/useSuspenseQueries\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe same as for , except that each can't have:\n\nSame structure as , except that for each :\n\n  * is guaranteed to be defined\n  * is always \n    * the derived flags are set accordingly.\n\nKeep in mind that the component will only re-mount after have finished loading.\nHence, if a query has gone stale in the time it took for all the queries to\ncomplete, it will be fetched again at re-mount. To avoid this, make sure to set\na high enough .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ High-Performance GPU-accelerated rendering to Visualize Trillion Points in\nReal-Time. Free Trial.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICYBDLZ3JCA7IE2JWCASDC53KC67DT2QYF67IT27YCA7IK2JWCA7I62QUHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/QueryClientProvider\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nUse the component to connect and provide a to your application:\n\n```\n\n```\n\n  *     * the QueryClient instance to provide\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD527LCKSITZ3JCA7IE2JYCTADTKJKC67DT2QYF67IT27YCA7IK2JWCA7I62JEHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/useQueryClient\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * ,\n    * Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JUCWADTZ3JCA7IE2JWF67IT23KC67DT2QYF67IT27YCA7IK2JWCA7I62JIHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/queryOptions\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nYou can generally pass everything to that you can also pass to . Some options\nwill have no effect when then forwarded to a function like , but TypeScript will\nstill be fine with those excess properties.\n\n  *     * The query key to generate options for.\n  *     * When set to , queries will be prefetched during render, which can be useful for certain optimization scenarios\n    * Needs to be turned on for the experimental functionality\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I4KJKC67DT2QYF67IT27YCA7IK2JWCA7I6K7WHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/infiniteQueryOptions\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nYou can generally pass everything to that you can also pass to . Some options\nwill have no effect when then forwarded to a function like , but TypeScript will\nstill be fine with those excess properties.\n\n  *     * The query key to generate options for.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD527LCKSITZ3JCA7IE2JYCTADT27KC67DT2QYF67IT27YCA7IK2JWCA7I6K7UHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/usePrefetchQuery\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nYou can pass everything to that you can pass to . Remember that some of them are\nrequired as below:\n\n  *     * The query key to prefetch during render\n  * queryFn: (context: QueryFunctionContext) => Promise<TData>\n    * **Required, but only if no default query function has been defined** See for more information.\n\nThe does not return anything, it should be used just to fire a prefetch during\nrender, before a suspense boundary that wraps a component that uses .\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Secure Homebrew and gain visibility into your software supply chain. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICAYDEZ3JCA7IE2JWFT7D623KC67DT2QYF67IT27YCA7IK2JWCA7I623EHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/usePrefetchInfiniteQuery\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nYou can pass everything to that you can pass to . Remember that some of them are\nrequired as below:\n\n  *     * The query key to prefetch during render\n  * queryFn: (context: QueryFunctionContext) => Promise<TData>\n    * **Required, but only if no default query function has been defined** See for more information.\n  *     * The default page param to use when fetching the first page.\n  * getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => TPageParam | undefined | null\n    * When new data is received for this query, this function receives both the last page of the infinite list of data and the full array of all pages, as well as pageParam information.\n    * It should return a that will be passed as the last optional parameter to your query function.\n    * Return or to indicate there is no next page available.\n\nThe does not return anything, it should be used just to fire a prefetch during\nrender, before a suspense boundary that wraps a component that uses\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JUCWADTZ3JCA7IE2JWF67IT23KC67DT2QYF67IT27YCA7IK2JWCA7I623IHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/QueryErrorResetBoundary\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nWhen using or in your queries, you need a way to let queries know that you want\nto try again when re-rendering after some error occurred. With the component you\ncan reset any query errors within the boundaries of the component.\n\n```\n\n```\n\n```\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI527KC67DT2QYF67IT27YCA7IK2JWCA7I623UHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/useQueryErrorResetBoundary\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThis hook will reset any query errors within the closest . If there is no\nboundary defined it will reset them globally:\n\n```\n\n```\n\n```\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Visualize Millions of Data Points in Real-time with LightningChart Python. Get\nFree Trial Today.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICYBDLZ3JCA7IE2JWCASDC5QKC67DT2QYF67IT27YCA7IK2JWCA7I6KQYHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/reference/hydration\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/reference/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\ncreates a frozen representation of a that can later be hydrated with or . This\nis useful for passing prefetched queries from server to client or persisting\nqueries to localStorage or other persistent locations. It only includes\ncurrently successful queries by default.\n\n  *   *     * shouldDehydrateMutation: (mutation: Mutation) => boolean\n      * The function is called for each mutation in the cache\n        * Return to include this mutation in dehydration, or otherwise\n      * Defaults to only including paused mutations\n      * If you would like to extend the function while retaining the default behavior, import and execute as part of the return statement\n    * shouldDehydrateQuery: (query: Query) => boolean\n      * The function is called for each query in the cache\n        * Return to include this query in dehydration, or otherwise\n      * Defaults to only including successful queries\n      * If you would like to extend the function while retaining the default behavior, import and execute as part of the return statement\n    * serializeData?: (data: any) => any A function to transform (serialize) data during dehydration.\n\n  *     * This includes everything that is needed to hydrate the at a later point\n    * You rely on the exact format of this response, it is not part of the public API and can change at any time\n    * This result is not in serialized form, you need to do that yourself if desired\n\nSome storage systems (such as browser ) require values to be JSON serializable.\nIf you need to dehydrate values that are not automatically serializable to JSON\n(like or ), you have to serialize them for yourself. Since only successful\nqueries are included per default, to also include , you have to provide , e.g.:\n\n```\n\n// to also include Errors\n\n// transform Error instances to objects\n\n// transform objects back to Error instances\n\n```\n\n```\n\n // to also include Errors\n\n // transform Error instances to objects\n\n // transform objects back to Error instances\n\n```\n\nadds a previously dehydrated state into a .\n\n```\n\n```\n\n  *     * The to hydrate the state into\n  *     * The state to hydrate into the client\n  *     *       * The default mutation options to use for the hydrated mutations.\n      * The default query options to use for the hydrated queries.\n      * deserializeData?: (data: any) => any A function to transform (deserialize) data before it is put into the cache.\n    * ,\n      * Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.\n\nIf the queries you're trying to hydrate already exist in the queryCache, will\nonly overwrite them if the data is newer than the data present in the cache.\nOtherwise, it will get applied.\n\nadds a previously dehydrated state into the that would be returned by . If the\nclient already contains data, the new queries will be intelligently merged based\non update timestamp.\n\n> Note: Only can be dehydrated with an .\n  *   *     *       * The default query options to use for the hydrated queries.\n    * ,\n      * Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSIEK3KC67DT2QYF67IT27YCA7IK2JWCA7I6KJJHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/reference/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/eslint/eslint-plugin-query\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nTanStack Query comes with its own ESLint plugin. This plugin is used to enforce\nbest practices and to help you avoid common mistakes.\n\nThe plugin is a separate package that you need to install:\n\nTo enable all of the recommended rules for our plugin, add the following config:\n\nAlternatively, you can load the plugin and configure only the rules you want to\nuse:\n\n```\n\n```\n\nTo enable all of the recommended rules for our plugin, add in extends:\n\nAlternatively, add to the plugins section, and configure the rules you want to\nuse:\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/eslint/<https:/query.gg?s=tanstack>)\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/query/latest/docs/eslint/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I4KJKC67DT2QYF67IT27YCA7IK2JWCA7I6KJNHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/eslint/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/eslint/exhaustive-deps\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# Exhaustive dependencies for query keys\n\nQuery keys should be seen like a dependency array to your query function: Every\nvariable that is used inside the queryFn should be added to the query key. This\nmakes sure that queries are cached independently and that queries are refetched\nautomatically when the variables changes.\n\nExamples of code for this rule:\n\n```\n\n/* eslint \"@tanstack/query/exhaustive-deps\": \"error\" */\n\n```\n\n```\n\n/* eslint \"@tanstack/query/exhaustive-deps\": \"error\" */\n\n```\n\nExamples of code for this rule:\n\n```\n\n```\n\n## [When Not To Use It](https://tanstack.com/query/latest/docs/eslint/<#when-\nnot-to-use-it>)\n\nIf you don't care about the rules of the query keys, then you will not need this\nrule.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/eslint/<https:/query.gg?s=tanstack>)\n[ Design and Development tips in your inbox. Every weekday.\n](https://tanstack.com/query/latest/docs/eslint/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD527LCKSITZ3JCA7IE2JYCTADTK7KC67DT2QYF67IT27YCA7IK2JWCA7I6K7EHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/eslint/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/eslint/stable-query-client\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThe QueryClient contains the QueryCache, so you'd only want to create one\ninstance of the QueryClient for the lifecycle of your application - a new\ninstance on every render.\n\n> Exception: It's allowed to create a new QueryClient inside an async Server\n> Component, because the async function is only called once on the server.\nExamples of code for this rule:\n\n```\n\n/* eslint \"@tanstack/query/stable-query-client\": \"error\" */\n\n```\n\n```\n\n/* eslint \"@tanstack/query/stable-query-client\": \"error\" */\n\n```\n\nExamples of code for this rule:\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/eslint/<https:/query.gg?s=tanstack>)\n[ Bryntum Gantt: Flexible and powerful JS Gantt charts for smarter project\nplanning.\n](https://tanstack.com/query/latest/docs/eslint/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEBDTZ3JCA7IE2JWFTADL2QKC67DT2QYF67IT27YCA7IK2JWCA7IV2QYHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/eslint/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/eslint/no-rest-destructuring\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# Disallow object rest destructuring on query results\n\nUse object rest destructuring on query results automatically subscribes to every\nfield of the query result, which may cause unnecessary re-renders. This makes\nsure that you only subscribe to the fields that you actually need.\n\nExamples of code for this rule:\n\n```\n\n/* eslint \"@tanstack/query/no-rest-destructuring\": \"warn\" */\n\n```\n\n```\n\n/* eslint \"@tanstack/query/no-rest-destructuring\": \"warn\" */\n\n```\n\nExamples of code for this rule:\n\n```\n\n// normal object destructuring is fine\n\n```\n\n```\n\n// normal object destructuring is fine\n\n```\n\n## [When Not To Use It](https://tanstack.com/query/latest/docs/eslint/<#when-\nnot-to-use-it>)\n\nIf you set the options manually, you can disable this rule. Since you are not\nusing tracked queries, you are responsible for specifying which props should\ntrigger a re-render.\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/eslint/<https:/query.gg?s=tanstack>)\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/query/latest/docs/eslint/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I423KC67DT2QYF67IT27YCA7IK2JWCA7IV2JLHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/eslint/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/eslint/no-unstable-deps\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# Disallow putting the result of query hooks directly in a React hook dependency\narray\n\nThe object returned from the following query hooks is referentially stable:\n\nThe object returned from those hooks should be put directly into the dependency\narray of a React hook (e.g. , , ). Instead, destructure the return value of the\nquery hook and pass the destructured values into the dependency array of the\nReact hook.\n\nExamples of code for this rule:\n\n```\n\n/* eslint \"@tanstack/query/no-unstable-deps\": \"warn\" */\n\n```\n\n```\n\n/* eslint \"@tanstack/query/no-unstable-deps\": \"warn\" */\n\n```\n\nExamples of code for this rule:\n\n```\n\n/* eslint \"@tanstack/query/no-unstable-deps\": \"warn\" */\n\n```\n\n```\n\n/* eslint \"@tanstack/query/no-unstable-deps\": \"warn\" */\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/eslint/<https:/query.gg?s=tanstack>)\n[ Bryntum Grid: Advanced data tables for exceptional UX and lightning-fast\nperformance.\n](https://tanstack.com/query/latest/docs/eslint/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEBDTZ3JCA7IE2JWFTADL23KC67DT2QYF67IT27YCA7IK2JWCA7IV2JNHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/eslint/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/eslint/infinite-query-property-order\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/eslint/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# Ensure correct order of inference sensitive properties for infinite queries\n\nFor the following functions, the property order of the passed in object matters\ndue to type inference:\n\nThe correct property order is as follows:\n\nAll other properties are insensitive to the order as they do not depend on type\ninference.\n\nExamples of code for this rule:\n\n```\n\n/* eslint \"@tanstack/query/infinite-query-property-order\": \"warn\" */\n\n```\n\n```\n\n/* eslint \"@tanstack/query/infinite-query-property-order\": \"warn\" */\n\n```\n\nExamples of code for this rule:\n\n```\n\n/* eslint \"@tanstack/query/infinite-query-property-order\": \"warn\" */\n\n```\n\n```\n\n/* eslint \"@tanstack/query/infinite-query-property-order\": \"warn\" */\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/eslint/<https:/query.gg?s=tanstack>)\n[ Go from professional web developer to lead engineer with the Frontend Masters\nProfessional Path. Start now!\n](https://tanstack.com/query/latest/docs/eslint/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JWCTBDCZ3JCA7IE2JWF6YIL23KC67DT2QYF67IT27YCA7IK2JWCA7IV2J7HEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/eslint/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/community/tkdodos-blog\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/community/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/community/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/community/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/community/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/community/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/community/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nTanStack Query maintainer has a series of blog posts about using and working\nwith the library. Some articles show general best practices, but most have an\npoint of view.\n\n> An advanced introduction to React Query, showing practical tips that go beyond\n> the docs. It covers explaining the defaults ( vs. ), concepts like keeping\n> server and client state separate, handling dependencies and creating custom\n> hooks, as well as outlining why the option is very powerful.\n## [[#2: React Query Data\nTransformations](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/react-\nquery-data-\ntransformations>)](https://tanstack.com/query/latest/docs/framework/react/community/<#2-react-\nquery-data-transformations>)\n\n> Learn the possibilities to perform the quite common and important task of\n> transforming your data with React Query. From transforming in the to using the\n> option, this article outlines the pros and cons of all the different\n> approaches.\n## [[#3: React Query Render\nOptimizations](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/react-\nquery-render-\noptimizations>)](https://tanstack.com/query/latest/docs/framework/react/community/<#3-react-\nquery-render-optimizations>)\n\n> Let's take a look at what you can do when your component re-renders too often\n> when using React Query. The library is already pretty optimized, but there are\n> still some opt-in features (like ) that you can use to avoid the transition.\n> We're also looking into what refers to.\n## [[#4: Status Checks in React\nQuery](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/status-\nchecks-in-react-\nquery>)](https://tanstack.com/query/latest/docs/framework/react/community/<#4-status-\nchecks-in-react-query>)\n\n> We usually check for first before checking for , but sometimes, checking if is\n> available should be the first thing to do. This article shows how the wrong\n> status check order can negatively impact user experience.\n> The docs already cover pretty well what you need to do to get started when\n> testing React Query. This article shows some additional tips (like turning off\n> or silencing the ) you might want to follow when testing custom hooks or\n> components using them. It also links to an with tests for success and error\n> states, powered by .\n## [[#6: React Query and\nTypeScript](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/react-\nquery-and-type-\nscript>)](https://tanstack.com/query/latest/docs/framework/react/community/<#6-react-\nquery-and-typescript>)\n\n> Since React Query is written in TypeScript, it has great support for it. This\n> blog post explains the various Generics, how you can leverage type inference\n> to avoid having to explicitly type and friends, what to do with errors, how\n> type narrowing works and more!\n## [[#7: Using WebSockets with React\nQuery](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/using-\nweb-sockets-with-react-\nquery>)](https://tanstack.com/query/latest/docs/framework/react/community/<#7-using-\nwebsockets-with-react-query>)\n\n> A step-by-step guide on how to make real-time notifications work with React\n> Query, with either event-based subscriptions or pushing full data directly to\n> the client. Applicable to anything from the browser native WebSocket API over\n> Firebase and even GraphQL subscriptions.\n## [[#8: Effective React Query\nKeys](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/effective-\nreact-query-\nkeys>)](https://tanstack.com/query/latest/docs/framework/react/community/<#8-effective-\nreact-query-keys>)\n\n> Most examples just use a simple String or Array Query Key, but how do you\n> organize your keys effectively once your app grows past a todo list? This\n> article shows how co-location and Query Key Factories can make life easier.\n## [[#8a: Leveraging the Query Function\nContext](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/leveraging-\nthe-query-function-\ncontext>)](https://tanstack.com/query/latest/docs/framework/react/community/<#8a-leveraging-\nthe-query-function-context>)\n\n> In this amendment to the previous blog post, we look at how we can leverage\n> the Query Function Context and Object Query Keys for maximum safety as our app\n> grows.\n## [[#9: Placeholder and Initial Data in React\nQuery](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/placeholder-\nand-initial-data-in-react-\nquery>)](https://tanstack.com/query/latest/docs/framework/react/community/<#9-placeholder-\nand-initial-data-in-react-query>)\n\n> Placeholder and Initial Data are two similar yet different concepts for\n> synchronously showing data instead of a loading spinner to improve an\n> application's UX. This blog post compares the two and outlines the scenarios\n> where each one shines.\n## [[#10: React Query as a State\nManager](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/react-\nquery-as-a-state-\nmanager>)](https://tanstack.com/query/latest/docs/framework/react/community/<#10-react-\nquery-as-a-state-manager>)\n\n> React Query doesn't fetch any data for you - it's a data synchronization tool\n> that excels when used for server state. This article has everything you need\n> to know to make React Query your single source of truth state manager for your\n> async state. You'll learn how to let React Query do it's magic and why\n> customizing might be all you need.\n## [[#11: React Query Error\nHandling](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/react-\nquery-error-\nhandling>)](https://tanstack.com/query/latest/docs/framework/react/community/<#11-react-\nquery-error-handling>)\n\n> Handling errors is an integral part of working with asynchronous data,\n> especially data fetching. We have to face it: Not all requests will be\n> successful, and not all Promises will be fulfilled. This blog post describes\n> various ways of coping with errors in React Query, such as the error property,\n> using Error Boundaries or onError callbacks, so that you can prepare your\n> application for the cases when \"Something went wrong\".\n## [[#12: Mastering Mutations in React\nQuery](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/mastering-\nmutations-in-react-\nquery>)](https://tanstack.com/query/latest/docs/framework/react/community/<#12-mastering-\nmutations-in-react-query>)\n\n> Mutations are the important, second part necessary to work with server data -\n> for situations where you need to update it. This blog post covers what\n> mutations are and how they are different from queries. You'll learn the\n> difference between and as well as how you can tie queries and mutations\n> together.\n> There are many ways to produce promises - which is everything React Query\n> needs - but by far the biggest use-case is data fetching. Very often, that\n> requires an active network connection. But sometimes, especially on mobile\n> devices where, the network connection can be unreliable, you need your app to\n> also work without it. In this article, you'll learn about the different\n> offline strategies React Query offers.\n## [[#14: React Query and\nForms](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/react-\nquery-and-\nforms>)](https://tanstack.com/query/latest/docs/framework/react/community/<#14-react-\nquery-and-forms>)\n\n> Forms tend to blur the line between what is server state and what is client\n> state. In most applications, we would not only like to display state, but also\n> let the user interact with it. This article shows two different approaches as\n> well as some tips and tricks about using React Query with Forms.\n> This article tries to answer the most frequently asked questions about React\n> Query.\n## [[#16: React Query meets React\nRouter](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/react-\nquery-meets-react-\nrouter>)](https://tanstack.com/query/latest/docs/framework/react/community/<#16-react-\nquery-meets-react-router>)\n\n> Remix and React Router are changing the game when thinking about to fetch\n> data. This article goes into why React Query and Routers that support data\n> loading are a match made in heaven.\n## [[#17: Seeding the Query\nCache](https://tanstack.com/query/latest/docs/framework/react/community/<https:/tkdodo.eu/blog/seeding-\nthe-query-\ncache>)](https://tanstack.com/query/latest/docs/framework/react/community/<#17-seeding-\nthe-query-cache>)\n\n> This blog post shows multiple ways how to get data into your Query Cache you\n> start rendering to minimize the amount of loading spinners displayed in your\n> app. The options range from prefetching on the server or in your router to\n> seeding cache entries via .\n> If you've ever wondered how React Query works under the hood - this post is\n> for you. It explains the architecture (including visuals), starting with the\n> agnostic Query Core and how it communicates with the framework specific\n> adapters.\n> There's a big difference between \"having types\" and \"being type-safe\". This\n> article tries to outline those differences and shows how you can get the best\n> possible type-safety when using React Query together with TypeScript\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/community/<https:/query.gg?s=tanstack>)\n[ Redefine Browsing. Opera One has the features you need for private, safe and\nsmart browsing.\n](https://tanstack.com/query/latest/docs/framework/react/community/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I423KC67DT2QYF67IT27YCA7IK2JWCA7IV23JHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/community/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/community/community-projects\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/community/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/community/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/community/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/community/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/community/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/community/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThere are lots of community projects that build on top of React Query and use it\nto provide additional functionality or enhanced developer experience. Projects\nare listed in alphabetical order. If you have a project that you would like to\nadd to this list, please open a PR!\n\n> Please note that these projects are entirely community maintained. If you have\n> questions about these projects, please reach out to the project maintainers.\nA full-featured CRM built with React, react-admin, and Supabase.\n\nA batch manager that will deduplicate and batch requests for a certain data type\nmade within a window\n\nThe Missing Fullstack Toolkit for Next.js\n\nGenerate React Query hooks from your GraphQL schema\n\nEnd-to-end type-safe Fastify API with typecript magic ‚ú®\n\nGenerate SDKs for all your APIs\n\nAutomatic normalization and data updates for data fetching libraries\n\nA tool for generating code based on an OpenAPI schema.\n\nGenerate type-safe API clients and Hooks for TanStack Query directly from\nOpenAPI Documents. Zero-runtime overhead, Proxy-based design, seamless SSR\nsupport, and full TanStack Query functionality.\n\nGenerate TanStack Query hooks based on an OpenAPI specification file.\n\nGenerate a zodios client from an OpenAPI specification\n\nA 2KB min, typesafe fetch wrapper that uses static TypeScript type inference and\nno runtime checks.\n\nGenerate TypeScript client from OpenAPI specifications\n\nA library for creating typesafe standardized query keys, useful for cache\nmanagement in\n\nü•¨ OpenAPI to React Query (or SWR) & Axios\n\nüïäÔ∏è A toolkit for ReactQuery that makes ReactQuery hooks reusable and typesafe\n\nTime travel and visualize state during development\n\nGenerate React Query hooks based on Swagger API definitions\n\nEnhances React Query with Suspense support, allowing for simpler and more\ndeclarative data fetching\n\nEnd-to-end typesafe APIs made easy\n\nIncrementally adoptable type-safety for your new and existing APIs\n\nReact Hooks for Ethereum based on\n\nEnd-to-end typesafe REST API toolbox\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/community/<https:/query.gg?s=tanstack>)\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/query/latest/docs/framework/react/community/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52QMF6ADKZ3JCA7IE2JMCT7I4KJKC67DT2QYF67IT27YCA7IK2JWCA7IV23NHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/community/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/simple\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JUCWADTZ3JCA7IE2JWF67IT23KC67DT2QYF67IT27YCA7IK2JWCA7IV2QJHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/basic\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Expand your abilities and master the server with the Frontend Masters\nFullstack Path. Start now!\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE53WC67LYKQUCKAD52JWCWSI4Z3JCA7IE2JWF6SI623KC67DT2QYF67IT27YCA7IK2JWCAYI627MHEYI5K77CKYI4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/basic-graphql-request\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# React Example: Basic Graphql Request\n\n[Auto Refetching / Polling / Realtime\n](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-\nrefetching>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Start Your Web Dev Career! Learn JavaScript, CSS & more with Frontend Masters\ntoday!\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JWCTBDCZ3JCA7IE2JWF6YIL53KC67DT2QYF67IT27YCA7IK2JWCA7IV2QWHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/auto-refetching\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Start Your Web Dev Career! Learn JavaScript, CSS & more with Frontend Masters\ntoday!\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JWCTBDCZ3JCA7IE2JWF6YIL53KC67DT2QYF67IT27YCA7IK2JWCA7IVKJMHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/optimistic-updates-ui\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# React Example: Optimistic Updates Ui\n\n[Auto Refetching / Polling /\nRealtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-\nrefetching>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Create a website that reflects your personal brand with Squarespace. Start\nyour free trial.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI52JKC67DT2QYF67IT27YCA7IK2JWCA7IVKJYHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/optimistic-updates-cache\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# React Example: Optimistic Updates Cache\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/pagination\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF67DE537CTALYKQUCKAD52JICEAILZ3JCA7IE2JWFTSI5K7KC67DT2QYF67IT27YCA7IK2JWCA7IVK7WHEYI5K77CKYIV53ECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/load-more-infinite-scroll\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# React Example: Load More Infinite Scroll\n\n[Infinite query with Max pages\n](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-\nquery-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/infinite-query-with-max-pages\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# React Example: Infinite Query With Max Pages\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/suspense\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n[Infinite query with Max\npages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-\nquery-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/default-query-function\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# React Example: Default Query Function\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKJKC67DT2QYF67IT27YCA7IK2JWCA7I4KQIHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/playground\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Enterprise-ready Homebrew: loved by developers, approved by security. Deploy\nWorkbrew ‚Äì it's free.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCYADVZ3JCA7ILK3LCTSI52JKC67DT2QYF67IT27YCA7IK2JWCA7I4KQNHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/prefetching\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKJKC67DT2QYF67IT27YCA7IK2JWCA7I4KQ7HEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/star-wars\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Loved by developers. Trusted by enterprises. Start your free 60 day trial.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCW7ICZ3JCA7ILK3LCTSDL23KC67DT2QYF67IT27YCA7IK2JWCA7IT5QJHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/rick-morty\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7IT5QWHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/nextjs\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Catch bottlenecks early with live tasks, PR, burndown, and cycle time\ntracking. Try monday dev free.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3LFTSIKZ3JCA7ILK3LCVYIK53KC67DT2QYF67IT27YCA7IK2JWCA7IT5QUHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/nextjs-app-prefetching\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# React Example: Nextjs App Prefetching\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Squarespace has all the tools you need to keep visitors coming back.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDV23KC67DT2QYF67IT27YCA7IK2JWCA7I4K3EHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/nextjs-suspense-streaming\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n# React Example: Nextjs Suspense Streaming\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/react-native\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Plan roadmaps, manage sprints, and release products fast. Try monday dev free\ntoday.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3LFTSIKZ3JCA7ILK3LCVYIK27KC67DT2QYF67IT27YCA7IK2JWCA7IT27WHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/react-router\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Legacy vendor lock-in, out. A truly cloud-native APM, in.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6YI4Z3JCA7ILK3LC67IKKJKC67DT2QYF67IT27YCA7IK2JWCA7IT27UHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/offline\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC5QKC67DT2QYF67IT27YCA7IK2JWCA7IT53EHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/algolia\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Loved by developers. Trusted by enterprises. Start your free 60 day trial.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCW7ICZ3JCA7ILK3LCTSDL23KC67DT2QYF67IT27YCA7IK2JWCA7IT53IHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/shadow-dom\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Find your rhythm. Enter focus mode with Opera's Split Screen. Delete\ndistractions.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLKQMCKBDKZ3JCA7ILK3JCEAIE23KC67DT2QYF67IT27YCA7IK2JWCA7IT53NHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/examples/devtools-panel\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/examples/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n[ Develop and launch modern apps with MongoDB Atlas, a resilient data platform.\n](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NCAAI4Z3JCA7ILK3WC6BIKKJKC67DT2QYF67IT27YCA7IK2JWCA7IT2QUHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/examples/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/plugins/persistQueryClient\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThis is set of utilities for interacting with \"persisters\" which save your\nqueryClient for later use. Different can be used to store your client and cache\nto many different storage layers.\n\n- for persist to work properly, you probably want to pass a value to override the default during hydration (as shown above).\nIf it is not set when creating the instance, it will default to (5 minutes) for\nhydration, and the stored cache will be discarded after 5 minutes of inactivity.\nThis is the default garbage collection behavior.\n\nIt should be set as the same value or higher than persistQueryClient's option.\nE.g. if is 24 hours (the default) then should be 24 hours or higher. If lower\nthan , garbage collection will kick in and discard the stored cache earlier than\nexpected.\n\nYou can also pass it to disable garbage collection behavior entirely.\n\nDue to a Javascript limitation, the maximum allowed is about 24 days (see ).\n\n```\n\n```\n\nSometimes you may make changes to your application or data that immediately\ninvalidate any and all cached data. If and when this happens, you can pass a\nstring option. If the cache that is found does not also have that buster string,\nit will be discarded. The following several functions accept this option:\n\n```\n\n({ queryClient, persister, buster: buildHash })\n\n({ queryClient, persister, buster: buildHash })\n\n({ queryClient, persister, buster: buildHash })\n\n```\n\nIf data is found to be any of the following:\n\nthe persister is called and the cache is immediately discarded.\n\n  * Your query/mutation are and stored by the persister you provided.\n  * and throttle this action to happen at most every 1 second to save on potentially expensive writes. Review their documentation to see how to customize their throttle timing.\n\nYou can use this to explicitly persist the cache at the moment(s) you choose.\n\nRuns whenever the cache changes for your . For example: you might initiate the\nwhen a user logs-in and checks \"Remember me\".\n\n  * It returns an function which you can use to discontinue the monitor; ending the updates to the persisted cache.\n  * If you want to erase the persisted cache after the , you can send a new to which will trigger the persister's function and discard the persisted cache.\n\n  * Attempts to a previously persisted dehydrated query/mutation cache from the persister back into the query cache of the passed query client.\n  * If a cache is found that is older than the (which by default is 24 hours), it will be discarded. This timing can be customized as you see fit.\n\nYou can use this to restore the cache at moment(s) you choose.\n\n  1. Immediately restores any persisted cache ()\n  2. Subscribes to the query cache and returns the function ().\n\nThis functionality is preserved from version 3.x.\n\nAll options available are as follows:\n\n```\n\n /** The QueryClient to persist */\n\n /** The Persister interface for storing and restoring the cache\n\n  * to/from a persisted location */\n\n /** The max-allowed age of the cache in milliseconds.\n\n  * If a persisted cache is found that is older than this\n  * time, it will be **silently** discarded\n  * (defaults to 24 hours) */\n\n /** A unique string that can be used to forcefully\n\n  * invalidate existing caches if they do not share the same buster string */\n\n /** The options passed to the hydrate function\n\n  * Not used on `persistQueryClientSave` or `persistQueryClientSubscribe` */\n\n /** The options passed to the dehydrate function\n\n  * Not used on `persistQueryClientRestore` */\n\n```\n\n```\n\n /** The QueryClient to persist */\n\n /** The Persister interface for storing and restoring the cache\n\n  * to/from a persisted location */\n\n /** The max-allowed age of the cache in milliseconds.\n\n  * If a persisted cache is found that is older than this\n  * time, it will be **silently** discarded\n  * (defaults to 24 hours) */\n\n /** A unique string that can be used to forcefully\n\n  * invalidate existing caches if they do not share the same buster string */\n\n /** The options passed to the hydrate function\n\n  * Not used on `persistQueryClientSave` or `persistQueryClientSubscribe` */\n\n /** The options passed to the dehydrate function\n\n  * Not used on `persistQueryClientRestore` */\n\n```\n\nThere are actually three interfaces available:\n\nwill try to restore the cache and automatically subscribes to further changes,\nthus syncing your client to the provided storage.\n\nHowever, restoring is asynchronous, because all persisters are async by nature,\nwhich means that if you render your App while you are restoring, you might get\ninto race conditions if a query mounts and fetches at the same time.\n\nFurther, if you subscribe to changes outside of the React component lifecycle,\nyou have no way of unsubscribing:\n\n```\n\n// üö® never unsubscribes from syncing\n\n// üö® happens at the same time as restoring\n\n```\n\n```\n\n// üö® never unsubscribes from syncing\n\n// üö® happens at the same time as restoring\n\n```\n\nFor this use-case, you can use the . It will make sure to subscribe /\nunsubscribe correctly according to the React component lifecycle, and it will\nalso make sure that queries will not start fetching while we are still\nrestoring. Queries will still render though, they will just be put into until\ndata has been restored. Then, they will refetch unless the restored data is\nenough, and will also be respected. It can be used the normal :\n\n```\n\n```\n\ntakes the same props as , and additionally:\n\n  *     * all you can pass to minus the QueryClient itself\n  * onSuccess?: () => Promise<unknown> | unknown\n    * will be called when the initial restore is finished\n    * if a Promise is returned, it will be awaited; restoring is seen as ongoing until then\n\nIf you are using the , you can also use the hook alongside it to check if a\nrestore is currently in progress. and friends also check this internally to\navoid race conditions between the restore and mounting queries.\n\nPersisters have the following interfaces:\n\nPersisted Client entries have the following interface:\n\nYou can import these (to build a persister):\n\nYou can persist however you like. Here is an example of how to build an\npersister. Compared to , Indexed DB is faster, stores more than 5MB, and doesn't\nrequire serialization. That means it can readily store Javascript native types,\nsuch as and .\n\n```\n\n { get, set, del }\n\n * Creates an Indexed DB persister\n\n```\n\n```\n\n * Creates an Indexed DB persister\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/query.gg?s=tanstack>)\n[ Sell products, services, content and more with Squarespace.\n](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC5QKC67DT2QYF67IT27YCA7IK2JWCA7IT2JEHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/plugins/createSyncStoragePersister\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThis utility comes as a separate package and is available under the import.\n\n```\n\n// const sessionStoragePersister = createSyncStoragePersister({ storage:\nwindow.sessionStorage })\n\n```\n\n```\n\n// const sessionStoragePersister = createSyncStoragePersister({ storage:\nwindow.sessionStorage })\n\n```\n\nPersistence can fail, e.g. if the size exceeds the available space on the\nstorage. Errors can be handled gracefully by providing a function to the\npersister.\n\nThe retry function receives the it tried to save, as well as the and the as\ninput. It is expected to return a , with which it tries to persist again. If is\nreturned, there will be no further attempt to persist.\n\nPer default, no retry will occur. You can use one of the predefined strategies\nto handle retries. They can be imported :\n\n  *     * will return a new with the oldest query removed.\n\nCall this function to create a syncStoragePersister that you can use later with\n.\n\n```\n\n /** The storage client used for setting an retrieving items from cache\n(window.localStorage or window.sessionStorage) */\n\n /** The key to use when storing the cache */\n\n  * pass a time in ms to throttle saving the cache to disk */\n\n /** How to serialize the data to storage */\n\n /** How to deserialize the data from storage */\n\n /** How to retry persistence on error **/\n\n```\n\n```\n\n /** The storage client used for setting an retrieving items from cache\n(window.localStorage or window.sessionStorage) */\n\n /** The key to use when storing the cache */\n\n  * pass a time in ms to throttle saving the cache to disk */\n\n /** How to serialize the data to storage */\n\n /** How to deserialize the data from storage */\n\n /** How to retry persistence on error **/\n\n```\n\nThere is a limit to the amount of data which can be stored in . If you need to\nstore more data in , you can override the and functions to compress and\ndecompress the data using a library like .\n\n```\n\n defaultOptions: { queries: { staleTime:\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDC27KC67DT2QYF67IT27YCA7IK2JWCA7IT2JNHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/plugins/createAsyncStoragePersister\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThis utility comes as a separate package and is available under the import.\n\n  * Create a new asyncStoragePersister\n    * you can pass any to it that adheres to the interface - the example below uses the async-storage from React Native\n  * Wrap your app by using component.\n\n```\n\n```\n\nRetries work the same as for a , except that they can also be asynchronous. You\ncan also use all the predefined retry handlers.\n\nCall this function to create an asyncStoragePersister that you can use later\nwith .\n\n```\n\n /** The storage client used for setting an retrieving items from cache */\n\n /** The key to use when storing the cache to localStorage */\n\n /** To avoid localStorage spamming,\n\n  * pass a time in ms to throttle saving the cache to disk */\n\n /** How to serialize the data to storage */\n\n /** How to deserialize the data from storage */\n\n /** How to retry persistence on error **/\n\n```\n\n```\n\n /** The storage client used for setting an retrieving items from cache */\n\n /** The key to use when storing the cache to localStorage */\n\n /** To avoid localStorage spamming,\n\n  * pass a time in ms to throttle saving the cache to disk */\n\n /** How to serialize the data to storage */\n\n /** How to deserialize the data from storage */\n\n /** How to retry persistence on error **/\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/query.gg?s=tanstack>)\n[ Built by devs, for devs. Start coding for FREE with real-time communication\nAPIs\n](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NFT7DCZ3JCA7ILK3LC67D5K3KC67DT2QYF67IT27YCA7IK2JWCA7IT27JHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/plugins/broadcastQueryClient\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n> VERY IMPORTANT: This utility is currently in an experimental stage. This means\n> that breaking changes will happen in minor AND patch releases. Use at your own\n> risk. If you choose to rely on this in production in an experimental stage,\n> please lock your version to a patch-level version to avoid unexpected\n> breakages.\nis a utility for broadcasting and syncing the state of your queryClient between\nbrowser tabs/windows with the same origin.\n\nThis utility comes as a separate package and is available under the import.\n\nImport the function, and pass it your instance, and optionally, set a .\n\nPass this function a instance and optionally, a .\n\n```\n\n /** The QueryClient to sync */\n\n /** This is the unique channel name that will be used\n\n  * to communicate between tabs and windows */\n\n /** Options for the BroadcastChannel API */\n\n```\n\n```\n\n /** The QueryClient to sync */\n\n /** This is the unique channel name that will be used\n\n  * to communicate between tabs and windows */\n\n /** Options for the BroadcastChannel API */\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/query.gg?s=tanstack>)\n[ Squarespace tools make it easy to create a beautiful and unique website.\n](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKJKC67DT2QYF67IT27YCA7IK2JWCA7IT23IHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/query.gg?s=tanstack>)\n\n---\n\n# Untitled Page\nURL: https://tanstack.com/query/latest/docs/framework/react/plugins/createPersister\n\n* [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\n  * [Does this replace [Redux, MobX, etc]?](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/guides/does-this-replace-client-state>)\n\n  * [Auto Refetching / Polling / Realtime](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/auto-refetching>)\n  * [Infinite query with Max pages](https://tanstack.com/query/latest/docs/framework/react/plugins/</query/latest/docs/framework/react/examples/infinite-query-with-max-pages>)\n\nThis utility comes as a separate package and is available under the import.\n\n> Note: This util is also included in the package, so you do not need to install\n> it separately if you are using that package.\n  * Create a new \n    * you can pass any to it that adheres to the or interface - the example below uses the async-storage from React Native.\n  * Pass that as an option to your Query. This can be done either by passing it to the of the or to any hook instance.\n    * If you pass this as , all queries will be persisted to the provided . You can additionally narrow this down by passing . In contrast to the plugin, this will not persist the whole query client as a single item, but each query separately. As a key, the query hash is used.\n    * If you provide this to a single hook, only this Query will be persisted.\n\nThis way, you do not need to store whole , but choose what is worth to be\npersisted in your application. Each query is lazily restored (when the Query is\nfirst used) and persisted (after each run of the ), so it does not need to be\nthrottled. is also respected after restoring the Query, so if data is considered\n, it will be refetched immediately after restoring. If data is , the will not\nrun.\n\nGarbage collecting a Query from memory affect the persisted data. That means\nQueries can be kept in memory for a shorter period of time to be more . If they\nare used the next time, they will just be restored from the persistent storage\nagain.\n\n```\n\n```\n\n```\n\n```\n\nThe plugin technically wraps the , so it doesn't restore if the doesn't run. In\nthat way, it acts as a caching layer between the Query and the network. Thus,\nthe defaults to when a persister is used, so that restoring from the persistent\nstorage can also happen even if there is no network connection.\n\n```\n\n /** The storage client used for setting and retrieving items from cache.\n\n  * For SSR pass in `undefined`.\n\n  * How to serialize the data to storage.\n\n  * How to deserialize the data from storage.\n\n  * A unique string that can be used to forcefully invalidate existing caches,\n  * if they do not share the same buster string\n\n  * The max-allowed age of the cache in milliseconds.\n  * If a persisted cache is found that is older than this\n  * time, it will be discarded\n\n  * Prefix to be used for storage key.\n  * Storage key is a combination of prefix and query hash in a form of `prefix-queryHash`.\n\n  * Filters to narrow down which Queries should be persisted.\n\n```\n\n```\n\n /** The storage client used for setting and retrieving items from cache.\n\n  * For SSR pass in `undefined`.\n\n  * How to serialize the data to storage.\n\n  * How to deserialize the data from storage.\n\n  * A unique string that can be used to forcefully invalidate existing caches,\n  * if they do not share the same buster string\n\n  * The max-allowed age of the cache in milliseconds.\n  * If a persisted cache is found that is older than this\n  * time, it will be discarded\n\n  * Prefix to be used for storage key.\n  * Storage key is a combination of prefix and query hash in a form of `prefix-queryHash`.\n\n  * Filters to narrow down which Queries should be persisted.\n\n```\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/query.gg?s=tanstack>)\n[ Create a website that turns your practice into profit. Start your free trial.\n](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/srv.carbonads.net/ads/click/x/GTND427IF6BD6K77CEALYKQUCKADLK3NF6AD5Z3JCA7ILK3LC6SDVKQKC67DT2QYF67IT27YCA7IK2JWCA7IT23UHEYI5K77CEYD4KJECTNCYBZ52K>)\n\nThis ad helps to keep us from burning out and rage-quitting OSS just *that* much\nmore, so chill. üòâ\n\n###### [Want to Skip the Docs?Query.gg - The Official React Query Course\n\n> ‚ÄúIf you're serious about *really* understanding React Query, there's no better\n> way than with\n> query.gg‚Äù](https://tanstack.com/query/latest/docs/framework/react/plugins/<https:/query.gg?s=tanstack>)\n\n---\n\n",
  "metadata": {
    "wordCount": 275647,
    "charCount": 2268311,
    "timestamp": "2025-02-13T01:57:39.839Z"
  }
}